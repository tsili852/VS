<?xml version="1.0"?>
<doc>
  <assembly>
    <name>Leadtools.ImageProcessing.Color</name>
  </assembly>
  <members>
    <member name="T:Leadtools.ImageProcessing.Color.RemoveRedEyeCommand">
      <summary>
            Removes the "red eye" effect in color images by converting the red color in the eye to a new color.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>This command has no effect on grayscale images, since there is no "red eye" problem in grayscale images.</description>
          </item>
          <item>
            <description>To use this command the user should select a small region around the eye. Otherwise, the method will change all the red color in the image. This method also allows the user to replace the red color with a new color for the eyes that is nearest to the original color.</description>
          </item>
          <item>
            <description>This command 48 and 64-bit color images. Support for 48 and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support signed data images.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.<br />
            For more information, refer to <see cref="T:Leadtools.Topics.ApplyingArtisticEffects">Applying Artistic Effects</see>.
            <br />
            For more information, refer to <see cref="T:Leadtools.Topics.CorrectingColors">Correcting Colors</see>.<br /></remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.RemoveRedEyeCommand" /> on an image.</para>
        <code lang="VB">   Public Sub RemoveRedEyeCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As RemoveRedEyeCommand = New RemoveRedEyeCommand
      'Apply the redeye removal command.
      command.NewColor = New RasterColor(5, 20, 10)
      command.Threshold = 125
      command.Lightness = 100
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void RemoveRedEyeCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         RemoveRedEyeCommand command = new RemoveRedEyeCommand();
         //Apply the redeye removal command.
         command.NewColor = new RasterColor(5, 20, 10);
         command.Threshold = 125;
         command.Lightness = 100;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
      </example>
      <seealso cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</seealso>.
            <seealso cref="T:Leadtools.Topics.ApplyingArtisticEffects">Applying Artistic Effects</seealso>.
            <seealso cref="T:Leadtools.Topics.CorrectingColors">Correcting Colors</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BumpMapCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.CubismCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DryCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreePlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeRadialBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlassEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LensFlareCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LightCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.OceanCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SampleTargetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CylinderCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandShearCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ImpressionistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PixelateCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PolarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PunchCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RippleCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SphereCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SwirlCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WindCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ShadowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RevEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.AgingCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DiceEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PuzzleEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RingEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.TextureAlphaBlendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CanvasCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CloudsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DiffuseGlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.DisplacementCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FragmentCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.HalfTonePatternCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MaskConvolutionCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OffsetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PointillistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RomanMosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.VignnetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZigZagCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AdjustTintCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.HalfToneCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Color.RemoveRedEyeCommand.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Color.RemoveRedEyeCommand" /> class object with default parameters.
            </summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.RemoveRedEyeCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.RemoveRedEyeCommand.#ctor(Leadtools.RasterColor,System.Int32,System.Int32)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Color.RemoveRedEyeCommand" /> class object with explicit parameters.
            </summary>
      <param name="newColor">Contains the new color value used to replace the red color in the eyes.</param>
      <param name="threshold">Threshold value that indicates which pixels will be changed by this command. All pixels with a red component value greater than this value will be changed. Pixels with a red component value less than this value will not be changed. This value is between 0 and 255.</param>
      <param name="lightness">"Percentage" value that indicates whether the pixels that are replaced are lightened or darkened. If this value is greater than 100, the replaced pixels will be lightened. If this value is less than 100, the replaced pixels will be darkened. This command preserves the lightness of the original pixels and substitutes the red color with the new color.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.RemoveRedEyeCommand" /> on an image.</para>
        <code lang="VB">   Public Sub RemoveRedEyeConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As RemoveRedEyeCommand = New RemoveRedEyeCommand(New RasterColor(5, 20, 10), 125, 100)
      'Apply the redeye removal command.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void RemoveRedEyeConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         RemoveRedEyeCommand command = new RemoveRedEyeCommand(new RasterColor(5, 20, 10), 125, 100);
         //Apply the redeye removal command.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.RemoveRedEyeCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this class.
            </summary>
      <returns>String that contains the name of this class.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.RemoveRedEyeCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.RemoveRedEyeCommand.NewColor">
      <summary>
            Gets or sets the new color value used to replace the red color in the eyes.
            </summary>
      <value>The new color value used to replace the red color in the eyes.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.RemoveRedEyeCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.RemoveRedEyeCommand.Threshold">
      <summary>
            Gets or sets a value that indicates which pixels will be changed.
            </summary>
      <value>Threshold value that indicates which pixels will be changed. All pixels with a red component value greater than this value will be changed. Pixels with a red component value less than this value will not be changed. This value is between 0 and 255.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.RemoveRedEyeCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.RemoveRedEyeCommand.Lightness">
      <summary>
            Gets or sets a "percentage" value that indicates whether the pixels that are replaced are lightened or darkened.
            </summary>
      <value>"Percentage" value that indicates whether the pixels that are replaced are lightened or darkened. If this value is greater than 100, the replaced pixels will be lightened. If this value is less than 100, the replaced pixels will be darkened. This method preserves the lightness of the original pixels and substitutes the red color with the new color.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.RemoveRedEyeCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.Color.AutoColorLevelCommandType">
      <summary>
            Enumeration flags that identify the type of leveling to perform.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.AutoColorLevelCommandType.None">
      <summary>
            No change.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.AutoColorLevelCommandType.Level">
      <summary>
             Perform leveling on the individual R, G and B channels, treating each of the R, G and B channels as a separate entity. It introduces color cast on the image.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.AutoColorLevelCommandType.Contrast">
      <summary>
            Perform leveling on the Master channel (the grayscale values of the pixels). No color cast will be introduced.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.AutoColorLevelCommandType.Intensity">
      <summary>
            Perform leveling on the RGB channel (the sum of the R, G, and B channels). No color cast will be introduced.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.Color.AutoColorLevelCommandFlags">
      <summary>
            Enumeration flags that identify whether the method will process the image.
             <strong> Supported in Silverlight</strong>.
</summary>
      <remarks>
            These flags have a <see cref="T:System.FlagsAttribute" /> attribute that allow a bitwise combination of its member values.
            </remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.AutoColorLevelCommandFlags.None">
      <summary>
            No change.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.AutoColorLevelCommandFlags.NoProcess">
      <summary>
            Do not process the image. Just update the <see cref="P:Leadtools.ImageProcessing.Color.AutoColorLevelCommand.Master">Master</see>, <see cref="P:Leadtools.ImageProcessing.Color.AutoColorLevelCommand.Red">Red</see>, <see cref="P:Leadtools.ImageProcessing.Color.AutoColorLevelCommand.Green">Green</see>, and <see cref="P:Leadtools.ImageProcessing.Color.AutoColorLevelCommand.Blue">Blue</see> properties with the color leveling information used. The color leveling information used depends on which of the other flags was set with AutoColorLevelCommandFlags.NoProcess. Only one other flag may be set with AutoColorLevelCommandFlags.NoProcess.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.Color.AutoColorLevelCommand">
      <summary>
            Applies one of several types of automatic color leveling to an image.  
            This function is useful for pre-processing images 
            for the purpose of 
            <a href="http://support.leadtools.com/cs/forums/18165/ShowPost.aspx">improving barcode recognition</a> results.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>This command makes the dark values darker and the light values lighter, which automatically enhances shadows and brightens the image. It also maximizes the tonal range of the image. It enhances the contrast and intensity using the image's histogram and a color distribution-based algorithm.</description>
          </item>
          <item>
            <description>The properties in the <b>AutoColorLevelCommand</b> Class will be updated with the MinimumInput, MaximumInput, MinimumOutput, MaximumOutput and Gamma values used by a method for the appropriate channel(s).</description>
          </item>
          <item>
            <description>If you set the <see cref="T:Leadtools.ImageProcessing.Color.AutoColorLevelCommandFlags" />.NoProcess flag in the <see cref="P:Leadtools.ImageProcessing.Color.AutoColorLevelCommand.Flag">Flag property</see>, the <see cref="T:Leadtools.ImageProcessing.Color.ColorLevelCommandData" /> will be updated with the color leveling information used by the AutoColorLevelCommand. If you then pass the updated <see cref="T:Leadtools.ImageProcessing.Color.ColorLevelCommandData" /> structures to the <see cref="T:Leadtools.ImageProcessing.Color.ColorLevelCommand" />, you will obtain the same result that you would have obtained if you had called the AutoColorLevelCommand with the leveling flag by itself.</description>
          </item>
          <item>
            <description>If the image is a grayscale image, then <see cref="T:Leadtools.ImageProcessing.Color.AutoColorLevelCommandType" />.Level, AutoColorLevelCommandType.Contrast and AutoColorLevelCommandType.Intensity give identical results. Also the Master, Red, Green and Blue properties will have the same values.</description>
          </item>
          <item>
            <description>As an example, the following figure shows an image before any automatic color leveling has been performed: <br /><img src="OriginalAutoLevel.jpg" /><br />
            The following figure shows what would happen if you start with the original image and apply the AutoColorLevelCommand using <see cref="T:Leadtools.ImageProcessing.Color.AutoColorLevelCommandType" />.Level flag.<br /><img src="AUTO_LEVEL.jpg" /><br />
            The following figure shows what would happen if you start with the original image and apply the AutoColorLevelCommand using <see cref="T:Leadtools.ImageProcessing.Color.AutoColorLevelCommandType" />.Intensity flag.<br /><img src="AUTO_INTENSITY.jpg" /><br />
            The following figure shows what would happen if you start with the original image and apply the AutoColorLevelCommand using <see cref="T:Leadtools.ImageProcessing.Color.AutoColorLevelCommandType" />.Contrast flag.<br /><img src="AUTO_CONTRAST.jpg" /><br /></description>
          </item>
          <item>
            <description>This command supports 12 and 16-bit grayscale and 48 and 64-bit color images. Support for 12 and 16-bit grayscale and 48 and 64-bit color images is available only in the (<see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support signed data images.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <see cref="T:Leadtools.Topics.CorrectingColors">Correcting Colors</see>.<br /></remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.AutoColorLevelCommand" /> on an image.</para>
        <code lang="VB">   Public Sub AutoColorLevelCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As AutoColorLevelCommand = New AutoColorLevelCommand
      ' Apply "Auto Leveling" to the image.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void AutoColorLevelCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         AutoColorLevelCommand command = new AutoColorLevelCommand();
         // Apply "Auto Leveling" to the image.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void AutoColorLevelCommandExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         AutoColorLevelCommand command = new AutoColorLevelCommand();
         // Apply "Auto Leveling" to the image.
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub AutoColorLevelCommandExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As AutoColorLevelCommand = New AutoColorLevelCommand()
         ' Apply "Auto Leveling" to the image.
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <seealso cref="T:Leadtools.Topics.CorrectingColors">Correcting Colors</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SharpenCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.PosterizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EmbossCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MedianCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.AddNoiseCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.IntensityDetectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SpatialFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.BinaryFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MaximumCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MinimumCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OilifyCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SolarizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SelectiveColorCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.GammaCorrectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AdjustTintCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.HalfToneCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Color.AutoColorLevelCommand.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Color.AutoColorLevelCommand" /> object with default parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.AutoColorLevelCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.AutoColorLevelCommand.#ctor(Leadtools.ImageProcessing.Color.AutoColorLevelCommandType,Leadtools.ImageProcessing.Color.AutoColorLevelCommandFlags)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Color.AutoColorLevelCommand" /> object with explicit parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <param name="type">Value that indicates the type of leveling to perform.</param>
      <param name="flag">Flag that indicates whether a method will process the image or not.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.AutoColorLevelCommand" /> on an image.</para>
        <code lang="VB">   Public Sub AutoColorLevelConstructorExample_S1()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As AutoColorLevelCommand = New AutoColorLevelCommand(AutoColorLevelCommandType.Intensity, AutoColorLevelCommandFlags.None)
      command.BlackClip = 100
      command.WhiteClip = 100
      ' Apply "Auto Leveling" to the image.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void AutoColorLevelConstructorExample_S1()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         AutoColorLevelCommand command = new AutoColorLevelCommand(AutoColorLevelCommandType.Intensity, AutoColorLevelCommandFlags.None);
         command.BlackClip = 100;
         command.WhiteClip = 100;
         // Apply "Auto Leveling" to the image.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void AutoColorLevelConstructorExample_S1(RasterImage image, Stream outStream)
      {
         // Prepare the command
         AutoColorLevelCommand command = new AutoColorLevelCommand(AutoColorLevelCommandType.Intensity, AutoColorLevelCommandFlags.None);
         command.BlackClip = 100;
         command.WhiteClip = 100;
         // Apply "Auto Leveling" to the image.
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub AutoColorLevelConstructorExample_S1(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As AutoColorLevelCommand = New AutoColorLevelCommand(AutoColorLevelCommandType.Intensity, AutoColorLevelCommandFlags.None)
         command.BlackClip = 100
         command.WhiteClip = 100
         ' Apply "Auto Leveling" to the image.
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.AutoColorLevelCommand.#ctor(System.Int32,System.Int32,Leadtools.ImageProcessing.Color.AutoColorLevelCommandType,Leadtools.ImageProcessing.Color.AutoColorLevelCommandFlags)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Color.AutoColorLevelCommand" /> object with explicit parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <param name="blackClip">Value that represents the percentage of black pixels to clip from the image, in hundredths of a percent. Valid values range from 0 to 10000 (which represents 100<![CDATA[&#37;]]>). Best results are found using 0.3 to 0.9 <![CDATA[&#37;]]>. The default is 50, which indicates to clip 0.5<![CDATA[&#37;]]> of the black pixels.</param>
      <param name="whiteClip">Value that represents the percentage of white pixels to clip from the image, in hundredths of a percent. Valid values range from 0 to 10000 (which represents 100<![CDATA[&#37;]]>). The default is 50, which indicates to clip 0.5<![CDATA[&#37;]]> of the white pixels.</param>
      <param name="type">Value that indicates the type of leveling to perform.</param>
      <param name="flag">Flag that indicates whether the method will process the image or not.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.AutoColorLevelCommand" /> on an image.</para>
        <code lang="VB">   Public Sub AutoColorLevelConstructorExample_S2()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As AutoColorLevelCommand = New AutoColorLevelCommand(50, 500, AutoColorLevelCommandType.Intensity, AutoColorLevelCommandFlags.None)
      ' Apply "Auto Leveling" to the image.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void AutoColorLevelConstructorExample_S2()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         AutoColorLevelCommand command = new AutoColorLevelCommand(50, 500, AutoColorLevelCommandType.Intensity, AutoColorLevelCommandFlags.None);
         // Apply "Auto Leveling" to the image.
         command.Run(image);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void AutoColorLevelConstructorExample_S2(RasterImage image, Stream outStream)
      {
         // Prepare the command
         AutoColorLevelCommand command = new AutoColorLevelCommand(50, 500, AutoColorLevelCommandType.Intensity, AutoColorLevelCommandFlags.None);
         // Apply "Auto Leveling" to the image.
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub AutoColorLevelConstructorExample_S2(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As AutoColorLevelCommand = New AutoColorLevelCommand(50, 500, AutoColorLevelCommandType.Intensity, AutoColorLevelCommandFlags.None)
         ' Apply "Auto Leveling" to the image.
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.AutoColorLevelCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this class.
             <strong> Supported in Silverlight</strong>.
</summary>
      <returns>Character string that contains the name of this class.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.AutoColorLevelCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.AutoColorLevelCommand.Master">
      <summary>
            (Read only) Gets the color leveling information for the Master channel when the <see cref="P:Leadtools.ImageProcessing.Color.AutoColorLevelCommand.Type">Type property</see> is set to either <see cref="T:Leadtools.ImageProcessing.Color.AutoColorLevelCommandType" />.Contrast or AutoColorLevelCommandType.Intensity.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>The color leveling information for the Master channel. If <see cref="T:Leadtools.ImageProcessing.Color.AutoColorLevelCommandFlags" />.NoProcess is not set in Flag property, you can set the value of this property as null. If <see cref="T:Leadtools.ImageProcessing.Color.AutoColorLevelCommandFlags" />.NoProcess is set in Flag property, then this property cannot be null.</value>
      <remarks>
            If <see cref="P:Leadtools.ImageProcessing.Color.AutoColorLevelCommand.Flag">Flag property</see> is set to <see cref="T:Leadtools.ImageProcessing.Color.AutoColorLevelCommandType" />.Level, then the value of this property is unchanged.
            <para>The <see cref="T:Leadtools.ImageProcessing.Color.AutoColorLevelCommand" /> command updates the value of this property.</para></remarks>
      <example>
            Refer to <see cref="P:Leadtools.ImageProcessing.Color.AutoColorLevelCommand.Flag" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.AutoColorLevelCommand.Red">
      <summary>
            (Read only) Gets the color leveling information for the Red channel when the <see cref="P:Leadtools.ImageProcessing.Color.AutoColorLevelCommand.Type">Type property</see> is set to <see cref="T:Leadtools.ImageProcessing.Color.AutoColorLevelCommandType" />.Level.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>The color leveling information for the Red channel. If <see cref="T:Leadtools.ImageProcessing.Color.AutoColorLevelCommandFlags" />.NoProcess is not set in Flag property, you can set the value of this property as null. If <see cref="T:Leadtools.ImageProcessing.Color.AutoColorLevelCommandFlags" />.NoProcess is set in Flag property, then this property cannot be null.</value>
      <remarks>
            If <see cref="P:Leadtools.ImageProcessing.Color.AutoColorLevelCommand.Flag">Flag property</see> is set to either <see cref="T:Leadtools.ImageProcessing.Color.AutoColorLevelCommandType" />.Contrast or AutoColorLevelCommandType.Intensity, then the value of this property is unchanged.
            <para>The <see cref="T:Leadtools.ImageProcessing.Color.AutoColorLevelCommand" /> command updates the value of this property.</para></remarks>
      <example>
            Refer to <see cref="P:Leadtools.ImageProcessing.Color.AutoColorLevelCommand.Flag" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.AutoColorLevelCommand.Green">
      <summary>
            (Read only) Gets the color leveling information for the Green channel when the <see cref="P:Leadtools.ImageProcessing.Color.AutoColorLevelCommand.Type">Type property</see> is set to <see cref="T:Leadtools.ImageProcessing.Color.AutoColorLevelCommandType" />.Level.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>The color leveling information for the Green channel. If <see cref="T:Leadtools.ImageProcessing.Color.AutoColorLevelCommandFlags" />.NoProcess is not set in Flag property, you can set the value of this property as null. If <see cref="T:Leadtools.ImageProcessing.Color.AutoColorLevelCommandFlags" />.NoProcess is set in Flag property, then this property cannot be null.</value>
      <remarks>
            If <see cref="P:Leadtools.ImageProcessing.Color.AutoColorLevelCommand.Flag">Flag property</see> is set to either <see cref="T:Leadtools.ImageProcessing.Color.AutoColorLevelCommandType" />.Contrast or AutoColorLevelCommandType.Intensity, then the value of this property is unchanged.
            <para>The <see cref="T:Leadtools.ImageProcessing.Color.AutoColorLevelCommand" /> command updates the value of this property.</para></remarks>
      <example>
            Refer to <see cref="P:Leadtools.ImageProcessing.Color.AutoColorLevelCommand.Flag" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.AutoColorLevelCommand.Blue">
      <summary>
            (Read only) Gets the color leveling information for the Blue channel when the <see cref="P:Leadtools.ImageProcessing.Color.AutoColorLevelCommand.Type">Type property</see> is set to <see cref="T:Leadtools.ImageProcessing.Color.AutoColorLevelCommandType" />.Level.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>The color leveling information for the Blue channel. If <see cref="T:Leadtools.ImageProcessing.Color.AutoColorLevelCommandFlags" />.NoProcess is not set in Flag property, you can set the value of this property as null. If <see cref="T:Leadtools.ImageProcessing.Color.AutoColorLevelCommandFlags" />.NoProcess is set in Flag property, then this property cannot be null.</value>
      <remarks>
            If <see cref="P:Leadtools.ImageProcessing.Color.AutoColorLevelCommand.Flag">Flag property</see> is set to either <see cref="T:Leadtools.ImageProcessing.Color.AutoColorLevelCommandType" />.Contrast or AutoColorLevelCommandType.Intensity, then the value of this property is unchanged.
            <para>The <see cref="T:Leadtools.ImageProcessing.Color.AutoColorLevelCommand" /> command updates the value of this property.</para></remarks>
      <example>
            Refer to <see cref="P:Leadtools.ImageProcessing.Color.AutoColorLevelCommand.Flag" />.
            </example>
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.AutoColorLevelCommand.Type">
      <summary>
            Gets or sets a value that indicates the type of leveling to perform.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>The type of leveling to perform.</value>
      <example>
            Refer to <see cref="P:Leadtools.ImageProcessing.Color.AutoColorLevelCommand.Flag" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.AutoColorLevelCommand.Flag">
      <summary>
            Gets or sets a value that indicates whether the method will process the image.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>The method to process the image.</value>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.AutoColorLevelCommand" /> on an image.</para>
        <code lang="VB">   Public Sub FlagPropertyExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As AutoColorLevelCommand = New AutoColorLevelCommand(AutoColorLevelCommandType.Intensity, AutoColorLevelCommandFlags.None)
      command.Flag = AutoColorLevelCommandFlags.NoProcess
      command.Type = AutoColorLevelCommandType.Level

      ' Apply "Auto Leveling" to the image.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      MessageBox.Show("Master Leveling Value: " &amp; Chr(13) &amp; " Gamma: " &amp; command.Master.Gamma &amp; Chr(13) &amp; _
         " Minimum Input: " &amp; command.Master.MinimumInput &amp; Chr(13) &amp; _
         " Minimum Input: " &amp; command.Master.MaximumInput &amp; Chr(13) &amp; _
         " Minimum Input: " &amp; command.Master.MinimumOutput &amp; Chr(13) &amp; _
         " Minimum Input: " &amp; command.Master.MaximumOutput)

      MessageBox.Show("Red Leveling Value: " &amp; Chr(13) &amp; " Gamma: " &amp; command.Red.Gamma &amp; Chr(13) &amp; _
         " Minimum Input: " &amp; command.Red.MinimumInput &amp; Chr(13) &amp; _
         " Minimum Input: " &amp; command.Red.MaximumInput &amp; Chr(13) &amp; _
         " Minimum Input: " &amp; command.Red.MinimumOutput &amp; Chr(13) &amp; _
         " Minimum Input: " &amp; command.Red.MaximumOutput)

      MessageBox.Show("Green Leveling Value: " &amp; Chr(13) &amp; " Gamma: " &amp; command.Green.Gamma &amp; Chr(13) &amp; _
         " Minimum Input: " &amp; command.Green.MinimumInput &amp; Chr(13) &amp; _
         " Minimum Input: " &amp; command.Green.MaximumInput &amp; Chr(13) &amp; _
         " Minimum Input: " &amp; command.Green.MinimumOutput &amp; Chr(13) &amp; _
         " Minimum Input: " &amp; command.Green.MaximumOutput)

      MessageBox.Show("Blue Leveling Value: " &amp; Chr(13) &amp; " Gamma: " &amp; command.Blue.Gamma &amp; Chr(13) &amp; _
         " Minimum Input: " &amp; command.Blue.MinimumInput &amp; Chr(13) &amp; _
         " Minimum Input: " &amp; command.Blue.MaximumInput &amp; Chr(13) &amp; _
         " Minimum Input: " &amp; command.Blue.MinimumOutput &amp; Chr(13) &amp; _
         " Minimum Input: " &amp; command.Blue.MaximumOutput)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void FlagPropertyExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         AutoColorLevelCommand command = new AutoColorLevelCommand();
         command.Flag = AutoColorLevelCommandFlags.NoProcess;
         command.Type = AutoColorLevelCommandType.Level;

         // Apply "Auto Leveling" to the image.
         command.Run(image);

         MessageBox.Show("Master Leveling Value: \n Gamma: " + command.Master.Gamma + "\n" +
            " Minimum Input: " + command.Master.MinimumInput + "\n" +
            " Minimum Input: " + command.Master.MaximumInput + "\n" +
            " Minimum Input: " + command.Master.MinimumOutput + "\n" +
            " Minimum Input: " + command.Master.MaximumOutput);

         MessageBox.Show("Red Leveling Value: \n Gamma: " + command.Red.Gamma + "\n" +
            " Minimum Input: " + command.Red.MinimumInput + "\n" +
            " Minimum Input: " + command.Red.MaximumInput + "\n" +
            " Minimum Input: " + command.Red.MinimumOutput + "\n" +
            " Minimum Input: " + command.Red.MaximumOutput);

         MessageBox.Show("Green Leveling Value: \n Gamma: " + command.Green.Gamma + "\n" +
            " Minimum Input: " + command.Green.MinimumInput + "\n" +
            " Minimum Input: " + command.Green.MaximumInput + "\n" +
            " Minimum Input: " + command.Green.MinimumOutput + "\n" +
            " Minimum Input: " + command.Green.MaximumOutput);

         MessageBox.Show("Blue Leveling Value: \n Gamma: " + command.Blue.Gamma + "\n" +
            " Minimum Input: " + command.Blue.MinimumInput + "\n" +
            " Minimum Input: " + command.Blue.MaximumInput + "\n" +
            " Minimum Input: " + command.Blue.MinimumOutput + "\n" +
            " Minimum Input: " + command.Blue.MaximumOutput);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void FlagPropertyExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         AutoColorLevelCommand command = new AutoColorLevelCommand();
         command.Flag = AutoColorLevelCommandFlags.NoProcess;
         command.Type = AutoColorLevelCommandType.Level;
         // Apply "Auto Leveling" to the image.
         command.Run(image);

         Debug.WriteLine("Master Leveling Value: \n Gamma: " + command.Master.Gamma + "\n" +
            " Minimum Input: " + command.Master.MinimumInput + "\n" +
            " Minimum Input: " + command.Master.MaximumInput + "\n" +
            " Minimum Input: " + command.Master.MinimumOutput + "\n" +
            " Minimum Input: " + command.Master.MaximumOutput);

         Debug.WriteLine("Red Leveling Value: \n Gamma: " + command.Red.Gamma + "\n" +
            " Minimum Input: " + command.Red.MinimumInput + "\n" +
            " Minimum Input: " + command.Red.MaximumInput + "\n" +
            " Minimum Input: " + command.Red.MinimumOutput + "\n" +
            " Minimum Input: " + command.Red.MaximumOutput);

         Debug.WriteLine("Green Leveling Value: \n Gamma: " + command.Green.Gamma + "\n" +
            " Minimum Input: " + command.Green.MinimumInput + "\n" +
            " Minimum Input: " + command.Green.MaximumInput + "\n" +
            " Minimum Input: " + command.Green.MinimumOutput + "\n" +
            " Minimum Input: " + command.Green.MaximumOutput);

         Debug.WriteLine("Blue Leveling Value: \n Gamma: " + command.Blue.Gamma + "\n" +
            " Minimum Input: " + command.Blue.MinimumInput + "\n" +
            " Minimum Input: " + command.Blue.MaximumInput + "\n" +
            " Minimum Input: " + command.Blue.MinimumOutput + "\n" +
            " Minimum Input: " + command.Blue.MaximumOutput);

         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub FlagPropertyExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As AutoColorLevelCommand = New AutoColorLevelCommand()
         command.Flag = AutoColorLevelCommandFlags.NoProcess
         command.Type = AutoColorLevelCommandType.Level
         ' Apply "Auto Leveling" to the image.
         command.Run(image)

         Debug.WriteLine("Master Leveling Value: " &amp; Constants.vbLf &amp; " Gamma: " &amp; command.Master.Gamma + Constants.vbLf &amp; " Minimum Input: " &amp; command.Master.MinimumInput + Constants.vbLf &amp; " Minimum Input: " &amp; command.Master.MaximumInput + Constants.vbLf &amp; " Minimum Input: " &amp; command.Master.MinimumOutput + Constants.vbLf &amp; " Minimum Input: " &amp; command.Master.MaximumOutput)

         Debug.WriteLine("Red Leveling Value: " &amp; Constants.vbLf &amp; " Gamma: " &amp; command.Red.Gamma + Constants.vbLf &amp; " Minimum Input: " &amp; command.Red.MinimumInput + Constants.vbLf &amp; " Minimum Input: " &amp; command.Red.MaximumInput + Constants.vbLf &amp; " Minimum Input: " &amp; command.Red.MinimumOutput + Constants.vbLf &amp; " Minimum Input: " &amp; command.Red.MaximumOutput)

         Debug.WriteLine("Green Leveling Value: " &amp; Constants.vbLf &amp; " Gamma: " &amp; command.Green.Gamma + Constants.vbLf &amp; " Minimum Input: " &amp; command.Green.MinimumInput + Constants.vbLf &amp; " Minimum Input: " &amp; command.Green.MaximumInput + Constants.vbLf &amp; " Minimum Input: " &amp; command.Green.MinimumOutput + Constants.vbLf &amp; " Minimum Input: " &amp; command.Green.MaximumOutput)

         Debug.WriteLine("Blue Leveling Value: " &amp; Constants.vbLf &amp; " Gamma: " &amp; command.Blue.Gamma + Constants.vbLf &amp; " Minimum Input: " &amp; command.Blue.MinimumInput + Constants.vbLf &amp; " Minimum Input: " &amp; command.Blue.MaximumInput + Constants.vbLf &amp; " Minimum Input: " &amp; command.Blue.MinimumOutput + Constants.vbLf &amp; " Minimum Input: " &amp; command.Blue.MaximumOutput)

         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.AutoColorLevelCommand.BlackClip">
      <summary>
            Gets or sets a value that represents the percentage of black pixels to clip from the image, in hundredths of a percent.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Valid values range from 0 to 10000 (which represents 100<![CDATA[&#37;]]>). Best results are found using 0.3 to 0.9 <![CDATA[&#37;]]>. The default value is 50, which indicates to clip 0.5<![CDATA[&#37;]]> of the black pixels.</value>
      <example>
            Refer to <see cref="M:Leadtools.ImageProcessing.Color.AutoColorLevelCommand.#ctor(Leadtools.ImageProcessing.Color.AutoColorLevelCommandType,Leadtools.ImageProcessing.Color.AutoColorLevelCommandFlags)">AutoColorLevelCommand(AutoColorLevelCommandType, AutoColorLevelCommandFlags)</see></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.AutoColorLevelCommand.WhiteClip">
      <summary>
            Gets or sets a value that represents the percentage of white pixels to clip from the image, in hundredths of a percent.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Valid values range from 0 to 10000 (which represents 100<![CDATA[&#37;]]>). The default value is 50, which indicates to clip 0.5<![CDATA[&#37;]]> of the white pixels.</value>
      <example>
            Refer to <see cref="M:Leadtools.ImageProcessing.Color.AutoColorLevelCommand.#ctor(Leadtools.ImageProcessing.Color.AutoColorLevelCommandType,Leadtools.ImageProcessing.Color.AutoColorLevelCommandFlags)">AutoColorLevelCommand(AutoColorLevelCommandType, AutoColorLevelCommandFlags)</see></example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.Color.AdjustTintCommand">
      <summary>
            Adjusts the image tint by changing the colors in an image by using two separate color wheel rotations. 
             <strong> Supported in Silverlight</strong>.
</summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>This command changes the colors in an image by using two separate color wheel rotations. For the AdjustTintCommand.AngleA parameter, a positive rotation takes blue toward green and red, as shown in the following figure:<br /><img src="adjusttint.jpg" /><br />
            Negative rotation has the opposite effect. For the AdjustTintCommand.AngleB parameter, a positive rotation takes red toward green. Negative rotation has the opposite effect.</description>
          </item>
          <item>
            <description>This command supports only colored images.</description>
          </item>
          <item>
            <description>This command supports 48 and 64-bit color images. Support for 48 and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support signed data images.</description>
          </item>
          <item>
            <description>Use the <see cref="T:Leadtools.ImageProcessing.Color.ChangeHueCommand" /> to rotate the color 
            wheel in either direction using one angle change that changes each color in the image. A 180-degree rotation 
            in either direction changes each color to its complement. Positive rotation takes red toward green, green 
            toward blue, and blue toward red. Negative rotation has the opposite effect.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Leadtools~Leadtools.Topics.RemovingNoise.html">Removing Noise</a>.
            </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.AdjustTintCommand" /> on an image and apply the Adjust Tint filter.</para>
        <code lang="VB">   Public Sub AdjustTintCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As AdjustTintCommand = New AdjustTintCommand
      command.AngleA = -50
      command.AngleB = 1500
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void AdjustTintCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         AdjustTintCommand command = new AdjustTintCommand();
         command.AngleA = -50;
         command.AngleB = 1500;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void AdjustTintCommandExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         AdjustTintCommand command = new AdjustTintCommand();
         command.AngleA = -50;
         command.AngleB = 1500;
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub AdjustTintCommandExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As AdjustTintCommand = New AdjustTintCommand()
         command.AngleA = -50
         command.AngleB = 1500
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Leadtools~Leadtools.Topics.RemovingNoise.html">Removing Noise</seealso>
      <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeHueCommand">ChangeHueCommand</seealso>
      <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeIntensityCommand">ChangeIntensityCommand</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.GammaCorrectCommand">GammaCorrectCommand</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeContrastCommand">ChangeContrastCommand</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.HistogramContrastCommand">HistogramContrastCommand</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.StretchIntensityCommand">StretchIntensityCommand</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.RemapIntensityCommand">RemapIntensityCommand</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.InvertCommand">InvertCommand</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeSaturationCommand">ChangeSaturationCommand</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.HistogramEqualizeCommand">HistogramEqualizeCommand</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.FillCommand">FillCommand</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.HistogramCommand">HistogramCommand</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChannelMixerCommand">ChannelMixerCommand</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.LightControlCommand">LightControlCommand</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SmoothEdgesCommand">SmoothEdgesCommand</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.LocalHistogramEqualizeCommand">LocalHistogramEqualizeCommand</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AddWeightedCommand">AddWeightedCommand</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorMergeCommand">ColorMergeCommand</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorSeparateCommand">ColorSeparateCommand</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.MultiplyCommand">MultiplyCommand</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AutoColorLevelCommand">AutoColorLevelCommand</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorLevelCommand">ColorLevelCommand</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SelectiveColorCommand">SelectiveColorCommand</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeHueSaturationIntensityCommand">ChangeHueSaturationIntensityCommand</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorReplaceCommand">ColorReplaceCommand</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorThresholdCommand">ColorThresholdCommand</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.MathematicalFunctionCommand">MathematicalFunctionCommand</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AdaptiveContrastCommand">AdaptiveContrastCommand</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ApplyMathematicalLogicCommand">ApplyMathematicalLogicCommand</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorIntensityBalanceCommand">ColorIntensityBalanceCommand</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ContrastBrightnessIntensityCommand">ContrastBrightnessIntensityCommand</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommand">FunctionalLightCommand</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MultiscaleEnhancementCommand">MultiscaleEnhancementCommand</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.SelectDataCommand">SelectDataCommand</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.ShiftDataCommand">ShiftDataCommand</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SampleTargetCommand">SampleTargetCommand</seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Color.AdjustTintCommand.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Color.AdjustTintCommand" /> class object with default parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.AdjustTintCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.AdjustTintCommand.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Color.AdjustTintCommand" /> class object with explicit parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <param name="angleA">Value that represents the amount of change in the A angle. Valid values range between -18000 and 18000.</param>
      <param name="angleB">Value that represents the amount of change in the B angle. Valid values range between -18000 and 18000.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.AdjustTintCommand" /> on an image and apply the Adjust Tint filter.</para>
        <code lang="VB">   Public Sub AdjustTintConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As AdjustTintCommand = New AdjustTintCommand(-50, 1500)
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void AdjustTintConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         AdjustTintCommand command = new AdjustTintCommand(-50, 1500);
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      [TestMethod]
      [Asynchronous]
      public void TestAdjustTintConstructorExample()
      {
         using (SampleImageStream outputStream = new SampleImageStream("AdjustTintConstructorExample.jpg"))
         {
            AdjustTintConstructorExample(SampleImage.Get(SampleImageNames.Image1_cmp).Clone(), outputStream);
         }
         EnqueueTestComplete();
      }
      public void AdjustTintConstructorExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         AdjustTintCommand command = new AdjustTintCommand(-50, 1500);
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      &lt;TestMethod, Asynchronous&gt; _
      Public Sub TestAdjustTintConstructorExample()
         Using outputStream As SampleImageStream = New SampleImageStream("AdjustTintConstructorExample.jpg")
            AdjustTintConstructorExample(SampleImage.Get(SampleImageNames.Image1_cmp).Clone(), outputStream)
         End Using
         EnqueueTestComplete()
      End Sub
      Public Sub AdjustTintConstructorExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As AdjustTintCommand = New AdjustTintCommand(-50, 1500)
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.AdjustTintCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this command.
             <strong> Supported in Silverlight</strong>.
</summary>
      <returns>Character string that contains the name of this command.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.AdjustTintCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.AdjustTintCommand.AngleA">
      <summary>
            Gets or sets the angular amount to change the A angle on which the filter is applied.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Value that represents the amount of change in the A angle, in hundredths of degrees.
             Valid values range between -18000 and 18000.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.AdjustTintCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.AdjustTintCommand.AngleB">
      <summary>
            Gets or sets the angular amount to change the B angle on which the filter is applied.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Value that represents the amount of change in the B angle, in hundredths of degrees.
             Valid values range between -18000 and 18000.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.AdjustTintCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.Color.SwapColorsCommandType">
      <summary>
            Enumerated values that indicate which color channels to swap.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.SwapColorsCommandType.RedGreen">
      <summary>
            Swap the red and green channels. (Change red to green and green to red.)
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.SwapColorsCommandType.RedBlue">
      <summary>
            Swap the red and blue channels. (Change red to blue and blue to red.)
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.SwapColorsCommandType.GreenBlue">
      <summary>
            Swap the green and blue channels. (Change green to blue and blue to green.)
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.SwapColorsCommandType.RedGreenBlueRed">
      <summary>
            Change red to green, green to blue and blue to red.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.SwapColorsCommandType.RedBlueGreenRed">
      <summary>
            Change red to blue, blue to green and green to red.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.Color.SwapColorsCommand">
      <summary>
            Swaps the specified color channels.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>This command changes the image data.</description>
          </item>
          <item>
            <description>This command supports 12 and 16-bit grayscale and 48 and 64-bit color images. Support for 12 and 16-bit grayscale and 48 and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command supports signed data images.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <see cref="T:Leadtools.Topics.CorrectingColors">Correcting Colors</see>.<br /></remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.SwapColorsCommand" /> on an image.</para>
        <code lang="VB">   Public Sub SwapColorsCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As SwapColorsCommand = New SwapColorsCommand
      command.Type = SwapColorsCommandType.RedGreen
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void SwapColorsCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         SwapColorsCommand command = new SwapColorsCommand();
         command.Type   = SwapColorsCommandType.RedGreen;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void SwapColorsCommandExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         SwapColorsCommand command = new SwapColorsCommand();
         command.Type   = SwapColorsCommandType.RedGreen;
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub SwapColorsCommandExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As SwapColorsCommand = New SwapColorsCommand()
         command.Type = SwapColorsCommandType.RedGreen
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <seealso cref="T:Leadtools.Topics.CorrectingColors">Correcting Colors</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ConvertToColoredGrayCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.BalanceColorsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.GrayscaleCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.GrayScaleExtendedCommand"></seealso>.
            <seealso cref="P:Leadtools.RasterImage.IsGray"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AdjustTintCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.ColorHalftoneCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Color.SwapColorsCommand.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Color.SwapColorsCommand" /> class object with default parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.SwapColorsCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.SwapColorsCommand.#ctor(Leadtools.ImageProcessing.Color.SwapColorsCommandType)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Color.SwapColorsCommand" /> class object with explicit parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <param name="type">Value that indicates which color channels to swap.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.SwapColorsCommand" /> on an image.</para>
        <code lang="VB">   Public Sub SwapColorsConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As SwapColorsCommand = New SwapColorsCommand(SwapColorsCommandType.RedGreen)
      command.Run(leadImage)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void SwapColorsConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         SwapColorsCommand command = new SwapColorsCommand(SwapColorsCommandType.RedGreen);
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void SwapColorsConstructorExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         SwapColorsCommand command = new SwapColorsCommand(SwapColorsCommandType.RedGreen);
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub SwapColorsConstructorExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As SwapColorsCommand = New SwapColorsCommand(SwapColorsCommandType.RedGreen)
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.SwapColorsCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this class.
             <strong> Supported in Silverlight</strong>.
</summary>
      <returns>String that contains the name of this class.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.SwapColorsCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.SwapColorsCommand.Type">
      <summary>
            Gets or sets an enumerated value that indicates which color channels to swap.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Enumerated value that indicates which color channels to swap.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.SwapColorsCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.Color.SampleTargetCommandFlags">
      <summary>
            Enumerated values that indicate the channel for which to shift the color, and how to remap the other values for that channel.
            <para>This enumeration has a <see cref="T:System.FlagsAttribute" /> attribute that allows a bitwise combination of its member values.</para></summary>
      <remarks>
             You can use a bitwise OR (|) to specify one flag from each group.
             <table><tr><td><b>Group</b></td><td><b>Flags</b></td></tr><tr><td>Flags that indicate the channel</td><td>Red, Green, Blue, Rgb</td></tr><tr><td>Flags that indicate how other pixel values in the set channel will be affected</td><td>Low, Mid, High</td></tr></table></remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.SampleTargetCommandFlags.None">
      <summary>
            Reserved.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.SampleTargetCommandFlags.Red">
      <summary>
            Shift the color in the red channel.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.SampleTargetCommandFlags.Green">
      <summary>
            Shift the color in the green channel.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.SampleTargetCommandFlags.Blue">
      <summary>
            Shift the color in the blue channel.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.SampleTargetCommandFlags.Rgb">
      <summary>
            Shift the color in the red, green, and blue channels.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.SampleTargetCommandFlags.Low">
      <summary>
            Remap the shadow values for the channel set in the flags parameter or the Flags property.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.SampleTargetCommandFlags.Mid">
      <summary>
            Remap the midtone values for the channel set in the flags parameter or the Flags property
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.SampleTargetCommandFlags.High">
      <summary>
            Remap the highlight values for the channel set in the flags parameter or the Flags property
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.Color.SampleTargetCommand">
      <summary>
            Corrects color values by shifting the sample colors to the target colors. This command is available in the <see cref="T:Leadtools.Topics.RasterProDocMed">Raster Pro</see> and above toolkits.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>For example, suppose you are working with a color image. In the SampleColor property or the sampleColor parameter, set the red value portion of the <see cref="T:Leadtools.RasterColor" /> structure to 125, the green portion to 165 and the blue portion to 100. In the TargetColor property or the targetColor parameter you set the red value portion to 170, the green to 120 and the blue to 200. If you set <see cref="T:Leadtools.ImageProcessing.Color.SampleTargetCommandFlags" />.Blue in the Flags property or the flags parameter, then for every pixel in the image that has a blue value of 100, that blue value will be changed to 200, thus shifting the colors in the image. Depending on whether you set <see cref="T:Leadtools.ImageProcessing.Color.SampleTargetCommandFlags" />.Low, <see cref="T:Leadtools.ImageProcessing.Color.SampleTargetCommandFlags" />.Mid, or <see cref="T:Leadtools.ImageProcessing.Color.SampleTargetCommandFlags" />.High, either the shadow values in the blue channel will be remapped, or the midtone values in the blue channel will be remapped, or the highlight values in the blue channel will be remapped.</description>
          </item>
          <item>
            <description>This command supports 12 and 16-bit grayscale and 48 and 64-bit color images.</description>
          </item>
          <item>
            <description>For gray scale images the gray value of the SampleColor and TargetColor properties or the sampleColor and targetColor parameters are used, and the different channel flags have the same effect since it works on the same channel (gray channel). Support for 12 and 16-bit grayscale and 48 and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support signed data images.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.<br />
            For more information, refer to <see cref="T:Leadtools.Topics.CorrectingColors">Correcting Colors</see>.<br /></remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.SampleTargetCommand" /> on an image.</para>
        <code lang="VB">   Public Sub SampleTargetCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As SampleTargetCommand = New SampleTargetCommand
      command.SampleColor = New RasterColor(50, 100, 150)
      command.TargetColor = New RasterColor(60, 90, 150)
      command.Flags = SampleTargetCommandFlags.Red Or SampleTargetCommandFlags.High
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void SampleTargetCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         SampleTargetCommand command = new SampleTargetCommand();
         command.SampleColor = new RasterColor(50, 100, 150);
         command.TargetColor = new RasterColor(60, 90, 150);
         command.Flags       = SampleTargetCommandFlags.Red | SampleTargetCommandFlags.High;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
      </example>
      <seealso cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</seealso>.
            <seealso cref="T:Leadtools.Topics.CorrectingColors">Correcting Colors</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.AddNoiseCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EmbossCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MotionBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OilifyCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.PosterizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.RemoveRedEyeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SolarizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BumpMapCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.CubismCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreePlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DryCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.OceanCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlassEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LensFlareCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LightCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeRadialBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CylinderCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandShearCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ImpressionistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PixelateCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PolarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PunchCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RippleCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SphereCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SwirlCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WindCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AdjustTintCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.ColorHalftoneCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Color.SampleTargetCommand.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Color.SampleTargetCommand" /> class object with default parameters.
            </summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.SampleTargetCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.SampleTargetCommand.#ctor(Leadtools.RasterColor,Leadtools.RasterColor,Leadtools.ImageProcessing.Color.SampleTargetCommandFlags)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Color.SampleTargetCommand" /> class object with explicit parameters.
            </summary>
      <param name="sampleColor">Color value that represents the sample color. The red value for red channel, green value for green channel, blue value for blue channel.</param>
      <param name="targetColor">Color value that represents the target color. The red value for red channel, green value for green channel, blue value for blue channel.</param>
      <param name="flags">Flags that indicate the channel for which to shift the color and how to remap the other values for that channel. You can use a bit wise OR (|) to specify one flag from each group.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.SampleTargetCommand" /> on an image.</para>
        <code lang="VB">   Public Sub SampleTargetConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As SampleTargetCommand = New SampleTargetCommand(New RasterColor(50, 100, 150), New RasterColor(60, 90, 150), SampleTargetCommandFlags.Red Or SampleTargetCommandFlags.High)
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void SampleTargetConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         SampleTargetCommand command = new SampleTargetCommand(new RasterColor(50, 100, 150), new RasterColor(60, 90, 150), SampleTargetCommandFlags.Red | SampleTargetCommandFlags.High);
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.SampleTargetCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this class.
            </summary>
      <returns>String that contains the name of this class.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.SampleTargetCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.SampleTargetCommand.TargetColor">
      <summary>
            Gets or sets the target color.
            </summary>
      <value>Color value that represents the target color. The red value for red channel, green value for green channel, blue value for blue channel.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.SampleTargetCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.SampleTargetCommand.SampleColor">
      <summary>
            Gets or sets the sample color.
            </summary>
      <value>Color value that represents the sample color. The red value for red channel, green value for green channel, blue value for blue channel.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.SampleTargetCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.SampleTargetCommand.Flags">
      <summary>
            Gets or sets a value that indicates the channel for which to shift the color and how to remap the other values for that channel.
            </summary>
      <value>Value that indicates the channel for which to shift the color and how to remap the other values for that channel. You can use a bit wise OR (|) to specify one flag from each group.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.SampleTargetCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.Color.MultiplyCommand">
      <summary>
            Increases or decreases the brightness in the image by multiplying the 
            colors in a specific image by a factoring value divided by 100.
             <strong> Supported in Silverlight</strong>.
</summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>This class is used to increase or decrease the 
            brightness in the image by multiplying the colors in a specific image
            by a factoring value divided by 100. For example,
            if the factoring value is 131, the colors in the image will be 
            multiplied by 1.31.</description>
          </item>
          <item>
            <description>This class supports 12 and 16-bit grayscale and 48 and 64-bit color images. Support for 12 and 16-bit grayscale and 48 and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
        <p>If the image has a LUT and you want to work on the image data, set 
            <see cref="P:Leadtools.RasterImage.UseLookupTable">RasterImage.UseLookupTable</see> 
            to false. Then, after calling the method, reset the 
            <see cref="P:Leadtools.RasterImage.UseLookupTable">UselookupTable property</see> to true, as follows:
            </p>
        <code>
            rasterImage.UseLookupTable = false;
            Method(rasterImage);
            
            rasterImage.UseLookupTable = true;
            </code>
        <p>For more information, refer to <see cref="T:Leadtools.Topics.ChangingBrightnessAndContrast">Changing Brightness and Contrast</see>.</p>
      </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.MultiplyCommand" /> on an image with factor = 1.51.</para>
        <code lang="VB">   Public Sub MultiplyCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As MultiplyCommand = New MultiplyCommand
      command.Factor = 151
      ' Multiply the colors of the bitmap with 1.51.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void MultiplyCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         MultiplyCommand command = new MultiplyCommand();
         command.Factor = 151;
         // Multiply the colors of the bitmap with 1.51.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void MultiplyCommandExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         MultiplyCommand command = new MultiplyCommand();
         command.Factor = 151;
         // Multiply the colors of the bitmap with 1.51.
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub MultiplyCommandExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As MultiplyCommand = New MultiplyCommand()
         command.Factor = 151
         ' Multiply the colors of the bitmap with 1.51.
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <seealso cref="T:Leadtools.Topics.ChangingBrightnessAndContrast">Changing Brightness and Contrast</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.GammaCorrectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeContrastCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.HistogramContrastCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.StretchIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.RemapIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeHueCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeSaturationCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.HistogramEqualizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.FillCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AddWeightedCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.HistogramCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.WindowLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChannelMixerCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.DeinterlaceCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.DesaturateCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EdgeDetectStatisticalCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.LightControlCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SmoothEdgesCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AutoColorLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.CorrelationListCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.GrayScaleToDuotoneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.GrayScaleToMultitoneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.HolePunchRemoveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SelectiveColorCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SkeletonCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CanvasCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.DisplacementCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FragmentCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.VignnetCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Color.MultiplyCommand.#ctor">
      <summary>
            Initializes a new MultiplyCommand class object with default parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.MultiplyCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.MultiplyCommand.#ctor(System.Int32)">
      <summary>
            Initializes a new MultiplyCommand class object with explicit parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <param name="factor">An integer which represents the factor to be used
            when multiplying image values. The factor used is equal to factor/100.
            Only positive values are accepted.
            </param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.MultiplyCommand" /> on an image with factor = 1.51.</para>
        <code lang="VB">   Public Sub MultiplyConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As MultiplyCommand = New MultiplyCommand(151)
      ' Multiply the colors of the image with 1.51.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void MultiplyConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         MultiplyCommand command = new MultiplyCommand(151);
         // Multiply the colors of the image with 1.51.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void MultiplyConstructorExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         MultiplyCommand command = new MultiplyCommand(151);
         // Multiply the colors of the image with 1.51.
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub MultiplyConstructorExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As MultiplyCommand = New MultiplyCommand(151)
         ' Multiply the colors of the image with 1.51.
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.MultiplyCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this class.
             <strong> Supported in Silverlight</strong>.
</summary>
      <returns>String that contains the name of this class.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.MultiplyCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.MultiplyCommand.Factor">
      <summary>
            Gets or sets an integer which represents the factor to be used when multiplying 
            image values.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>An integer which represents the factor to be used when multiplying 
            image values. The factor used is equal to Factor/100. Only positive 
            values are accepted.
            </value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.MultiplyCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.Color.GammaCorrectExtendedCommandType">
      <summary>
            Enumeration that indicates the color space in which to apply the Gamma correction.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.GammaCorrectExtendedCommandType.YuvSpace">
      <summary>
            Adjust the intensity of the pixel colors across the YUV color space
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.GammaCorrectExtendedCommandType.RgbSpace">
      <summary>
            Adjust the intensity of the pixel colors across the RGB color space.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.Color.GammaCorrectExtendedCommand">
      <summary>
            Adjusts the intensity of colors in an image by changing the gamma constant that is used to map the intensity values. Either of two different color spaces can be specified.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>This command is like the <see cref="T:Leadtools.ImageProcessing.Color.GammaCorrectCommand" /> method, but has been extended to allow the specification of the colorspace to be used.</description>
          </item>
          <item>
            <description>Intensity values ideally follow a logarithmic progression, because the eye perceives changes in intensity as being equal when the ratio of change is equal. For example, we would see a change from 0.1 to 0.2 as being equal to a change from 0.2 to 0.4.</description>
          </item>
          <item>
            <description>Gamma is a standard constant that is used to calculate the progression. For most CRTs the gamma constant is in the range of 2.2 to 2.5.</description>
          </item>
          <item>
            <description>This command supports 12 and 16-bit grayscale and 48 and 64-bit color images. Support for 12 and 16-bit grayscale and 48 and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
        <p>If the image has a LUT and you want to work on the image data, set 
            <see cref="P:Leadtools.RasterImage.UseLookupTable">RasterImage.UseLookupTable</see> 
            to false. Then, after calling the method, reset the 
            <see cref="P:Leadtools.RasterImage.UseLookupTable">UselookupTable property</see> to true, as follows:
            </p>
        <code>
            rasterImage.UseLookupTable = false;
            Method(rasterImage);
            
            rasterImage.UseLookupTable = true;
            </code>
      </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.GammaCorrectExtendedCommand" /> on an image.</para>
        <code lang="VB">   Public Sub GammaCorrectExtendedCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As New GammaCorrectExtendedCommand

      ' Apply gamma effect on image using the YUV color space and gamma value of 2.50
      command.Gamma = 250
      command.Type = GammaCorrectExtendedCommandType.YuvSpace
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void GammaCorrectExtendedCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         GammaCorrectExtendedCommand command = new GammaCorrectExtendedCommand();

         // Apply gamma effect on image using the YUV color space and gamma value of 2.50
         command.Gamma = 250;
         command.Type = GammaCorrectExtendedCommandType.YuvSpace;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void GammaCorrectExtendedCommandExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         GammaCorrectExtendedCommand command = new GammaCorrectExtendedCommand();
         // Apply gamma effect on image using the YUV color space and gamma value of 2.50
         command.Gamma = 250;
         command.Type = GammaCorrectExtendedCommandType.YuvSpace;
         command.Run(image);

         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub GammaCorrectExtendedCommandExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As GammaCorrectExtendedCommand = New GammaCorrectExtendedCommand()
         ' Apply gamma effect on image using the YUV color space and gamma value of 2.50
         command.Gamma = 250
         command.Type = GammaCorrectExtendedCommandType.YuvSpace
         command.Run(image)

         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <seealso cref="T:Leadtools.ImageProcessing.Color.GammaCorrectCommand">
      </seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeContrastCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.HistogramContrastCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.StretchIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.RemapIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.InvertCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeHueCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeSaturationCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.HistogramEqualizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.FillCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.HistogramCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.WindowLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChannelMixerCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.DeinterlaceCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.DesaturateCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EdgeDetectStatisticalCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.LightControlCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SmoothEdgesCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.LocalHistogramEqualizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AddWeightedCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorMergeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorSeparateCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.MultiplyCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AutoColorLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.CorrelationListCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.GrayScaleToDuotoneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.GrayScaleToMultitoneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.HolePunchRemoveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SelectiveColorCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SkeletonCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeHueSaturationIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorReplaceCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorThresholdCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.MathematicalFunctionCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SegmentCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AdaptiveContrastCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ApplyMathematicalLogicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorIntensityBalanceCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.ColorizeGrayCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ContrastBrightnessIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.DigitalSubtractCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.DynamicBinaryCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EdgeDetectEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MultiscaleEnhancementCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.SelectDataCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.ShiftDataCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Color.GammaCorrectExtendedCommand.#ctor">
      <summary>
            Initializes a new GammaCorrectExtendedCommand with default parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.GammaCorrectExtendedCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.GammaCorrectExtendedCommand.#ctor(System.Int32,Leadtools.ImageProcessing.Color.GammaCorrectExtendedCommandType)">
      <summary>
            Initializes a new GammaCorrectExtendedCommand with explicit parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <param name="gamma">Any value greater than 0 that represents the gamma value. This value is divided internally by 100.</param>
      <param name="type">Flag that indicates which color space to use.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.GammaCorrectExtendedCommand" /> on an image.</para>
        <code lang="VB">   Public Sub GammaCorrectExtendedConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      ' Apply gamma effect on image using the YUV color space and gamma value of 2.50
      Dim command As GammaCorrectExtendedCommand = New GammaCorrectExtendedCommand(250, GammaCorrectExtendedCommandType.YuvSpace)
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void GammaCorrectExtendedConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         // Apply gamma effect on image using the YUV color space and gamma value of 2.50
         GammaCorrectExtendedCommand command = new GammaCorrectExtendedCommand(250, GammaCorrectExtendedCommandType.YuvSpace);
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void GammaCorrectExtendedConstructorExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         // Apply gamma effect on image using the YUV color space and gamma value of 2.50
         GammaCorrectExtendedCommand command = new GammaCorrectExtendedCommand(250, GammaCorrectExtendedCommandType.YuvSpace);
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub GammaCorrectExtendedConstructorExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         ' Apply gamma effect on image using the YUV color space and gamma value of 2.50
         Dim command As GammaCorrectExtendedCommand = New GammaCorrectExtendedCommand(250, GammaCorrectExtendedCommandType.YuvSpace)
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.GammaCorrectExtendedCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this class.
             <strong> Supported in Silverlight</strong>.
</summary>
      <returns>String that is the name of this method.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.GammaCorrectExtendedCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.GammaCorrectExtendedCommand.Gamma">
      <summary>
            Gets or sets the Gamma value.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Any value greater than 0 that represents the gamma value. This value is divided internally by 100.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.GammaCorrectExtendedCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.GammaCorrectExtendedCommand.Type">
      <summary>
            Gets or sets the color space type.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Enumeration that indicates the color space in which to apply the gamma correction.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.GammaCorrectExtendedCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.Color.ColorSeparateCommandType">
      <summary>
            The type of separation that was used to create the grayscale images.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.ColorSeparateCommandType.Rgb">
      <summary>
            Create images from the three RGB planes.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.ColorSeparateCommandType.Cmyk">
      <summary>
            Create images from the four CMYK planes.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.ColorSeparateCommandType.Hsv">
      <summary>
            Create images from the three HSV planes.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.ColorSeparateCommandType.Hls">
      <summary>
            Create images from the three HLS planes.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.ColorSeparateCommandType.Cmy">
      <summary>
             Create images from the three CMY planes.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.ColorSeparateCommandType.Yuv">
      <summary>
             Create images from the three YUV planes.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.ColorSeparateCommandType.Xyz">
      <summary>
             Create images from the three XYZ planes.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.ColorSeparateCommandType.Lab">
      <summary>
             Create images from the three LAB planes.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.ColorSeparateCommandType.Ycrcb">
      <summary>
             Create images from the three YCRCB planes.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.ColorSeparateCommandType.Sct">
      <summary>
             Create images from the three SCT planes.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.Color.ColorSeparateCommand">
      <summary>
            Separates an image by color plane to produce one grayscale image per plane. You can specify any of several color-space models, including CMYK.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>The supported color-space models are Rgb, Cmyk, Cmy, Hsv, Hls, Xyz, Ycrcb, Yuv, Lab and Sct.</description>
          </item>
          <item>
            <description>This class supports 12 and 16-bit grayscale and 48 and 64-bit color images. Support for 12 and 16-bit grayscale and 48 and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This class does not support signed data images.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <see cref="T:Leadtools.Topics.ChangingBrightnessAndContrast">Changing Brightness and Contrast</see>.
            <br />
            For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.<br /></remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.ColorSeparateCommand" /> on an image and separate the color planes.</para>
        <code lang="VB">   Public Sub ColorSeperateCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As ColorSeparateCommand = New ColorSeparateCommand
      command.Type = ColorSeparateCommandType.Rgb

      command.Run(leadImage)
      Dim i As Integer
      For i = 3 To 1 Step -1
         command.DestinationImage.Page = i
         leadImage.AddPage(command.DestinationImage)
      Next

      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)
      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void ColorSeperateCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         ColorSeparateCommand command = new ColorSeparateCommand();
         command.Type = ColorSeparateCommandType.Rgb;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);
         for (int i = 3 ; i &gt;= 1; i--)
         {
            command.DestinationImage.Page = i;
            image.AddPage(command.DestinationImage);
         }

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void ColorSeperateCommandExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         ColorSeparateCommand command = new ColorSeparateCommand();
         command.Type = ColorSeparateCommandType.Rgb;
         command.Run(image);
         for (int i = 3 ; i &gt;= 1; i--)
         {
            command.DestinationImage.Page = i;
            image.AddPage(command.DestinationImage);
         }

         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.TifJpeg, 24, 1, -1, 1, CodecsSavePageMode.Append);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub ColorSeperateCommandExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As ColorSeparateCommand = New ColorSeparateCommand()
         command.Type = ColorSeparateCommandType.Rgb
         command.Run(image)
         For i As Integer = 3 To 1 Step -1
            command.DestinationImage.Page = i
            image.AddPage(command.DestinationImage)
         Next i

         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.TifJpeg, 24, 1, -1, 1, CodecsSavePageMode.Append)
         image.Dispose()
      End Sub</code>
      </example>
      <seealso cref="T:Leadtools.Topics.ChangingBrightnessAndContrast">Changing Brightness and Contrast</seealso>.
            <seealso cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorMergeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.WindowLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChannelMixerCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.DeinterlaceCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.DesaturateCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EdgeDetectStatisticalCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.LightControlCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SmoothEdgesCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AutoColorLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.CorrelationListCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.GrayScaleToDuotoneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.GrayScaleToMultitoneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.HolePunchRemoveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SelectiveColorCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SkeletonCommand"></seealso>.
            <seealso cref="T:Leadtools.Topics.ColorHalftoneandHalftoneImages">Color Halftone and Halftone Images</seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Color.ColorSeparateCommand.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Color.ColorSeparateCommand" /> class object with default parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ColorSeparateCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.ColorSeparateCommand.#ctor(Leadtools.ImageProcessing.Color.ColorSeparateCommandType)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Color.ColorSeparateCommand" /> class object with explicit parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <param name="type">Value that represents the type of separation that was used to create the grayscale images.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.ColorSeparateCommand" /> on an image and separate the color planes.</para>
        <code lang="VB">   Public Sub ColorSeperateConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As ColorSeparateCommand = New ColorSeparateCommand(ColorSeparateCommandType.Rgb)
      command.Run(leadImage)

      Dim i As Integer
      For i = 3 To 1 Step -1
         command.DestinationImage.Page = i
         leadImage.AddPage(command.DestinationImage)
      Next

      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)
      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void ColorSeperateConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         ColorSeparateCommand command = new ColorSeparateCommand(ColorSeparateCommandType.Rgb);
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         for (int i = 3 ; i &gt;= 1; i--)
         {
            command.DestinationImage.Page = i;
            image.AddPage(command.DestinationImage);
         }

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void ColorSeperateConstructorExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         ColorSeparateCommand command = new ColorSeparateCommand(ColorSeparateCommandType.Rgb);
         command.Run(image);
         for (int i = 3 ; i &gt;= 1; i--)
         {
            command.DestinationImage.Page = i;
            image.AddPage(command.DestinationImage);
         }

         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.TifJpeg, 24, 1, -1, 1, CodecsSavePageMode.Append);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub ColorSeperateConstructorExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As ColorSeparateCommand = New ColorSeparateCommand(ColorSeparateCommandType.Rgb)
         command.Run(image)
         For i As Integer = 3 To 1 Step -1
            command.DestinationImage.Page = i
            image.AddPage(command.DestinationImage)
         Next i

         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.TifJpeg, 24, 1, -1, 1, CodecsSavePageMode.Append)
         image.Dispose()
      End Sub</code>
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.ColorSeparateCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this class.
             <strong> Supported in Silverlight</strong>.
</summary>
      <returns>String that contains the name of this class.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.ColorSeparateCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.ColorSeparateCommand.DestinationImage">
      <summary>
            Gets the RasterImage object that references the target image.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>RasterImage object that references the target image.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ColorSeparateCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.ColorSeparateCommand.Type">
      <summary>
            Gets or sets a value that indicates the type of separation that was used to create the grayscale images.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>The type of separation that was used to create the grayscale images.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ColorSeparateCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.Color.BalanceColorCommandFactor">
      <summary>
            Defines the information used by the <see cref="T:Leadtools.ImageProcessing.Color.BalanceColorsCommand" /> class.
             <strong> Supported in Silverlight</strong>.
</summary>
      <remarks>
            If this class used to redistribute the red value of a pixel contains the following values:
            <para><see cref="P:Leadtools.ImageProcessing.Color.BalanceColorCommandFactor.ToRed" /> = 0.50</para><para><see cref="P:Leadtools.ImageProcessing.Color.BalanceColorCommandFactor.ToGreen" /> = 0.50</para><para><see cref="P:Leadtools.ImageProcessing.Color.BalanceColorCommandFactor.ToBlue" /> = 0.0</para>
            then 50<![CDATA[&#37;]]> of the current red value of the pixel will be added to the new red value for the pixel and 50<![CDATA[&#37;]]> of the current red value of the pixel will be added to the new green value for the pixel. For a more detailed description of how this works, refer to <see cref="T:Leadtools.ImageProcessing.Color.BalanceColorsCommand" /> class.
            </remarks>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.BalanceColorsCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.BalanceColorCommandFactor.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Color.BalanceColorCommandFactor" /> class with default parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.BalanceColorsCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.BalanceColorCommandFactor.#ctor(System.Double,System.Double,System.Double)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Color.BalanceColorCommandFactor" /> class with explicit parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <param name="toRed">Value that represents the percentage of the red color value that should be distributed to the red component</param>
      <param name="toGreen">Value that represents the percentage of the green color value that should be distributed to the green component</param>
      <param name="toBlue">Value that represents the percentage of the blue color value that should be distributed to the blue component</param>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.BalanceColorsCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.BalanceColorCommandFactor.ToRed">
      <summary>
            Gets or sets a value that represents the percentage of the red color value that 
            should be distributed to the red component.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value> Value that represents the percentage of the red color value 
            that should be distributed to the red component. Possible values are 0.0 to 1.0.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.BalanceColorsCommand">BalanceColorsCommand(BalanceColorCommandFactor, BalanceColorCommandFactor, BalanceColorCommandFactor)</see></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.BalanceColorCommandFactor.ToGreen">
      <summary>
            Gets or sets a value that represents the percentage of the green color value that 
            should be distributed to the red component.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value> Value that represents the percentage of the green color value
            that should be distributed to the red component. Possible values are 0.0 to 1.0.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.BalanceColorsCommand">BalanceColorsCommand(BalanceColorCommandFactor, BalanceColorCommandFactor, BalanceColorCommandFactor)</see></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.BalanceColorCommandFactor.ToBlue">
      <summary>
            Gets or sets a value that represents the percentage of the blue color value that 
            should be distributed to the red component.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value> Value that represents the percentage of the blue color value 
            that should be distributed to the red component. Possible values are 0.0 to 1.0.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.BalanceColorsCommand">BalanceColorsCommand(BalanceColorCommandFactor, BalanceColorCommandFactor, BalanceColorCommandFactor)</see></example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.Color.BalanceColorsCommand">
      <summary>
            Redistributes the RGB values of a specific image, using the values 
            in the <see cref="T:Leadtools.ImageProcessing.Color.BalanceColorCommandFactor" /> class.
             <strong> Supported in Silverlight</strong>.
</summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>For each pixel in the image, 
            the red value is modified using the values in  the RedFactor property.
            This generates an intermediate red value, an intermediate green value 
            and an intermediate blue value.</description>
          </item>
          <item>
            <description>For each pixel in the image,
            the green value is modified using the values in the GreenFactor property. 
            This generates an intermediate red value, an intermediate green value and
            an intermediate blue value.</description>
          </item>
          <item>
            <description>For each pixel in the image the blue value is modified 
            using the values in the BlueFactor property. This generates an 
            intermediate red value, an intermediate green value and an intermediate 
            blue value.</description>
          </item>
          <item>
            <description>The intermediate red values are added to generate the
            new red value for the pixel. The intermediate green values are added to 
            generate the new green value for the pixel and the intermediate blue 
            values are added to generate the new blue value for the pixel. This 
            triplet forms the new RGB value for the pixel.</description>
          </item>
          <item>
            <description>The <see cref="T:Leadtools.ImageProcessing.Color.BalanceColorCommandFactor" /> class has three components of type double: ToRed, ToGreen and ToBlue. The possible values of each component must be within the range: 0.0 - 1.0.</description>
          </item>
          <item>
            <description>This class supports 48 and 64-bit colored images.</description>
          </item>
          <item>
            <description>This method does not support signed data images.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <see cref="T:Leadtools.Topics.CorrectingColors">Correcting Colors</see>.<br /></remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.BalanceColorsCommand" /> on an image.</para>
        <code lang="VB">   Public Sub BalanceColorsCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As BalanceColorsCommand = New BalanceColorsCommand
      command.RedFactor = New BalanceColorCommandFactor(0.25, 0.5, 0.25)
      command.GreenFactor = New BalanceColorCommandFactor(0.3, 0.4, 0.3)
      command.BlueFactor = New BalanceColorCommandFactor(0.1, 0.6, 0.3)
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void BalanceColorsCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         BalanceColorsCommand command   = new BalanceColorsCommand();
         command.RedFactor              = new BalanceColorCommandFactor(0.25, 0.50, 0.25);
         command.GreenFactor            = new BalanceColorCommandFactor(0.30, 0.40, 0.30);
         command.BlueFactor             = new BalanceColorCommandFactor(0.10, 0.60, 0.30);
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void BalanceColorsCommandExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         BalanceColorsCommand command   = new BalanceColorsCommand();
         command.RedFactor              = new BalanceColorCommandFactor(0.25, 0.50, 0.25);
         command.GreenFactor            = new BalanceColorCommandFactor(0.30, 0.40, 0.30);
         command.BlueFactor             = new BalanceColorCommandFactor(0.10, 0.60, 0.30);
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub BalanceColorsCommandExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As BalanceColorsCommand = New BalanceColorsCommand()
         command.RedFactor = New BalanceColorCommandFactor(0.25, 0.50, 0.25)
         command.GreenFactor = New BalanceColorCommandFactor(0.30, 0.40, 0.30)
         command.BlueFactor = New BalanceColorCommandFactor(0.10, 0.60, 0.30)
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <seealso cref="T:Leadtools.Topics.CorrectingColors">Correcting Colors</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ConvertToColoredGrayCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.GrayscaleCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.GrayScaleExtendedCommand"></seealso>.
            <seealso cref="P:Leadtools.RasterImage.IsGray"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AdjustTintCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.HalfToneCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Color.BalanceColorsCommand.#ctor">
      <summary>
            Initializes a new BalanceColorsCommand class object with default parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.BalanceColorsCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.BalanceColorsCommand.#ctor(Leadtools.ImageProcessing.Color.BalanceColorCommandFactor,Leadtools.ImageProcessing.Color.BalanceColorCommandFactor,Leadtools.ImageProcessing.Color.BalanceColorCommandFactor)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Color.BalanceColorsCommand" /> with explicit parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <param name="redFactor">
        <see cref="T:Leadtools.ImageProcessing.Color.BalanceColorCommandFactor" /> 
            class that contains the values to use for redistributing the image's
            red values. Valid values for all class members must be within the
            range : 0.0 - 1.0.</param>
      <param name="greenFactor">
        <see cref="T:Leadtools.ImageProcessing.Color.BalanceColorCommandFactor" />
            class that contains the values to use for redistributing the image's
            green values. Valid values for all class members must be within 
            the range : 0.0 - 1.0.</param>
      <param name="blueFactor">
        <see cref="T:Leadtools.ImageProcessing.Color.BalanceColorCommandFactor" /> 
            class that contains the values to use for redistributing the image's
            blue values. Valid values for all class members must be within the
            range : 0.0 - 1.0.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.BalanceColorsCommand" /> on an image.</para>
        <code lang="VB">   Public Sub BalanceColorsConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim RedFactor As BalanceColorCommandFactor = New BalanceColorCommandFactor
      Dim GreenFactor As BalanceColorCommandFactor = New BalanceColorCommandFactor
      Dim BlueFactor As BalanceColorCommandFactor = New BalanceColorCommandFactor

      RedFactor.ToRed = 0.2
      RedFactor.ToGreen = 0.3
      RedFactor.ToBlue = 0.5

      GreenFactor.ToRed = 0.3
      GreenFactor.ToGreen = 0.1
      GreenFactor.ToBlue = 0.6

      BlueFactor.ToRed = 0.8
      BlueFactor.ToGreen = 0.1
      BlueFactor.ToBlue = 0.1

      Dim command As BalanceColorsCommand = New BalanceColorsCommand(RedFactor, GreenFactor, BlueFactor)
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void BalanceColorsConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         BalanceColorCommandFactor RedFactor = new BalanceColorCommandFactor();
         BalanceColorCommandFactor GreenFactor = new BalanceColorCommandFactor();
         BalanceColorCommandFactor BlueFactor = new BalanceColorCommandFactor();

         RedFactor.ToRed = 0.2;
         RedFactor.ToGreen = 0.3;
         RedFactor.ToBlue = 0.5;

         GreenFactor.ToRed = 0.3;
         GreenFactor.ToGreen = 0.1;
         GreenFactor.ToBlue = 0.6;

         BlueFactor.ToRed = 0.8;
         BlueFactor.ToGreen = 0.1;
         BlueFactor.ToBlue = 0.1;

         BalanceColorsCommand command = new BalanceColorsCommand(RedFactor, GreenFactor, BlueFactor);
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void BalanceColorsConstructorExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         BalanceColorCommandFactor RedFactor = new BalanceColorCommandFactor();
         BalanceColorCommandFactor GreenFactor = new BalanceColorCommandFactor();
         BalanceColorCommandFactor BlueFactor = new BalanceColorCommandFactor();
         RedFactor.ToRed = 0.2;
         RedFactor.ToGreen = 0.3;
         RedFactor.ToBlue = 0.5;

         GreenFactor.ToRed = 0.3;
         GreenFactor.ToGreen = 0.1;
         GreenFactor.ToBlue = 0.6;

         BlueFactor.ToRed = 0.8;
         BlueFactor.ToGreen = 0.1;
         BlueFactor.ToBlue = 0.1;

         BalanceColorsCommand command = new BalanceColorsCommand(RedFactor, GreenFactor, BlueFactor);
         command.Run(image);

         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub BalanceColorsConstructorExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim RedFactor As BalanceColorCommandFactor = New BalanceColorCommandFactor()
         Dim GreenFactor As BalanceColorCommandFactor = New BalanceColorCommandFactor()
         Dim BlueFactor As BalanceColorCommandFactor = New BalanceColorCommandFactor()
         RedFactor.ToRed = 0.2
         RedFactor.ToGreen = 0.3
         RedFactor.ToBlue = 0.5

         GreenFactor.ToRed = 0.3
         GreenFactor.ToGreen = 0.1
         GreenFactor.ToBlue = 0.6

         BlueFactor.ToRed = 0.8
         BlueFactor.ToGreen = 0.1
         BlueFactor.ToBlue = 0.1

         Dim command As BalanceColorsCommand = New BalanceColorsCommand(RedFactor, GreenFactor, BlueFactor)
         command.Run(image)

         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.BalanceColorsCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this class.
             <strong> Supported in Silverlight</strong>.
</summary>
      <returns>String that contains the name of this class.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.BalanceColorsCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.BalanceColorsCommand.RedFactor">
      <summary>
        <see cref="T:Leadtools.ImageProcessing.Color.BalanceColorCommandFactor" /> class that contains the values to use for redistributing the image's red values.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>
        <see cref="T:Leadtools.ImageProcessing.Color.BalanceColorCommandFactor" /> 
            class that contains the values to use for redistributing the image's
            red values. Valid values for all class members must be within the
            range : 0.0 - 1.0.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.BalanceColorsCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.BalanceColorsCommand.GreenFactor">
      <summary>
        <see cref="T:Leadtools.ImageProcessing.Color.BalanceColorCommandFactor" />
            class that contains the values to use for redistributing the image's
            green values.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>
        <see cref="T:Leadtools.ImageProcessing.Color.BalanceColorCommandFactor" />
            class that contains the values to use for redistributing the 
            image's green values. Valid values for all class members must be 
            within the range : 0.0 - 1.0.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.BalanceColorsCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.BalanceColorsCommand.BlueFactor">
      <summary>
        <see cref="T:Leadtools.ImageProcessing.Color.BalanceColorCommandFactor" /> 
            class that contains the values to use for redistributing the image's
            blue values.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>
        <see cref="T:Leadtools.ImageProcessing.Color.BalanceColorCommandFactor" /> 
            class that contains the values to use for redistributing the image's
            blue values. Valid values for all class members must be within the
            range : 0.0 - 1.0.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.BalanceColorsCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.Color.AdaptiveContrastCommandType">
      <summary>
            Enumeration flags that identify the adjustment method.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.AdaptiveContrastCommandType.Exponential">
      <summary>
             Apply exponential adjustment.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.AdaptiveContrastCommandType.Linear">
      <summary>
            Apply linear adjustment.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.Color.AdaptiveContrastCommand">
      <summary>
            Performs adaptive contrast enhancement (ACE) to regions that are originally low in contrast. <b>This command is available in the <see cref="T:Leadtools.Topics.RasterProDocMed">Medical</see> and above toolkits</b>.
            </summary>
      <remarks>
        <list type="bullet">
          <item>Adaptive contrast enhancement (ACE) adjusts image contrast by giving more contrast to areas which are originally low in contrast. This is different from histogram-based techniques which are based on all image pixels (the histogram itself).</item>
          <item>Local histogram equalization is another technique that can be used to reveal detail of areas, since it depends on area pixels only. Use <see cref="T:Leadtools.ImageProcessing.Color.LocalHistogramEqualizeCommand" /> to perform a local histogram equalization. </item>
          <item>This command supports 12 and 16-bit grayscale and 48 and 64-bit color images. Support for 12 and 16-bit grayscale and 48 and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</item>
          <item>This command does not support 32-bit grayscale images.</item>
        </list>
      </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.AdaptiveContrastCommand" /> on an image.</para>
        <code lang="VB">   Public Sub AdaptiveContrastCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As AdaptiveContrastCommand = New AdaptiveContrastCommand
      command.Amount = 200
      command.Dimension = 9
      ' Apply Adaptive Contrast Enhancement.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void AdaptiveContrastCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         AdaptiveContrastCommand command = new AdaptiveContrastCommand();
         command.Amount    = 200;
         command.Dimension = 9;
         // Apply Adaptive Contrast Enhancement.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);
         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void AdaptiveContrastCommandExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         AdaptiveContrastCommand command = new AdaptiveContrastCommand();
         command.Amount    = 200;
         command.Dimension = 9;
         // Apply Adaptive Contrast Enhancement.
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub AdaptiveContrastCommandExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As AdaptiveContrastCommand = New AdaptiveContrastCommand()
         command.Amount = 200
         command.Dimension = 9
         ' Apply Adaptive Contrast Enhancement.
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <seealso cref="T:Leadtools.ImageProcessing.Color.HistogramEqualizeCommand">
      </seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeContrastCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.GammaCorrectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.HistogramContrastCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.StretchIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.InvertCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeHueCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeSaturationCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.FillCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.HistogramCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.WindowLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.LocalHistogramEqualizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeHueSaturationIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AdjustTintCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.GammaCorrectCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Color.AdaptiveContrastCommand.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Color.AdaptiveContrastCommand" /> with default parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.AdaptiveContrastCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.AdaptiveContrastCommand.#ctor(System.Int32,System.Int32,Leadtools.ImageProcessing.Color.AdaptiveContrastCommandType)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Color.AdaptiveContrastCommand" /> with explicit parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <param name="dimension">Dimensions of the neighborhood used for filtering (Dimension x Dimension), in pixels.</param>
      <param name="amount">Value that represents an adjustment factor. Its range starts from 100 and has no upper limit.</param>
      <param name="type">Value that indicates the adjustment method.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.AdaptiveContrastCommand" /> on an image.</para>
        <code lang="VB">   Public Sub AdaptiveContrastConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As AdaptiveContrastCommand = New AdaptiveContrastCommand(9, 200, AdaptiveContrastCommandType.Exponential)
      ' Apply Adaptive Contrast Enhancement.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void AdaptiveContrastConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         AdaptiveContrastCommand command = new AdaptiveContrastCommand(9, 200, AdaptiveContrastCommandType.Exponential);
         // Apply Adaptive Contrast Enhancement.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void AdaptiveContrastConstructorExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         AdaptiveContrastCommand command = new AdaptiveContrastCommand(9, 200, AdaptiveContrastCommandType.Exponential);
         // Apply Adaptive Contrast Enhancement.
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub AdaptiveContrastConstructorExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As AdaptiveContrastCommand = New AdaptiveContrastCommand(9, 200, AdaptiveContrastCommandType.Exponential)
         ' Apply Adaptive Contrast Enhancement.
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.AdaptiveContrastCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this command.
             <strong> Supported in Silverlight</strong>.
</summary>
      <returns>Character string that contains the name of this command.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.AdaptiveContrastCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.AdaptiveContrastCommand.Dimension">
      <summary>
            Gets or sets the dimensions of the neighborhood used for filtering (Dimension x Dimension), in pixels.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Value that represents the dimensions of the neighborhood used for filtering (Dimension x Dimension), in pixels.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.AdaptiveContrastCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.AdaptiveContrastCommand.Amount">
      <summary>
            Gets or sets the adjustment factor.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Value that represents an adjustment factor. Its range starts from 100 and has no upper limit.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.AdaptiveContrastCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.AdaptiveContrastCommand.Type">
      <summary>
            Gets or sets the adjustment method.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>
      </value>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.AdaptiveContrastCommand" /> on an image.</para>
        <code lang="VB">   Public Sub TypePropertyExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As AdaptiveContrastCommand = New AdaptiveContrastCommand
      command.Amount = 200
      command.Dimension = 9
      command.Type = AdaptiveContrastCommandType.Linear
      ' Apply Adaptive Contrast Enhancement.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void TypePropertyExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         AdaptiveContrastCommand command = new AdaptiveContrastCommand();
         command.Amount = 200;
         command.Dimension = 9;
         command.Type = AdaptiveContrastCommandType.Linear;
         //Apply Adaptive Contrast Enhancement.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void TypePropertyExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         AdaptiveContrastCommand command = new AdaptiveContrastCommand();
         command.Amount = 200;
         command.Dimension = 9;
         command.Type = AdaptiveContrastCommandType.Linear;
         //Apply Adaptive Contrast Enhancement.
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub TypePropertyExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As AdaptiveContrastCommand = New AdaptiveContrastCommand()
         command.Amount = 200
         command.Dimension = 9
         command.Type = AdaptiveContrastCommandType.Linear
         'Apply Adaptive Contrast Enhancement.
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.Color.AddWeightedCommandType">
      <summary>
            Enumeration flags that identify the operation to perform.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.AddWeightedCommandType.Average">
      <summary>
            Average the images in the list.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.AddWeightedCommandType.Add">
      <summary>
            Add the images in the list.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.AddWeightedCommandType.AverageWeighted">
      <summary>
            Average the images in the list, according to the array of weight factors in either the <see cref="P:Leadtools.ImageProcessing.Color.AddWeightedCommand.Factor">Factor property</see> or the factor parameter in the constructor.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.AddWeightedCommandType.AddWeighted">
      <summary>
            Add the images in the list, according to the array of weight factors in either the Factor property or the factor parameter in the constructor.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.Color.AddWeightedCommand">
      <summary>
            Adds or averages the images in a list according to their weight factors.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>This command can be used to modify the brightness (with the add operations) or remove the noise (with the average operations). Typically, you would call this command for a series of images taken of the same object at short intervals.</description>
          </item>
          <item>
            <description>If the value of <see cref="P:Leadtools.ImageProcessing.Color.AddWeightedCommand.Type">Type property</see> is:<br /><list type="bullet"><item><description><b>Add</b>, the command can be used to add several images of the same view to improve the lightness or brightness of the image. In this case, the value of <see cref="P:Leadtools.ImageProcessing.Color.AddWeightedCommand.Factor">Factor property</see> will be ignored.</description></item><item><description><b>Average</b>, the command can be used to average several images. In this case, the factor property or parameter is ignored.</description></item><item><description><b>AddWeighted</b>, the command can be used to obtain an image as the sum of several weighted images. Each image in any position in the list has a corresponding weight factor in the same position in the Factor array. The real values are the weight factors divided by 100. For example if a weight factor is 131 its real value is 1.31. If Factor equals null, each image has the same weight factor of 100 and the result is the same as for Add.</description></item><item><description><b>AverageWeighted</b>, the command can eliminate random noise by performing a weighted average. Each image in any position in the list has a corresponding weight factor in the factor array. The real values are the weight factors in the array divided by 100. The weighted sum will be divided by the sum of the weights. If the factor equals null, each image has the same weight factor of 100 and the result is the same as for Average.</description></item></list></description>
          </item>
          <item>
            <description>This command performs operations between data byte-by-byte. An image can be any color resolution. This method will allocate and store the resulting image in <see cref="P:Leadtools.ImageProcessing.Color.AddWeightedCommand.DestinationImage">DestinationImage property</see>. The image resulting from this operation is internally copied from the first image in the list, before performing the adding operation. The operations are performed based on the smallest width and height of the input images.</description>
          </item>
          <item>
            <description>All images must be either signed or unsigned.</description>
          </item>
          <item>
            <description>This command supports 12 and 16-bit grayscale and 48 and 64-bit color images. Support for 12 and 16-bit grayscale and 48 and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <see cref="T:Leadtools.Topics.ChangingBrightnessAndContrast">Changing Brightness and Contrast</see>.
            </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.AddWeightedCommand" /> on an image. and return the resulting image, assuming that the image parameter have more than one page.</para>
        <code lang="VB">   Public Sub AddWeightedCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim Factors() As Integer
      ReDim Factors(4)
      'take the average between all rotated bitmaps, and put the result in the.
      Dim command As AddWeightedCommand = New AddWeightedCommand
      command.Type = AddWeightedCommandType.Average
      command.Factor = Factors
      command.Factor(0) = 100
      command.Factor(1) = 100
      command.Factor(2) = 100
      command.Factor(3) = 100
      command.Run(leadImage)
      codecs.Save(command.DestinationImage, LeadtoolsExamples.Common.ImagesPath.Path + "AddWeightedCommandResult.Bmp", RasterImageFormat.Bmp, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void AddWeightedCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         //take the average between all rotated bitmaps, and put the result in the.
         AddWeightedCommand command = new AddWeightedCommand();
         command.Type = AddWeightedCommandType.Average;
         command.Factor = new int[5];
         command.Factor[0] = 100;
         command.Factor[1] = 100;
         command.Factor[2] = 100;
         command.Factor[3] = 100;
         command.Run(image);
         codecs.Save(command.DestinationImage, LeadtoolsExamples.Common.ImagesPath.Path + "AddWeightedCommandResult.bmp", RasterImageFormat.Bmp, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void AddWeightedCommandExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         //take the average between all rotated bitmaps, and put the result in the.
         AddWeightedCommand command = new AddWeightedCommand();
         command.Type = AddWeightedCommandType.Average;
         command.Factor = new int[5];
         command.Factor[0] = 100;
         command.Factor[1] = 100;
         command.Factor[2] = 100;
         command.Factor[3] = 100;
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub AddWeightedCommandExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         'take the average between all rotated bitmaps, and put the result in the.
         Dim command As AddWeightedCommand = New AddWeightedCommand()
         command.Type = AddWeightedCommandType.Average
         command.Factor = New Integer(4){}
         command.Factor(0) = 100
         command.Factor(1) = 100
         command.Factor(2) = 100
         command.Factor(3) = 100
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <seealso cref="T:Leadtools.Topics.ChangingBrightnessAndContrast">Changing Brightness and Contrast</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AddCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChannelMixerCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.DeinterlaceCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.DesaturateCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EdgeDetectStatisticalCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.LightControlCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SmoothEdgesCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AutoColorLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.CorrelationListCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.GrayScaleToDuotoneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.GrayScaleToMultitoneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.HolePunchRemoveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SelectiveColorCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SkeletonCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CanvasCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.DisplacementCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FragmentCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.VignnetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AdjustTintCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.GammaCorrectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.HighPassCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.UnsharpMaskCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Color.AddWeightedCommand.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Color.AddWeightedCommand" /> class object with default parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.AddWeightedCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.AddWeightedCommand.#ctor(Leadtools.ImageProcessing.Color.AddWeightedCommandType,System.Int32[])">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Color.AddWeightedCommand" /> class object with explicit parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <param name="type">Value that indicates the operation to perform.</param>
      <param name="factor">Array of values that represent weights associated with the images in the list. Used only if the type parameter is set to AddWeighted or AverageWeighted. This parameter only accepts positive values.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.AddWeightedCommand" /> on an image(default constructor) and return the resulting image, assuming that the image parameter have more than one page.</para>
        <code lang="VB">   Public Sub AddWeightedConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim nFactors() As Integer
      ReDim nFactors(5)
      nFactors(0) = 100
      nFactors(1) = 100
      nFactors(2) = 100
      nFactors(3) = 100

      ' take the average between all rotated bitmaps, and put the result in the.
      Dim command As AddWeightedCommand = New AddWeightedCommand(AddWeightedCommandType.Average, nFactors)
      command.Run(leadImage)
      codecs.Save(command.DestinationImage, LeadtoolsExamples.Common.ImagesPath.Path + "AddWeightedCommandResult.Bmp", RasterImageFormat.Bmp, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void AddWeightedConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         int [] nFactors = new int[5];
         nFactors[0] = 100;
         nFactors[1] = 100;
         nFactors[2] = 100;
         nFactors[3] = 100;

         // take the average between all rotated bitmaps, and put the result in the.
         AddWeightedCommand command = new AddWeightedCommand(AddWeightedCommandType.Average, nFactors);
         command.Run(image);
         codecs.Save(command.DestinationImage, LeadtoolsExamples.Common.ImagesPath.Path + "AddWeightedCommandResult.bmp", RasterImageFormat.Bmp, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void AddWeightedConstructorExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         int [] nFactors = new int[5];
         nFactors[0] = 100;
         nFactors[1] = 100;
         nFactors[2] = 100;
         nFactors[3] = 100;
         // take the average between all rotated bitmaps, and put the result in the.
         AddWeightedCommand command = new AddWeightedCommand(AddWeightedCommandType.Average, nFactors);
         command.Run(image);

         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub AddWeightedConstructorExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim nFactors As Integer() = New Integer(4){}
         nFactors(0) = 100
         nFactors(1) = 100
         nFactors(2) = 100
         nFactors(3) = 100
         ' take the average between all rotated bitmaps, and put the result in the.
         Dim command As AddWeightedCommand = New AddWeightedCommand(AddWeightedCommandType.Average, nFactors)
         command.Run(image)

         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.AddWeightedCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this method.
             <strong> Supported in Silverlight</strong>.
</summary>
      <returns>Character string that contains the name of this method.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.AddWeightedCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.AddWeightedCommand.Type">
      <summary>
            Gets or sets a value that indicates the operation to perform.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Value that indicates the operation to perform.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.AddWeightedCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.AddWeightedCommand.DestinationImage">
      <summary>
            (Read only) Gets the RasterImage object that references the resulting image on which the effect is applied.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>
            The RasterImage object that references the resulting image on which the effect is applied.
            </value>
      <Remarks>The <see cref="T:Leadtools.ImageProcessing.Color.AddWeightedCommand" /> command updates the value of this property.</Remarks>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.AddWeightedCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.AddWeightedCommand.Factor">
      <summary>
            Gets or sets an array of values that represent weights associated with the images in the list.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Array of values that represent weights associated with the images in the specified list. Used only if <see cref="P:Leadtools.ImageProcessing.Color.AddWeightedCommand.Type">Type property</see> is set to AddWeighted or AverageWeighted. This property only accepts positive values.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.AddWeightedCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.Color.SolarizeCommand">
      <summary>
            Applies an effect that mimics the accidental exposure of photographic film to light. It does so by inverting all color data with an intensity value greater than or equal to the threshold that you specify.
             <strong> Supported in Silverlight</strong>.
</summary>
      <keywords>Effects|Artistic effects</keywords>
      <remarks>
        <list type="bullet">
          <item>
            <description>This command supports 12 and 16-bit grayscale and 48 and 64-bit color images. Support for 12 and 16-bit grayscale and 48 and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <see cref="T:Leadtools.Topics.ApplyingArtisticEffects">Applying Artistic Effects</see>.
            </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.SolarizeCommand" /> on an image with threshold = 90.</para>
        <code lang="VB">   Public Sub SolarizeCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As SolarizeCommand = New SolarizeCommand
      'Solarize with threshold of 90.
      command.Threshold = 90

      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void SolarizeCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         SolarizeCommand command = new SolarizeCommand();
         //Solarize with threshold of 90.
         command.Threshold = 90;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void SolarizeCommandExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         SolarizeCommand command = new SolarizeCommand();
         //Solarize with threshold of 90.
         command.Threshold = 90;
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub SolarizeCommandExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As SolarizeCommand = New SolarizeCommand()
         'Solarize with threshold of 90.
         command.Threshold = 90
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <seealso cref="T:Leadtools.Topics.ApplyingArtisticEffects">Applying Artistic Effects</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.AddNoiseCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SharpenCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.PosterizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EmbossCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.AverageCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MedianCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.IntensityDetectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SpatialFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.BinaryFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MaximumCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MinimumCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OilifyCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.WindowLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BumpMapCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.CubismCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DryCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreePlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeRadialBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlassEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LensFlareCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LightCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.OceanCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SampleTargetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CylinderCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandShearCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ImpressionistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PixelateCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PolarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PunchCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RippleCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SphereCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SwirlCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WindCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ShadowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RevEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.AgingCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DiceEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PuzzleEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RingEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.DeskewCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DiffuseGlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.HalfTonePatternCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.HighPassCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MaskConvolutionCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PerspectiveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PointillistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CanvasCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CloudsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DiffuseGlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.DisplacementCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FragmentCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MaskConvolutionCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OffsetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RomanMosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.VignnetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZigZagCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Color.SolarizeCommand.#ctor">
      <summary>
            Initializes a new SolarizeCommand class object with default parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.SolarizeCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.SolarizeCommand.#ctor(System.Int32)">
      <summary>
            Initializes a new SolarizeCommand class object with explicit parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <param name="threshold">Value that represents the threshold at or above which colors are to be inverted. The valid range is 0-255.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.SolarizeCommand" /> on an image with threshold = 90.</para>
        <code lang="VB">   Public Sub SolarizeConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      'Solarize with threshold of 90.
      Dim command As SolarizeCommand = New SolarizeCommand(90)
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void SolarizeConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         //Solarize with threshold of 90.
         SolarizeCommand command = new SolarizeCommand(90);
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void SolarizeConstructorExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         //Solarize with threshold of 90.
         SolarizeCommand command = new SolarizeCommand(90);
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub SolarizeConstructorExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         'Solarize with threshold of 90.
         Dim command As SolarizeCommand = New SolarizeCommand(90)
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.SolarizeCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this command.
             <strong> Supported in Silverlight</strong>.
</summary>
      <returns>String that contains the name of this command.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.SolarizeCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.SolarizeCommand.Threshold">
      <summary>
            Gets or sets a value that represents the threshold at or above which colors are to be inverted.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>The valid range is from 0 - 65535 for 64-bit, 48-bit and 16-bit grayscale images and from 0 - 4095 for 12-bit grayscale images. Otherwise, it is from 0 to 255.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.SolarizeCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.Color.ColorIntensityBalanceCommandData">
      <summary>
            Defines the balance tone information used by the <see cref="T:Leadtools.ImageProcessing.Color.ColorIntensityBalanceCommand" /> class.
             <strong> Supported in Silverlight</strong>.
</summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ColorIntensityBalanceCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.ColorIntensityBalanceCommandData.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Color.ColorIntensityBalanceCommandData" /> class with default parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <example>
            Refer to <see cref="M:Leadtools.ImageProcessing.Color.ColorIntensityBalanceCommand.#ctor(Leadtools.ImageProcessing.Color.ColorIntensityBalanceCommandData,Leadtools.ImageProcessing.Color.ColorIntensityBalanceCommandData,Leadtools.ImageProcessing.Color.ColorIntensityBalanceCommandData,System.Boolean)">ColorIntensityBalanceCommand (ColorIntensityBalanceCommandData, ColorIntensityBalanceCommandData, ColorIntensityBalanceCommandData,bool)</see></example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.ColorIntensityBalanceCommandData.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Color.ColorIntensityBalanceCommandData" /> class with explicit parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <param name="red">Value to be used for adjusting or balancing the red channel. Valid values range from -100 to 100. Values &gt; 0 increase the red component. Values &lt; 0 decrease the red component. Using 0 leaves the red component unchanged.</param>
      <param name="green">Value to be used for adjusting or balancing the green channel. Valid values range from -100 to 100. Values &gt; 0 increase the green component value. Values &lt; 0 decrease the green component value. Using 0 leaves the green component unchanged.</param>
      <param name="blue">Value to be used for adjusting or balancing the blue channel. Valid values range from -100 to 100. Values &gt; 0 increase the blue component value. Values &lt; 0 decrease the blue component value. Using 0 leaves the blue component unchanged.</param>
      <example>
            Refer to <see cref="M:Leadtools.ImageProcessing.Color.ColorIntensityBalanceCommand.#ctor(Leadtools.ImageProcessing.Color.ColorIntensityBalanceCommandData,Leadtools.ImageProcessing.Color.ColorIntensityBalanceCommandData,Leadtools.ImageProcessing.Color.ColorIntensityBalanceCommandData,System.Boolean)">ColorIntensityBalanceCommand (ColorIntensityBalanceCommandData, ColorIntensityBalanceCommandData, ColorIntensityBalanceCommandData,bool)</see></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.ColorIntensityBalanceCommandData.Red">
      <summary>
            Gets or sets a value to be used for adjusting or balancing the red channel.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value> Value to be used for adjusting or balancing the red channel. 
            Valid values range from -100 to 100. Values greater than 0 increase the red component. 
            Values less than 0 decrease the red component. Using 0 leaves the red component unchanged.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ColorIntensityBalanceCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.ColorIntensityBalanceCommandData.Green">
      <summary>
            Gets or sets a value to be used for adjusting or balancing the green channel.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value> Value to be used for adjusting or balancing the green channel. Valid values range from -100 to 100. Values greater than 0 increase the green component value. Values less than 0 decrease the green component value. Using 0 leaves the green component unchanged.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ColorIntensityBalanceCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.ColorIntensityBalanceCommandData.Blue">
      <summary>
            Gets or sets a value to be used for adjusting or balancing the blue channel.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value> Value to be used for adjusting or balancing the blue channel. Valid values range from -100 to 100. Values &gt; 0 increase the blue component value. Values &lt; 0 decrease the blue component value. Using 0 leaves the blue component unchanged.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ColorIntensityBalanceCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.Color.ColorIntensityBalanceCommand">
      <summary>
            Changes the distribution of the red, green, or blue channels. This command is available in the <see cref="T:Leadtools.Topics.RasterProDocMed">Raster Pro</see> and above toolkits.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>This command changes the distribution of the red, green, or blue channels to make the colors in the image more accurate or more different. </description>
          </item>
          <item>
            <description>Each color component is treated independently. The color range for each component is split into shadows, 
            midtones and highlights based on the intensity. The values in each range are adjusted differently using the 
            <see cref="T:Leadtools.ImageProcessing.Color.ColorIntensityBalanceCommandData" /> classes. Positive values in a 
            <see cref="T:Leadtools.ImageProcessing.Color.ColorIntensityBalanceCommandData" /> class for a component cause that particular 
            component to become brighter, whereas negative values cause the component to become darker. 
            A value of 0 leaves the component unchanged.  </description>
          </item>
          <item>
            <description>The preserve luminance option aims to minimize the luminance change in the image.</description>
          </item>
          <item>
            <description>This command supports only RGB images. It does not support grayscale images.</description>
          </item>
          <item>
            <description>This command supports 48 and 64-bit color images. Support for 48 and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support signed data images. </description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <see cref="T:Leadtools.Topics.ChangingBrightnessAndContrast">Changing Brightness and Contrast</see>.
            <br />
            For more information, refer to <see cref="T:Leadtools.Topics.CorrectingColors">Correcting Colors</see>.<br /></remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.ColorIntensityBalanceCommand" /> on an image, and balance the colors by increasing the red channel values.</para>
        <code lang="VB">   Public Sub ColorIntensityBalanceCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As ColorIntensityBalanceCommand = New ColorIntensityBalanceCommand
      Dim Shadow As ColorIntensityBalanceCommandData = New ColorIntensityBalanceCommandData
      Dim MidTone As ColorIntensityBalanceCommandData = New ColorIntensityBalanceCommandData
      Dim HighLight As ColorIntensityBalanceCommandData = New ColorIntensityBalanceCommandData

      Shadow.Red = 60
      Shadow.Blue = 0
      Shadow.Green = 0

      MidTone.Red = 40
      MidTone.Blue = 0
      MidTone.Green = 0

      HighLight.Red = 70
      HighLight.Blue = 0
      HighLight.Green = 0

      command.Shadows = Shadow
      command.MidTone = MidTone
      command.HighLight = HighLight
      command.Luminance = False

      ' Balance the colors by increasing the red channel values.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void ColorIntensityBalanceCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         ColorIntensityBalanceCommand command       = new ColorIntensityBalanceCommand();
         ColorIntensityBalanceCommandData Shadows   = new ColorIntensityBalanceCommandData();
         ColorIntensityBalanceCommandData MidTone   = new ColorIntensityBalanceCommandData();
         ColorIntensityBalanceCommandData HighLight = new ColorIntensityBalanceCommandData();

         Shadows.Red    = 60;
         Shadows.Blue   = 0;
         Shadows.Green  = 0;

         MidTone.Red    = 40;
         MidTone.Blue   = 0;
         MidTone.Green  = 0;

         HighLight.Red    = 70;
         HighLight.Blue   = 0;
         HighLight.Green  = 0;

         command.Shadows   = Shadows;
         command.MidTone   = MidTone;
         command.HighLight = HighLight;
         command.Luminance = false;

         // Balance the colors by increasing the red channel values.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void ColorIntensityBalanceCommandExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         ColorIntensityBalanceCommand command       = new ColorIntensityBalanceCommand();
         ColorIntensityBalanceCommandData Shadows   = new ColorIntensityBalanceCommandData();
         ColorIntensityBalanceCommandData MidTone   = new ColorIntensityBalanceCommandData();
         ColorIntensityBalanceCommandData HighLight = new ColorIntensityBalanceCommandData();
         Shadows.Red    = 60;
         Shadows.Blue   = 0;
         Shadows.Green  = 0;

         MidTone.Red    = 40;
         MidTone.Blue   = 0;
         MidTone.Green  = 0;

         HighLight.Red    = 70;
         HighLight.Blue   = 0;
         HighLight.Green  = 0;

         command.Shadows   = Shadows;
         command.MidTone   = MidTone;
         command.HighLight = HighLight;
         command.Luminance = false;

         // Balance the colors by increasing the red channel values.
         command.Run(image);

         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub ColorIntensityBalanceCommandExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As ColorIntensityBalanceCommand = New ColorIntensityBalanceCommand()
         Dim [Shadows] As ColorIntensityBalanceCommandData = New ColorIntensityBalanceCommandData()
         Dim MidTone As ColorIntensityBalanceCommandData = New ColorIntensityBalanceCommandData()
         Dim HighLight As ColorIntensityBalanceCommandData = New ColorIntensityBalanceCommandData()
         [Shadows].Red = 60
         [Shadows].Blue = 0
         [Shadows].Green = 0

         MidTone.Red = 40
         MidTone.Blue = 0
         MidTone.Green = 0

         HighLight.Red = 70
         HighLight.Blue = 0
         HighLight.Green = 0

         command.Shadows = [Shadows]
         command.MidTone = MidTone
         command.HighLight = HighLight
         command.Luminance = False

         ' Balance the colors by increasing the red channel values.
         command.Run(image)

         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <seealso cref="T:Leadtools.Topics.ChangingBrightnessAndContrast">Changing Brightness and Contrast</seealso>.
            <seealso cref="T:Leadtools.Topics.CorrectingColors">Correcting Colors</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ConvertToColoredGrayCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.GrayscaleCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.GrayScaleExtendedCommand"></seealso>.
            <seealso cref="P:Leadtools.RasterImage.IsGray"></seealso>.. L_Sharpen
            <seealso cref="T:Leadtools.ImageProcessing.Color.PosterizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EmbossCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MedianCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.AddNoiseCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.IntensityDetectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SpatialFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.BinaryFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MaximumCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MinimumCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OilifyCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SolarizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.WindowLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AutoColorLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SelectiveColorCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AdjustTintCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.HalfToneCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Color.ColorIntensityBalanceCommand.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Color.ColorIntensityBalanceCommand" /> class object with default parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ColorIntensityBalanceCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.ColorIntensityBalanceCommand.#ctor(Leadtools.ImageProcessing.Color.ColorIntensityBalanceCommandData,Leadtools.ImageProcessing.Color.ColorIntensityBalanceCommandData,Leadtools.ImageProcessing.Color.ColorIntensityBalanceCommandData,System.Boolean)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Color.ColorIntensityBalanceCommand" /> class object with explicit parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <param name="shadows">class used to adjust the dark tones.</param>
      <param name="midTone">class used to adjust the medium tones (midtones).</param>
      <param name="highLight">class used to adjust the bright tones (highlights). </param>
      <param name="luminance">Boolean flag that indicates whether to preserve luminance.
            <br><table><tr><td><b>Value</b></td><td><b>Meaning</b></td></tr><tr><td>true</td><td>Preserve luminance.</td></tr><tr><td>false</td><td>Do not preserve luminance.</td></tr></table></br></param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.ColorIntensityBalanceCommand" /> on an image, and balance the colors by increasing the red channel values.</para>
        <code lang="VB">   Public Sub ColorIntensityBalanceConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim Shadow As ColorIntensityBalanceCommandData = New ColorIntensityBalanceCommandData(60, 0, 0)
      Dim MidTone As ColorIntensityBalanceCommandData = New ColorIntensityBalanceCommandData(40, 0, 0)
      Dim HighLight As ColorIntensityBalanceCommandData = New ColorIntensityBalanceCommandData(70, 0, 0)
      Dim command As ColorIntensityBalanceCommand = New ColorIntensityBalanceCommand(Shadow, MidTone, HighLight, False)

      ' Balance the colors by increasing the red channel values.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void ColorIntensityBalanceConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         ColorIntensityBalanceCommandData Shadows = new ColorIntensityBalanceCommandData(60, 0, 0);
         ColorIntensityBalanceCommandData MidTone = new ColorIntensityBalanceCommandData(40, 0, 0);
         ColorIntensityBalanceCommandData HighLight = new ColorIntensityBalanceCommandData(70, 0, 0);
         ColorIntensityBalanceCommand command = new ColorIntensityBalanceCommand(Shadows, MidTone, HighLight, false);
         // Balance the colors by increasing the red channel values.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void ColorIntensityBalanceConstructorExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         ColorIntensityBalanceCommandData Shadows = new ColorIntensityBalanceCommandData(60, 0, 0);
         ColorIntensityBalanceCommandData MidTone = new ColorIntensityBalanceCommandData(40, 0, 0);
         ColorIntensityBalanceCommandData HighLight = new ColorIntensityBalanceCommandData(70, 0, 0);
         ColorIntensityBalanceCommand command = new ColorIntensityBalanceCommand(Shadows, MidTone, HighLight, false);
         // Balance the colors by increasing the red channel values.
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub ColorIntensityBalanceConstructorExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim [Shadows] As ColorIntensityBalanceCommandData = New ColorIntensityBalanceCommandData(60, 0, 0)
         Dim MidTone As ColorIntensityBalanceCommandData = New ColorIntensityBalanceCommandData(40, 0, 0)
         Dim HighLight As ColorIntensityBalanceCommandData = New ColorIntensityBalanceCommandData(70, 0, 0)
         Dim command As ColorIntensityBalanceCommand = New ColorIntensityBalanceCommand([Shadows], MidTone, HighLight, False)
         ' Balance the colors by increasing the red channel values.
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.ColorIntensityBalanceCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this class.
             <strong> Supported in Silverlight</strong>.
</summary>
      <returns>String that contains the name of this class.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.ColorIntensityBalanceCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.ColorIntensityBalanceCommand.Shadows">
      <summary>
            Gets or sets information in a class used to adjust the dark tones.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>class that contains values used to adjust the dark tones. </value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ColorIntensityBalanceCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.ColorIntensityBalanceCommand.MidTone">
      <summary>
            Gets or sets information in a class used to adjust the medium tones (midtones).
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>class that contains values used to adjust the medium tones (midtones). </value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ColorIntensityBalanceCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.ColorIntensityBalanceCommand.HighLight">
      <summary>
            Gets or sets information in a class used to adjust the bright tones (highlights).
              <strong> Supported in Silverlight</strong>.
</summary>
      <value>class that contains information used to adjust the bright tones (highlights). </value>
      <example>
             Refer to <see cref="T:Leadtools.ImageProcessing.Color.ColorIntensityBalanceCommand" />.
             </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.ColorIntensityBalanceCommand.Luminance">
      <summary>
            Boolean flag that indicates whether to preserve luminance.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value> Boolean value that indicates whether to preserve luminance.
            <br><table><tr><td><b>Value</b></td><td><b>Meaning</b></td></tr><tr><td>true</td><td>Preserve luminance.</td></tr><tr><td>false</td><td>Do not preserve luminance.</td></tr></table></br></value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ColorIntensityBalanceCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.Color.AutoBinaryCommand">
      <summary>
            Applies binary segmentation to the image using an automatically calculated threshold based on a two-peak method of statistical analysis of the histogram. <b>This command is available in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> Toolkits</b>.
             <strong> Supported in Silverlight</strong>.
</summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>The image is transformed into a binary image using a threshold
                        calculated automatically based on statistical features of the image. Best
                        results are obtained with grayscale images.</description>
          </item>
          <item>
            <description>
                            This command supports 12 and 16-bit grayscale and 48 and 64-bit color
                            images. Support for 12 and 16-bit grayscale and 48 and 64-bit color
                            images is available only in the
                            <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.
                        </description>
          </item>
          <item>
            <description>If the image has a region, the effect will be applied on the
                        region only.</description>
          </item>
          <item>
            <description>This command does not support signed data
                        images.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale
                        images.</description>
          </item>
        </list>Use the <see cref="T:Leadtools.ImageProcessing.Color.AutoBinaryCommand" />
                when you simply want to apply binary segmentation to the bitmap using an
                automatically calculated threshold based on a two-peak method of statistical
                analysis on its histogram. Use the
                <see cref="T:Leadtools.ImageProcessing.Color.DynamicBinaryCommand" /> to convert
                an image into a black and white image without changing its bits per pixel. Use the
                <a href="ms-help://Leadtools.DotNet17/Leadtools.ImageProcessing.Core/Leadtools.ImageProcessing.Core~Leadtools.ImageProcessing.Core.AutoBinarizeCommand.html">
                AutoBinarizeCommand</a> if you want: 
                <list type="bullet"><item><description>Automatic pre-processing</description></item><item><description>Pre-processing to include background elimination</description></item><item><description>Pre-processing to include color leveling</description></item><item><description>To perform automatic, percentile or median
                        thresholding</description></item><item><description>To manually specify a threshold value</description></item></list>For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Processing an
                Image</see>.<br />
                For more information, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Leadtools~Leadtools.Topics.RemovingNoise.html">Removing Noise</a>.
            </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.AutoBinaryCommand" /> on an image and apply automatic binary segmentation on it.</para>
        <code lang="VB">   Public Sub AutoBinaryCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As AutoBinaryCommand = New AutoBinaryCommand
      'Apply Auto Binary Segment.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void AutoBinaryCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         AutoBinaryCommand command = new AutoBinaryCommand();
         //Apply Auto Binary Segment.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
      </example>
      <seealso cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Leadtools~Leadtools.Topics.RemovingNoise.html">Removing Noise</seealso>
      <seealso cref="T:Leadtools.ImageProcessing.Effects.SharpenCommand">
      </seealso>
      <seealso cref="T:Leadtools.ImageProcessing.Color.PosterizeCommand">
      </seealso>
      <seealso cref="T:Leadtools.ImageProcessing.Effects.MosaicCommand">
      </seealso>
      <seealso cref="T:Leadtools.ImageProcessing.Effects.EmbossCommand">
      </seealso>
      <seealso cref="T:Leadtools.ImageProcessing.Effects.AverageCommand">
      </seealso>
      <seealso cref="T:Leadtools.ImageProcessing.Core.MedianCommand">
      </seealso>
      <seealso cref="T:Leadtools.ImageProcessing.Effects.AddNoiseCommand">
      </seealso>
      <seealso cref="T:Leadtools.ImageProcessing.Color.IntensityDetectCommand">
      </seealso>
      <seealso cref="T:Leadtools.ImageProcessing.Effects.SpatialFilterCommand">
      </seealso>
      <seealso cref="T:Leadtools.ImageProcessing.Core.MaximumCommand">
      </seealso>
      <seealso cref="T:Leadtools.ImageProcessing.Core.MinimumCommand">
      </seealso>
      <seealso cref="T:Leadtools.ImageProcessing.Effects.OilifyCommand">
      </seealso>
      <seealso cref="T:Leadtools.ImageProcessing.Color.SolarizeCommand">
      </seealso>
      <seealso cref="T:Leadtools.ImageProcessing.Core.WindowLevelCommand">
      </seealso>
      <seealso cref="T:Leadtools.ImageProcessing.Effects.BinaryFilterCommand">
      </seealso>
      <seealso cref="T:Leadtools.ImageProcessing.Color.ColorLevelCommand">
      </seealso>
      <seealso cref="T:Leadtools.ImageProcessing.Effects.BinaryFilterCommand">
      </seealso>
      <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand">
      </seealso>
      <seealso cref="T:Leadtools.ImageProcessing.Core.DeskewCommand">
      </seealso>
      <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DiffuseGlowCommand">
      </seealso>
      <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlowCommand">
      </seealso>
      <seealso cref="T:Leadtools.ImageProcessing.Core.HalfTonePatternCommand">
      </seealso>
      <seealso cref="T:Leadtools.ImageProcessing.Effects.HighPassCommand">
      </seealso>
      <seealso cref="T:Leadtools.ImageProcessing.Effects.MaskConvolutionCommand">
      </seealso>
      <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PerspectiveCommand">
      </seealso>
      <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommand">
      </seealso>
      <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PointillistCommand">
      </seealso>
      <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FragmentCommand">
      </seealso>
      <seealso cref="T:Leadtools.ImageProcessing.Effects.UnsharpMaskCommand">
      </seealso>
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.AutoBinaryCommand.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Color.AutoBinaryCommand" /> with default parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.AutoBinaryCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.AutoBinaryCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this class.
             <strong> Supported in Silverlight</strong>.
</summary>
      <returns>Character string that contains the name of this class.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.AutoBinaryCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="T:Leadtools.ImageProcessing.Color.InvertCommand">
      <summary>
            Inverts the colors in the specified image, giving it the appearance of a photographic
            negative.
             <strong> Supported in Silverlight</strong>.
</summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>This class can also be used to invert the color of a 
            1-bit image, making the black white and the white black.</description>
          </item>
          <item>
            <description>This class supports 12 and 16-bit grayscale and 48 and 64-bit color images. 
            Support for 12 and 16-bit grayscale and 48 and 64-bit color images is available only in the 
            <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
          <item>
            <description>This command supports signed data images.</description>
          </item>
        </list>
        <p>This command changes the image data. If the image has a LUT, 
            the command will work on the LUT not the image data.
            If the image has a LUT and you want to work on the image data, first
            disable the use of the LUT by setting the UseLookupTable Property to
            FALSE. After you are finished applying the command, restore the use of the LUT by 
            setting the UseLookupTable Property to TRUE again. See the following snippet:</p>
        <code>
            image.UseLookupTable = FALSE;
            InvertCmd.Run(image);
            image.UseLookupTable = TRUE;
            </code>
            For more information, refer to <see cref="T:Leadtools.Topics.CorrectingColors">Correcting Colors</see>.<br /></remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.InvertCommand" /> on an image.</para>
        <code lang="VB">   Public Sub InvertCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As InvertCommand = New InvertCommand
      'Invert the colors of the image.

      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void InvertCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         InvertCommand command  = new InvertCommand();
         //Invert the colors of the image.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void InvertCommandExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         InvertCommand command  = new InvertCommand();
         //Invert the colors of the image.
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub InvertCommandExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As InvertCommand = New InvertCommand()
         'Invert the colors of the image.
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <seealso cref="T:Leadtools.Topics.CorrectingColors">Correcting Colors</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.GammaCorrectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeContrastCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.HistogramContrastCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.StretchIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.RemapIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeHueCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeSaturationCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.HistogramEqualizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.FillCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.HistogramCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.WindowLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChannelMixerCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.DeinterlaceCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.DesaturateCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EdgeDetectStatisticalCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.LightControlCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SmoothEdgesCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.LocalHistogramEqualizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AddWeightedCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorMergeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorSeparateCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.MultiplyCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AutoColorLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.CorrelationListCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.GrayScaleToDuotoneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.GrayScaleToMultitoneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.HolePunchRemoveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SelectiveColorCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SkeletonCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeHueSaturationIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorReplaceCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorThresholdCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.MathematicalFunctionCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SegmentCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AdaptiveContrastCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ApplyMathematicalLogicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorIntensityBalanceCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.ColorizeGrayCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ContrastBrightnessIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.DigitalSubtractCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.DynamicBinaryCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EdgeDetectEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MultiscaleEnhancementCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.SelectDataCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.ShiftDataCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AdjustTintCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.HalfToneCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Color.InvertCommand.#ctor">
      <summary>
            Initializes a new InvertCommand class object with default parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.InvertCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.InvertCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this class.
             <strong> Supported in Silverlight</strong>.
</summary>
      <returns>String that is the name of this method.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.InvertCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="T:Leadtools.ImageProcessing.Color.GammaCorrectCommand">
      <summary>
            Adjusts the intensity of colors in an image by changing the gamma constant
            that is used to map the intensity values.
             <strong> Supported in Silverlight</strong>.
</summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>Intensity values ideally follow a logarithmic 
            progression, because the eye perceives changes in intensity as being 
            equal when the ratio of change is equal. For example, we would see a 
            change from 0.1 to 0.2 as being equal to a change from 0.2 to 0.4.</description>
          </item>
          <item>
            <description>Gamma is a standard constant that is used to calculate
            the progression. For most CRTs the gamma constant is in the range of 2.2
            to 2.5.</description>
          </item>
          <item>
            <description>This class supports 12 and 16-bit grayscale and 48 and 64-bit color images. 
            Support for 12 and 16-bit grayscale and 48 and 64-bit color images is available only in 
            the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
        <p>For more information, refer to 
            <see cref="T:Leadtools.Topics.ChangingBrightnessAndContrast">Changing Brightness and Contrast</see>.</p>
        <p>If the image has a LUT and you want to work on the image data, set 
            <see cref="P:Leadtools.RasterImage.UseLookupTable">RasterImage.UseLookupTable</see> 
            to false. Then, after calling the method, reset the 
            <see cref="P:Leadtools.RasterImage.UseLookupTable">UselookupTable property</see> to true, as follows:
            </p>
        <code>
            rasterImage.UseLookupTable = false;
            Method(rasterImage);
            
            rasterImage.UseLookupTable = true;
            </code>
      </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.GammaCorrectCommand" /> on an image and apply gamma correction.</para>
        <code lang="VB">   Public Sub GammaCorrectCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As GammaCorrectCommand = New GammaCorrectCommand
      'Set a gamma value of 2.5.
      command.Gamma = 250

      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void GammaCorrectCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         GammaCorrectCommand command  = new GammaCorrectCommand();
         //Set a gamma value of 2.5.
         command.Gamma   = 250;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void GammaCorrectCommandExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         GammaCorrectCommand command  = new GammaCorrectCommand();
         //Set a gamma value of 2.5.
         command.Gamma   = 250;
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub GammaCorrectCommandExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As GammaCorrectCommand = New GammaCorrectCommand()
         'Set a gamma value of 2.5.
         command.Gamma = 250
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <seealso cref="T:Leadtools.Topics.ChangingBrightnessAndContrast">Changing Brightness and Contrast</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeContrastCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.HistogramContrastCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.StretchIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.RemapIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.InvertCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeHueCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeSaturationCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.HistogramEqualizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.FillCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.HistogramCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.WindowLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChannelMixerCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.DeinterlaceCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.DesaturateCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EdgeDetectStatisticalCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.LightControlCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SmoothEdgesCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.LocalHistogramEqualizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AddWeightedCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorMergeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorSeparateCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.MultiplyCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AutoColorLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.CorrelationListCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.GrayScaleToDuotoneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.GrayScaleToMultitoneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.HolePunchRemoveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SelectiveColorCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SkeletonCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeHueSaturationIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorReplaceCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorThresholdCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.MathematicalFunctionCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SegmentCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AdaptiveContrastCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ApplyMathematicalLogicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorIntensityBalanceCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.ColorizeGrayCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ContrastBrightnessIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.DigitalSubtractCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.DynamicBinaryCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EdgeDetectEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MultiscaleEnhancementCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.SelectDataCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.ShiftDataCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AdjustTintCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.GammaCorrectCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Color.GammaCorrectCommand.#ctor">
      <summary>
            Initializes a new GammaCorrectCommand class object with default parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.GammaCorrectCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.GammaCorrectCommand.#ctor(System.Int32)">
      <summary>
            Initializes a new GammaCorrectCommand class object with explicit parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <param name="gamma">Integer that represents the gamma value. It can be
            any number greater than 0.
            <br />Because this is an unsigned integer (Integer with values greater 
            than 0), it is 100 times the actual gamma value. For example, use 
            235 to set a gamma value of 2.35.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.GammaCorrectCommand" /> on an image and apply gamma correction.</para>
        <code lang="VB">   Public Sub GammaCorrectConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      'Set a gamma value of 2.5.
      Dim command As GammaCorrectCommand = New GammaCorrectCommand(250)
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void GammaCorrectConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         //Set a gamma value of 2.5.
         GammaCorrectCommand command  = new GammaCorrectCommand(250);
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void GammaCorrectConstructorExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         //Set a gamma value of 2.5.
         GammaCorrectCommand command  = new GammaCorrectCommand(250);
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub GammaCorrectConstructorExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         'Set a gamma value of 2.5.
         Dim command As GammaCorrectCommand = New GammaCorrectCommand(250)
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.GammaCorrectCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this class.
             <strong> Supported in Silverlight</strong>.
</summary>
      <returns>String that contains the name of this class.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.GammaCorrectCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.GammaCorrectCommand.Gamma">
      <summary>
            Gets or sets an integer that represents the gamma value.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Integer that represents the gamma value. It can be any number 
            greater than 0.
            <br />Because this is an unsigned integer (Integer with values greater 
            than 0), it is 100 times the actual gamma value. For example, use 
            235 to set a gamma value of 2.35.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.GammaCorrectCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.Color.SegmentCommandFlags">
      <summary>
            This enumeration indicates the color space used in the segmentation.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.SegmentCommandFlags.None">
      <summary>
            No Flags selected.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.SegmentCommandFlags.Rgb">
      <summary>
            Comparison done on red, green and blue difference.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.SegmentCommandFlags.Y">
      <summary>
            Comparison done on Y channel difference of YUV space.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.SegmentCommandFlags.U">
      <summary>
            Comparison done on U channel difference of YUV space.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.SegmentCommandFlags.V">
      <summary>
            Comparison done on V channel difference of YUV space.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.SegmentCommandFlags.Uv">
      <summary>
             Comparison done on U and V channels difference of YUV space.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.SegmentCommandFlags.NgtvUv">
      <summary>
            Consider negative values of U and V of YUV color space. This flag is used only with U or V flags.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.Color.SegmentCommand">
      <summary>
            Divides the image into segments where each segment's pixels have 
            approximately the same color (homogenous color). This command is 
            available in the <see cref="T:Leadtools.Topics.RasterProDocMed">Raster Pro</see> and above toolkits.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>This command divides the images into segments 
            according to its pixel values . The segment shapes will be arbitrary. 
            Adjacent pixels with approximately the same values are put together into
            homogenous segments. The command may be performed on the RGB and YUV 
            color spaces.</description>
          </item>
          <item>
            <description>This command supports 12 and 16-bit grayscale and 48 and 64-bit color images. Support for 12 and 16-bit grayscale and 48 and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support signed data images.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.<br />
            For more information, refer to <see cref="T:Leadtools.Topics.ApplyingArtisticEffects">Applying Artistic Effects</see>.
            </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.SegmentCommand" /> on an image.</para>
        <code lang="VB">   Public Sub SegmentCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As SegmentCommand = New SegmentCommand
      command.Threshold = 20
      command.Flags = SegmentCommandFlags.Rgb
      'segment the image.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void SegmentCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         SegmentCommand command = new SegmentCommand();
         command.Threshold      = 20;
         command.Flags          = SegmentCommandFlags.Rgb;
         //segment the image.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void SegmentCommandExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         SegmentCommand command = new SegmentCommand();
         command.Threshold      = 20;
         command.Flags          = SegmentCommandFlags.Rgb;
         //segment the image.
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub SegmentCommandExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As SegmentCommand = New SegmentCommand()
         command.Threshold = 20
         command.Flags = SegmentCommandFlags.Rgb
         'segment the image.
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <seealso cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</seealso>.
            <seealso cref="T:Leadtools.Topics.ApplyingArtisticEffects">Applying Artistic Effects</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.GammaCorrectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeContrastCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.HistogramContrastCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.StretchIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.RemapIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.InvertCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeHueCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeSaturationCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.FillCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.HistogramCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SharpenCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EmbossCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MedianCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.AddNoiseCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.IntensityDetectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SpatialFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.BinaryFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MaximumCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MinimumCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OilifyCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SolarizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.WindowLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.PosterizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeHueSaturationIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorReplaceCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorThresholdCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.DiscreteFourierTransformCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.DirectionEdgeStatisticalCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.FastFourierTransformCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.FrequencyFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.FrequencyFilterMaskCommand"></seealso>.
            <seealso cref="M:Leadtools.ImageProcessing.Effects.EffectsUtilities.GetRegionPerimeterLength(Leadtools.RasterImage,Leadtools.RasterRegionXForm)"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.MathematicalFunctionCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RevEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.SubtractBackgroundCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.UserFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.HighPassCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CanvasCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CloudsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DiffuseGlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.DisplacementCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FragmentCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.HalfTonePatternCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MaskConvolutionCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OffsetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PerspectiveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PointillistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RomanMosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.VignnetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZigZagCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Color.SegmentCommand.#ctor">
      <summary>
            Initializes a new SegmentCommand class object with default parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.SegmentCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.SegmentCommand.#ctor(System.Int32,Leadtools.ImageProcessing.Color.SegmentCommandFlags)">
      <summary>
            Initializes a new SegmentCommand class object with explicit parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <param name="threshold">The tolerance value of each segment. Valid 
            values for this parameter are: 0 to 255 for 1, 2, 3, 4, 5, 6, 7, 8, 24,
            and 32-bit images, 0 to 4095 for 12-bit images and 0 to 65535 for 16,
            48, and 64-bit images.</param>
      <param name="flags">Flag that indicates the color space used in the segmentation. For a list of possible values, refer to
            <see cref="T:Leadtools.ImageProcessing.Color.SegmentCommandFlags" />.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.SegmentCommand" /> on an image.</para>
        <code lang="VB">   Public Sub SegmentConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As SegmentCommand = New SegmentCommand(20, SegmentCommandFlags.Rgb)
      ' segment the image.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void SegmentConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         SegmentCommand command = new SegmentCommand(20, SegmentCommandFlags.Rgb);
         // segment the image.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void SegmentConstructorExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         SegmentCommand command = new SegmentCommand(20, SegmentCommandFlags.Rgb);
         // segment the image.
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub SegmentConstructorExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As SegmentCommand = New SegmentCommand(20, SegmentCommandFlags.Rgb)
         ' segment the image.
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.SegmentCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this command.
             <strong> Supported in Silverlight</strong>.
</summary>
      <returns>String that contains the name of this command.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.SegmentCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.SegmentCommand.Threshold">
      <summary>
            Gets or sets the tolerance value of each segment.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>The tolerance value of each segment.  
            Valid values for this property are: 0 to 255 for 1, 2, 3, 4, 5, 6, 
            7, 8, 24, and 32-bit images, 0 to 4095 for 12-bit images and 0 to 
            65535 for 16, 48, and 64-bit images.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.SegmentCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.SegmentCommand.Flags">
      <summary>
            Gets or sets a flag that indicates the color space used in the segmentation.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Flag that indicates the color space used in the segmentation. For a list of possible values,
            refer to <see cref="T:Leadtools.ImageProcessing.Color.SegmentCommandFlags" />.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.SegmentCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.Color.LineProfileCommand">
      <summary>
            Allocates three arrays and updates them with the R, G and B profile for 
            each pixel in a specific line.
             <strong> Supported in Silverlight</strong>.
</summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>This class supports 12 and 16-bit grayscale and 48 and 64-bit color images. Support for 12 and 16-bit grayscale and 48 and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits. </description>
          </item>
          <item>
            <description>This command support signed images.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.<br /></remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.LineProfileCommand" /> on an image.</para>
        <code lang="VB">   Public Sub LineProfileCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As LineProfileCommand = New LineProfileCommand
      Dim redData() As Integer
      Dim greenData() As Integer
      Dim blueData() As Integer

      command.FirstPoint = New LeadPoint(0, 0)
      command.SecondPoint = New LeadPoint(50, 50)
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)
      redData = command.RedBuffer
      greenData = command.GreenBuffer
      blueData = command.BlueBuffer

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void LineProfileCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         LineProfileCommand command = new LineProfileCommand();
         int [] redData;
         int [] greenData;
         int [] blueData;
         command.FirstPoint  = new LeadPoint(0,0);
         command.SecondPoint = new LeadPoint(50, 50);
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);
         redData    = command.RedBuffer;
         greenData  = command.GreenBuffer;
         blueData   = command.BlueBuffer;

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void LineProfileCommandExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         LineProfileCommand command = new LineProfileCommand();
         int [] redData;
         int [] greenData;
         int [] blueData;
         command.FirstPoint  = new LeadPoint(0,0);
         command.SecondPoint = new LeadPoint(50, 50);
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();

         redData    = command.RedBuffer;
         greenData  = command.GreenBuffer;
         blueData   = command.BlueBuffer;
      }</code>
        <code lang="SilverlightVB">      Public Sub LineProfileCommandExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As LineProfileCommand = New LineProfileCommand()
         Dim redData As Integer()
         Dim greenData As Integer()
         Dim blueData As Integer()
         command.FirstPoint = New LeadPoint(0,0)
         command.SecondPoint = New LeadPoint(50, 50)
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()

         redData = command.RedBuffer
         greenData = command.GreenBuffer
         blueData = command.BlueBuffer
      End Sub</code>
      </example>
      <seealso cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.ClearCommand"></seealso>.
            <seealso cref="M:Leadtools.RasterImage.GetRow(System.Int32,System.IntPtr,System.Int32)"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Color.LineProfileCommand.#ctor">
      <summary>
            Initializes a new LineProfileCommand class object with default parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.LineProfileCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.LineProfileCommand.#ctor(Leadtools.LeadPoint,Leadtools.LeadPoint)">
      <summary>
            Initializes a new LineProfileCommand class object with explicit parameters. The RedBuffer, GreenBuffer and BlueBuffer properties are updated with the corresponding color information about the pixels between the points specified in  the firstPoint and secondPoint parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <param name="firstPoint">The starting point for the line.</param>
      <param name="secondPoint">The end point for the line.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.LineProfileCommand" /> on an image.</para>
        <code lang="VB">   Public Sub LineProfileConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As LineProfileCommand = New LineProfileCommand(New LeadPoint(0, 0), New LeadPoint(50, 50))
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      Dim redData() As Integer = command.RedBuffer
      Dim greenData() As Integer = command.GreenBuffer
      Dim blueData() As Integer = command.BlueBuffer

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void LineProfileConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         LineProfileCommand command = new LineProfileCommand(new LeadPoint(0,0), new LeadPoint(50,50));
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         int [] redData = command.RedBuffer;
         int [] greenData = command.GreenBuffer;
         int [] blueData = command.BlueBuffer;

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void LineProfileConstructorExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         LineProfileCommand command = new LineProfileCommand(new LeadPoint(0, 0), new LeadPoint(50, 50));
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();

         int [] redData = command.RedBuffer;
         int [] greenData = command.GreenBuffer;
         int [] blueData = command.BlueBuffer;
      }</code>
        <code lang="SilverlightVB">      Public Sub LineProfileConstructorExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As LineProfileCommand = New LineProfileCommand(New LeadPoint(0, 0), New LeadPoint(50, 50))
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()

         Dim redData As Integer() = command.RedBuffer
         Dim greenData As Integer() = command.GreenBuffer
         Dim blueData As Integer() = command.BlueBuffer
      End Sub</code>
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.LineProfileCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this class.
             <strong> Supported in Silverlight</strong>.
</summary>
      <returns>String that contains the name of this class.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.LineProfileCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.LineProfileCommand.FirstPoint">
      <summary>
            Gets or sets the starting point for the line.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>The starting point for the line. </value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.LineProfileCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.LineProfileCommand.SecondPoint">
      <summary>
            Gets or sets the end point for the line.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>The end point for the line.
            </value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.LineProfileCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.LineProfileCommand.RedBuffer">
      <summary>
            Array that is allocated and updated with the red values 
            for the line specified by the FirstPoint and SecondPoint properties.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Array that is allocated and updated with the red values 
            for the line specified by the FirstPoint and SecondPoint properties.
            The array is allocated by this class.
            </value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.LineProfileCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.LineProfileCommand.GreenBuffer">
      <summary>
            Array that is allocated and updated with the green values 
            for the line specified by the FirstPoint and SecondPoint properties.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Array that is allocated and updated with the green values 
            for the line specified by the FirstPoint and SecondPoint properties.
            The array is allocated by this class.
            </value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.LineProfileCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.LineProfileCommand.BlueBuffer">
      <summary>
            Array that ise allocated and updated with the blue values 
            for the line specified by the FirstPoint and SecondPoint properties.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>
            Gets an array that is allocated and updated with the blue values for the line specified by the FirstPoint and SecondPoint properties.
            The array is allocated by this class.
            </value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.LineProfileCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.Color.GrayScaleToDuotoneCommand">
      <summary>
            Converts the grayscale image into a colored one by mixing or replacing the original values of the pixels with new colors. This class is available in the <see cref="T:Leadtools.Topics.RasterProDocMed">Raster Pro</see> and above toolkits.
             <strong> Supported in Silverlight</strong>.
</summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>This class was designed for use with grayscale images. If the image being used is not grayscale, this method only affects those pixels or areas of the image where Red = Green = Blue.</description>
          </item>
          <item>
            <description>This class transforms the 8-bit grayscale images into colored 8-bit images (Palette) meanwhile the 12-bit and 16-bit grayscale images are transformed into a 48-bit colored image.</description>
          </item>
          <item>
            <description>Monotone conversion is possible by setting <see cref="T:Leadtools.ImageProcessing.Color.GrayScaleToDuotoneCommandMixingType" /> to ReplaceOldWithNew, which clears the palette.</description>
          </item>
          <item>
            <description>This method gives you the option of having the toolkit generate the array of colors to use or creating the array of colors to use yourself.</description>
          </item>
          <item>
            <description>To have the toolkit generate the array of colors, pass the color to use for generating the array of gradient colors in the Color property.<br /><list type="bullet"><item><description>If the image is binary, the <see cref="P:Leadtools.RasterImage.GrayscaleMode" /> property is used to determine the kind of grayscale palette being used. If the <see cref="P:Leadtools.RasterImage.GrayscaleMode" /> property is <see cref="P:Leadtools.RasterImage.GrayscaleMode" />.OrderedInverse or <see cref="P:Leadtools.RasterImage.GrayscaleMode" />.NotOrdered, then the color set in the Color property for the GrayScaleToDuotoneCommand will become the first color in the array generated by the toolkit, NewColor[0], and the toolkit will create the second color in the array NewColor[1]. If the <see cref="P:Leadtools.RasterImage.GrayscaleMode" /> property is a value other than <see cref="P:Leadtools.RasterImage.GrayscaleMode" />.OrderedInverse or <see cref="P:Leadtools.RasterImage.GrayscaleMode" />.NotOrdered, then the color set in the Color property for the GrayScaleToDuotoneCommand will become the second color in the array generated by the toolkit, NewColor[1], and the toolkit will create the first color in the array NewColor[0].</description></item><item><description>If the image is grayscale (not binary) the GrayScaleToDuotoneCommand will use the color set in the Color property and generate a 256 color gradient in NewColor.</description></item><item><description>If the image is not grayscale (it is color) then the GrayScaleToDuotoneCommand will use the color set in the Color property and generate a 256 color gradient in NewColor. These colors will be used to change only those pixels in the color image for which Red = Green = Blue.</description></item></list></description>
          </item>
          <item>
            <description>To use a user-defined array of colors:<br /><list type="bullet"><item><description>If the image is binary, call GrayScaleToDuotoneCommand with the two colors you wish to use in the NewColor property.</description></item><item><description>If the image is grayscale (not binary) call GrayScaleToDuotoneCommand with the 256 colors you wish to use in the NewColor property.</description></item><item><description>If the image is not grayscale (it is color) call GrayScaleToDuotoneCommand with the 256 colors you wish to use in the NewColor property. These colors will be used to change only those pixels in the color image for which Red = Green = Blue.</description></item></list></description>
          </item>
          <item>
            <description>This class supports 12 and 16-bit grayscale and 48 and 64-bit color images. Support for 12 and 16-bit grayscale and 48 and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This class does not support signed data images.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.<br />
            For more information, refer to <see cref="T:Leadtools.Topics.GrayScaleImages">Grayscale Images</see>.
            </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.GrayScaleToDuotoneCommand" /> on an image.</para>
        <code lang="VB">   Public Sub GrayScaleToDuetoneCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As GrayScaleToDuotoneCommand = New GrayScaleToDuotoneCommand
      'Apply duotone conversion.
      command.Type = GrayScaleToDuotoneCommandMixingType.ReplaceOldWithNew
      command.Color = New RasterColor(255, 0, 0)
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void GrayScaleToDuotoneCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         GrayScaleToDuotoneCommand command = new GrayScaleToDuotoneCommand();
         //Apply duotone conversion.
         command.Type = GrayScaleToDuotoneCommandMixingType.ReplaceOldWithNew;
         command.Color = new Leadtools.RasterColor(255, 0, 0);
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void GrayScaleToDuotoneCommandExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         GrayScaleToDuotoneCommand command = new GrayScaleToDuotoneCommand();
         //Apply duotone conversion.
         command.Type = GrayScaleToDuotoneCommandMixingType.ReplaceOldWithNew;
         command.Color = new Leadtools.RasterColor(255, 0, 0);
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub GrayScaleToDuotoneCommandExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As GrayScaleToDuotoneCommand = New GrayScaleToDuotoneCommand()
         'Apply duotone conversion.
         command.Type = GrayScaleToDuotoneCommandMixingType.ReplaceOldWithNew
         command.Color = New RasterColor(255, 0, 0)
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <seealso cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</seealso>.
            <seealso cref="T:Leadtools.Topics.GrayScaleImages">Grayscale Images</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.GrayscaleCommand"></seealso>.
            <seealso cref="P:Leadtools.RasterImage.IsGray"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.GrayScaleToMultitoneCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Color.GrayScaleToDuotoneCommand.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Color.GrayScaleToDuotoneCommand" /> class object with default parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.GrayScaleToDuotoneCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.GrayScaleToDuotoneCommand.#ctor(Leadtools.RasterColor[],Leadtools.RasterColor,Leadtools.ImageProcessing.Color.GrayScaleToDuotoneCommandMixingType)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Color.GrayScaleToDuotoneCommand" /> class object with explicit parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <param name="newColor">Array of <see cref="T:Leadtools.RasterColor" /> structures that specifies colors that will be mixed with the original gray values. If this parameter is set to null, the Color property must contain a valid color.  Pass null when you want the command to create the array of colors, two colors when replacing both colors in a binary image, or 256 colors when using a custom array of colors.</param>
      <param name="color">Used to create an array of colors internally. This parameter is used when the NewColor structure is set to null. This parameter is ignored if the NewColor value is something other than null.</param>
      <param name="type">Enumeration that indicates whether colors will be mixed or replaced.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.GrayScaleToDuotoneCommand" /> on an image.</para>
        <code lang="VB">   Public Sub GrayScaleToDuetoneConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim array() As RasterColor
      Dim i As Integer
      ReDim array(255)

      For i = 0 To 255
         array(i) = New RasterColor(255, CType(i \ 4, Byte), CType(i, Byte))
      Next

      'Apply duotone conversion.
      Dim command As GrayScaleToDuotoneCommand = New GrayScaleToDuotoneCommand(array, Nothing, GrayScaleToDuotoneCommandMixingType.ReplaceOldWithNew)
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void GrayScaleToDuotoneConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         RasterColor[] array = new RasterColor[256];

         for (int i = 0; i &lt; 256; i++)
            array[i] = new RasterColor(255, (byte)(i / 4), (byte)(i));

         //Apply duotone conversion.
         GrayScaleToDuotoneCommand command = new GrayScaleToDuotoneCommand(array, new RasterColor(0, 0, 0), GrayScaleToDuotoneCommandMixingType.ReplaceOldWithNew);
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void GrayScaleToDuotoneConstructorExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         RasterColor[] array = new RasterColor[256];
         for (int i = 0; i &lt; 256; i++)
            array[i] = new RasterColor(255, (byte)(i / 4), (byte)(i));

         //Apply duotone conversion.
         GrayScaleToDuotoneCommand command = new GrayScaleToDuotoneCommand(array, new RasterColor(0, 0, 0), GrayScaleToDuotoneCommandMixingType.ReplaceOldWithNew);
         command.Run(image);

         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub GrayScaleToDuotoneConstructorExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim array As RasterColor() = New RasterColor(255){}
         For i As Integer = 0 To 255
            array(i) = New RasterColor(255, CByte(i / 4), CByte(i))
         Next i

         'Apply duotone conversion.
         Dim command As GrayScaleToDuotoneCommand = New GrayScaleToDuotoneCommand(array, New RasterColor(0, 0, 0), GrayScaleToDuotoneCommandMixingType.ReplaceOldWithNew)
         command.Run(image)

         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.GrayScaleToDuotoneCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this class.
             <strong> Supported in Silverlight</strong>.
</summary>
      <returns>String that contains the name of this class.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.GrayScaleToDuotoneCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.GrayScaleToDuotoneCommand.NewColor">
      <summary>
            Array of <see cref="T:Leadtools.RasterColor" /> structures that specifies an array of colors that will be mixed with the original gray values.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Array of <see cref="T:Leadtools.RasterColor" /> structures that specifies an array of colors that will be mixed with the original gray values. If this parameter is set to null, the Color property must contain a valid color.  Pass null when you want the command to create the array of colors, two colors when replacing both colors in a binary image, or 256 colors when using a custom array of colors.</value>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.GrayScaleToDuotoneCommand" /> on an image.</para>
        <code lang="VB">   Public Sub NewColorPropertyExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As GrayScaleToDuotoneCommand = New GrayScaleToDuotoneCommand
      Dim array() As RasterColor
      Dim i As Integer
      ReDim array(255)

      For i = 0 To 255
         array(i) = New RasterColor(255, CType(i \ 4, Byte), CType(i, Byte))
      Next

      'Apply duotone conversion.
      command.Type = GrayScaleToDuotoneCommandMixingType.ReplaceOldWithNew
      command.NewColor = array
      command.Run(leadImage)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void NewColorPropertyExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         RasterColor[] array = new RasterColor[256];
         for (int i = 0; i &lt; 256; i++)
            array[i] = new RasterColor(255, (byte)(i / 4), (byte)(i));

         //Apply duotone conversion.
         GrayScaleToDuotoneCommand command = new GrayScaleToDuotoneCommand();
         command.Run(image);
         command.Type = GrayScaleToDuotoneCommandMixingType.ReplaceOldWithNew;
         command.NewColor = array;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void NewColorPropertyExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         RasterColor[] array = new RasterColor[256];
         for (int i = 0; i &lt; 256; i++)
            array[i] = new RasterColor(255, (byte)(i / 4), (byte)(i));
         //Apply duotone conversion.
         GrayScaleToDuotoneCommand command = new GrayScaleToDuotoneCommand();
         command.Run(image);
         command.Type = GrayScaleToDuotoneCommandMixingType.ReplaceOldWithNew;
         command.NewColor = array;
         command.Run(image);

         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub NewColorPropertyExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim array As RasterColor() = New RasterColor(255){}
         For i As Integer = 0 To 255
            array(i) = New RasterColor(255, CByte(i / 4), CByte(i))
         Next i
         'Apply duotone conversion.
         Dim command As GrayScaleToDuotoneCommand = New GrayScaleToDuotoneCommand()
         command.Run(image)
         command.Type = GrayScaleToDuotoneCommandMixingType.ReplaceOldWithNew
         command.NewColor = array
         command.Run(image)

         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.GrayScaleToDuotoneCommand.Color">
      <summary>
            Gets or sets an array of colors for internal use.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>An array of colors for internal use. This parameter is used when the NewColor structure is set to null. This parameter is ignored if the NewColor value is something other than null.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.GrayScaleToDuotoneCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.GrayScaleToDuotoneCommand.Type">
      <summary>
            Gets or sets flags that indicate whether colors will be mixed or replaced. 
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Value that indicates whether colors will be mixed or replaced.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.GrayScaleToDuotoneCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.Color.ColorCountCommand">
      <summary>
            Gets the number of unique colors in an image.
             <strong> Supported in Silverlight</strong>.
</summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>This command supports 12 and 16-bit grayscale images. Support for 12 and 16-bit grayscale images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command supports 32-bit grayscale images.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.ColorCountCommand" /> on an image and display the number of unique colors in the specified image.</para>
        <code lang="VB">   Public Sub ColorCountCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As ColorCountCommand = New ColorCountCommand
      Dim colorCount As Integer
      'Get the number of colors in the image.

      command.Run(leadImage)
      colorCount = command.ColorCount
      MessageBox.Show("The image has " + colorCount.ToString() + " colors", "ColorCountCommand Results", MessageBoxButtons.OK)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void ColorCountCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         ColorCountCommand command = new ColorCountCommand();
         int colorCount;
         //Get the number of colors in the image.
         command.Run(image);
         colorCount = command.ColorCount;
         MessageBox.Show("The image has " + colorCount.ToString() + " colors","ColorCountCommand Results",MessageBoxButtons.OK);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void ColorCountCommandExample(RasterImage image)
      {
         // Prepare the command
         ColorCountCommand command = new ColorCountCommand();
         int colorCount;
         //Get the number of colors in the image.
         command.Run(image);
         colorCount = command.ColorCount;
         Debug.WriteLine("The image has " + colorCount.ToString() + " colors","ColorCountCommand Results", MessageBoxButton.OK);
      }</code>
        <code lang="SilverlightVB">      Public Sub ColorCountCommandExample(ByVal image As RasterImage)
         ' Prepare the command
         Dim command As ColorCountCommand = New ColorCountCommand()
         Dim colorCount As Integer
         'Get the number of colors in the image.
         command.Run(image)
         colorCount = command.ColorCount
         Debug.WriteLine("The image has " &amp; colorCount.ToString() &amp; " colors","ColorCountCommand Results", MessageBoxButton.OK)
      End Sub</code>
      </example>
      <seealso cref="T:Leadtools.ImageProcessing.Core.WindowLevelCommand">
      </seealso>.
            <seealso cref="T:Leadtools.Topics.ColorHalftoneandHalftoneImages">Color Halftone and Halftone Images</seealso>.
            <keywords>Unique colors</keywords><keywords>Number of colors</keywords></member>
    <member name="M:Leadtools.ImageProcessing.Color.ColorCountCommand.#ctor">
      <summary>
            Initializes a new ColorCountCommand class object with default parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ColorCountCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.ColorCountCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this class.
             <strong> Supported in Silverlight</strong>.
</summary>
      <returns>String that contains the name of this class.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.ColorCountCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.ColorCountCommand.ColorCount">
      <summary>
            (Read only) Gets the number of unique colors in an image.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>The number of unique colors in an image.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ColorCountCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.Color.ChangeContrastCommand">
      <summary>
            Increases or decreases the contrast of the image.
             <strong> Supported in Silverlight</strong>.
</summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>This command supports 12 and 16-bit grayscale and 48 and 64-bit color images. Support for 12 and 16-bit grayscale and 48 and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
        <p>If the image has a LUT and you want to work on the image data, set 
            <see cref="P:Leadtools.RasterImage.UseLookupTable">RasterImage.UseLookupTable</see> 
            to false. Then, after calling the method, reset the 
            <see cref="P:Leadtools.RasterImage.UseLookupTable">UselookupTable property</see> to true, as follows:
            </p>
        <code>
            rasterImage.UseLookupTable = false;
            Method(rasterImage);
            
            rasterImage.UseLookupTable = true;
            </code>
            For more information, refer to <see cref="T:Leadtools.Topics.ChangingBrightnessAndContrast">Changing Brightness and Contrast</see>.
            </remarks>
      <example>
        <para>Runs the <see cref="T:Leadtools.ImageProcessing.Color.ChangeContrastCommand" /> on an image and increases its contrast.</para>
        <code lang="VB">   Public Sub ChangeContrastCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As ChangeContrastCommand = New ChangeContrastCommand
      'Increase the contrast  by 25 percent  of the possible range.
      command.Contrast = 250

      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void ChangeContrastCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         ChangeContrastCommand command = new ChangeContrastCommand();
         //Increase the contrast  by 25 percent  of the possible range.
         command.Contrast = 250;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void ChangeContrastCommandExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         ChangeContrastCommand command = new ChangeContrastCommand();
         //Increase the contrast  by 25 percent  of the possible range.
         command.Contrast = 250;
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub ChangeContrastCommandExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As ChangeContrastCommand = New ChangeContrastCommand()
         'Increase the contrast  by 25 percent  of the possible range.
         command.Contrast = 250
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <seealso cref="T:Leadtools.Topics.ChangingBrightnessAndContrast">Changing Brightness and Contrast</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.GammaCorrectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.HistogramContrastCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.StretchIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.RemapIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.InvertCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeHueCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeSaturationCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.HistogramEqualizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.FillCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.HistogramCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.WindowLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChannelMixerCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.DeinterlaceCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.DesaturateCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.LightControlCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SmoothEdgesCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.LocalHistogramEqualizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AddWeightedCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorMergeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorSeparateCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.MultiplyCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AutoColorLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.CorrelationListCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.GrayScaleToDuotoneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.GrayScaleToMultitoneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.HolePunchRemoveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SelectiveColorCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SkeletonCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeHueSaturationIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorReplaceCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorThresholdCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.MathematicalFunctionCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SegmentCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AdaptiveContrastCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ApplyMathematicalLogicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorIntensityBalanceCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.ColorizeGrayCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ContrastBrightnessIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.DigitalSubtractCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.DynamicBinaryCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MultiscaleEnhancementCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.SelectDataCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.ShiftDataCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AdjustTintCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.GammaCorrectCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Color.ChangeContrastCommand.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Color.ChangeContrastCommand" /> class object with default parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ChangeContrastCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.ChangeContrastCommand.#ctor(System.Int32)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Color.ChangeContrastCommand" /> class object with explicit parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <param name="contrast">Amount of contrast change. Valid values are -1000 to +1000.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.ChangeContrastCommand" /> on an image and increase its contrast.</para>
        <code lang="VB">   Public Sub ChangeContrastConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As ChangeContrastCommand = New ChangeContrastCommand(250)
      'Increase the contrast  by 25 percent  of the possible range.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void ChangeContrastConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         ChangeContrastCommand command = new ChangeContrastCommand(250);

         // Increase the contrast  by 25 percent  of the possible range.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void ChangeContrastConstructorExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         ChangeContrastCommand command = new ChangeContrastCommand(250);
         // Increase the contrast  by 25 percent  of the possible range.
         command.Run(image);

         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub ChangeContrastConstructorExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As ChangeContrastCommand = New ChangeContrastCommand(250)
         ' Increase the contrast  by 25 percent  of the possible range.
         command.Run(image)

         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.ChangeContrastCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this class.
             <strong> Supported in Silverlight</strong>.
</summary>
      <returns>Character string that contains the name of this class.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.ChangeContrastCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.ChangeContrastCommand.Contrast">
      <summary>
            Gets or sets the amount of contrast change.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Amount of contrast change. Valid values are -1000 to +1000.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ChangeContrastCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.Color.SelectiveCommandColorTypes">
      <summary>
            This enumerated type serves as an index into an array of <see cref="T:Leadtools.ImageProcessing.Color.SelectiveColorCommandData" /> classes. The class at the index contains information on the corresponding color.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.SelectiveCommandColorTypes.Red">
      <summary>
            Index into the array of <see cref="T:Leadtools.ImageProcessing.Color.SelectiveColorCommandData" /> classes (ColorsData property or the colorsData parameter of the constructor). The class at this index contains information on the Red values.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.SelectiveCommandColorTypes.Yellow">
      <summary>
            Index into the array of <see cref="T:Leadtools.ImageProcessing.Color.SelectiveColorCommandData" /> classes (ColorsData property or the colorsData parameter of the constructor). The class at this index contains information on the Yellow values.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.SelectiveCommandColorTypes.Green">
      <summary>
            Index into the array of <see cref="T:Leadtools.ImageProcessing.Color.SelectiveColorCommandData" /> classes (ColorsData property or the colorsData parameter of the constructor). The class at this index contains information on the Green values.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.SelectiveCommandColorTypes.Cyan">
      <summary>
            Index into the array of <see cref="T:Leadtools.ImageProcessing.Color.SelectiveColorCommandData" /> classes (ColorsData property or the colorsData parameter of the constructor). The class at this index contains information on the Cyan values.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.SelectiveCommandColorTypes.Blue">
      <summary>
            Index into the array of <see cref="T:Leadtools.ImageProcessing.Color.SelectiveColorCommandData" /> classes (ColorsData property or the colorsData parameter of the constructor). The class at this index contains information on the Blue values.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.SelectiveCommandColorTypes.Magenta">
      <summary>
            Index into the array of <see cref="T:Leadtools.ImageProcessing.Color.SelectiveColorCommandData" /> classes (ColorsData property or the colorsData parameter of the constructor). The class at this index contains information on the Magenta values.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.SelectiveCommandColorTypes.White">
      <summary>
            Index into the array of <see cref="T:Leadtools.ImageProcessing.Color.SelectiveColorCommandData" /> classes (ColorsData property or the colorsData parameter of the constructor). The class at this index contains information on the White values.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.SelectiveCommandColorTypes.Neutral">
      <summary>
            Index into the array of <see cref="T:Leadtools.ImageProcessing.Color.SelectiveColorCommandData" /> classes (ColorsData property or the colorsData parameter of the constructor). The class at this index contains information on the Neutral values.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.SelectiveCommandColorTypes.Black">
      <summary>
            Index into the array of <see cref="T:Leadtools.ImageProcessing.Color.SelectiveColorCommandData" /> classes (ColorsData property or the colorsData parameter of the constructor). The class at this index contains information on the Black values.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.Color.SelectiveColorCommandData">
      <summary>
            The <see cref="T:Leadtools.ImageProcessing.Color.SelectiveColorCommandData" /> class contains the information needed for a single "Selected Color", which is used mainly in the <see cref="T:Leadtools.ImageProcessing.Color.SelectiveColorCommand" /> class.
             <strong> Supported in Silverlight</strong>.
</summary>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.SelectiveColorCommand" /> on an image and apply selective color to the image.</para>
        <code lang="VB">   Public Sub SelectiveColorCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As SelectiveColorCommand = New SelectiveColorCommand
      'Manipulate values.
      command.ColorsData(SelectiveCommandColorTypes.Red).Cyan = -100  ' Change the Red selected color
      command.ColorsData(SelectiveCommandColorTypes.Yellow).Cyan = 34    ' Change the Yellow selected color
      command.ColorsData(SelectiveCommandColorTypes.Yellow).Magenta = 100
      command.ColorsData(SelectiveCommandColorTypes.Yellow).Yellow = 40
      command.ColorsData(SelectiveCommandColorTypes.Green).Black = 100 ' Change the Green selected color
      command.ColorsData(SelectiveCommandColorTypes.Neutral).Cyan = -65  ' Change the Neutral selected color
      command.ColorsData(SelectiveCommandColorTypes.Neutral).Magenta = -39
      command.ColorsData(SelectiveCommandColorTypes.Neutral).Yellow = 63
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void SelectiveColorCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         SelectiveColorCommand command = new SelectiveColorCommand();
         //Manipulate values.
         command.ColorsData[(int)SelectiveCommandColorTypes.Red].Cyan  = -100; // Change the Red selected color
         command.ColorsData[(int)SelectiveCommandColorTypes.Yellow].Cyan  =  34;  // Change the Yellow selected color
         command.ColorsData[(int)SelectiveCommandColorTypes.Yellow].Magenta = 100;
         command.ColorsData[(int)SelectiveCommandColorTypes.Yellow].Yellow  =  40;
         command.ColorsData[(int)SelectiveCommandColorTypes.Green].Black = 100; // Change the Green selected color
         command.ColorsData[(int)SelectiveCommandColorTypes.Neutral].Cyan = -65;  // Change the Neutral selected color
         command.ColorsData[(int)SelectiveCommandColorTypes.Neutral].Magenta = -39;
         command.ColorsData[(int)SelectiveCommandColorTypes.Neutral].Yellow  =  63;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void SelectiveColorCommandExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         SelectiveColorCommand command = new SelectiveColorCommand();
         //Manipulate values.
         command.ColorsData[(int)SelectiveCommandColorTypes.Red].Cyan  = -100; // Change the Red selected color
         command.ColorsData[(int)SelectiveCommandColorTypes.Yellow].Cyan  =  34;  // Change the Yellow selected color
         command.ColorsData[(int)SelectiveCommandColorTypes.Yellow].Magenta = 100;
         command.ColorsData[(int)SelectiveCommandColorTypes.Yellow].Yellow  =  40;
         command.ColorsData[(int)SelectiveCommandColorTypes.Green].Black = 100; // Change the Green selected color
         command.ColorsData[(int)SelectiveCommandColorTypes.Neutral].Cyan = -65;  // Change the Neutral selected color
         command.ColorsData[(int)SelectiveCommandColorTypes.Neutral].Magenta = -39;
         command.ColorsData[(int)SelectiveCommandColorTypes.Neutral].Yellow  =  63;
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub SelectiveColorCommandExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As SelectiveColorCommand = New SelectiveColorCommand()
         'Manipulate values.
         command.ColorsData(CInt(SelectiveCommandColorTypes.Red)).Cyan = -100 ' Change the Red selected color
         command.ColorsData(CInt(SelectiveCommandColorTypes.Yellow)).Cyan = 34 ' Change the Yellow selected color
         command.ColorsData(CInt(SelectiveCommandColorTypes.Yellow)).Magenta = 100
         command.ColorsData(CInt(SelectiveCommandColorTypes.Yellow)).Yellow = 40
         command.ColorsData(CInt(SelectiveCommandColorTypes.Green)).Black = 100 ' Change the Green selected color
         command.ColorsData(CInt(SelectiveCommandColorTypes.Neutral)).Cyan = -65 ' Change the Neutral selected color
         command.ColorsData(CInt(SelectiveCommandColorTypes.Neutral)).Magenta = -39
         command.ColorsData(CInt(SelectiveCommandColorTypes.Neutral)).Yellow = 63
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.SelectiveColorCommandData.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Color.SelectiveColorCommandData" /> class with default parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <example>
            Refer to <see cref="M:Leadtools.ImageProcessing.Color.SelectiveColorCommand.#ctor(Leadtools.ImageProcessing.Color.SelectiveColorCommandData[])">SelectiveColorCommand(SelectiveColorCommandData[])</see></example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.SelectiveColorCommandData.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Color.SelectiveColorCommandData" /> class with explicit parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <param name="cyan">Value that specifies the percentage of cyan in a color. Valid values range from -100 to 100, which is interpreted as -100<![CDATA[&#37;]]> to 100<![CDATA[&#37;]]>.</param>
      <param name="magenta">Value that specifies the percentage of magenta in a color. Valid values range from -100 to 100, which is interpreted as -100<![CDATA[&#37;]]> to 100<![CDATA[&#37;]]>.</param>
      <param name="yellow">Value that specifies the percentage of yellow in a color. Valid values range from -100 to 100, which is interpreted as -100<![CDATA[&#37;]]> to 100<![CDATA[&#37;]]>.</param>
      <param name="black">Value that specifies the percentage of black in a color. Valid values range from -100 to 100, which is interpreted as -100<![CDATA[&#37;]]> to 100<![CDATA[&#37;]]>.</param>
      <example>
            Refer to <see cref="M:Leadtools.ImageProcessing.Color.SelectiveColorCommand.#ctor(Leadtools.ImageProcessing.Color.SelectiveColorCommandData[])">SelectiveColorCommand(SelectiveColorCommandData[])</see></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.SelectiveColorCommandData.Cyan">
      <summary>
            Gets or sets a value that specifies the percentage of cyan in a color.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Value that specifies the percentage of cyan in a color. Valid values range from -100 to 100, which is interpreted as -100<![CDATA[&#37;]]> to 100<![CDATA[&#37;]]>.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.SelectiveColorCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.SelectiveColorCommandData.Magenta">
      <summary>
            Gets or sets a value that specifies the percentage of magenta in a color.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Value that specifies the percentage of magenta in a color. Valid values range from -100 to 100, which is interpreted as -100<![CDATA[&#37;]]> to 100<![CDATA[&#37;]]>.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.SelectiveColorCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.SelectiveColorCommandData.Yellow">
      <summary>
            Gets or sets a value that specifies the percentage of yellow in a color.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Value that specifies the percentage of yellow in a color. Valid values range from -100 to 100, which is interpreted as -100<![CDATA[&#37;]]> to 100<![CDATA[&#37;]]>.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.SelectiveColorCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.SelectiveColorCommandData.Black">
      <summary>
            Gets or sets a value that specifies the percentage of black in a color.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Value that specifies the percentage of black in a color. Valid values range from -100 to 100, which is interpreted as -100<![CDATA[&#37;]]> to 100<![CDATA[&#37;]]>.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.SelectiveColorCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.Color.SelectiveColorCommand">
      <summary>
            Changes the color of an image by altering the definitions of one or more colors used by the image. This class is available in the <see cref="T:Leadtools.Topics.RasterProDocMed">Raster Pro</see> and above toolkits.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>Selected colors are the additive colors (Red, Green and Blue), the subtractive colors (Cyan, Magenta and Yellow), the highlights (White), the midtones (Neutral) and the shadows (Black). Each of those"Selected Colors" has information about the percentages of cyan, magenta, yellow and black that constructs that selective color. Each unique pixel's color can be defined as using some certain percentage of CMYK values. By changing the percentage of CMYK values for a "selected color", all colors related to that "selected color" would change also. For example, you can decrease the Magenta percentage from the "Blue selected color" to change a blue color to a color that is more similar to Cyan. Also you can increase the Yellow percentage from the "Magenta selected color" to change magenta color to a color that is more similar to Red.</description>
          </item>
          <item>
            <description>You control the percentage of CMYK for each of the selected colors using the members of a <see cref="T:Leadtools.ImageProcessing.Color.SelectiveColorCommandData" /> class, which are, Cyan, Magenta, Yellow and Black. Each member takes a value from -100 to 100. Negative values for any of these members decrease the percentage of that color, whereas positive values increase the percentage of that color. If Cyan = -100 it means no cyan will be used, whereas if Cyan = 100 it means the full percentage of cyan will be used. If a value is out of range, a negative value goes to -100 and a positive value goes to 100.</description>
          </item>
          <item>
            <description>Pixel colors are changed based on HSV color space. For example, if you alter the values for ColorsData[<see cref="T:Leadtools.ImageProcessing.Color.SelectiveCommandColorTypes" />.Red], then if a pixel value is within the RED range of the Hue scale, it is considered red and is changed using the settings in ColorsData[<see cref="T:Leadtools.ImageProcessing.Color.ColorSeparateCommandType" />.Red].</description>
          </item>
          <item>
            <description>This command supports 48 and 64-bit color images. Support for 48 and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support signed data images.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <see cref="T:Leadtools.Topics.CorrectingColors">Correcting Colors</see>.<br /></remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.SelectiveColorCommand" /> on an image and apply selective color to the image.</para>
        <code lang="VB">   Public Sub SelectiveColorCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As SelectiveColorCommand = New SelectiveColorCommand
      'Manipulate values.
      command.ColorsData(SelectiveCommandColorTypes.Red).Cyan = -100  ' Change the Red selected color
      command.ColorsData(SelectiveCommandColorTypes.Yellow).Cyan = 34    ' Change the Yellow selected color
      command.ColorsData(SelectiveCommandColorTypes.Yellow).Magenta = 100
      command.ColorsData(SelectiveCommandColorTypes.Yellow).Yellow = 40
      command.ColorsData(SelectiveCommandColorTypes.Green).Black = 100 ' Change the Green selected color
      command.ColorsData(SelectiveCommandColorTypes.Neutral).Cyan = -65  ' Change the Neutral selected color
      command.ColorsData(SelectiveCommandColorTypes.Neutral).Magenta = -39
      command.ColorsData(SelectiveCommandColorTypes.Neutral).Yellow = 63
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void SelectiveColorCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         SelectiveColorCommand command = new SelectiveColorCommand();
         //Manipulate values.
         command.ColorsData[(int)SelectiveCommandColorTypes.Red].Cyan  = -100; // Change the Red selected color
         command.ColorsData[(int)SelectiveCommandColorTypes.Yellow].Cyan  =  34;  // Change the Yellow selected color
         command.ColorsData[(int)SelectiveCommandColorTypes.Yellow].Magenta = 100;
         command.ColorsData[(int)SelectiveCommandColorTypes.Yellow].Yellow  =  40;
         command.ColorsData[(int)SelectiveCommandColorTypes.Green].Black = 100; // Change the Green selected color
         command.ColorsData[(int)SelectiveCommandColorTypes.Neutral].Cyan = -65;  // Change the Neutral selected color
         command.ColorsData[(int)SelectiveCommandColorTypes.Neutral].Magenta = -39;
         command.ColorsData[(int)SelectiveCommandColorTypes.Neutral].Yellow  =  63;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void SelectiveColorCommandExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         SelectiveColorCommand command = new SelectiveColorCommand();
         //Manipulate values.
         command.ColorsData[(int)SelectiveCommandColorTypes.Red].Cyan  = -100; // Change the Red selected color
         command.ColorsData[(int)SelectiveCommandColorTypes.Yellow].Cyan  =  34;  // Change the Yellow selected color
         command.ColorsData[(int)SelectiveCommandColorTypes.Yellow].Magenta = 100;
         command.ColorsData[(int)SelectiveCommandColorTypes.Yellow].Yellow  =  40;
         command.ColorsData[(int)SelectiveCommandColorTypes.Green].Black = 100; // Change the Green selected color
         command.ColorsData[(int)SelectiveCommandColorTypes.Neutral].Cyan = -65;  // Change the Neutral selected color
         command.ColorsData[(int)SelectiveCommandColorTypes.Neutral].Magenta = -39;
         command.ColorsData[(int)SelectiveCommandColorTypes.Neutral].Yellow  =  63;
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub SelectiveColorCommandExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As SelectiveColorCommand = New SelectiveColorCommand()
         'Manipulate values.
         command.ColorsData(CInt(SelectiveCommandColorTypes.Red)).Cyan = -100 ' Change the Red selected color
         command.ColorsData(CInt(SelectiveCommandColorTypes.Yellow)).Cyan = 34 ' Change the Yellow selected color
         command.ColorsData(CInt(SelectiveCommandColorTypes.Yellow)).Magenta = 100
         command.ColorsData(CInt(SelectiveCommandColorTypes.Yellow)).Yellow = 40
         command.ColorsData(CInt(SelectiveCommandColorTypes.Green)).Black = 100 ' Change the Green selected color
         command.ColorsData(CInt(SelectiveCommandColorTypes.Neutral)).Cyan = -65 ' Change the Neutral selected color
         command.ColorsData(CInt(SelectiveCommandColorTypes.Neutral)).Magenta = -39
         command.ColorsData(CInt(SelectiveCommandColorTypes.Neutral)).Yellow = 63
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <seealso cref="T:Leadtools.Topics.CorrectingColors">Correcting Colors</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SharpenCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.PosterizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EmbossCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MedianCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.AddNoiseCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.IntensityDetectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SpatialFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.BinaryFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MaximumCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MinimumCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OilifyCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SolarizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.WindowLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AutoColorLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AdjustTintCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.ColorHalftoneCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Color.SelectiveColorCommand.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Color.SelectiveColorCommand" /> class object with default parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.SelectiveColorCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.SelectiveColorCommand.#ctor(Leadtools.ImageProcessing.Color.SelectiveColorCommandData[])">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Color.SelectiveColorCommand" /> class object with explicit parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <param name="colorsData">Array of 9 <see cref="T:Leadtools.ImageProcessing.Color.SelectiveColorCommandData" /> class that contains the selected colors along with the CMYK values for each.</param>
      <example>
        <para>Run the SelectiveColor command on an image and applies selective color to the image.</para>
        <code lang="VB">   Public Sub SelectiveColorConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      'Manipulate values.
      Dim colorsData() As SelectiveColorCommandData
      ReDim colorsData(8)

      Dim i As Integer
      For i = 0 To 7
         colorsData(i) = New SelectiveColorCommandData
      Next
      colorsData(SelectiveCommandColorTypes.Black) = New SelectiveColorCommandData(-65, -39, 65, 0)
      Dim command As SelectiveColorCommand = New SelectiveColorCommand(colorsData)
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void SelectiveColorConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         //Manipulate values.
         SelectiveColorCommandData[] colorsData = new SelectiveColorCommandData[9];

         for (int i = 0; i &lt; 8; i++)
            colorsData[i] = new SelectiveColorCommandData();

         colorsData[(int)SelectiveCommandColorTypes.Black] = new SelectiveColorCommandData(-65, -39, 65, 0);
         SelectiveColorCommand command = new SelectiveColorCommand(colorsData);
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void SelectiveColorConstructorExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         //Manipulate values.
         SelectiveColorCommandData[] colorsData = new SelectiveColorCommandData[9];
         for (int i = 0; i &lt; 8; i++)
            colorsData[i] = new SelectiveColorCommandData();

         colorsData[(int)SelectiveCommandColorTypes.Black] = new SelectiveColorCommandData(-65, -39, 65, 0);
         SelectiveColorCommand command = new SelectiveColorCommand(colorsData);
         command.Run(image);

         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub SelectiveColorConstructorExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         'Manipulate values.
         Dim colorsData As SelectiveColorCommandData() = New SelectiveColorCommandData(8){}
         For i As Integer = 0 To 7
            colorsData(i) = New SelectiveColorCommandData()
         Next i

         colorsData(CInt(SelectiveCommandColorTypes.Black)) = New SelectiveColorCommandData(-65, -39, 65, 0)
         Dim command As SelectiveColorCommand = New SelectiveColorCommand(colorsData)
         command.Run(image)

         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.SelectiveColorCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this class.
             <strong> Supported in Silverlight</strong>.
</summary>
      <returns>String that contains the name of this class.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.SelectiveColorCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.SelectiveColorCommand.ColorsData">
      <summary>
            Gets or sets an array of 9 <see cref="T:Leadtools.ImageProcessing.Color.SelectiveColorCommandData" /> classes.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Array of 9 <see cref="T:Leadtools.ImageProcessing.Color.SelectiveColorCommandData" /> classes that contains the selected colors along with the CMYK values for each.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.SelectiveColorCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.Color.RemapIntensityCommandFlags">
      <summary>
        <para>Flags that indicate the color plane to update, whether to change the high bit and whether the
            <see cref="P:Leadtools.ImageProcessing.Color.RemapIntensityCommand.LookupTable" /> contains normal or stretched data.</para>
        <para>This enumeration has the <see cref="T:System.FlagsAttribute" /> attribute that allows a bitwise combination of its member values.</para>
        <strong> Supported in Silverlight</strong>.
</summary>
      <remarks>
             You can use a bitwise OR (|) to specify one flag from each group.
             <table><tr><td><b>Group</b></td><td><b>Flags</b></td></tr><tr><td>Flags that indicate the color plane to update.</td><td>Master, Red, Green, Blue</td></tr><tr><td>Flag that indicates whether or not to change the high bit.</td><td>ChangeHighBit</td></tr><tr><td>Flag that indicates whether <see cref="P:Leadtools.ImageProcessing.Color.RemapIntensityCommand.LookupTable" /> contains normal or stretched data.</td><td>Normal</td></tr></table></remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.RemapIntensityCommandFlags.Master">
      <summary>
            All channels.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.RemapIntensityCommandFlags.Red">
      <summary>
             Red channel only.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.RemapIntensityCommandFlags.Green">
      <summary>
            Green channel only.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.RemapIntensityCommandFlags.Blue">
      <summary>
            Blue channel only.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.RemapIntensityCommandFlags.ChangeHighBit">
      <summary>
            Change the high bit of the image according to the used data of the <see cref="P:Leadtools.ImageProcessing.Color.RemapIntensityCommand.LookupTable" />.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.RemapIntensityCommandFlags.Normal">
      <summary>
            The data in the <see cref="P:Leadtools.ImageProcessing.Color.RemapIntensityCommand.LookupTable" /> is normal data, in this case the <see cref="P:Leadtools.ImageProcessing.Color.RemapIntensityCommand.LookupTable" /> length should be equal
            to 2^(HighBit - LowBit + 1).
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.Color.RemapIntensityCommand">
      <summary>
            Uses a lookup table to change an image's intensity values. You can apply
            the change to red, green, blue, or all color channels.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>The current intensity values correspond to the table 
            indexes. The values of the entries are the new values to be applied.</description>
          </item>
          <item>
            <description>This command supports 12 and 16-bit grayscale and 48 
            and 64-bit color images. Support for 12 and 16-bit grayscale and 48 and 
            64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>The image intensity level range depends on the 
            resolution of the image. For 64-bit, 48-bit, and 16-bit images, the 
            intensity levels range from 0 to 2^16-1. For 12-bit images, the intensity
            levels range from 0 to 2^12-1. For other resolutions, the intensity levels
            range from 0 to 255.</description>
          </item>
          <item>
            <description>Be sure that LookupTable property contains the number
            of the image intensity levels. For example if the image is 16-bit (the 
            maximum image intensity level is 2^16 - 1).</description>
          </item>
          <item>
            <description>This command supports signed data images.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <see cref="T:Leadtools.Topics.ChangingBrightnessAndContrast">Changing Brightness and Contrast</see>.
            </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.RemapIntensityCommand" /> on an image.</para>
        <code lang="VB">   Public Sub RemapIntensityCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      'This example will darken loaded image by using lookup table affected by exponential function.
      Dim LookupTable() As Integer ' Array to hold lookup table.
      ReDim LookupTable(255)

      'Get Lookup table where the array calculated by the linear function for all the items of the array is from 0 - 255.
      LookupTable(0) = 255
      LookupTable(255) = 0

      EffectsUtilities.GetFunctionalLookupTable(LookupTable, 0, 255, 5, FunctionalLookupTableFlags.Linear)

      Dim command As RemapIntensityCommand = New RemapIntensityCommand
      command.Flags = RemapIntensityCommandFlags.Master
      command.LookupTable = LookupTable

      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void RemapIntensityCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         //This example will darken loaded image by using lookup table affected by exponential function.
         int[] LookupTable = new int[256]; // Array to hold lookup table.

         //Get Lookup table where the array calculated by the linear function for all the items of the array is from 0 - 255.
         LookupTable[0] = 255;
         LookupTable[255] = 0; 

         EffectsUtilities.GetFunctionalLookupTable(LookupTable, 0, 255, 5, FunctionalLookupTableFlags.Linear);

         RemapIntensityCommand command = new RemapIntensityCommand();
         command.Flags = RemapIntensityCommandFlags.Master;
         command.LookupTable = LookupTable;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void RemapIntensityCommandExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         //This example will darken loaded image by using lookup table affected by exponential function.
         int[] LookupTable = new int[256]; // Array to hold lookup table.
         //Get Lookup table where the array calculated by the linear function for all the items of the array is from 0 - 255.
         LookupTable[0] = 255;
         LookupTable[255] = 0;

         EffectsUtilities.GetFunctionalLookupTable(LookupTable, 0, 255, 5, FunctionalLookupTableFlags.Linear);
         RemapIntensityCommand command = new RemapIntensityCommand();
         command.Flags = RemapIntensityCommandFlags.Master;
         command.LookupTable = LookupTable;
         command.Run(image);

         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub RemapIntensityCommandExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         'This example will darken loaded image by using lookup table affected by exponential function.
         Dim LookupTable As Integer() = New Integer(255){} ' Array to hold lookup table.
         'Get Lookup table where the array calculated by the linear function for all the items of the array is from 0 - 255.
         LookupTable(0) = 255
         LookupTable(255) = 0

         EffectsUtilities.GetFunctionalLookupTable(LookupTable, 0, 255, 5, FunctionalLookupTableFlags.Linear)
         Dim command As RemapIntensityCommand = New RemapIntensityCommand()
         command.Flags = RemapIntensityCommandFlags.Master
         command.LookupTable = LookupTable
         command.Run(image)

         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <seealso cref="T:Leadtools.Topics.ChangingBrightnessAndContrast">Changing Brightness and Contrast</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.RasterColorChannel" />.
            <seealso cref="T:Leadtools.ImageProcessing.RasterColorChannel" />.
            <seealso cref="M:Leadtools.ImageProcessing.Effects.EffectsUtilities.GetUserLookupTable(System.Int32[],Leadtools.LeadPoint[])"></seealso>.
            <seealso cref="M:Leadtools.ImageProcessing.Effects.EffectsUtilities.GetFunctionalLookupTable(System.Int32[],System.Int32,System.Int32,System.Int32,Leadtools.ImageProcessing.Effects.FunctionalLookupTableFlags)"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.GammaCorrectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeContrastCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.HistogramContrastCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.StretchIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.InvertCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeHueCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeSaturationCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.HistogramEqualizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.FillCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.HistogramCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.WindowLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChannelMixerCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.DeinterlaceCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.DesaturateCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EdgeDetectStatisticalCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.LightControlCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SmoothEdgesCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.LocalHistogramEqualizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AddWeightedCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorMergeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorSeparateCommand"></seealso>.   
            <seealso cref="T:Leadtools.ImageProcessing.Color.MultiplyCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AutoColorLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.CorrelationListCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.GrayScaleToDuotoneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.GrayScaleToMultitoneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.HolePunchRemoveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SelectiveColorCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SkeletonCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeHueSaturationIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorReplaceCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorThresholdCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.MathematicalFunctionCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SegmentCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AdaptiveContrastCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ApplyMathematicalLogicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorIntensityBalanceCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.ColorizeGrayCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ContrastBrightnessIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.DigitalSubtractCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.DynamicBinaryCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EdgeDetectEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MultiscaleEnhancementCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.SelectDataCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.ShiftDataCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Color.RemapIntensityCommand.#ctor">
      <summary>
            Initializes a new RemapIntensityCommand class object with default parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.RemapIntensityCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.RemapIntensityCommand.#ctor(Leadtools.ImageProcessing.Color.RemapIntensityCommandFlags,System.Int32[])">
      <summary>
            Initializes a new RemapIntensityCommand class object with explicit parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <param name="flags"> Determines the color channel that will be used.
            For more information, refer to <see cref="T:Leadtools.ImageProcessing.RasterColorChannel" />.</param>
      <param name="lookupTable">Table of integers containing lookup values.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.RemapIntensityCommand" /> on an image.</para>
        <code lang="VB">   Public Sub RemapIntensityConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      'This example will darken loaded image by using lookup table affected by exponential function.
      Dim LookupTable() As Integer ' Array to hold lookup table.
      ReDim LookupTable(255)
      'Get Lookup table where the array calculated by the linear function for all the items of the array is from 0 - 255.
      LookupTable(0) = 255
      LookupTable(255) = 0
      EffectsUtilities.GetFunctionalLookupTable(LookupTable, 0, 255, 5, FunctionalLookupTableFlags.Linear)

      Dim command As RemapIntensityCommand = New RemapIntensityCommand(RemapIntensityCommandFlags.Master, LookupTable)
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void RemapIntensityConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         //This example will darken loaded image by using lookup table affected by exponential function.
         int[] LookupTable = new int[256]; // Array to hold lookup table.
         //Get Lookup table where the array calculated by the linear function for all the items of the array is from 0 - 255.
         LookupTable[0] = 255;
         LookupTable[255] = 0;

         EffectsUtilities.GetFunctionalLookupTable(LookupTable, 0, 255, 5, FunctionalLookupTableFlags.Linear);
         RemapIntensityCommand command = new RemapIntensityCommand(RemapIntensityCommandFlags.Master, LookupTable);
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void RemapIntensityConstructorExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         //This example will darken loaded image by using lookup table affected by exponential function.
         int[] LookupTable = new int[256]; // Array to hold lookup table.
         //Get Lookup table where the array calculated by the linear function for all the items of the array is from 0 - 255.
         LookupTable[0] = 255;
         LookupTable[255] = 0;
         EffectsUtilities.GetFunctionalLookupTable(LookupTable, 0, 255, 5, FunctionalLookupTableFlags.Linear);
         RemapIntensityCommand command = new RemapIntensityCommand(RemapIntensityCommandFlags.Master, LookupTable);
         command.Run(image);

         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub RemapIntensityConstructorExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         'This example will darken loaded image by using lookup table affected by exponential function.
         Dim LookupTable As Integer() = New Integer(255){} ' Array to hold lookup table.
         'Get Lookup table where the array calculated by the linear function for all the items of the array is from 0 - 255.
         LookupTable(0) = 255
         LookupTable(255) = 0
         EffectsUtilities.GetFunctionalLookupTable(LookupTable, 0, 255, 5, FunctionalLookupTableFlags.Linear)
         Dim command As RemapIntensityCommand = New RemapIntensityCommand(RemapIntensityCommandFlags.Master, LookupTable)
         command.Run(image)

         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.RemapIntensityCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this class.
             <strong> Supported in Silverlight</strong>.
</summary>
      <returns>String that contains the name of this class.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.RemapIntensityCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.RemapIntensityCommand.Flags">
      <summary>
            Flags that indicate the color plane to update, whether to change the high bit and whether <see cref="P:Leadtools.ImageProcessing.Color.RemapIntensityCommand.LookupTable" /> contains
            normal or stretched data.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Value that indicates the color plane to update, whether to change the high bit and whether the <see cref="P:Leadtools.ImageProcessing.Color.RemapIntensityCommand.LookupTable" />
            contains normal or stretched data. For more information, refer to <see cref="T:Leadtools.ImageProcessing.RasterColorChannel" />.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.RemapIntensityCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.RemapIntensityCommand.LookupTable">
      <summary>
            Gets or sets a table of integers that represent lookup values.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Table of integers that represent lookup values.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.RemapIntensityCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.Color.PosterizeCommand">
      <summary>
            Imposes a poster effect on an image by quantizing the image's colors to a
            specified number of color levels per plane. For example, two levels means
            two of red, two of green, and two of blue.
             <strong> Supported in Silverlight</strong>.
</summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>This command supports 12 and 16-bit grayscale and 48 and 64-bit color images. Support for 12 and 16-bit grayscale and 48 and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
        <p>If the image has a LUT and you want to work on the image data, set 
            <see cref="P:Leadtools.RasterImage.UseLookupTable">RasterImage.UseLookupTable</see> 
            to false. Then, after calling the method, reset the 
            <see cref="P:Leadtools.RasterImage.UseLookupTable">UselookupTable property</see> to true, as follows:
            </p>
        <code>
            rasterImage.UseLookupTable = false;
            Method(rasterImage);
            
            rasterImage.UseLookupTable = true;
            </code>
        <p>For more information, refer to <see cref="T:Leadtools.Topics.ApplyingArtisticEffects">Applying Artistic Effects</see>.</p>
      </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.PosterizeCommand" /> on an image and posterize it.</para>
        <code lang="VB">   Public Sub PosterizeCommandCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As PosterizeCommand = New PosterizeCommand
      'Apply a poster effect with twelve color levels per plane.
      command.Levels = 12

      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void PosterizeCommandCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         PosterizeCommand command  = new PosterizeCommand();
         //Apply a poster effect with twelve color levels per plane.
         command.Levels   = 12;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void PosterizeCommandCommandExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         PosterizeCommand command  = new PosterizeCommand();
         //Apply a poster effect with twelve color levels per plane.
         command.Levels   = 12;
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub PosterizeCommandCommandExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As PosterizeCommand = New PosterizeCommand()
         'Apply a poster effect with twelve color levels per plane.
         command.Levels = 12
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <seealso cref="T:Leadtools.Topics.ApplyingArtisticEffects">Applying Artistic Effects</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SharpenCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EmbossCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.AverageCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MedianCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.AddNoiseCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.IntensityDetectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SpatialFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.BinaryFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MaximumCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MinimumCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OilifyCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SolarizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.WindowLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BumpMapCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.CubismCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DrawStarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DryCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreePlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeRadialBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlassEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LensFlareCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.LightCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.OceanCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneBendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlaneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SampleTargetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.TunnelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BendCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CylinderCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandShearCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FreeHandWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ImpressionistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PixelateCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PolarCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PunchCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RippleCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SphereCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.SwirlCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.WindCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZoomWaveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ShadowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RevEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.AgingCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DiceEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PuzzleEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RingEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RadialBlurCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.DeskewCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DiffuseGlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.HalfTonePatternCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.HighPassCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MaskConvolutionCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PerspectiveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PointillistCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CanvasCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CloudsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ColoredBallsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DiffuseGlowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.DisplacementCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FragmentCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.MosaicTilesCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OffsetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RomanMosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.VignnetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ZigZagCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Color.PosterizeCommand.#ctor">
      <summary>
            Initializes a new PosterizeCommand class object with default parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.PosterizeCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.PosterizeCommand.#ctor(System.Int32)">
      <summary>
            Initializes a new PosterizeCommand class object with explicit parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <param name="levels">The number of color levels to use. Valid values 
            are 2 through 64.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.PosterizeCommand" /> on an image and posterize it.</para>
        <code lang="VB">   Public Sub PosterizeCommandConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      'Apply a poster effect with twelve color levels per plane.
      Dim command As PosterizeCommand = New PosterizeCommand(12)
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void PosterizeCommandConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         //Apply a poster effect with twelve color levels per plane.
         PosterizeCommand command  = new PosterizeCommand(12);
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void PosterizeCommandConstructorExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         //Apply a poster effect with twelve color levels per plane.
         PosterizeCommand command  = new PosterizeCommand(12);
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub PosterizeCommandConstructorExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         'Apply a poster effect with twelve color levels per plane.
         Dim command As PosterizeCommand = New PosterizeCommand(12)
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.PosterizeCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this class.
             <strong> Supported in Silverlight</strong>.
</summary>
      <returns>String that contains the name of this class.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.PosterizeCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.PosterizeCommand.Levels">
      <summary>
            Gets or sets the number of color levels to use.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>The number of color levels to use. Valid values are 2 through 
            64.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.PosterizeCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.Color.LocalHistogramEqualizeCommand">
      <summary>
            Linearizes the number of pixels locally in an image, based on a specific 
            color space.  This can be used to bring out the detail in dark areas of 
            an image, and smooth the edges between blocks. This class is available in 
            the <see cref="T:Leadtools.Topics.RasterProDocMed">Medical</see> Toolkits.
              <strong> Supported in Silverlight</strong>.
</summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>
             This class applies the histogram equalizer locally on the image. 
             The image is divided into local rectangles of dimension (Width, Height). 
             The number of pixels inside each local rectangle are linearized according
             the histogram calculated for an extended rectangle around each local 
             rectangle. The extended rectangles are of dimension:
             <br />((Width+2 * WidthExtension) , ( Height + 2 *  HeightExtension)).
             <br /><br />For an example, see the following drawing:
             <br /><img src="HistoExt.jpg" /><br />
             A rectangle and its associated extension, where the histogram is calculated.
            </description>
          </item>
          <item>
            <description>
             Use this class to bring out details in an image that
             has portions that are too dark or too bright. An example of this is a 
             picture taken with a flashlight in a dark room. In such a picture, the 
             subject receives good light while the background is very dark. The 
             application of the local histogram brings out details, but creates a 
             blocky artifact. Use Smooth to reduce the blockiness of the result.</description>
          </item>
          <item>
            <description>This class supports 12 and 16-bit grayscale and 48 and 64-bit color images. Support for 12 and 16-bit grayscale and 48 and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
             For more information, refer to <see cref="T:Leadtools.Topics.ChangingBrightnessAndContrast">Changing Brightness and Contrast</see>.
             </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.LocalHistogramEqualizeCommand" /> on an image.</para>
        <code lang="VB">   Public Sub LocalHistogramEqualizeCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As LocalHistogramEqualizeCommand = New LocalHistogramEqualizeCommand
      command.Width = 15
      command.Height = 15
      command.WidthExtension = 100
      command.HeightExtension = 100
      command.Smooth = 0
      command.Type = HistogramEqualizeType.Yuv
      ' Local Histogram equalize the image.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void LocalHistogramEqualizeCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         LocalHistogramEqualizeCommand command = new LocalHistogramEqualizeCommand();
         command.Width           = 15;
         command.Height          = 15;
         command.WidthExtension  = 100;
         command.HeightExtension = 100;
         command.Smooth          = 0;
         command.Type            = HistogramEqualizeType.Yuv;
         // Local Histogram equalize the image.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void LocalHistogramEqualizeCommandExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         LocalHistogramEqualizeCommand command = new LocalHistogramEqualizeCommand();
         command.Width           = 15;
         command.Height          = 15;
         command.WidthExtension  = 100;
         command.HeightExtension = 100;
         command.Smooth          = 0;
         command.Type            = HistogramEqualizeType.Yuv;
         // Local Histogram equalize the image.
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub LocalHistogramEqualizeCommandExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As LocalHistogramEqualizeCommand = New LocalHistogramEqualizeCommand()
         command.Width = 15
         command.Height = 15
         command.WidthExtension = 100
         command.HeightExtension = 100
         command.Smooth = 0
         command.Type = HistogramEqualizeType.Yuv
         ' Local Histogram equalize the image.
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <seealso cref="T:Leadtools.Topics.ChangingBrightnessAndContrast">Changing Brightness and Contrast</seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeIntensityCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.GammaCorrectCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeContrastCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.HistogramContrastCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.StretchIntensityCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.RemapIntensityCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.InvertCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeHueCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeSaturationCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.FillCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.HistogramCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Core.WindowLevelCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.AutoColorLevelCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.ColorLevelCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Core.CorrelationListCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.GrayScaleToDuotoneCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.GrayScaleToMultitoneCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Core.HolePunchRemoveCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.SelectiveColorCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Effects.SkeletonCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Color.LocalHistogramEqualizeCommand.#ctor">
      <summary>
            Initializes a new LocalHistogramEqualizeCommand class object with default parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.LocalHistogramEqualizeCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.LocalHistogramEqualizeCommand.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Leadtools.ImageProcessing.Color.HistogramEqualizeType)">
      <summary>
            Initializes a new LocalHistogramEqualizeCommand class object with explicit parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <param name="width">The width of the local histogram equalizer 
            rectangle in pixels. The width should be more than zero.</param>
      <param name="height">The height of the local histogram equalizer 
            rectangle in pixels. The height should be more than zero.</param>
      <param name="widthExtension">The extension of the width of the local 
            histogram equalizer rectangle, in pixels.</param>
      <param name="heightExtension">The extension of the height of the 
            local histogram equalizer rectangle, in pixels.</param>
      <param name="smooth">Size of the area to be used when smoothing the 
            edges between localized blocks.  Possible values are between
            0 and 7, but if Height is less than or equal to 7 then the maximum 
            value for this item is Height - 1. If Smooth = 0 the edges will not be smoothed.</param>
      <param name="type">Flag that indicates which color space to 
            equalize.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.LocalHistogramEqualizeCommand" /> on an image.</para>
        <code lang="VB">   Public Sub LocalHistogramEqualizeConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As LocalHistogramEqualizeCommand = New LocalHistogramEqualizeCommand(15, 15, 100, 100, 0, HistogramEqualizeType.Yuv)
      ' Local Histogram equalize the image.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void LocalHistogramEqualizeConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         LocalHistogramEqualizeCommand command = new LocalHistogramEqualizeCommand(15, 15, 100, 100, 0, HistogramEqualizeType.Yuv);
         // Local Histogram equalize the image.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void LocalHistogramEqualizeConstructorExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         LocalHistogramEqualizeCommand command = new LocalHistogramEqualizeCommand(15, 15, 100, 100, 0, HistogramEqualizeType.Yuv);
         // Local Histogram equalize the image.
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub LocalHistogramEqualizeConstructorExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As LocalHistogramEqualizeCommand = New LocalHistogramEqualizeCommand(15, 15, 100, 100, 0, HistogramEqualizeType.Yuv)
         ' Local Histogram equalize the image.
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.LocalHistogramEqualizeCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this class.
             <strong> Supported in Silverlight</strong>.
</summary>
      <returns>String that contains the name of this class.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.LocalHistogramEqualizeCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.LocalHistogramEqualizeCommand.Width">
      <summary>
            Gets or sets the width of the local histogram equalizer rectangle in pixels.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>The width of the local histogram equalizer rectangle in pixels. 
            The width should be more than zero.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.LocalHistogramEqualizeCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.LocalHistogramEqualizeCommand.Height">
      <summary>
            Gets or sets the height of the local histogram equalizer rectangle in pixels.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>The height of the local histogram equalizer rectangle in 
            pixels. The height should be more than zero.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.LocalHistogramEqualizeCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.LocalHistogramEqualizeCommand.WidthExtension">
      <summary>
            Gets or sets the extension of the width of the local histogram equalizer rectangle,
             in pixels.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>The extension of the width of the local histogram equalizer 
            rectangle, in pixels.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.LocalHistogramEqualizeCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.LocalHistogramEqualizeCommand.HeightExtension">
      <summary>
            Gets or sets the extension of the height of the local histogram equalizer rectangle,
             in pixels.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>The extension of the height of the local histogram equalizer 
            rectangle, in pixels.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.LocalHistogramEqualizeCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.LocalHistogramEqualizeCommand.Smooth">
      <summary>
            Gets or sets the size of the area to be used when smoothing the edges between localized
            blocks.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Size of the area to be used when smoothing the edges between 
            localized blocks.  Possible values are between 0 and 7, 
            but if Height is less than or equal to 7 then the maximum value for 
            this item is Height - 1. If Smooth = 0 the edges will not be smoothed.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.LocalHistogramEqualizeCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.LocalHistogramEqualizeCommand.Type">
      <summary>
            Flag that indicates which color space to equalize.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Value that indicates which color space to equalize.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.LocalHistogramEqualizeCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.Color.HistogramContrastCommand">
      <summary>
            Increases or decreases the contrast of the image, using a 
            histogram to determine the median brightness.
             <strong> Supported in Silverlight</strong>.
</summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>
            This class finds the median brightness of the image, then brightens the
            pixels with values above the median and darkens the pixels with values 
            below the median. This is more sophisticated (but slower) than the 
            <see cref="T:Leadtools.ImageProcessing.Color.ChangeContrastCommand" />, 
            which uses the middle possible value (128) rather than finding the 
            actual median.
            </description>
          </item>
          <item>
            <description>This class supports 12 and 16-bit grayscale and 48 and 64-bit color images. Support for 12 and 16-bit grayscale and 48 and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
        <p>For more information, refer to <see cref="T:Leadtools.Topics.ChangingBrightnessAndContrast">Changing Brightness and Contrast</see>.</p>
        <p>If the image has a LUT and you want to work on the image data, set 
            <see cref="P:Leadtools.RasterImage.UseLookupTable">RasterImage.UseLookupTable</see> 
            to false. Then, after calling the method, reset the 
            <see cref="P:Leadtools.RasterImage.UseLookupTable">UselookupTable property</see> to true, as follows:
            </p>
        <code>
            rasterImage.UseLookupTable = false;
            Method(rasterImage);
            
            rasterImage.UseLookupTable = true;
            </code>
      </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.HistogramContrastCommand" /> on an image and increase its contrast.</para>
        <code lang="VB">   Public Sub HistogramContrastCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As HistogramContrastCommand = New HistogramContrastCommand
      'Increase the contrast using the histogram by 25 percent of the possible range.
      command.Contrast = 250

      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void HistogramContrastCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         HistogramContrastCommand command = new HistogramContrastCommand();
         //Increase the contrast using the histogram by 25 percent of the possible range.
         command.Contrast = 250;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void HistogramContrastCommandExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         HistogramContrastCommand command = new HistogramContrastCommand();
         //Increase the contrast using the histogram by 25 percent of the possible range.
         command.Contrast = 250;
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub HistogramContrastCommandExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As HistogramContrastCommand = New HistogramContrastCommand()
         'Increase the contrast using the histogram by 25 percent of the possible range.
         command.Contrast = 250
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <seealso cref="T:Leadtools.Topics.ChangingBrightnessAndContrast">Changing Brightness and Contrast</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.GammaCorrectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeContrastCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.StretchIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.RemapIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.InvertCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeHueCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeSaturationCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.HistogramEqualizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.FillCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.HistogramCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.WindowLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChannelMixerCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.DeinterlaceCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.DesaturateCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EdgeDetectStatisticalCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.LightControlCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SmoothEdgesCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.LocalHistogramEqualizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AddWeightedCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorMergeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorSeparateCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.MultiplyCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AutoColorLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.CorrelationListCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.GrayScaleToDuotoneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.GrayScaleToMultitoneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.HolePunchRemoveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SelectiveColorCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SkeletonCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeHueSaturationIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorReplaceCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorThresholdCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.MathematicalFunctionCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SegmentCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AdaptiveContrastCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ApplyMathematicalLogicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorIntensityBalanceCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.ColorizeGrayCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ContrastBrightnessIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.DigitalSubtractCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.DynamicBinaryCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EdgeDetectEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MultiscaleEnhancementCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.SelectDataCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.ShiftDataCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AdjustTintCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.GammaCorrectCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Color.HistogramContrastCommand.#ctor">
      <summary>
            Initializes a new HistogramContrastCommand with default parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.HistogramContrastCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.HistogramContrastCommand.#ctor(System.Int32)">
      <summary>
            Initializes a new HistogramContrastCommand class object with explicit parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <param name="contrast">Amount of contrast change. Valid values are 
            -1000 to +1000.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.HistogramContrastCommand" /> on an image and apply histogram equalization with YUV color space.</para>
        <code lang="VB">   Public Sub HistogramContrastConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      ' Increase the contrast using the histogram by 25 percent of the possible range.
      Dim command As HistogramContrastCommand = New HistogramContrastCommand(250)
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void HistogramContrastConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         HistogramEqualizeCommand command = new HistogramEqualizeCommand(HistogramEqualizeType.Yuv);
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void HistogramContrastConstructorExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         HistogramEqualizeCommand command = new HistogramEqualizeCommand(HistogramEqualizeType.Yuv);
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub HistogramContrastConstructorExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As HistogramEqualizeCommand = New HistogramEqualizeCommand(HistogramEqualizeType.Yuv)
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.HistogramContrastCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this class.
             <strong> Supported in Silverlight</strong>.
</summary>
      <returns>String that contains the name of this class.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.HistogramContrastCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.HistogramContrastCommand.Contrast">
      <summary>
            Gets or sets a value that represents the amount of contrast change.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Value that represents the amount of contrast change. Valid values are -1000 to +1000.
            </value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.HistogramContrastCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.Color.HistogramCommandFlags">
      <summary>
            Flags that indicate which channel to use.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.HistogramCommandFlags.Master">
      <summary>
            All channels.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.HistogramCommandFlags.Red">
      <summary>
            Red channel only.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.HistogramCommandFlags.Green">
      <summary>
            Green channel only.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.HistogramCommandFlags.Blue">
      <summary>
            Blue channel only.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.HistogramCommandFlags.LowHighBits">
      <summary>
            Use only the bits between the <see cref="P:Leadtools.RasterImage.LowBit" /> and <see cref="P:Leadtools.RasterImage.HighBit" /> values.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.HistogramCommandFlags.AllBits">
      <summary>
            Use all the bits for calculating the histogram (the <see cref="P:Leadtools.RasterImage.LowBit" /> and <see cref="P:Leadtools.RasterImage.HighBit" /> values are ignored.)
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.HistogramCommandFlags.Force256">
      <summary>
            Force the resulted histogram array to 256 entries length.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.Color.HistogramCommand">
      <summary>
             Creates an array that charts how many times each intensity level occurs 
             in an image. This class can chart red, green, and blue separately or 
             together.  It is used for all resolutions, including 12 and 16-bit 
             grayscale.
             </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>For 1, 2, 3, 4, 5, 6, 7, 8, 16, 24, and 32 bit color 
             images, intensity levels range from 0 to 255. Therefore, the resulting 
             array has 256 items, indexed by intensity value. The value of each item 
             is the number of occurrences of the intensity level.</description>
          </item>
          <item>
            <description>For 48 and 64-bit images, the intensity levels range 
             from 0 to 65535. Therefore, the resulting array has 65536 items, indexed
             by intensity value. The value of each item is the number of occurrences 
             of the intensity level.</description>
          </item>
          <item>
            <description>This class also works on 12 and 16-bit grayscale 
             images. Intensity values in these images can range from 0 to (2^16 - 1) 
             for 16-bit grayscale or from 0 to (2^12 - 1) for 12- bit grayscale. The 
             <see cref="P:Leadtools.RasterImage.LowBit" /> and <see cref="P:Leadtools.RasterImage.HighBit" /> of this image identify which bits in a 12-bit or 
             16-bit entry are used. The <see cref="P:Leadtools.RasterImage.LowBit" /> and <see cref="P:Leadtools.RasterImage.HighBit" /> can be obtained by using the
             MinMaxCommand or by looking at the corresponding properties in the <see cref="T:Leadtools.RasterImage" /> class itself.</description>
          </item>
          <item>
            <description>Specifically, the table must hold at least 2^(<see cref="P:Leadtools.RasterImage.HighBit" /> 
             - <see cref="P:Leadtools.RasterImage.LowBit" /> + 1) entries if <see cref="T:Leadtools.ImageProcessing.Color.HistogramCommandFlags">HistogramCommandFlags.LowHighBits</see> 
             is set in the Channel Property. If <see cref="T:Leadtools.ImageProcessing.Color.HistogramCommandFlags">HistogramCommandFlags.AllBits</see>  
             is set in the Channel Property, the table must hold at least 4096 for 12-bit
             images and 65536 for 16-bit images.</description>
          </item>
          <item>
            <description>For example, suppose <see cref="T:Leadtools.ImageProcessing.Color.HistogramCommandFlags">HistogramCommandFlags.LowHighBits</see>  
             is set in the Channel property and you have a 16-bit grayscale image with 
             <see cref="P:Leadtools.RasterImage.LowBit" /> = 2 and <see cref="P:Leadtools.RasterImage.HighBit" /> = 7. There are 2^(7-2+1) = 64 possible grayscale
             intensities. The table must therefore hold at least 64 entries. The 
             number of grayscale values with bits 2 - 7 set to 0 can be found in 
             Histogram [0]. The number of grayscale values with bit 2 set to 1 and 
             bits 3 - 7 set to 0 can be found in Histogram [1], and so on up to 
             Histogram [63]. 
             Since the low bit is 2 and the high bit is 7, bits 0, 1, and bits 8 - 15 
             must all be 0. Therefore the values set in bits 2 - 7 determine the 
             intensities present in the image. In the table below, the gray columns 
             represent those bits that are always 0 for the image. The columns bit 7 
             through bit 2 represent possible settings for those bits. The last 
             column gives the location within the Histogram array of the number of 
             grayscale values having the corresponding settings. For example, 
             Histogram [0] contains the number of grayscale values of intensity 0 
             (all bits set to 0). Histogram [1] contains all the grayscale values with
             intensity 4 (the 2 bit position set to 1). 
             Histogram [2] contains all the grayscale values with intensity 8 (the 3 
             bit set to 1 and the remaining bits set to 0) and so on.
             <table><tr><th>bits 8 - 15</th><th>bit 7   </th><th>bit 6   </th><th>bit 5   </th><th>bit 4   </th><th>bit 3   </th><th>bit 2   </th><th>bit 1   </th><th>bit 0   </th><th>count location in Histogram</th></tr><tr><td><center>all 0s</center></td><td><center>0</center></td><td><center>0</center></td><td><center>0</center></td><td><center>0</center></td><td><center>0</center></td><td><center>0</center></td><td><center>0</center></td><td><center>0</center></td><td><center>Histogram [0]</center></td></tr><tr><td><center>all 0s</center></td><td><center>0</center></td><td><center>0</center></td><td><center>0</center></td><td><center>0</center></td><td><center>0</center></td><td><center>1</center></td><td><center>0</center></td><td><center>0</center></td><td><center>Histogram [1]</center></td></tr><tr><td><center>all 0s</center></td><td><center>0</center></td><td><center>0</center></td><td><center>0</center></td><td><center>0</center></td><td><center>1</center></td><td><center>0</center></td><td><center>0</center></td><td><center>0</center></td><td><center>Histogram [2]</center></td></tr><tr><td><center>all 0s</center></td><td><center>0</center></td><td><center>0</center></td><td><center>0</center></td><td><center>0</center></td><td><center>1</center></td><td><center>1</center></td><td><center>0</center></td><td><center>0</center></td><td><center>Histogram [3]</center></td></tr><tr><td><center>all 0s</center></td><td><center>0</center></td><td><center>0</center></td><td><center>0</center></td><td><center>1</center></td><td><center>0</center></td><td><center>0</center></td><td><center>0</center></td><td><center>0</center></td><td><center>Histogram [4]</center></td></tr><tr><td><center>_</center></td><td><center>0</center></td><td><center>0</center></td><td><center>0</center></td><td><center>0</center></td><td><center>0</center></td><td><center>0</center></td><td><center>_</center></td><td><center>_</center></td><td><center>and so on</center></td></tr><tr><td><center>all 0s</center></td><td><center>1</center></td><td><center>1</center></td><td><center>1</center></td><td><center>1</center></td><td><center>1</center></td><td><center>1</center></td><td><center>0</center></td><td><center>0</center></td><td><center>Histogram [63]</center></td></tr></table></description>
          </item>
          <item>
            <description>As another example, suppose you have a 16-bit 
             grayscale image with <see cref="P:Leadtools.RasterImage.LowBit" /> = 0 and <see cref="P:Leadtools.RasterImage.HighBit" /> = 15.  The table must hold 
             2^16 = 65,536 integer values.</description>
          </item>
          <item>
            <description>This class supports 12 and 16-bit grayscale and 48 and 64-bit color images. Support for 12 and 16-bit grayscale and 48 and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
             For more information, refer to <see cref="T:Leadtools.Topics.ChangingBrightnessAndContrast">Changing Brightness and Contrast</see>.<br />
             For more information, refer to <see cref="T:Leadtools.Topics.GrayScaleImages">Grayscale Images</see>.
             </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.HistogramCommand" /> on an image to get the red-channel histogram.</para>
        <code lang="VB">   Public Sub HistogramCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As HistogramCommand = New HistogramCommand
      Dim histogramValues() As Integer
      'Create the red-channel histogram.
      command.Channel = HistogramCommandFlags.Red Or HistogramCommandFlags.AllBits

      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)
      histogramValues = command.Histogram

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void HistogramCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         HistogramCommand command = new HistogramCommand();
         int [] histogramValues;
         //Create the red-channel histogram.
         command.Channel   = HistogramCommandFlags.Red | HistogramCommandFlags.AllBits;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);
         histogramValues = command.Histogram;

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void HistogramCommandExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         HistogramCommand command = new HistogramCommand();
         //Create the red-channel histogram.
         command.Channel = HistogramCommandFlags.Red | HistogramCommandFlags.AllBits;
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();

         //This is where the histogram information is stored
         int[] histogramValues = command.Histogram;
      }</code>
        <code lang="SilverlightVB">      Public Sub HistogramCommandExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As HistogramCommand = New HistogramCommand()
         'Create the red-channel histogram.
         command.Channel = HistogramCommandFlags.Red Or HistogramCommandFlags.AllBits
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()

         'This is where the histogram information is stored
         Dim histogramValues As Integer() = command.Histogram
      End Sub</code>
      </example>
      <seealso cref="T:Leadtools.Topics.ChangingBrightnessAndContrast">Changing Brightness and Contrast</seealso>.
             <seealso cref="T:Leadtools.Topics.GrayScaleImages">Grayscale Images</seealso>.
             <seealso cref="T:Leadtools.Topics.ColorHalftoneandHalftoneImages">Color Halftone and Halftone Images</seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeIntensityCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.GammaCorrectCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeContrastCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.HistogramContrastCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.StretchIntensityCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.RemapIntensityCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.InvertCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeHueCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeSaturationCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.HistogramEqualizeCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.FillCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Core.WindowLevelCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.ChannelMixerCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Effects.DeinterlaceCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.DesaturateCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Effects.EdgeDetectStatisticalCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.LightControlCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Effects.SmoothEdgesCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.LocalHistogramEqualizeCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.AddWeightedCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.ColorMergeCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.ColorSeparateCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.MultiplyCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.AutoColorLevelCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.ColorLevelCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Core.CorrelationListCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.GrayScaleToDuotoneCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.GrayScaleToMultitoneCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Core.HolePunchRemoveCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.SelectiveColorCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Effects.SkeletonCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeHueSaturationIntensityCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.ColorReplaceCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.ColorThresholdCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.MathematicalFunctionCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.SegmentCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.AdaptiveContrastCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.ApplyMathematicalLogicCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.ColorIntensityBalanceCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Core.ColorizeGrayCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.ContrastBrightnessIntensityCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Core.DigitalSubtractCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.DynamicBinaryCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Effects.EdgeDetectEffectCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Core.MultiscaleEnhancementCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Core.SelectDataCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Core.ShiftDataCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Color.HistogramCommand.#ctor">
      <summary>
            Initializes a new HistogramCommand with default parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.HistogramCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.HistogramCommand.#ctor(Leadtools.ImageProcessing.Color.HistogramCommandFlags)">
      <summary>
            Initializes a new HistogramCommand class object with explicit parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <param name="channel">Flags that indicate the channel for which 
            to get the histogram and the bits to use in calculating the histogram.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.HistogramCommand" /> on an image to get the red-channel histogram.</para>
        <code lang="VB">   Public Sub HistogramConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As HistogramCommand = New HistogramCommand(HistogramCommandFlags.Red Or HistogramCommandFlags.AllBits)
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)
      'This is where the histogram information strored
      Dim histogramValues() As Integer = command.Histogram

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void HistogramConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         HistogramCommand command = new HistogramCommand(HistogramCommandFlags.Red | HistogramCommandFlags.AllBits);
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);
         //This is where the histogram information strored
         int [] histogramValues = command.Histogram;

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void HistogramConstructorExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         HistogramCommand command = new HistogramCommand(HistogramCommandFlags.Red | HistogramCommandFlags.AllBits);
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();

         //This is where the histogram information is stored
         int [] histogramValues = command.Histogram;
      }</code>
        <code lang="SilverlightVB">      Public Sub HistogramConstructorExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As HistogramCommand = New HistogramCommand(HistogramCommandFlags.Red Or HistogramCommandFlags.AllBits)
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()

         'This is where the histogram information is stored
         Dim histogramValues As Integer() = command.Histogram
      End Sub</code>
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.HistogramCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this class.
             <strong> Supported in Silverlight</strong>.
</summary>
      <returns>String that contains the name of this class.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.HistogramCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.HistogramCommand.Histogram">
      <summary>
            An array of 32-bit integers that charts the number of times each 
            intensity level occurs in the image.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>An array of 32-bit integers that charts the number of times 
            each intensity level occurs in the image.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.HistogramCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.HistogramCommand.Channel">
      <summary>
            Gets or sets a flag that indicates the channel for which to get the histogram 
            and the bits to use in calculating the histogram.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Value that indicates the channel for which to get the 
            histogram and the bits to use in calculating the histogram.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.HistogramCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.Color.IntensityDetectCommandFlags">
      <summary>
            Flag that indicates the channel to process.
            <para>This flag has a <see cref="T:System.FlagsAttribute" /> attribute that allows a bitwise combination of its member values.</para><strong> Supported in Silverlight</strong>.
</summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.IntensityDetectCommandFlags.Master">
      <summary>
            Grayscale Channel.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.IntensityDetectCommandFlags.Red">
      <summary>
            Red Channel.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.IntensityDetectCommandFlags.Green">
      <summary>
            Green Channel.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.IntensityDetectCommandFlags.Blue">
      <summary>
            Blue Channel.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.Color.IntensityDetectCommand">
      <summary>
             Applies binary segmentation to an image by filtering a specific image to detect colors in a specific intensity range, in a specific color channel(s).
             </summary>
      <keywords>Binarize</keywords>
      <keywords>Color reduction</keywords>
      <keywords>Down sampling</keywords>
      <keywords>Color resolution</keywords>
      <keywords>Intensity detection</keywords>
      <keywords>Bitonal images</keywords>
      <keywords>Dithering</keywords>
      <keywords>Palettes</keywords>
      <keywords>Bits per pixel</keywords>
      <keywords>Color space</keywords>
      <remarks>
        <list type="bullet">
          <item>
            <description>The image is divided into two parts, inner and outer according to the values of the LowThreshold property and the HighThreshold property.</description>
          </item>
          <item>
            <description>The class can process 2 or more channels at a time by OR-ing two or more flags.</description>
          </item>
          <item>
            <description>This class supports 12 and 16-bit grayscale and 48 and 64-bit color images. Support for 12 and 16-bit grayscale and 48 and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
             For more information, refer to <see cref="T:Leadtools.Topics.ChangingBrightnessAndContrast">Changing Brightness and Contrast</see>.
             <br />
             For more information, refer to <see cref="T:Leadtools.Topics.CorrectingColors">Correcting Colors</see>.<br /><br />
             For more information, refer to <see cref="T:Leadtools.Topics.DetectingAndEnhancingEdgesAndlines">Detecting and Enhancing Edges and Lines</see>.<br /></remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.IntensityDetectCommand" /> on an image.</para>
        <code lang="VB">   Public Sub IntensityDetectCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As IntensityDetectCommand = New IntensityDetectCommand
      'Apply the filter.
      command.LowThreshold = 128
      command.HighThreshold = 255
      command.InColor = New RasterColor(255, 255, 255)
      command.OutColor = New RasterColor(0, 0, 0)
      command.Channel = IntensityDetectCommandFlags.Master

      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void IntensityDetectCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         IntensityDetectCommand command = new IntensityDetectCommand();
         //Apply the filter.
         command.LowThreshold = 128;
         command.HighThreshold = 255;
         command.InColor  = new RasterColor(255, 255, 255);
         command.OutColor = new RasterColor(0, 0, 0);
         command.Channel  = IntensityDetectCommandFlags.Master;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void IntensityDetectCommandExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         IntensityDetectCommand command = new IntensityDetectCommand();
         //Apply the filter.
         command.LowThreshold = 128;
         command.HighThreshold = 255;
         command.InColor  = new RasterColor(255, 255, 255);
         command.OutColor = new RasterColor(0, 0, 0);
         command.Channel = IntensityDetectCommandFlags.Master;
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub IntensityDetectCommandExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As IntensityDetectCommand = New IntensityDetectCommand()
         'Apply the filter.
         command.LowThreshold = 128
         command.HighThreshold = 255
         command.InColor = New RasterColor(255, 255, 255)
         command.OutColor = New RasterColor(0, 0, 0)
         command.Channel = IntensityDetectCommandFlags.Master
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <seealso cref="T:Leadtools.Topics.ChangingBrightnessAndContrast">Changing Brightness and Contrast</seealso>.
             <seealso cref="T:Leadtools.Topics.CorrectingColors">Correcting Colors</seealso>.
             <seealso cref="T:Leadtools.Topics.DetectingAndEnhancingEdgesAndlines">Detecting and Enhancing Edges and Lines</seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.AutoBinaryCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.IntensityDetectCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Effects.SharpenCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.PosterizeCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Effects.MosaicCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Effects.EmbossCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Effects.AverageCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Core.MedianCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Effects.AddNoiseCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Effects.SpatialFilterCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Effects.BinaryFilterCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Core.MaximumCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Core.MinimumCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Effects.OilifyCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.SolarizeCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Core.WindowLevelCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.ChannelMixerCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Effects.DeinterlaceCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.DesaturateCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Effects.EdgeDetectStatisticalCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.LightControlCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Effects.SmoothEdgesCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.AutoColorLevelCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.ColorLevelCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Core.CorrelationListCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.GrayScaleToDuotoneCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.GrayScaleToMultitoneCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Core.HolePunchRemoveCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Color.SelectiveColorCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Effects.SkeletonCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Effects.HighPassCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Core.DeskewCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DiffuseGlowCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlowCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Core.HalfTonePatternCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.Effects.MaskConvolutionCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PerspectiveCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommand"></seealso>.
             <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PointillistCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Color.IntensityDetectCommand.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Color.IntensityDetectCommand" /> class object with default parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.IntensityDetectCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.IntensityDetectCommand.#ctor(System.Int32,System.Int32,Leadtools.RasterColor,Leadtools.RasterColor,Leadtools.ImageProcessing.Color.IntensityDetectCommandFlags)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Color.IntensityDetectCommand" /> class object with explicit parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <param name="low">Lowest intensity to detect. Possible values are between 0 and 255.</param>
      <param name="high">Highest intensity to detect. Possible values are between 0 and 255.</param>
      <param name="inColor">Color used to fill those pixels having an intensity value between LowThreshold and HighThreshold. This parameter has no effect if the Channel property is set to <see cref="T:Leadtools.ImageProcessing.Color.IntensityDetectCommandFlags" />.Master. If for example the Channel propertyr is set to <see cref="T:Leadtools.ImageProcessing.Color.IntensityDetectCommandFlags" />.Red, then the red component of InColor will be used to fill the pixels having a red component value between LowThreshold and HighThreshold.</param>
      <param name="outColor">Used to fill those pixels having an intensity value less than LowThreshold or greater than HighThreshold. This parameter has no effect if the Channel property is <see cref="T:Leadtools.ImageProcessing.Color.IntensityDetectCommandFlags" />.Master. If for example the Channel property is set to <see cref="T:Leadtools.ImageProcessing.Color.IntensityDetectCommandFlags" />.Red, then the red component of OutColor will be used to fill the pixels having a red component value less than LowThreshold or greater than HighThreshold.</param>
      <param name="channel">Flag that indicates the channel to process.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.IntensityDetectCommand" /> on an image.</para>
        <code lang="VB">   Public Sub IntensityDetectConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As IntensityDetectCommand = New IntensityDetectCommand(128, 255, New RasterColor(255, 255, 255), New RasterColor(0, 0, 0), IntensityDetectCommandFlags.Master)
      'Apply the filter.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void IntensityDetectConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         //Apply the filter.
         IntensityDetectCommand command = new IntensityDetectCommand(128, 255, new RasterColor(255, 255, 255), new RasterColor(0, 0, 0), IntensityDetectCommandFlags.Master);
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void IntensityDetectConstructorExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         //Apply the filter.
         IntensityDetectCommand command = new IntensityDetectCommand(128, 255, new RasterColor(255, 255, 255), new RasterColor(0, 0, 0), IntensityDetectCommandFlags.Master);
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub IntensityDetectConstructorExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         'Apply the filter.
         Dim command As IntensityDetectCommand = New IntensityDetectCommand(128, 255, New RasterColor(255, 255, 255), New RasterColor(0, 0, 0), IntensityDetectCommandFlags.Master)
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.IntensityDetectCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this class.
             <strong> Supported in Silverlight</strong>.
</summary>
      <returns>String that contains the name of this class.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.IntensityDetectCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.IntensityDetectCommand.LowThreshold">
      <summary>
            Gets or sets a value that represents the lowest intensity to detect.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Lowest intensity to detect. Possible values are from 0 to 255.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.IntensityDetectCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.IntensityDetectCommand.HighThreshold">
      <summary>
            Gets or sets a value that represents the highest intensity to detect.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Highest intensity to detect. Possible values are from 0 to 255.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.IntensityDetectCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.IntensityDetectCommand.InColor">
      <summary>
            Gets or sets a color used to fill those pixels having an intensity value between LowThreshold and HighThreshold.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Color used to fill those pixels having an intensity value between LowThreshold and HighThreshold. This property has no effect if the Channel property is set to <see cref="T:Leadtools.ImageProcessing.Color.IntensityDetectCommandFlags" />.Master. If for example the Channel property is set to <see cref="T:Leadtools.ImageProcessing.Color.IntensityDetectCommandFlags" />.Red, then the red component of InColor will be used to fill the pixels having a red component value between LowThreshold and HighThreshold.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.IntensityDetectCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.IntensityDetectCommand.OutColor">
      <summary>
            Gets or sets a color used to fill those pixels having an intensity value less than LowThreshold or greater than HighThreshold.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Color used to fill those pixels having an intensity value less than LowThreshold or greater than HighThreshold. This property has no effect if the Channel property is <see cref="T:Leadtools.ImageProcessing.Color.IntensityDetectCommandFlags" />.Master. If for example the Channel property is set to Red, then the red component of OutColor will be used to fill the pixels having a red component value less than LowThreshold or greater than HighThreshold. </value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.IntensityDetectCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.IntensityDetectCommand.Channel">
      <summary>
            Gets or sets a flag that indicates the channel to process.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Value that indicates the channel to process.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.IntensityDetectCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.Color.DynamicBinaryCommand">
      <summary>
            Converts an image into a black and white image without changing its bits
            per pixel by using a local threshold value for each pixel of the image.
            This function is useful for pre-processing images 
            for the purpose of 
            <a href="http://support.leadtools.com/cs/forums/18165/ShowPost.aspx">improving barcode recognition</a> results.
             <strong> Supported in Silverlight</strong>.
</summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>This class converts an image into a black and white image
                        without changing its bits per pixel.</description>
          </item>
          <item>
            <description>Each pixel is compared to a dynamically-calculated threshold.
                        If the intensity of the pixel is higher (that is, the pixel is brighter)
                        than the dynamic threshold, the pixel will be set to white. If the
                        intensity of the pixel is lower (that is, the pixel is darker) than the
                        dynamic threshold, the pixel will be set to black.</description>
          </item>
          <item>
            <description>Here are some hints on using this class:</description>
          </item>
          <item>
            <description>Increasing the LocalContrast property increases the number of
                        pixels that use the global threshold. This tends to preserve the general
                        aspect of the image and reduces the improvement in the areas with many
                        details. Reducing the LocalContrast property, increases the contrast in
                        areas with many details.</description>
          </item>
          <item>
            <description>Increasing the Dimension property increases the area used for
                        local contrast. This makes the color changes smoother.</description>
          </item>
          <item>
            <description>This class is good as a prerequisite for converting scanned
                        images to 1-bit, because it uses one threshold for background and another
                        for text.</description>
          </item>
          <item>
            <description>
                            This class supports 12 and 16-bit grayscale and 48 and 64-bit color
                            images. Support for 12 and 16-bit grayscale and 48 and 64-bit color
                            images is available only in the
                            <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see>
                            toolkits.
                        </description>
          </item>
          <item>
            <description>This class does not support signed data images.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale
                        images.</description>
          </item>
        </list>Use the <see cref="T:Leadtools.ImageProcessing.Color.AutoBinaryCommand" />
                when you simply want to apply binary segmentation to the bitmap using an
                automatically calculated threshold based on a two-peak method of statistical
                analysis on its histogram. Use the
                <see cref="T:Leadtools.ImageProcessing.Color.DynamicBinaryCommand" /> to convert
                an image into a black and white image without changing its bits per pixel. Use the
                <a href="ms-help://Leadtools.DotNet17/Leadtools.ImageProcessing.Core/Leadtools.ImageProcessing.Core~Leadtools.ImageProcessing.Core.AutoBinarizeCommand.html">
                AutoBinarizeCommand</a> if you want: 
                <list type="bullet"><item><description>Automatic pre-processing</description></item><item><description>Pre-processing to include background elimination</description></item><item><description>Pre-processing to include color leveling</description></item><item><description>To perform automatic, percentile or median
                        thresholding</description></item><item><description>To manually specify a threshold value</description></item></list>For more information, refer to
                <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.<br />
                For more information, refer to
                <see cref="T:Leadtools.Topics.ChangingBrightnessAndContrast">Changing Brightness and
                Contrast</see>.<br />
                For more information, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Leadtools~Leadtools.Topics.RemovingNoise.html">Removing
                Noise</a>.
            </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.DynamicBinaryCommand" /> on an image.</para>
        <code lang="VB">   Public Sub DynamicBinaryCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As DynamicBinaryCommand = New DynamicBinaryCommand
      command.Dimension = 8
      command.LocalContrast = 16
      ' convert it into a black and white image without changing its bits per pixel.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void DynamicBinaryCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         DynamicBinaryCommand command = new DynamicBinaryCommand();
         command.Dimension     = 8;
         command.LocalContrast = 16;
         // convert it into a black and white image without changing its bits per pixel.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void DynamicBinaryCommandExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         DynamicBinaryCommand command = new DynamicBinaryCommand();
         command.Dimension     = 8;
         command.LocalContrast = 16;
         // convert it into a black and white image without changing its bits per pixel.
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub DynamicBinaryCommandExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As DynamicBinaryCommand = New DynamicBinaryCommand()
         command.Dimension = 8
         command.LocalContrast = 16
         ' convert it into a black and white image without changing its bits per pixel.
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <seealso cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</seealso>
      <seealso cref="T:Leadtools.Topics.ChangingBrightnessAndContrast">Changing Brightness and Contrast</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Leadtools~Leadtools.Topics.RemovingNoise.html">Removing Noise</seealso>
      <seealso cref="T:Leadtools.ImageProcessing.Color.IntensityDetectCommand">
      </seealso>
      <seealso cref="T:Leadtools.ImageProcessing.Core.MedianCommand">
      </seealso>
      <seealso cref="T:Leadtools.ImageProcessing.Effects.BinaryFilterCommand">
      </seealso>
      <seealso cref="T:Leadtools.ImageProcessing.Core.MaximumCommand">
      </seealso>
      <seealso cref="T:Leadtools.ImageProcessing.Core.MinimumCommand">
      </seealso>
      <seealso cref="T:Leadtools.ImageProcessing.Core.WindowLevelCommand">
      </seealso>
      <seealso cref="T:Leadtools.ImageProcessing.Core.DespeckleCommand">
      </seealso>
      <seealso cref="T:Leadtools.ImageProcessing.Core.DeskewCommand">
      </seealso>
      <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand">
      </seealso>
      <seealso cref="T:Leadtools.ImageProcessing.Core.DeskewCommand">
      </seealso>
      <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.DiffuseGlowCommand">
      </seealso>
      <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.GlowCommand">
      </seealso>
      <seealso cref="T:Leadtools.ImageProcessing.Core.HalfTonePatternCommand">
      </seealso>
      <seealso cref="T:Leadtools.ImageProcessing.Effects.HighPassCommand">
      </seealso>
      <seealso cref="T:Leadtools.ImageProcessing.Effects.MaskConvolutionCommand">
      </seealso>
      <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PerspectiveCommand">
      </seealso>
      <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PlasmaCommand">
      </seealso>
      <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PointillistCommand">
      </seealso>
      <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FragmentCommand">
      </seealso>
      <seealso cref="T:Leadtools.ImageProcessing.Effects.UnsharpMaskCommand">
      </seealso>
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.DynamicBinaryCommand.#ctor">
      <summary>
            Initializes a new DynamicBinaryCommand class object with default parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.DynamicBinaryCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.DynamicBinaryCommand.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new DynamicBinaryCommand class object with explicit parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <param name="dimension">Dimensions of the neighborhood used when 
            evaluating each pixel (Dimension x Dimension), in pixels. This 
            should be at least 1. </param>
      <param name="localContrast">Local contrast threshold. If the contrast
            of the area surrounding the pixel is less than the LocalContrast property, the
            pixel is converted to black or white using a global pre-calculated 
            threshold. If the contrast of the area surrounding the pixel is higher
            than the LocalContrast property, the local threshold value is calculated 
            and used. The range for the LocalContrast property is 0 to 255 for 8-bit,
            0 to 4095 for 12-bit and 0 to 65535 for 16-bit.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.DynamicBinaryCommand" /> on an image.</para>
        <code lang="VB">   Public Sub DynamicBinaryConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As DynamicBinaryCommand = New DynamicBinaryCommand(8, 16)
      ' convert it into a black and white image without changing its bits per pixel.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void DynamicBinaryConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         DynamicBinaryCommand command = new DynamicBinaryCommand(8, 16);
         // convert it into a black and white image without changing its bits per pixel.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void DynamicBinaryConstructorExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         DynamicBinaryCommand command = new DynamicBinaryCommand(8, 16);
         // convert it into a black and white image without changing its bits per pixel.
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub DynamicBinaryConstructorExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As DynamicBinaryCommand = New DynamicBinaryCommand(8, 16)
         ' convert it into a black and white image without changing its bits per pixel.
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.DynamicBinaryCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this class.
             <strong> Supported in Silverlight</strong>.
</summary>
      <returns>String that contains the name of this class.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.DynamicBinaryCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.DynamicBinaryCommand.Dimension">
      <summary>
            Gets or sets the dimensions of the neighborhood used when evaluating each pixel 
            (Dimension x Dimension), in pixels.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Dimensions of the neighborhood used when evaluating each pixel
            (Dimension x Dimension), in pixels. This should be at 
            least 1.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.DynamicBinaryCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.DynamicBinaryCommand.LocalContrast">
      <summary>
            Gets or set the local contrast threshold.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Local contrast threshold. If the contrast of the area 
            surrounding the pixel is less than the LocalContrast property, the pixel is 
            converted to black or white using a global pre-calculated threshold. 
            If the contrast of the area surrounding the pixel is higher than 
            the LocalContrast property, the local threshold value is calculated and 
            used. The range for the LocalContrast property is 0 to 255 for 8-bit, 0 
            to 4095 for 12-bit and 0 to 65535 for 16-bit.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.DynamicBinaryCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.Color.LightControlCommandType">
      <summary>
            Indicates which color space to remap.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.LightControlCommandType.Rgb">
      <summary>
            Use the histogram of the RGB color space. (separated channels).
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.LightControlCommandType.Yuv">
      <summary>
            Use the histogram of the YUV color space.(Best results).
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.LightControlCommandType.Gray">
      <summary>
            Use the histogram of a gray level representation of the image.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.Color.LightControlCommand">
      <summary>
            Lightens or darkens all or part of an image by remapping the pixel values. 
            This function is useful for pre-processing images 
            for the purpose of 
            <a href="http://support.leadtools.com/cs/forums/18165/ShowPost.aspx">improving barcode recognition</a> results.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>This class remaps the pixel values of the image across the full range of available pixel values, in order to achieve the values passed in LowerAverage, Average and UpperAverage. For example, call this method for a grayscale image, with Average containing 150, LowerAverage containing 100 and UpperAverage containing 190. The pixels of the image will be remapped so that the new average pixel value for the entire image will be 150, the new average value for those pixels with a value between 0 and the average value for the entire image will be 100, and the new average value for those pixels with a value between the average value for the entire image and the maximum pixel value in the image will be 190.</description>
          </item>
          <item>
            <description>This class supports 12 and 16-bit grayscale and 48 and 64-bit color images. Support for 12 and 16-bit grayscale and 48 and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This class does not support signed data images.</description>
          </item>
          <item>
            <description>For an example, see the following figure:  <br /><img src="LightControl_before.jpg" /><br /></description>
          </item>
          <item>
            <description>The following figure shows the same image, after the effect has been applied: <br /><img src="LightControl_after.jpg" /><br /></description>
          </item>
          <item>
            <description>To obtain this effect, the following settings were used with the method: LowerAverage = 100 <br /> Average = 255 <br /> UpperAverage = 255 <br /> Type = <see cref="T:Leadtools.ImageProcessing.Color.LightControlCommandType" />.Yuv</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <see cref="T:Leadtools.Topics.ChangingBrightnessAndContrast">Changing Brightness and Contrast</see>.
            <br />
            For more information, refer to <see cref="T:Leadtools.Topics.CorrectingColors">Correcting Colors</see>.<br /></remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.LightControlCommand" /> on an image.</para>
        <code lang="VB">   Public Sub LightControlCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim LowerAverage() As Integer
      ReDim LowerAverage(2)
      Dim Average() As Integer
      ReDim Average(2)
      Dim UpperAverage() As Integer
      ReDim UpperAverage(2)
      LowerAverage(0) = 100  'for blue, gray or yuv
      LowerAverage(1) = 120  'for green
      LowerAverage(2) = 80   'for red
      Average(0) = 150       'for blue, gray or yuv
      Average(1) = 140       'for green
      Average(2) = 128       'for red
      UpperAverage(0) = 190  'for blue, gray or yuv
      UpperAverage(1) = 200  'for green
      UpperAverage(2) = 220  'for red 
      Dim command As LightControlCommand = New LightControlCommand(LowerAverage, Average, UpperAverage, LightControlCommandType.Yuv)
      ' change the lightness of the image.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void LightControlCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         int[] LowerAverage = new int[3];
         int[] Average  = new int[3];
         int[] UpperAverage = new int[3];
         LowerAverage[0] = 100;  //for blue, gray or yuv
         LowerAverage[1] = 120;  //for green
         LowerAverage[2] = 80;   //for red
         Average[0] = 150;       //for blue, gray or yuv
         Average[1] = 140;       //for green
         Average[2] = 128;       //for red
         UpperAverage[0] = 190;  //for blue, gray or yuv
         UpperAverage[1] = 200;  //for green
         UpperAverage[2] = 220;  //for red 
         LightControlCommand command = new LightControlCommand(LowerAverage, Average, UpperAverage, LightControlCommandType.Yuv);
         // change the lightness of the image.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void LightControlCommandExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         int[] LowerAverage = new int[3];
         int[] Average  = new int[3];
         int[] UpperAverage = new int[3];
         LowerAverage[0] = 100;  //for blue, gray or yuv
         LowerAverage[1] = 120;  //for green
         LowerAverage[2] = 80;   //for red
         Average[0] = 150;       //for blue, gray or yuv
         Average[1] = 140;       //for green
         Average[2] = 128;       //for red
         UpperAverage[0] = 190;  //for blue, gray or yuv
         UpperAverage[1] = 200;  //for green
         UpperAverage[2] = 220;  //for red 
         LightControlCommand command = new LightControlCommand(LowerAverage, Average, UpperAverage, LightControlCommandType.Yuv);
         // change the lightness of the image.
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub LightControlCommandExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim LowerAverage As Integer() = New Integer(2){}
         Dim Average As Integer() = New Integer(2){}
         Dim UpperAverage As Integer() = New Integer(2){}
         LowerAverage(0) = 100 'for blue, gray or yuv
         LowerAverage(1) = 120 'for green
         LowerAverage(2) = 80 'for red
         Average(0) = 150 'for blue, gray or yuv
         Average(1) = 140 'for green
         Average(2) = 128 'for red
         UpperAverage(0) = 190 'for blue, gray or yuv
         UpperAverage(1) = 200 'for green
         UpperAverage(2) = 220 'for red
         Dim command As LightControlCommand = New LightControlCommand(LowerAverage, Average, UpperAverage, LightControlCommandType.Yuv)
         ' change the lightness of the image.
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
            For more information, refer to <see cref="T:Leadtools.Topics.ChangingBrightnessAndContrast">Changing Brightness and Contrast</see>.
            <seealso cref="T:Leadtools.Topics.CorrectingColors">Correcting Colors</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SharpenCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.PosterizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EmbossCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.AverageCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MedianCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.AddNoiseCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.IntensityDetectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SpatialFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.BinaryFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MaximumCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MinimumCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OilifyCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SolarizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.WindowLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.PixelateCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AutoColorLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.CorrelationListCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.GrayScaleToDuotoneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.GrayScaleToMultitoneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.HolePunchRemoveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SelectiveColorCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SkeletonCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AdjustTintCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.HalfToneCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Color.LightControlCommand.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Color.LightControlCommand" /> class object with default parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.LightControlCommand" /> on an image.</para>
        <code lang="VB">   Public Sub LightControlConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim LowerAverage() As Integer
      ReDim LowerAverage(2)
      LowerAverage(0) = 100 'for blue, gray or yuv
      LowerAverage(1) = 120 'for green
      LowerAverage(2) = 80 'for red

      Dim Average() As Integer
      ReDim Average(2)
      Average(0) = 150 'for blue, gray or yuv
      Average(1) = 140 'for green
      Average(2) = 128 'for red

      Dim UpperAverage() As Integer
      ReDim UpperAverage(2)
      UpperAverage(0) = 190 'for blue, gray or yuv
      UpperAverage(1) = 200 'for green
      UpperAverage(2) = 220 'for red 

      Dim command As LightControlCommand = New LightControlCommand
      command.LowerAverage = LowerAverage
      command.UpperAverage = UpperAverage
      command.Average = Average
      command.Type = LightControlCommandType.Yuv

      ' change the lightness of the image.
      command.Run(leadImage)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void LightControlConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         int[] LowerAverage = new int[3];
         LowerAverage[0] = 100; //for blue, gray or yuv
         LowerAverage[1] = 120; //for green
         LowerAverage[2] = 80; //for red

         int[] Average  = new int[3];
         Average[0] = 150; //for blue, gray or yuv
         Average[1] = 140; //for green
         Average[2] = 128; //for red

         int[] UpperAverage = new int[3];
         UpperAverage[0] = 190; //for blue, gray or yuv
         UpperAverage[1] = 200; //for green
         UpperAverage[2] = 220; //for red 

         LightControlCommand command = new LightControlCommand();
         command.LowerAverage = LowerAverage;
         command.Average = Average;
         command.UpperAverage = UpperAverage;
         command.Type = LightControlCommandType.Yuv;
         // change the lightness of the image.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void LightControlConstructorExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         int[] LowerAverage = new int[3];
         LowerAverage[0] = 100; //for blue, gray or yuv
         LowerAverage[1] = 120; //for green
         LowerAverage[2] = 80; //for red
         int[] Average  = new int[3];
         Average[0] = 150; //for blue, gray or yuv
         Average[1] = 140; //for green
         Average[2] = 128; //for red

         int[] UpperAverage = new int[3];
         UpperAverage[0] = 190; //for blue, gray or yuv
         UpperAverage[1] = 200; //for green
         UpperAverage[2] = 220; //for red 

         LightControlCommand command = new LightControlCommand();
         command.LowerAverage = LowerAverage;
         command.Average = Average;
         command.UpperAverage = UpperAverage;
         command.Type = LightControlCommandType.Yuv;
         // change the lightness of the image.
         command.Run(image);

         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub LightControlConstructorExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim LowerAverage As Integer() = New Integer(2){}
         LowerAverage(0) = 100 'for blue, gray or yuv
         LowerAverage(1) = 120 'for green
         LowerAverage(2) = 80 'for red
         Dim Average As Integer() = New Integer(2){}
         Average(0) = 150 'for blue, gray or yuv
         Average(1) = 140 'for green
         Average(2) = 128 'for red

         Dim UpperAverage As Integer() = New Integer(2){}
         UpperAverage(0) = 190 'for blue, gray or yuv
         UpperAverage(1) = 200 'for green
         UpperAverage(2) = 220 'for red

         Dim command As LightControlCommand = New LightControlCommand()
         command.LowerAverage = LowerAverage
         command.Average = Average
         command.UpperAverage = UpperAverage
         command.Type = LightControlCommandType.Yuv
         ' change the lightness of the image.
         command.Run(image)

         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.LightControlCommand.#ctor(System.Int32[],System.Int32[],System.Int32[],Leadtools.ImageProcessing.Color.LightControlCommandType)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Color.LightControlCommand" /> class object with explicit parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <param name="lowerAverage">An array that contains the new average pixel value for those pixels with values between 0 and the average pixel value for the entire image. The size of the array equals one, if Type is <see cref="T:Leadtools.ImageProcessing.Color.LightControlCommandType" />.Yuv or <see cref="T:Leadtools.ImageProcessing.Color.LightControlCommandType" />.Gray, or three, if Type is <see cref="T:Leadtools.ImageProcessing.Color.LightControlCommandType" />.Rgb. If Type is <see cref="T:Leadtools.ImageProcessing.Color.LightControlCommandType" />.Rgb the first element corresponds to the new blue lower average value, the second element to the green, and the last element to the red.</param>
      <param name="average">An array that contains the new average pixel value for the entire image. The size of the array equals one, if Type is <see cref="T:Leadtools.ImageProcessing.Color.LightControlCommandType" />.Yuv or <see cref="T:Leadtools.ImageProcessing.Color.LightControlCommandType" />.Gray, or three, if Type is <see cref="T:Leadtools.ImageProcessing.Color.LightControlCommandType" />.Rgb. If Type is <see cref="T:Leadtools.ImageProcessing.Color.LightControlCommandType" />.Rgb the first element corresponds to the new blue average value, the second element to the green, and the last element to the red.</param>
      <param name="upperAverage">An array that contains the new average pixel value for those pixels with values between the average pixel value for the entire image and the highest pixel value in the image. The size of the array equals either one if Type is <see cref="T:Leadtools.ImageProcessing.Color.LightControlCommandType" />.Yuv or <see cref="T:Leadtools.ImageProcessing.Color.LightControlCommandType" />.Gray or three if Type is <see cref="T:Leadtools.ImageProcessing.Color.LightControlCommandType" />.Rgb where the first element corresponds to the new blue upper side average value, the second element to the green, and the last element to the red.</param>
      <param name="type">Flag that indicates which color space to remap.</param>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.LightControlCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.LightControlCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this class.
             <strong> Supported in Silverlight</strong>.
</summary>
      <returns>String that is the name of this method.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.LightControlCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.LightControlCommand.LowerAverage">
      <summary>
            Gets or sets an array that contains the new average pixel value for those pixels with values between 0 and the average pixel value for the entire image.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>An array that contains the new average pixel value for those pixels with values between 0 and the average pixel value for the entire image. The size of the array equals one, if Type is <see cref="T:Leadtools.ImageProcessing.Color.LightControlCommandType" />.Yuv or <see cref="T:Leadtools.ImageProcessing.Color.LightControlCommandType" />.Gray, or three, if Type is <see cref="T:Leadtools.ImageProcessing.Color.LightControlCommandType" />.Rgb. If Type is <see cref="T:Leadtools.ImageProcessing.Color.LightControlCommandType" />.Rgb the first element corresponds to the new blue lower average value, the second element to the green, and the last element to the red.</value>
      <example>
            Refer to <see cref="M:Leadtools.ImageProcessing.Color.LightControlCommand.#ctor">LightControlCommand()</see></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.LightControlCommand.Average">
      <summary>
            Gets or sets an array that contains the new average pixel value for the entire image.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>An array that contains the new average pixel value for the entire image. The size of the array equals one, if Type is <see cref="T:Leadtools.ImageProcessing.Color.LightControlCommandType" />.Yuv or <see cref="T:Leadtools.ImageProcessing.Color.LightControlCommandType" />.Gray, or three, if Type is <see cref="T:Leadtools.ImageProcessing.Color.LightControlCommandType" />.Rgb. If Type is <see cref="T:Leadtools.ImageProcessing.Color.LightControlCommandType" />.Rgb the first element corresponds to the new blue average value, the second element to the green, and the last element to the red.</value>
      <example>
            Refer to <see cref="M:Leadtools.ImageProcessing.Color.LightControlCommand.#ctor">LightControlCommand()</see></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.LightControlCommand.UpperAverage">
      <summary>
            An array that contains the new average pixel value for those pixels with values between the average pixel value for the entire image and the highest pixel value in the image.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>An array contain the new average pixel value for those pixels with values between the average pixel value for the entire image and the highest pixel value in the image. The size of the array equals either one if Type is <see cref="T:Leadtools.ImageProcessing.Color.LightControlCommandType" />.Yuv or <see cref="T:Leadtools.ImageProcessing.Color.LightControlCommandType" />.Gray or three if Type is <see cref="T:Leadtools.ImageProcessing.Color.LightControlCommandType" />.Rgb where the first element corresponds to the new blue upper side average value, the second element to the green, and the last element to the red. </value>
      <example>
            Refer to <see cref="M:Leadtools.ImageProcessing.Color.LightControlCommand.#ctor">LightControlCommand()</see></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.LightControlCommand.Type">
      <summary>
            Gets or sets a value that indicates which color space to remap.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Value that indicates which color space to remap.</value>
      <example>
            Refer to <see cref="M:Leadtools.ImageProcessing.Color.LightControlCommand.#ctor">LightControlCommand()</see></example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.Color.AddCommandType">
      <summary>
            Enumeration flags that identify the operation to perform.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.AddCommandType.Average">
      <summary>
            Average the images in the list.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.AddCommandType.Add">
      <summary>
            Add the images in the list.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.Color.AddCommand">
      <summary>
            Adds or averages the images in a list.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>This operation can be used to add several images of the same view to improve the lightness or brightness of the image. It can also eliminate the random noise contained in these images by doing an average of all images.</description>
          </item>
          <item>
            <description>This command performs operations between data byte-by-byte. An image can be any color resolution. This command will allocate and store the resulting image in the <see cref="P:Leadtools.ImageProcessing.Color.AddCommand.DestinationImage">DestinationImage property</see>. The image resulting from this operation is internally copied from the first image in the list, before performing the adding operation. The operations are performed based on the smallest width and height of the input images.</description>
          </item>
          <item>
            <description>All images must be either signed or unsigned.</description>
          </item>
          <item>
            <description>This command supports 12 and 16-bit grayscale and 48 and 64-bit color images. Support for 12 and 16-bit grayscale and 48 and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <see cref="T:Leadtools.Topics.ChangingBrightnessAndContrast">Changing Brightness and Contrast</see>.
            </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.AddCommand" /> on an image.</para>
        <code lang="VB">   Public Sub AddCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As AddCommand = New AddCommand(AddCommandType.Add)
      command.Run(leadImage)
      codecs.Save(command.DestinationImage, LeadtoolsExamples.Common.ImagesPath.Path + "AddCommandResult.Bmp", RasterImageFormat.Bmp, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void AddCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         AddCommand command = new AddCommand(AddCommandType.Add);
         command.Run(image);
         codecs.Save(command.DestinationImage, LeadtoolsExamples.Common.ImagesPath.Path + "AddCommandResult.bmp", RasterImageFormat.Bmp, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void AddCommandExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         AddCommand command = new AddCommand(AddCommandType.Add);
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub AddCommandExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As AddCommand = New AddCommand(AddCommandType.Add)
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <seealso cref="T:Leadtools.Topics.ChangingBrightnessAndContrast">Changing Brightness and Contrast</seealso>.
            <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Leadtools~Leadtools.Topics.RemovingNoise.html">Removing Noise</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.CombineCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.BricksTextureCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.CanvasCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.DisplacementCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FragmentCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.VignnetCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AdjustTintCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.GammaCorrectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.HighPassCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.UnsharpMaskCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Color.AddCommand.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Color.AddCommand" /> class object with default parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.AddCommand" /> on an image.</para>
        <code lang="VB">   Public Sub AddConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As AddCommand = New AddCommand
      ' Add Option.
      command.Type = AddCommandType.Add
      command.Run(leadImage)
      ' Return the result.
      codecs.Save(command.DestinationImage, LeadtoolsExamples.Common.ImagesPath.Path + "AddCommandResult.Bmp", RasterImageFormat.Bmp, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void AddConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         AddCommand command = new AddCommand();
         //Add Option.
         command.Type = AddCommandType.Add;
         command.Run(image);
         //Return the result.
         codecs.Save(command.DestinationImage, LeadtoolsExamples.Common.ImagesPath.Path + "AddCommandResult.bmp", RasterImageFormat.Bmp, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void AddConstructorExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         AddCommand command = new AddCommand();
         //Add Option.
         command.Type = AddCommandType.Add;
         command.Run(image);
         //Return the result.
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub AddConstructorExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As AddCommand = New AddCommand()
         'Add Option.
         command.Type = AddCommandType.Add
         command.Run(image)
         'Return the result.
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.AddCommand.#ctor(Leadtools.ImageProcessing.Color.AddCommandType)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Color.AddCommand" /> class object with explicit parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <param name="type">Value that indicates the operation to perform.</param>
      <remarks>
            For more information, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Leadtools~Leadtools.Topics.RemovingNoise.html">Removing Noise</a>.
            </remarks>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.AddCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.AddCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this method.
             <strong> Supported in Silverlight</strong>.
</summary>
      <returns>Character string that contains the name of this method.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.AddCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.AddCommand.Type">
      <summary>
            Gets or sets a value that indicates the operation to perform.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Value that indicates the operation to perform.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.AddCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.AddCommand.DestinationImage">
      <summary>
            (Read only) Gets the RasterImage object that references the resulting image on which the effect is applied.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>
            The RasterImage object that references the resulting image on which the effect is applied.
            </value>
      <Remarks>The <see cref="T:Leadtools.ImageProcessing.Color.AddCommand" /> command updates the value of this property.</Remarks>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.AddCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.Color.DesaturateCommand">
      <summary>
            Converts the image to a grayscale level by reducing the saturation of each color to zero. The conversion will not change the color resolution.
             <strong> Supported in Silverlight</strong>.
</summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>The image is converted to a grayscale level by reducing the saturation of each color to zero.</description>
          </item>
          <item>
            <description>This class supports only RGB images. It does not support grayscale images.</description>
          </item>
          <item>
            <description>Support for 48-bit and 64-bit colored images are available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This class does not support signed data images.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.<br />
            For more information, refer to <see cref="T:Leadtools.Topics.GrayScaleImages">Grayscale Images</see>.
            </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.DesaturateCommand" /> on an image.</para>
        <code lang="VB">   Public Sub DesaturateCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      ' Apply deSaturate effect on the image.
      Dim command As DesaturateCommand = New DesaturateCommand
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void DesaturateCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         // Apply deSaturate effect on the image.
         DesaturateCommand command = new DesaturateCommand();
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void DesaturateCommandExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         // Apply deSaturate effect on the image.
         DesaturateCommand command = new DesaturateCommand();
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub DesaturateCommandExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         ' Apply deSaturate effect on the image.
         Dim command As DesaturateCommand = New DesaturateCommand()
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <seealso cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</seealso>.
            <seealso cref="T:Leadtools.Topics.GrayScaleImages">Grayscale Images</seealso>.
            <seealso cref="T:Leadtools.Topics.ColorHalftoneandHalftoneImages">Color Halftone and Halftone Images</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.BalanceColorsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.GrayscaleCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.GrayScaleExtendedCommand"></seealso>.
            <seealso cref="P:Leadtools.RasterImage.IsGray"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AutoColorLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.CorrelationListCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.GrayScaleToDuotoneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.GrayScaleToMultitoneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.HolePunchRemoveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SelectiveColorCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SkeletonCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Color.DesaturateCommand.#ctor">
      <summary>
            Initializes a new DesaturateCommand class object with default parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.DesaturateCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.DesaturateCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this class.
             <strong> Supported in Silverlight</strong>.
</summary>
      <returns>String that contains the name of this class.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.DesaturateCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="T:Leadtools.ImageProcessing.Color.HistogramEqualizeCommand">
      <summary>
            Linearizes the number of pixels, in an image, based on the specified 
            color space. This can be used to bring out the detail in dark areas of 
            an image. 
            This function is useful for pre-processing images 
            for the purpose of 
            <a href="http://support.leadtools.com/cs/forums/18165/ShowPost.aspx">improving barcode recognition</a> results.
             <strong> Supported in Silverlight</strong>.
</summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>Previously this class only equalized the number of 
            pixels per gray level, using a gray level representation of the image. 
            This functionality is now obtained by passing <see cref="T:Leadtools.ImageProcessing.Color.HistogramEqualizeType" />.Gray
            for the Type property.</description>
          </item>
          <item>
            <description>For the best results, set Type to <see cref="T:Leadtools.ImageProcessing.Color.HistogramEqualizeType" />.Yuv</description>
          </item>
          <item>
            <description>This class can process the whole image or a region of the image.</description>
          </item>
          <item>
            <description>This class supports 12 and 16-bit grayscale and 48 and 64-bit color images. Support for 12 and 16-bit grayscale and 48 and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <see cref="T:Leadtools.Topics.ChangingBrightnessAndContrast">Changing Brightness and Contrast</see>.
            </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.HistogramEqualizeCommand" /> on an image and apply histogram equalization with YUV color space.</para>
        <code lang="VB">   Public Sub HistogramEqualizeCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As HistogramEqualizeCommand = New HistogramEqualizeCommand
      'Histogram equalize the image.
      command.Type = HistogramEqualizeType.Yuv

      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void HistogramEqualizeCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         HistogramEqualizeCommand command = new HistogramEqualizeCommand();
         //Histogram equalize the image.
         command.Type   = HistogramEqualizeType.Yuv;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void HistogramEqualizeCommandExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         HistogramEqualizeCommand command = new HistogramEqualizeCommand();
         //Histogram equalize the image.
         command.Type   = HistogramEqualizeType.Yuv;
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub HistogramEqualizeCommandExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As HistogramEqualizeCommand = New HistogramEqualizeCommand()
         'Histogram equalize the image.
         command.Type = HistogramEqualizeType.Yuv
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <seealso cref="T:Leadtools.Topics.ChangingBrightnessAndContrast">Changing Brightness and Contrast</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.GammaCorrectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeContrastCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.HistogramContrastCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.StretchIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.RemapIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.InvertCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeHueCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeSaturationCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.FillCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.HistogramCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.WindowLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChannelMixerCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.DeinterlaceCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.DesaturateCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EdgeDetectStatisticalCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.LightControlCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SmoothEdgesCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.LocalHistogramEqualizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AddWeightedCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorMergeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorSeparateCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.MultiplyCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AutoColorLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.CorrelationListCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.GrayScaleToDuotoneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.GrayScaleToMultitoneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.HolePunchRemoveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SelectiveColorCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SkeletonCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeHueSaturationIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorReplaceCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorThresholdCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.MathematicalFunctionCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SegmentCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AdaptiveContrastCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ApplyMathematicalLogicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorIntensityBalanceCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.ColorizeGrayCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ContrastBrightnessIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.DigitalSubtractCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.DynamicBinaryCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EdgeDetectEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MultiscaleEnhancementCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.SelectDataCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.ShiftDataCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Color.HistogramEqualizeCommand.#ctor">
      <summary>
            Initializes a new HistogramEqualizeCommand class object with default parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.HistogramEqualizeCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.HistogramEqualizeCommand.#ctor(Leadtools.ImageProcessing.Color.HistogramEqualizeType)">
      <summary>
            Initializes a new HistogramEqualizeCommand class object with explicit parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <param name="type">Flag that indicates which color space to equalize.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.HistogramEqualizeCommand" /> on an image and applies histogram equalization with YUV color space.</para>
        <code lang="VB">   Public Sub HistogramEqualizeConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As HistogramEqualizeCommand = New HistogramEqualizeCommand(HistogramEqualizeType.Yuv)
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void HistogramEqualizeConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         HistogramEqualizeCommand command = new HistogramEqualizeCommand(HistogramEqualizeType.Yuv);
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void HistogramEqualizeConstructorExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         HistogramEqualizeCommand command = new HistogramEqualizeCommand(HistogramEqualizeType.Yuv);
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub HistogramEqualizeConstructorExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As HistogramEqualizeCommand = New HistogramEqualizeCommand(HistogramEqualizeType.Yuv)
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.HistogramEqualizeCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this class.
             <strong> Supported in Silverlight</strong>.
</summary>
      <returns>String that contains the name of this class.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.HistogramEqualizeCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.HistogramEqualizeCommand.Type">
      <summary>
            Gets or sets a flag that indicates which color space to equalize.
              <strong> Supported in Silverlight</strong>.
</summary>
      <value>Value that indicates which color space to equalize.</value>
      <example>
             Refer to <see cref="T:Leadtools.ImageProcessing.Color.HistogramEqualizeCommand" />.
             </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.Color.HistogramEqualizeType">
      <summary>
            This enumeration will contain all types needed to indicate which color space is selected.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.HistogramEqualizeType.None">
      <summary>
            No Flags.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.HistogramEqualizeType.Rgb">
      <summary>
            Linearizes the number of pixels across the RGB color space.(separated channels).
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.HistogramEqualizeType.Yuv">
      <summary>
            Linearizes the number of pixels across the YUV color space.(Best results).
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.HistogramEqualizeType.Gray">
      <summary>
            Linearizes the number of pixels per gray level in a gray level representation of the image.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.Color.GrayScaleToDuotoneCommandMixingType">
      <summary>
            This enumeration will contain all Types needed to indicate which color space is selected.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.GrayScaleToDuotoneCommandMixingType.MixWithOldValue">
      <summary>
            Mix the old colors with the new ones.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.GrayScaleToDuotoneCommandMixingType.ReplaceOldWithNew">
      <summary>
            Replace the old colors with the new ones.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.Color.ConvertToColoredGrayCommand">
      <summary>
            Converts an image to a grayscale image, then enhances the color components
            based on the class properties. This class is available in the 
            <see cref="T:Leadtools.Topics.RasterProDocMed">Document</see> Toolkits.
             <strong> Supported in Silverlight</strong>.
</summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>This class is more general than the <see cref="T:Leadtools.ImageProcessing.Color.GrayScaleExtendedCommand" />
            class. The ConvertToColoredGrayCommand class can be used to give images a "sepia"
            look by adding a blue or brown color.</description>
          </item>
          <para>
          </para>
          <item>
            <description>
              <para>RedFactor + GreenFactor + BlueFactor must equal
            1000.  (Internally the values are divided by 1000).</para>
            </description>
          </item>
          <item>
            <description>For each pixel in the image the red, green and blue 
            values are modified by the RedFactor, GreenFactor and 
            BlueFactor properties, respectively. This allows the user to give more 
            weight to one color, essentially enhancing that color, before the pixel 
            is converted to grayscale.</description>
          </item>
          <item>
            <description>For example, if this class is used with the 
            RedFactor set to 500, the GreenFactor set to 250 and the BlueFactor set 
            to 250, the red value of each pixel will get 50 percent of the weight when 
            determining the grayscale value. The green value will get 25 percent of the 
            weight and the blue value will get 25 percent of the weight when determining the
            grayscale value. This highlights or enhances the red in the image, prior
            to conversion to grayscale. Upon conversion to grayscale, the red, green
            and blue components of the output pixel are the same. 
            Call this value G. Therefore, the RGB values for the pixel would be (G, 
            G, G).</description>
          </item>
          <item>
            <description>Once the grayscale value for the pixel has been 
            obtained, the red component of the output pixel can be further modified 
            using the RedGrayFactor value. The equation for this can be seen below:</description>
          </item>
          <para>
          </para>
          <para> Goutput-red = G + G * RedGrayFactor / 1000 </para>
          <item>
            <description>The green and blue components are found similarly, 
            using the GreenGrayFactor and the BlueGrayFactor values, respectively.</description>
          </item>
          <item>
            <description>Please note that the RedGrayFactor, GreenGrayFactor 
            and BlueGrayFactor values can be negative. A negative value results in a
            decrease in pixel intensity. A positive value results in an increase in 
            pixel intensity.</description>
          </item>
          <item>
            <description>If RedGrayFactor = GreenGrayFactor = BlueGrayFactor =
            0, then the output is the same as the output from the 
            <see cref="T:Leadtools.ImageProcessing.Color.GrayScaleExtendedCommand" /> method.</description>
          </item>
          <item>
            <description>This class supports 12 and 16-bit grayscale and 48 and 64-bit 
            color images. Support for 12 and 16-bit grayscale and 48 and 64-bit color images is 
            available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This class does not support signed data images.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.<br />
            For more information, refer to <see cref="T:Leadtools.Topics.GrayScaleImages">Grayscale Images</see>.
            </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.ConvertToColoredGrayCommand" /> on an image with RedFactor = 300, GreenFactor = 590, BlueFactor = 110, RedGrayFactor = 500, GreenGrayFactor = 300, BlueGrayFactor = 200.</para>
        <code lang="VB">   Public Sub ConvertToColoredGrayCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As ConvertToColoredGrayCommand = New ConvertToColoredGrayCommand
      'These arguments will transform the image into a grayscale image.
      command.RedFactor = 300
      command.GreenFactor = 590
      command.BlueFactor = 110
      command.RedGrayFactor = 500
      command.GreenGrayFactor = 300
      command.BlueGrayFactor = 200
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void ConvertToColoredGrayCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         ConvertToColoredGrayCommand command = new ConvertToColoredGrayCommand();
         //These arguments will transform the image into a grayscale image.
         command.RedFactor       = 300; 
         command.GreenFactor     = 590;
         command.BlueFactor      = 110;
         command.RedGrayFactor   = 500;
         command.GreenGrayFactor = 300;
         command.BlueGrayFactor  = 200;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void ConvertToColoredGrayCommandExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         ConvertToColoredGrayCommand command = new ConvertToColoredGrayCommand();
         //These arguments will transform the image into a grayscale image.
         command.RedFactor       = 300; 
         command.GreenFactor     = 590;
         command.BlueFactor      = 110;
         command.RedGrayFactor   = 500;
         command.GreenGrayFactor = 300;
         command.BlueGrayFactor  = 200;
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub ConvertToColoredGrayCommandExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As ConvertToColoredGrayCommand = New ConvertToColoredGrayCommand()
         'These arguments will transform the image into a grayscale image.
         command.RedFactor = 300
         command.GreenFactor = 590
         command.BlueFactor = 110
         command.RedGrayFactor = 500
         command.GreenGrayFactor = 300
         command.BlueGrayFactor = 200
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <seealso cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</seealso>.
            <seealso cref="T:Leadtools.Topics.GrayScaleImages">Grayscale Images</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.BalanceColorsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.GrayscaleCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.GrayScaleExtendedCommand"></seealso>.
            <seealso cref="P:Leadtools.RasterImage.IsGray"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Color.ConvertToColoredGrayCommand.#ctor">
      <summary>
            Initializes a new ConvertToColoredGrayCommand with default parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ConvertToColoredGrayCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.ConvertToColoredGrayCommand.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Initializes a new ConvertToColoredGrayCommand class object with explicit parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <param name="redFactor">Value that represents the percentage or weight
            given to the red value of each pixel in the image. Possible values 
            are 0 to 1000.</param>
      <param name="greenFactor">Value that represents the percentage or weight
            given to the green value of each pixel in the image. Possible values 
            are 0 to 1000.</param>
      <param name="blueFactor">Value that represents the percentage or weight
            given to the blue value of each pixel in the image. Possible values 
            are 0 to 1000.</param>
      <param name="redGrayFactor">Additional weighting factor (percentage) 
            used to modify the red component in the output pixel. This value can 
            be negative. Possible values are -1000 to 1000.</param>
      <param name="greenGrayFactor">Additional weighting factor (percentage)
            used to modify the green component in the output pixel. This value can
            be negative. Possible values are -1000 to 1000.</param>
      <param name="blueGrayFactor">Additional weighting factor (percentage)
            used to modify the blue component in the output pixel. This value can
            be negative. Possible values are -1000 to 1000.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.ConvertToColoredGrayCommand" /> on an image with RedFactor = 300, GreenFactor = 590, BlueFactor = 110, RedGrayFactor = 500, GreenGrayFactor = 300, BlueGrayFactor = 200.</para>
        <code lang="VB">   Public Sub ConvertToColoredGrayConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As ConvertToColoredGrayCommand = New ConvertToColoredGrayCommand(300, 590, 110, 500, 300, 200)
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void ConvertToColoredGrayConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         ConvertToColoredGrayCommand command = new ConvertToColoredGrayCommand(300, 590, 110, 500, 300, 200);
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void ConvertToColoredGrayConstructorExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         ConvertToColoredGrayCommand command = new ConvertToColoredGrayCommand(300, 590, 110, 500, 300, 200);
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub ConvertToColoredGrayConstructorExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As ConvertToColoredGrayCommand = New ConvertToColoredGrayCommand(300, 590, 110, 500, 300, 200)
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.ConvertToColoredGrayCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this class.
             <strong> Supported in Silverlight</strong>.
</summary>
      <returns>String that contains the name of this class.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.ConvertToColoredGrayCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.ConvertToColoredGrayCommand.RedFactor">
      <summary>
            Gets or sets a value that represents the percentage or weight given to the red value
            of each pixel in the image.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Value that represents the percentage or weight given to the red
            value of each pixel in the image. Possible values are 0 to 1000.
            </value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ConvertToColoredGrayCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.ConvertToColoredGrayCommand.GreenFactor">
      <summary>
            Gets or sets a value that represents the percentage or weight given to the green 
            value of each pixel in the image.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Value that represents the percentage or weight given to the 
            green value of each pixel in the image. Possible values are 0 to 1000.
            </value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ConvertToColoredGrayCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.ConvertToColoredGrayCommand.BlueFactor">
      <summary>
            Gets or sets a value that represents the percentage or weight given to the blue value
            of each pixel in the image.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Value that represents the percentage or weight given to the 
            blue value of each pixel in the image. Possible values are 0 to 1000.
            </value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ConvertToColoredGrayCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.ConvertToColoredGrayCommand.RedGrayFactor">
      <summary>
            Gets or sets an additional weighting factor (percentage) used to modify the red 
            component in the output pixel.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Additional weighting factor (percentage) used to modify the 
            red component in the output pixel. This value can be negative. 
            Possible values are -1000 to 1000.
            </value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ConvertToColoredGrayCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.ConvertToColoredGrayCommand.GreenGrayFactor">
      <summary>
            Gets or sets an additional weighting factor (percentage) used to modify the green 
            component in the output pixel.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Additional weighting factor (percentage) used to modify the 
            green component in the output pixel. This value can be negative. 
            Possible values are -1000 to 1000.
            </value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ConvertToColoredGrayCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.ConvertToColoredGrayCommand.BlueGrayFactor">
      <summary>
            Gets or sets an additional weighting factor (percentage) used to modify the blue 
            component in the output pixel.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Additional weighting factor (percentage) used to modify the 
            blue component in the output pixel. This value can be negative. 
            Possible values are -1000 to 1000.
            </value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ConvertToColoredGrayCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.Color.ColorReplaceCommandColor">
      <summary>
            Defines the information used by <see cref="T:Leadtools.ImageProcessing.Color.ColorReplaceCommand" /> class.
             <strong> Supported in Silverlight</strong>.
</summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ColorReplaceCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.ColorReplaceCommandColor.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Color.ColorReplaceCommandColor" /> class with default parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ColorReplaceCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.ColorReplaceCommandColor.#ctor(Leadtools.RasterColor,System.Int32)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Color.ColorReplaceCommandColor" /> class with explicit parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <param name="replacedColor">Value that represents the color to be replaced.</param>
      <param name="fuzziness">Value that indicates the + or - range of the color being replaced.  This property only accepts nonzero positive values.</param>
      <example>
            Refer to <see cref="M:Leadtools.ImageProcessing.Color.ColorReplaceCommand.#ctor(Leadtools.ImageProcessing.Color.ColorReplaceCommandColor[],System.Int32,System.Int32,System.Int32)">ColorReplaceCommand (ColorReplaceCommandColor[],int,int,int)</see></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.ColorReplaceCommandColor.Color">
      <summary>
            Gets or sets a value that represents the color to be replaced.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value> Value of the color to be replaced.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ColorReplaceCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.ColorReplaceCommandColor.Fuzziness">
      <summary>
            Gets or sets a value used to indicate the range of colors to be replaced.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value> Value used to indicate the range of colors to be replaced. This property only accepts nonzero positive values.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ColorReplaceCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.Color.ColorReplaceCommand">
      <summary>
            Replaces the specified color by adjusting values of hue, saturation and brightness.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>This command replaces the specified color by adjusting value of hue, saturation and brightness.
            The value of the Fuzziness property of the ColorReplaceCommandColor class determines the range 
            around each color where the pixels will be changed according to Hue, Saturation and Brightness.</description>
          </item>
          <item>
            <description>This command supports 12 and 16-bit grayscale and 48 and 64-bit color images. Support for 12 and 16-bit grayscale and 48 and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support signed data images. </description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
        <br />
            For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.<br />
            For more information, refer to <see cref="T:Leadtools.Topics.CorrectingColors">Correcting Colors</see>.<br /></remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.ColorReplaceCommand" /> on an image to change the red color by rotating its hue 90 degree.</para>
        <code lang="VB">   Public Sub ColorReplaceCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As ColorReplaceCommand = New ColorReplaceCommand
      Dim Data() As ColorReplaceCommandColor
      ReDim Data(0)
      Data(0) = New ColorReplaceCommandColor
      Data(0).Color = New RasterColor(200, 0, 35)
      Data(0).Fuzziness = 300
      command.Colors = Data
      command.Hue = 9000
      command.Saturation = 0
      command.Brightness = 0
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void ColorReplaceCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         ColorReplaceCommand command       = new ColorReplaceCommand();
         ColorReplaceCommandColor[] data   = new ColorReplaceCommandColor[1];
         data[0]                           = new ColorReplaceCommandColor();
         data[0].Color                     = new RasterColor(200, 0, 35);
         data[0].Fuzziness                 = 100;
         command.Colors                    = data;
         command.Hue                       = 9000;
         command.Saturation                = 0;
         command.Brightness                = 0;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void ColorReplaceCommandExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         ColorReplaceCommand command       = new ColorReplaceCommand();
         ColorReplaceCommandColor[] data   = new ColorReplaceCommandColor[1];
         data[0]                           = new ColorReplaceCommandColor();
         data[0].Color                     = new RasterColor(200, 0, 35);
         data[0].Fuzziness                 = 100;
         command.Colors                    = data;
         command.Hue                       = 9000;
         command.Saturation                = 0;
         command.Brightness                = 0;
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub ColorReplaceCommandExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As ColorReplaceCommand = New ColorReplaceCommand()
         Dim data As ColorReplaceCommandColor() = New ColorReplaceCommandColor(0){}
         data(0) = New ColorReplaceCommandColor()
         data(0).Color = New RasterColor(200, 0, 35)
         data(0).Fuzziness = 100
         command.Colors = data
         command.Hue = 9000
         command.Saturation = 0
         command.Brightness = 0
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <seealso cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</seealso>.
            <seealso cref="T:Leadtools.Topics.CorrectingColors">Correcting Colors</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.GammaCorrectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeContrastCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.HistogramContrastCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.StretchIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.RemapIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.InvertCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeSaturationCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.HistogramEqualizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.FillCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.HistogramCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.WindowLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeHueCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.AverageCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MedianCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.AddNoiseCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.IntensityDetectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SpatialFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.BinaryFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MaximumCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MinimumCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ShadowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeHueSaturationIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorThresholdCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.DirectionEdgeStatisticalCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.DiscreteFourierTransformCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.FastFourierTransformCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.FourierTransformDisplayCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.FrequencyFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.FrequencyFilterMaskCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.MathematicalFunctionCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RevEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SegmentCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.SubtractBackgroundCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.UserFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AdjustTintCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.HalfToneCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Color.ColorReplaceCommand.#ctor">
      <summary>
            Initializes a new ColorReplaceCommand class object with default parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ColorReplaceCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.ColorReplaceCommand.#ctor(Leadtools.ImageProcessing.Color.ColorReplaceCommandColor[],System.Int32,System.Int32,System.Int32)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Color.ColorReplaceCommand" />class object with explicit parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <param name="colors">An array of <see cref="T:Leadtools.ImageProcessing.Color.ColorReplaceCommandColor" /> classes 
            that provides information about the replacement color used by this class.</param>
      <param name="hue">Angular amount to change the hue, in hundredths of degrees.  Valid values range from -18000 to 18000. 
            This value is divided internally by 100.</param>
      <param name="saturation">Amount to change saturation, in tenths of a percent.  Valid values range from -1000 to 1000.
             This value is divided internally by 10. Negative values decrease the saturation of colors.
             Positive values increase the saturation. The saturation level is increased or decreased by a percentage of its present saturation level.
             For example, an increase of 20<![CDATA[&#37;]]> of the current saturation level "L" will raise the new saturation level "L1" to a value L = 0.20 * L.
              Likewise, increasing the saturation level 100<![CDATA[&#37;]]> doubles the saturation level (L1 = L + 1.0 * L).
               Decreasing the saturation level 100<![CDATA[&#37;]]> will set the new saturation level to 0. 
               The saturation is set to 1000 (maximum value) if the new value exceeds 1000).</param>
      <param name="brightness">Amount to change the brightness, in tenths of a percent.  
            Valid values range from -1000 to 1000. This value is divided internally  by 10. 
            Positive values increase (or lighten) the brightness of the image. 
            Negative values decrease (or darken) the brightness of the image.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.ColorReplaceCommand" /> on an image to change the red color by rotating its hue 90 degree.</para>
        <code lang="VB">   Public Sub ColorReplaceConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim Data() As ColorReplaceCommandColor
      ReDim Data(0)
      Data(0) = New ColorReplaceCommandColor(New RasterColor(200, 0, 35), 300)
      Dim command As ColorReplaceCommand = New ColorReplaceCommand(Data, 9000, 0, 0)
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void ColorReplaceConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         ColorReplaceCommandColor[] data = new ColorReplaceCommandColor[1];
         data[0] = new ColorReplaceCommandColor(new RasterColor(200, 0, 35), 100);
         ColorReplaceCommand command = new ColorReplaceCommand(data, 9000, 0, 0);
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void ColorReplaceConstructorExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         ColorReplaceCommandColor[] data = new ColorReplaceCommandColor[1];
         data[0] = new ColorReplaceCommandColor(new RasterColor(200, 0, 35), 100);
         ColorReplaceCommand command = new ColorReplaceCommand(data, 9000, 0, 0);
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub ColorReplaceConstructorExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim data As ColorReplaceCommandColor() = New ColorReplaceCommandColor(0){}
         data(0) = New ColorReplaceCommandColor(New RasterColor(200, 0, 35), 100)
         Dim command As ColorReplaceCommand = New ColorReplaceCommand(data, 9000, 0, 0)
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.ColorReplaceCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this class.
             <strong> Supported in Silverlight</strong>.
</summary>
      <returns>string that is the name of this method.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.ColorReplaceCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.ColorReplaceCommand.Colors">
      <summary>
            Gets or sets an array of <see cref="T:Leadtools.ImageProcessing.Color.ColorReplaceCommandColor" /> classes that provides information about the replacement colors used by this class.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>An array of <see cref="T:Leadtools.ImageProcessing.Color.ColorReplaceCommandColor" /> classes that provides information about the replacement colors used by this class.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ColorReplaceCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.ColorReplaceCommand.Hue">
      <summary>
            Gets or sets a value that represents the angular amount to change the hue, in hundredths of degrees.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Angular amount to change the hue, in hundredths of degrees. Valid values range from -18000 to 18000. This value is divided internally by 100.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ColorReplaceCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.ColorReplaceCommand.Saturation">
      <summary>
            Gets or sets a value that represents the amount to change saturation, in tenths of a percent.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Amount to change saturation, in tenths of a percent. Valid values range from -1000 to 1000.
             This value is divided internally by 10. Negative values decrease the saturation of colors.
             Positive values increase the saturation. The saturation level is increased or decreased by a percentage of its present saturation level.
             For example, an increase of 20<![CDATA[&#37;]]> of the current saturation level "L" will raise the new saturation level "L1" to a value L = 0.20 * L.
              Likewise, increasing the saturation level 100<![CDATA[&#37;]]> doubles the saturation level (L1 = L + 1.0 * L).
               Decreasing the saturation level 100<![CDATA[&#37;]]> will set the new saturation level to 0. 
               The saturation is set to 1000 (maximum value) if the new value exceeds 1000).</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ColorReplaceCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.ColorReplaceCommand.Brightness">
      <summary>
            Gets or sets a value that represents the amount to change the brightness, in tenths of a percent.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value> Amount to change the brightness, in tenths of a percent.  
            Valid values range from -1000 to 1000. This value is divided internally  by 10. 
            Positive values increase (or lighten) the brightness of the image. 
            Negative values decrease (or darken) the brightness of the image.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ColorReplaceCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.Color.StretchIntensityCommand">
      <summary>
            Increases the contrast in an image by centering, maximizing, and proportioning the range of intensity values.
             <strong> Supported in Silverlight</strong>.
</summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>Unlike the <see cref="T:Leadtools.ImageProcessing.Color.ChangeContrastCommand" /> command, this command always retains the original number of different intensity values. (Ordinary contrast adjustments can lose values at the high and low ends of the scale.)</description>
          </item>
          <item>
            <description>This command supports 12 and 16-bit grayscale and 48 and 64-bit color images. Support for 12 and 16-bit grayscale and 48 and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
        <p>If the image has a LUT and you want to work on the image data, set 
            <see cref="P:Leadtools.RasterImage.UseLookupTable">RasterImage.UseLookupTable</see> 
            to false. Then, after calling the method, reset the 
            <see cref="P:Leadtools.RasterImage.UseLookupTable">UselookupTable property</see> to true, as follows:
            </p>
        <code>
            rasterImage.UseLookupTable = false;
            Method(rasterImage);
            
            rasterImage.UseLookupTable = true;
            </code>
        <p>For more information, refer to <see cref="T:Leadtools.Topics.ChangingBrightnessAndContrast">Changing Brightness and Contrast</see>.</p>
      </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.StretchIntensityCommand" /> on an image and maximize its range of intensity values.</para>
        <code lang="VB">   Public Sub StretchIntensityCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As StretchIntensityCommand = New StretchIntensityCommand
      'Stretch the intensity.

      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void StretchIntensityCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         StretchIntensityCommand command = new StretchIntensityCommand();
         //Stretch the intensity.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);
         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void StretchIntensityCommandExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         StretchIntensityCommand command = new StretchIntensityCommand();
         //Stretch the intensity.
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub StretchIntensityCommandExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As StretchIntensityCommand = New StretchIntensityCommand()
         'Stretch the intensity.
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <seealso cref="T:Leadtools.Topics.ChangingBrightnessAndContrast">Changing Brightness and Contrast</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.GammaCorrectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeContrastCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.HistogramContrastCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.RemapIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.InvertCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeHueCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeSaturationCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.HistogramEqualizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.FillCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.HistogramCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.WindowLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChannelMixerCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.DeinterlaceCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.DesaturateCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EdgeDetectStatisticalCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.LightControlCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SmoothEdgesCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.LocalHistogramEqualizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AddWeightedCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorMergeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorSeparateCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.MultiplyCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AutoColorLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.CorrelationListCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.GrayScaleToDuotoneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.GrayScaleToMultitoneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.HolePunchRemoveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SelectiveColorCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SkeletonCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeHueSaturationIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorReplaceCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorThresholdCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.MathematicalFunctionCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SegmentCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AdaptiveContrastCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ApplyMathematicalLogicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorIntensityBalanceCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.ColorizeGrayCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ContrastBrightnessIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.DigitalSubtractCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.DynamicBinaryCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EdgeDetectEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MultiscaleEnhancementCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.SelectDataCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.ShiftDataCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Color.StretchIntensityCommand.#ctor">
      <summary>
            Initializes a new StretchIntensityCommand class object with default parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.StretchIntensityCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.StretchIntensityCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this class.
             <strong> Supported in Silverlight</strong>.
</summary>
      <returns>String that contains the name of this class.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.StretchIntensityCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="T:Leadtools.ImageProcessing.Color.ColorMergeCommandType">
      <summary>
            The type of separation that was used to create the grayscale images.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.ColorMergeCommandType.Rgb">
      <summary>
            Merge images from three RGB planes.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.ColorMergeCommandType.Cmyk">
      <summary>
            Merge images from four CMYK planes.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.ColorMergeCommandType.Hsv">
      <summary>
            Merge images from three HSV planes.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.ColorMergeCommandType.Hls">
      <summary>
            Merge images from three HLS planes.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.ColorMergeCommandType.Cmy">
      <summary>
             Merge images from three CMY planes.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.ColorMergeCommandType.Yuv">
      <summary>
             Merge images from three YUV planes.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.ColorMergeCommandType.Xyz">
      <summary>
             Merge images from three XYZ planes.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.ColorMergeCommandType.Lab">
      <summary>
             Merge images from three LAB planes.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.ColorMergeCommandType.YcrCb">
      <summary>
             Merge images from three YCRCB planes.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.ColorMergeCommandType.Sct">
      <summary>
             Merge images from three SCT planes.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.Color.ColorMergeCommand">
      <summary>
            Creates a color image by merging grayscale images that were created as color separations. You can use this to recombine the images that the <see cref="T:Leadtools.ImageProcessing.Color.ColorSeparateCommand" /> class creates.
            </summary>
      <keywords>Bitmaps|Effects|Changing brightness and contrast|Processing An Image|Color halftone and halftone images|Halftones|Colors|Merging|Combining images|Grayscale images|Color separations</keywords>
      <remarks>
        <list type="bullet">
          <item>
            <description>The supported color-space models are <see cref="T:Leadtools.ImageProcessing.Color.ColorMergeCommandType" />.Rgb, ColorMergeCommandType.Cmyk, ColorMergeCommandType.Cmy, ColorMergeCommandType.Hsv, ColorMergeCommandType.Hls, ColorMergeCommandType.Xyz, ColorMergeCommandType.Ycrcb, ColorMergeCommandType.Yuv, ColorMergeCommandType.Lab, and ColorMergeCommandType.Sct.</description>
          </item>
          <item>
            <description>This command supports 12 and 16-bit grayscale and 48 and 64-bit color images. Support for 12 and 16-bit grayscale and 48 and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support signed data images.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <see cref="T:Leadtools.Topics.ChangingBrightnessAndContrast">Changing Brightness and Contrast</see>.
            <br />
            For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.<br /></remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.ColorMergeCommand" /> on an image.</para>
        <code lang="VB">   Public Sub ColorMergeCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim colorseparatecommand As ColorSeparateCommand = New ColorSeparateCommand
      colorseparatecommand.Type = ColorSeparateCommandType.Rgb
      colorseparatecommand.Run(leadImage)

      ' Prepare the command
      Dim command As ColorMergeCommand = New ColorMergeCommand(ColorMergeCommandType.Rgb)
      command.Run(colorseparatecommand.DestinationImage)
      codecs.Save(command.DestinationImage, LeadtoolsExamples.Common.ImagesPath.Path + "ColorMergeCommandResult.Bmp", RasterImageFormat.Bmp, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void ColorMergeCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         ColorSeparateCommand colorseparatecommand = new ColorSeparateCommand();
         colorseparatecommand.Type = ColorSeparateCommandType.Rgb;
         colorseparatecommand.Run(image);


         // Prepare the command
         ColorMergeCommand  command = new ColorMergeCommand(ColorMergeCommandType.Rgb);
         command.Run(colorseparatecommand.DestinationImage);
         codecs.Save(command.DestinationImage, LeadtoolsExamples.Common.ImagesPath.Path + "ColorMergeCommandResult.bmp", RasterImageFormat.Bmp, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void ColorMergeCommandExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         ColorSeparateCommand colorseparatecommand = new ColorSeparateCommand();
         colorseparatecommand.Type = ColorSeparateCommandType.Rgb;
         colorseparatecommand.Run(image);
         // Prepare the command
         ColorMergeCommand  command = new ColorMergeCommand(ColorMergeCommandType.Rgb);
         command.Run(colorseparatecommand.DestinationImage);

         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub ColorMergeCommandExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim colorseparatecommand As ColorSeparateCommand = New ColorSeparateCommand()
         colorseparatecommand.Type = ColorSeparateCommandType.Rgb
         colorseparatecommand.Run(image)
         ' Prepare the command
         Dim command As ColorMergeCommand = New ColorMergeCommand(ColorMergeCommandType.Rgb)
         command.Run(colorseparatecommand.DestinationImage)

         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <seealso cref="T:Leadtools.Topics.ChangingBrightnessAndContrast">Changing Brightness and Contrast</seealso>.
            <seealso cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</seealso>.
            <seealso cref="T:Leadtools.Topics.ColorHalftoneandHalftoneImages">Color Halftone and Halftone Images</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorSeparateCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.WindowLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChannelMixerCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.DeinterlaceCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.DesaturateCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EdgeDetectStatisticalCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.LightControlCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SmoothEdgesCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AutoColorLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.CorrelationListCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.GrayScaleToDuotoneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.GrayScaleToMultitoneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.HolePunchRemoveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SelectiveColorCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SkeletonCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Color.ColorMergeCommand.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Color.ColorMergeCommand" /> class object with default parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.ColorMergeCommand" /> on an image.</para>
        <code lang="VB">   Public Sub ColorMergeConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      Dim colorseparatecommand As ColorSeparateCommand = New ColorSeparateCommand
      colorseparatecommand.Type = ColorSeparateCommandType.Rgb
      colorseparatecommand.Run(leadImage)

      ' Prepare the command
      Dim command As ColorMergeCommand = New ColorMergeCommand
      command.Type = ColorMergeCommandType.Rgb
      command.Run(colorseparatecommand.DestinationImage)
      codecs.Save(command.DestinationImage, LeadtoolsExamples.Common.ImagesPath.Path + "ColorMergeCommandResult.Bmp", RasterImageFormat.Bmp, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void ColorMergeConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         ColorSeparateCommand colorseparatecommand = new ColorSeparateCommand();
         colorseparatecommand.Type = ColorSeparateCommandType.Rgb;
         colorseparatecommand.Run(image);

         // Prepare the command
         ColorMergeCommand command = new ColorMergeCommand();
         command.Type = ColorMergeCommandType.Rgb;
         command.Run(colorseparatecommand.DestinationImage);
         codecs.Save(command.DestinationImage, LeadtoolsExamples.Common.ImagesPath.Path + "ColorMergeCommandResult.bmp", RasterImageFormat.Bmp, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void ColorMergeConstructorExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         ColorSeparateCommand colorseparatecommand = new ColorSeparateCommand();
         colorseparatecommand.Type = ColorSeparateCommandType.Rgb;
         colorseparatecommand.Run(image);
         // Prepare the command
         ColorMergeCommand command = new ColorMergeCommand();
         command.Type = ColorMergeCommandType.Rgb;
         command.Run(colorseparatecommand.DestinationImage);

         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub ColorMergeConstructorExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim colorseparatecommand As ColorSeparateCommand = New ColorSeparateCommand()
         colorseparatecommand.Type = ColorSeparateCommandType.Rgb
         colorseparatecommand.Run(image)
         ' Prepare the command
         Dim command As ColorMergeCommand = New ColorMergeCommand()
         command.Type = ColorMergeCommandType.Rgb
         command.Run(colorseparatecommand.DestinationImage)

         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.ColorMergeCommand.#ctor(Leadtools.ImageProcessing.Color.ColorMergeCommandType)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Color.ColorMergeCommand" /> class object with explicit parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <param name="type">Value that indicates the type of separation that was used to create the grayscale images.</param>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ColorMergeCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.ColorMergeCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this class.
             <strong> Supported in Silverlight</strong>.
</summary>
      <returns>String that contains the name of this class.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.ColorMergeCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.ColorMergeCommand.DestinationImage">
      <summary>
            Gets the ILEADRaster object that references the target image.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>ILEADRaster object that references the target image.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ColorMergeCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.ColorMergeCommand.Type">
      <summary>
            Gets or sets a value that represents the type of separation that was used to create the grayscale images.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Value that represents the type of separation that was used to create the grayscale images.</value>
      <example>
            Refer to <see cref="M:Leadtools.ImageProcessing.Color.ColorMergeCommand.#ctor">ColorMergeCommand()</see></example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.Color.ColorLevelCommandFlags">
      <summary>
            Enumeration flags that identify the channel being leveled.
             <strong> Supported in Silverlight</strong>.
</summary>
      <remarks>
        <para>This flag has a <see cref="T:System.FlagsAttribute" /> attribute that allows a bitwise combination of its member values.</para>
      </remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.ColorLevelCommandFlags.None">
      <summary>
            No change.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.ColorLevelCommandFlags.Red">
      <summary>
            Red channel.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.ColorLevelCommandFlags.Green">
      <summary>
            Green channel.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.ColorLevelCommandFlags.Blue">
      <summary>
            Blue channel.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.ColorLevelCommandFlags.Master">
      <summary>
            Master channel.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.ColorLevelCommandFlags.All">
      <summary>
            All channels.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.Color.ColorLevelCommandData">
      <summary>
            The ColorLevelCommandData class contains color-leveling information for a specific color channel.
             <strong> Supported in Silverlight</strong>.
</summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>The value of the MaximumInput property must be greater than the value of the MinimumInput property by at least 2.</description>
          </item>
          <item>
            <description>If MinimumOutput &gt; MaximumOutput then the image's shadows and highlights will be inverted for the given channel.</description>
          </item>
          <item>
            <description>This class is used by the <see cref="T:Leadtools.ImageProcessing.Color.ColorLevelCommand" /> class.</description>
          </item>
          <item>
            <description>This class does not support 32-bit grayscale images.</description>
          </item>
        </list>
      </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.ColorLevelCommand" /> on an image.</para>
        <code lang="VB">   Public Sub ColorLevelCommandDataExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim blue As ColorLevelCommandData = New ColorLevelCommandData
      Dim master As ColorLevelCommandData = New ColorLevelCommandData
      'Specify Image levels
      blue.MinimumInput = 20
      blue.MaximumInput = 200
      blue.MinimumOutput = 0
      blue.MaximumOutput = 255
      blue.Gamma = 100
      ' Master will cause the image to be Inversed
      master.MinimumInput = 0
      master.MaximumInput = 255
      master.MinimumOutput = 255
      master.MaximumOutput = 0
      master.Gamma = 100
      ' Level the Blue and Master channels
      Dim command As ColorLevelCommand = New ColorLevelCommand(master, Nothing, Nothing, blue, ColorLevelCommandFlags.Blue Or ColorLevelCommandFlags.Master)
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void ColorLevelCommandDataExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         ColorLevelCommandData blue = new ColorLevelCommandData();
         ColorLevelCommandData master = new ColorLevelCommandData();
         //Specify Image levels
         blue.MinimumInput = 20;
         blue.MaximumInput = 200;
         blue.MinimumOutput = 0;
         blue.MaximumOutput = 255;
         blue.Gamma = 100;
         // Master will cause the image to be Inversed
         master.MinimumInput = 0;
         master.MaximumInput = 255;
         master.MinimumOutput = 255;
         master.MaximumOutput = 0;
         master.Gamma = 100;
         // Level the Blue and Master channels
         ColorLevelCommand command = new ColorLevelCommand(master, null, null, blue, ColorLevelCommandFlags.Blue | ColorLevelCommandFlags.Master);
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void ColorLevelCommandDataExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         ColorLevelCommandData blue = new ColorLevelCommandData();
         ColorLevelCommandData master = new ColorLevelCommandData();
         //Specify Image levels
         blue.MinimumInput = 20;
         blue.MaximumInput = 200;
         blue.MinimumOutput = 0;
         blue.MaximumOutput = 255;
         blue.Gamma = 100;
         // Master will cause the image to be Inversed
         master.MinimumInput = 0;
         master.MaximumInput = 255;
         master.MinimumOutput = 255;
         master.MaximumOutput = 0;
         master.Gamma = 100;
         // Level the Blue and Master channels
         ColorLevelCommand command = new ColorLevelCommand(master, null, null, blue, ColorLevelCommandFlags.Blue | ColorLevelCommandFlags.Master);
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub ColorLevelCommandDataExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim blue As ColorLevelCommandData = New ColorLevelCommandData()
         Dim master As ColorLevelCommandData = New ColorLevelCommandData()
         'Specify Image levels
         blue.MinimumInput = 20
         blue.MaximumInput = 200
         blue.MinimumOutput = 0
         blue.MaximumOutput = 255
         blue.Gamma = 100
         ' Master will cause the image to be Inversed
         master.MinimumInput = 0
         master.MaximumInput = 255
         master.MinimumOutput = 255
         master.MaximumOutput = 0
         master.Gamma = 100
         ' Level the Blue and Master channels
         Dim command As ColorLevelCommand = New ColorLevelCommand(master, Nothing, Nothing, blue, ColorLevelCommandFlags.Blue Or ColorLevelCommandFlags.Master)
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.ColorLevelCommandData.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Color.ColorLevelCommandData" /> class object with default parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ColorLevelCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.ColorLevelCommandData.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Color.ColorLevelCommandData" /> class object with explicit parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <param name="minimumInput">Value that specifies the image's shadows to be mapped. Valid values range from 0 to 255 for 8-bit, 0 to 4095 for 12-bit and 0 to 65535 for 16-bit images. Any value greater than or equal to this will be considered a shadow and will be remapped to the value in MinimumOutput.</param>
      <param name="maximumInput">Value that specifies the image's highlights to be mapped. Valid values range from 0 to 255 for 8-bit, 0 to 4095 for 12-bit and 0 to 65535 for 16-bit images. Any value greater than or equal to this will be considered a highlight and will be remapped to the value in MaximumOutput.</param>
      <param name="minimumOutput">Value that specifies the value to which the shadows will be mapped. Valid values range from 0 to 255 for 8-bit, 0 to 4095 for 12-bit and 0 to 65535 for 16-bit images.</param>
      <param name="maximumOutput">Value that specifies the value to which the highlights will be mapped. Valid values range from 0 to 255 for 8-bit, 0 to 4095 for 12-bit and 0 to 65535 for 16-bit images.</param>
      <param name="gamma">Value that represents the gamma value. This value is used to modify the midtones of the image. The value in this member is a 100 times the actual value. Therefore, if uGamma = 167 then the actual gamma value is 1.67. Likewise, if you want to use a gamma of 1.75, set this member to 175. The default value is DEFAULT_GAMMA, which is 100 (actual gamma value of 1.00) which does not change the gamma value of the image.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.ColorLevelCommand" /> on an image.</para>
        <code lang="VB">   Public Sub ColorLevelCommandDataConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim blue As ColorLevelCommandData = New ColorLevelCommandData(0, 255, 255, 0, 100)
      Dim master As ColorLevelCommandData = New ColorLevelCommandData(20, 200, 0, 255, 100)
      Dim red As ColorLevelCommandData = New ColorLevelCommandData(0, 255, 0, 255, 100)
      Dim green As ColorLevelCommandData = New ColorLevelCommandData(0, 255, 0, 255, 100)

      ' Level the Blue and Master channels
      Dim command As ColorLevelCommand = New ColorLevelCommand
      command.Blue = blue
      command.Red = red
      command.Green = green
      command.Master = master
      command.Flags = ColorLevelCommandFlags.Blue Or ColorLevelCommandFlags.Master
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void ColorLevelCommandDataConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         ColorLevelCommandData blue = new ColorLevelCommandData(0, 255, 255, 0, 100);
         ColorLevelCommandData master = new ColorLevelCommandData(20, 200, 0, 255, 100);
         ColorLevelCommandData red = new ColorLevelCommandData(0, 255, 0, 255, 100);
         ColorLevelCommandData green  = new ColorLevelCommandData(0, 255, 0, 255, 100);

         // Level the Blue and Master channels
         ColorLevelCommand command = new ColorLevelCommand();
         command.Blue = blue;
         command.Red = red;
         command.Green = green;
         command.Master = master;
         command.Flags = ColorLevelCommandFlags.Blue | ColorLevelCommandFlags.Master;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void ColorLevelCommandDataConstructorExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         ColorLevelCommandData blue = new ColorLevelCommandData(0, 255, 255, 0, 100);
         ColorLevelCommandData master = new ColorLevelCommandData(20, 200, 0, 255, 100);
         ColorLevelCommandData red = new ColorLevelCommandData(0, 255, 0, 255, 100);
         ColorLevelCommandData green  = new ColorLevelCommandData(0, 255, 0, 255, 100);
         // Level the Blue and Master channels
         ColorLevelCommand command = new ColorLevelCommand();
         command.Blue = blue;
         command.Red = red;
         command.Green = green;
         command.Master = master;
         command.Flags = ColorLevelCommandFlags.Blue | ColorLevelCommandFlags.Master;
         command.Run(image);

         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub ColorLevelCommandDataConstructorExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim blue As ColorLevelCommandData = New ColorLevelCommandData(0, 255, 255, 0, 100)
         Dim master As ColorLevelCommandData = New ColorLevelCommandData(20, 200, 0, 255, 100)
         Dim red As ColorLevelCommandData = New ColorLevelCommandData(0, 255, 0, 255, 100)
         Dim green As ColorLevelCommandData = New ColorLevelCommandData(0, 255, 0, 255, 100)
         ' Level the Blue and Master channels
         Dim command As ColorLevelCommand = New ColorLevelCommand()
         command.Blue = blue
         command.Red = red
         command.Green = green
         command.Master = master
         command.Flags = ColorLevelCommandFlags.Blue Or ColorLevelCommandFlags.Master
         command.Run(image)

         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.ColorLevelCommandData.MinimumInput">
      <summary>
            Gets or sets a value that specifies the image's shadows to be mapped.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Value that specifies the image's shadows to be mapped. Valid values range from 0 to 255 for 8-bit, 0 to 4095 for 12-bit and 0 to 65535 for 16-bit images. Any value greater than or equal to this will be considered a shadow and will be remapped to the value in MinimumOutput.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ColorLevelCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.ColorLevelCommandData.MaximumInput">
      <summary>
            Gets or sets a value that specifies the image's highlights to be mapped.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Value that specifies the image's highlights to be mapped. Valid values range from 0 to 255 for 8-bit, 0 to 4095 for 12-bit and 0 to 65535 for 16-bit images. Any value greater than or equal to this will be considered a highlight and will be remapped to the value in MaximumOutput.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ColorLevelCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.ColorLevelCommandData.MinimumOutput">
      <summary>
            Gets or sets a value that specifies the value to which the shadows will be mapped.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Value that specifies the value to which the shadows will be mapped. Valid values range from 0 to 255 for 8-bit, 0 to 4095 for 12-bit and 0 to 65535 for 16-bit images.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ColorLevelCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.ColorLevelCommandData.MaximumOutput">
      <summary>
            Gets or sets a value that specifies the value to which the highlights will be mapped.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Value that specifies the value to which the highlights will be mapped. Valid values range from 0 to 255 for 8-bit, 0 to 4095 for 12-bit and 0 to 65535 for 16-bit images.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ColorLevelCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.ColorLevelCommandData.Gamma">
      <summary>
            Gets or sets a value that represents the gamma value.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Value that represents the gamma value. This value is used to modify the midtones of the image. The value in this member is a 100 times the actual value. Therefore, if uGamma = 167 then the actual gamma value is 1.67. Likewise, if you want to use a gamma of 1.75, set this property to 175. The default value is DEFAULT_GAMMA, which is 100 (actual gamma value of 1.00) which does not change the gamma value of the image.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ColorLevelCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.Color.ColorLevelCommand">
      <summary>
            Applies color leveling to an image. It changes the image shadows, midtones and highlights. 
            This function is useful for pre-processing images 
            for the purpose of 
            <a href="http://support.leadtools.com/cs/forums/18165/ShowPost.aspx">improving barcode recognition</a> results.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>The members of the <see cref="T:Leadtools.ImageProcessing.Color.ColorLevelCommandData" /> class tell the ColorLevelCommand what constitutes shadows, midtones, and highlights and how to remap the shadows, midtones and highlights.</description>
          </item>
          <item>
            <description>Control the amount of image balance and leveling by controlling the values of the MinimumInput, MaximumInput, MinimumOutput, MaximumOutput, and Gamma members of the <see cref="T:Leadtools.ImageProcessing.Color.ColorLevelCommandData" /> class.<br /><list type="bullet"><item><description>The MinimumInput property of the <see cref="T:Leadtools.ImageProcessing.Color.ColorLevelCommandData" /> class defines what the method interprets as shadows for that color channel. Any value less than or equal to MinimumInput is considered a shadow.</description></item><item><description>The MaximumInput property of the <see cref="T:Leadtools.ImageProcessing.Color.ColorLevelCommandData" /> class defines what the method interprets as highlights for that color channel. Any value greater than or equal to MaximumInput is considered a highlight.</description></item><item><description>The value of the MaximumInput property must be greater than the value of the MinimumInput property by at least 2.</description></item><item><description>Midtones are those values between MinimumInput and MaximumInput.</description></item><item><description>The MinimumOutput property is the value to which the shadows will be mapped.</description></item><item><description>The MaximumOutput property is the value to which the highlights will be mapped.</description></item><item><description>The Gamma property is used to modify the midtone values</description></item></list></description>
          </item>
          <item>
            <description>If only <see cref="T:Leadtools.ImageProcessing.Color.ColorLevelCommandFlags" />.Master is set in the Flags property, then the rest of the channels will still be affected.</description>
          </item>
          <item>
            <description>If the image is a grayscale image, then you must set <see cref="T:Leadtools.ImageProcessing.Color.ColorLevelCommandFlags" />.Master in the Flags property, otherwise the class will not have any effect.</description>
          </item>
          <item>
            <description>If MinimumOutput &gt; MaximumOutput then the image's shadows and highlights will be inverted.</description>
          </item>
          <item>
            <description>This command supports 12 and 16-bit grayscale and 48 and 64-bit color images. Support for 12 and 16-bit grayscale and 48 and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support signed data images.</description>
          </item>
        </list>
        <br />
            For more information, refer to <see cref="T:Leadtools.Topics.ChangingBrightnessAndContrast">Changing Brightness and Contrast</see>.
            For more information, refer to <see cref="T:Leadtools.Topics.CorrectingColors">Correcting Colors</see>.<br /></remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.ColorLevelCommand" /> on an image.</para>
        <code lang="VB">   Public Sub ColorLevelCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim blue As ColorLevelCommandData = New ColorLevelCommandData
      Dim master As ColorLevelCommandData = New ColorLevelCommandData
      ' Specify Image levels
      blue.MinimumInput = 20
      blue.MaximumInput = 200
      blue.MinimumOutput = 0
      blue.MaximumOutput = 255
      blue.Gamma = 100
      ' Master will cause the image to be Inversed
      master.MinimumInput = 0
      master.MaximumInput = 255
      master.MinimumOutput = 255
      master.MaximumOutput = 0
      master.Gamma = 100
      ' Level the Blue and Master channels
      Dim command As ColorLevelCommand = New ColorLevelCommand(master, Nothing, Nothing, blue, ColorLevelCommandFlags.Blue Or ColorLevelCommandFlags.Master)
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void ColorLevelCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         ColorLevelCommandData blue    = new ColorLevelCommandData();
         ColorLevelCommandData master  = new ColorLevelCommandData();
         //Specify Image levels
         blue.MinimumInput    = 20;
         blue.MaximumInput    = 200;
         blue.MinimumOutput   = 0;
         blue.MaximumOutput   = 255;
         blue.Gamma           = 100;
         // Master will cause the image to be Inversed
         master.MinimumInput  = 0;
         master.MaximumInput  = 255;
         master.MinimumOutput = 255;
         master.MaximumOutput = 0;
         master.Gamma         = 100;
         // Level the Blue and Master channels
         ColorLevelCommand command = new ColorLevelCommand(master, null, null, blue, ColorLevelCommandFlags.Blue | ColorLevelCommandFlags.Master);
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void ColorLevelCommandExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         ColorLevelCommandData blue    = new ColorLevelCommandData();
         ColorLevelCommandData master  = new ColorLevelCommandData();
         //Specify Image levels
         blue.MinimumInput    = 20;
         blue.MaximumInput    = 200;
         blue.MinimumOutput   = 0;
         blue.MaximumOutput   = 255;
         blue.Gamma           = 100;
         // Master will cause the image to be Inversed
         master.MinimumInput  = 0;
         master.MaximumInput  = 255;
         master.MinimumOutput = 255;
         master.MaximumOutput = 0;
         master.Gamma         = 100;
         // Level the Blue and Master channels
         ColorLevelCommand command = new ColorLevelCommand(master, null, null, blue, ColorLevelCommandFlags.Blue | ColorLevelCommandFlags.Master);
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub ColorLevelCommandExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim blue As ColorLevelCommandData = New ColorLevelCommandData()
         Dim master As ColorLevelCommandData = New ColorLevelCommandData()
         'Specify Image levels
         blue.MinimumInput = 20
         blue.MaximumInput = 200
         blue.MinimumOutput = 0
         blue.MaximumOutput = 255
         blue.Gamma = 100
         ' Master will cause the image to be Inversed
         master.MinimumInput = 0
         master.MaximumInput = 255
         master.MinimumOutput = 255
         master.MaximumOutput = 0
         master.Gamma = 100
         ' Level the Blue and Master channels
         Dim command As ColorLevelCommand = New ColorLevelCommand(master, Nothing, Nothing, blue, ColorLevelCommandFlags.Blue Or ColorLevelCommandFlags.Master)
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <seealso cref="T:Leadtools.Topics.ChangingBrightnessAndContrast">Changing Brightness and Contrast</seealso>.
            <seealso cref="T:Leadtools.Topics.CorrectingColors">Correcting Colors</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SharpenCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.PosterizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EmbossCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MedianCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.AddNoiseCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.IntensityDetectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SpatialFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.BinaryFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MaximumCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MinimumCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OilifyCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SolarizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.WindowLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AutoColorLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SelectiveColorCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AdjustTintCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.HalfToneCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Color.ColorLevelCommand.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Color.ColorLevelCommand" /> class object with default parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.ColorLevelCommand" /> on an image.</para>
        <code lang="VB">   Public Sub ColorLevelConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim blue As ColorLevelCommandData = New ColorLevelCommandData(0, 255, 255, 0, 100)
      Dim master As ColorLevelCommandData = New ColorLevelCommandData(20, 200, 0, 255, 100)
      Dim red As ColorLevelCommandData = New ColorLevelCommandData(0, 255, 0, 255, 100)
      Dim green As ColorLevelCommandData = New ColorLevelCommandData(0, 255, 0, 255, 100)

      ' Level the Blue and Master channels
      Dim command As ColorLevelCommand = New ColorLevelCommand
      command.Blue = blue
      command.Red = red
      command.Green = green
      command.Master = master
      command.Flags = ColorLevelCommandFlags.Blue Or ColorLevelCommandFlags.Master
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void ColorLevelConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         ColorLevelCommandData blue    = new ColorLevelCommandData(0, 255, 255, 0, 100);
         ColorLevelCommandData master  = new ColorLevelCommandData(20, 200, 0, 255, 100);
         ColorLevelCommandData red  = new ColorLevelCommandData(0, 255, 0, 255, 100);
         ColorLevelCommandData green  = new ColorLevelCommandData(0, 255, 0, 255, 100);

         // Level the Blue and Master channels
         ColorLevelCommand command = new ColorLevelCommand();
         command.Blue = blue;
         command.Red = red;
         command.Green = green;
         command.Master = master;
         command.Flags = ColorLevelCommandFlags.Blue | ColorLevelCommandFlags.Master;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void ColorLevelConstructorExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         ColorLevelCommandData blue    = new ColorLevelCommandData(0, 255, 255, 0, 100);
         ColorLevelCommandData master  = new ColorLevelCommandData(20, 200, 0, 255, 100);
         ColorLevelCommandData red  = new ColorLevelCommandData(0, 255, 0, 255, 100);
         ColorLevelCommandData green  = new ColorLevelCommandData(0, 255, 0, 255, 100);
         // Level the Blue and Master channels
         ColorLevelCommand command = new ColorLevelCommand();
         command.Blue = blue;
         command.Red = red;
         command.Green = green;
         command.Master = master;
         command.Flags = ColorLevelCommandFlags.Blue | ColorLevelCommandFlags.Master;
         command.Run(image);

         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub ColorLevelConstructorExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim blue As ColorLevelCommandData = New ColorLevelCommandData(0, 255, 255, 0, 100)
         Dim master As ColorLevelCommandData = New ColorLevelCommandData(20, 200, 0, 255, 100)
         Dim red As ColorLevelCommandData = New ColorLevelCommandData(0, 255, 0, 255, 100)
         Dim green As ColorLevelCommandData = New ColorLevelCommandData(0, 255, 0, 255, 100)
         ' Level the Blue and Master channels
         Dim command As ColorLevelCommand = New ColorLevelCommand()
         command.Blue = blue
         command.Red = red
         command.Green = green
         command.Master = master
         command.Flags = ColorLevelCommandFlags.Blue Or ColorLevelCommandFlags.Master
         command.Run(image)

         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.ColorLevelCommand.#ctor(Leadtools.ImageProcessing.Color.ColorLevelCommandFlags)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Color.ColorLevelCommand" /> class object with explicit parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <param name="flags">Flag that indicates the channel being leveled.</param>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ColorLevelCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.ColorLevelCommand.#ctor(Leadtools.ImageProcessing.Color.ColorLevelCommandData,Leadtools.ImageProcessing.Color.ColorLevelCommandData,Leadtools.ImageProcessing.Color.ColorLevelCommandData,Leadtools.ImageProcessing.Color.ColorLevelCommandData,Leadtools.ImageProcessing.Color.ColorLevelCommandFlags)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Color.ColorLevelCommand" /> class object with explicit parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <param name="master">Specifies the color-leveling information for the master channel when used in the ColorLevelCommand class. When used in <see cref="T:Leadtools.ImageProcessing.Color.AutoColorLevelCommand" /> with the flag Contrast or Intensity, it retrieves the color-leveling information of the master channel.</param>
      <param name="red">Specifies the color-leveling information for the red channel when used in the ColorLevelCommand class. When used in <see cref="T:Leadtools.ImageProcessing.Color.AutoColorLevelCommand" /> with the flag Level, it retrieves the color-leveling information of the red channel.</param>
      <param name="green">Specifies the color-leveling information for the green channel when used in the ColorLevelCommand class. When used in <see cref="T:Leadtools.ImageProcessing.Color.AutoColorLevelCommand" /> with the flag Level, it retrieves the color-leveling information of the green channel.</param>
      <param name="blue">Specifies the color-leveling information for the blue channel when used in the ColorLevelCommand class. When used in <see cref="T:Leadtools.ImageProcessing.Color.AutoColorLevelCommand" /> with the flag Level, it retrieves the color-leveling information of the blue channel.</param>
      <param name="flags">Flag that indicates the channel being leveled.</param>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ColorLevelCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.ColorLevelCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this class.
             <strong> Supported in Silverlight</strong>.
</summary>
      <returns>String that contains the name of this class.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.ColorLevelCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.ColorLevelCommand.Master">
      <summary>
            Gets or sets the color-leveling information for the master channel used in the ColorLevelCommand class.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Color-leveling information for the master channel used in the ColorLevelCommand class. When used in the <see cref="T:Leadtools.ImageProcessing.Color.AutoColorLevelCommand" /> class with the flag Contrast or Intensity, it retrieves the color-leveling information of the master channel.</value>
      <example>
            Refer to <see cref="M:Leadtools.ImageProcessing.Color.ColorLevelCommand.#ctor">ColorLevelCommand()</see></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.ColorLevelCommand.Red">
      <summary>
            Gets or sets the color-leveling information for the red channel when used in the ColorLevelCommand class.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Specifies the color-leveling information for the red channel when used in the ColorLevelCommand class. When used in the <see cref="T:Leadtools.ImageProcessing.Color.AutoColorLevelCommand" /> class, with the flag Level, it retrieves the color-leveling information of the red channel.</value>
      <example>
            Refer to <see cref="M:Leadtools.ImageProcessing.Color.ColorLevelCommand.#ctor">ColorLevelCommand()</see></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.ColorLevelCommand.Green">
      <summary>
            Gets or sets the color-leveling information for the green channel when used in the ColorLevelCommand class.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Specifies the color-leveling information for the green channel when used in the ColorLevelCommand class. When used in the <see cref="T:Leadtools.ImageProcessing.Color.AutoColorLevelCommand" /> class with the flag Level, it retrieves the color-leveling information of the green channel.</value>
      <example>
            Refer to <see cref="M:Leadtools.ImageProcessing.Color.ColorLevelCommand.#ctor">ColorLevelCommand()</see></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.ColorLevelCommand.Blue">
      <summary>
            Gets or sets the color-leveling information for the blue channel when used in the ColorLevelCommand class.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Specifies the color-leveling information for the blue channel when used in the ColorLevelCommand class. When used in the <see cref="T:Leadtools.ImageProcessing.Color.AutoColorLevelCommand" /> class with the flag Level, it retrieves the color-leveling information of the blue channel.</value>
      <example>
            Refer to <see cref="M:Leadtools.ImageProcessing.Color.ColorLevelCommand.#ctor">ColorLevelCommand()</see></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.ColorLevelCommand.Flags">
      <summary>
            Flag that indicates the channel being leveled.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Flag that indicates the channel being leveled.</value>
      <example>
            Refer to <see cref="M:Leadtools.ImageProcessing.Color.ColorLevelCommand.#ctor">ColorLevelCommand()</see></example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.Color.ChangeSaturationCommand">
      <summary>
            Increases or decreases the saturation of colors in an image.
             <strong> Supported in Silverlight</strong>.
</summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>Negative values decrease the saturation of colors. Positive values increase the saturation. The saturation level is increased or decreased by a percentage of its present saturation level. For example, an increase of 20 percent of the current saturation level "L" will raise the new saturation level "L1" to a value L + 0.20 * L. Likewise, increasing the saturation level 100 percent doubles the saturation level ( L1 = L + 1.0 * L). Decreasing the saturation level 100 percent will set the new saturation level to 0. This process is carried out for every pixel.</description>
          </item>
          <item>
            <description>This command supports 12 and 16-bit grayscale and 48 and 64-bit color images. Support for 12 and 16-bit grayscale and 48 and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support signed data images.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <see cref="T:Leadtools.Topics.ChangingBrightnessAndContrast">Changing Brightness and Contrast</see>.
            <br />
            For more information, refer to <see cref="T:Leadtools.Topics.CorrectingColors">Correcting Colors</see>.<br /></remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.ChangeSaturationCommand" /> on an image and increase its color saturation.</para>
        <code lang="VB">   Public Sub ChangeSaturationCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As ChangeSaturationCommand = New ChangeSaturationCommand
      'Increase the color saturation by 25 percent  of the possible range.
      command.Change = 250

      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void ChangeSaturationCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         ChangeSaturationCommand command = new ChangeSaturationCommand();
         //Increase the color saturation by 25 percent  of the possible range.
         command.Change = 250;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void ChangeSaturationCommandExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         ChangeSaturationCommand command = new ChangeSaturationCommand();
         //Increase the color saturation by 25 percent  of the possible range.
         command.Change = 250;
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub ChangeSaturationCommandExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As ChangeSaturationCommand = New ChangeSaturationCommand()
         'Increase the color saturation by 25 percent  of the possible range.
         command.Change = 250
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <seealso cref="T:Leadtools.Topics.ChangingBrightnessAndContrast">Changing Brightness and Contrast</seealso>.
            <seealso cref="T:Leadtools.Topics.CorrectingColors">Correcting Colors</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.GammaCorrectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeContrastCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.HistogramContrastCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.StretchIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.RemapIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.InvertCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeHueCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.HistogramEqualizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.FillCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.HistogramCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.WindowLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChannelMixerCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.DeinterlaceCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.DesaturateCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EdgeDetectStatisticalCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.LightControlCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SmoothEdgesCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.LocalHistogramEqualizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AddWeightedCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorMergeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorSeparateCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.MultiplyCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AutoColorLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.CorrelationListCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.GrayScaleToDuotoneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.GrayScaleToMultitoneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.HolePunchRemoveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SelectiveColorCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SkeletonCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeHueSaturationIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorReplaceCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorThresholdCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.MathematicalFunctionCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SegmentCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AdaptiveContrastCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ApplyMathematicalLogicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorIntensityBalanceCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.ColorizeGrayCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ContrastBrightnessIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.DigitalSubtractCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.DynamicBinaryCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EdgeDetectEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MultiscaleEnhancementCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.SelectDataCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.ShiftDataCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AdjustTintCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.HalfToneCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Color.ChangeSaturationCommand.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Color.ChangeSaturationCommand" /> class object with default parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ChangeSaturationCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.ChangeSaturationCommand.#ctor(System.Int32)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Color.ChangeSaturationCommand" /> class object with explicit parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <param name="change">Amount to change saturation. Values are percentages between -1000 and +1000.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.ChangeSaturationCommand" /> on an image and increase its color saturation.</para>
        <code lang="VB">   Public Sub ChangeSaturationConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As ChangeSaturationCommand = New ChangeSaturationCommand(250)
      'Increase the color saturation by 25 percent  of the possible range.

      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void ChangeSaturationConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         ChangeSaturationCommand command = new ChangeSaturationCommand(250);
         // Increase the color saturation by 25 percent  of the possible range.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void ChangeSaturationConstructorExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         ChangeSaturationCommand command = new ChangeSaturationCommand(250);
         // Increase the color saturation by 25 percent  of the possible range.
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub ChangeSaturationConstructorExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As ChangeSaturationCommand = New ChangeSaturationCommand(250)
         ' Increase the color saturation by 25 percent  of the possible range.
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.ChangeSaturationCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this class.
             <strong> Supported in Silverlight</strong>.
</summary>
      <returns>String that contains the name of this class.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.ChangeSaturationCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.ChangeSaturationCommand.Change">
      <summary>
            Gets or sets a value that represents the amount to change the saturation.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Amount to change saturation. Values are percentages between -1000 and +1000.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ChangeSaturationCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.Color.ApplyMathematicalLogicCommandFlags">
      <summary>
            Enumeration flags that identify the channel that will be used, the treatment of the input pixel values, the mathematical operation, and the treatment of the output pixel values.
             <strong> Supported in Silverlight</strong>.
</summary>
      <remarks>
            These flags have a <see cref="T:System.FlagsAttribute" /> attribute that allows a bitwise combination of its member values.
            <para>You can use a bitwise OR (|) to specify one flag from each group.</para><table><tr><td><b>Group</b></td><td><b>Flags</b></td></tr><tr><td>Flags that indicate the channel that will be used</td><td>Master, Red, Green, Blue</td></tr><tr><td>Flags that indicate how to treat the color value</td><td>ValueDoNothing, ValueNot, ValueZero, ValueOne</td></tr><tr><td>Flags that indicate the mathematical operation to use</td><td>OperationAnd, ValueNot, ValueZero, ValueOne, OperationAnd, OperationOr, OperationXor, OperationAdd, OperationSubtractFactor, OperationSubtractValue, OperationAbsoluteDifference, OperationMultiply, OperationDivisionByFactor, OperationDivisionByValue, OperationAverage, OperationMinimum, OperationMaximum</td></tr><tr><td>Flags that indicate how to treat the output value</td><td>ResultDoNothing, ResultNot, ResultZero, ResultOne</td></tr></table><list type="bullet"><item><description>The way MinimumPixelValue and MaximumPixelValue are calculated depends on the bits per pixel and whether the image is signed or unsigned:<br /><br /><list type="bullet"><item><description>if the image is unsigned (most common):<br /><br /><list type="bullet"><item><description>MaximumPixelValue will be : 255 (8-bit), 4095 (12-bit) or 65535 (16-bit)</description></item><item><description>MinimumPixelValue = 0</description></item></list></description></item><item><description>if the image is signed (rare case): <br /><br /><list type="bullet"><item><description>MaximumPixelValue will be : 127 (8-bit), 2047 (12-bit) or 32767 (16-bit)</description></item><item><description>MinimumPixelValue will be -128 (8-bit), -2048 (12-bit) or -32768 (16-bit)</description></item></list></description></item></list></description></item><item><description>If the Flags property is set to OperationAnd, OperationOr, OperationXor, OperationAdd, OperationMulitply, OperationMaximum, OperationMinimum, OperationDivisionByValue, or OperationSubtractValue, the valid range of the Factor property is from MinimumPixelValue to MaximumPixelValue.</description></item><item><description>If the Flags property is set to OperationSubtract, OperationDifference, or OperationAverage, the valid range of the Factor property is from 2 * MinimumPixelValue to 2 * MaximumPixelValue.</description></item></list></remarks>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.ApplyMathematicalLogicCommandFlags.Master">
      <summary>
            All channels.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.ApplyMathematicalLogicCommandFlags.Red">
      <summary>
            Red channel only.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.ApplyMathematicalLogicCommandFlags.Green">
      <summary>
            Green channel only.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.ApplyMathematicalLogicCommandFlags.Blue">
      <summary>
            Blue channel only.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.ApplyMathematicalLogicCommandFlags.ValueDoNothing">
      <summary>
            No change.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.ApplyMathematicalLogicCommandFlags.ValueNot">
      <summary>
            Invert the color, resulting in its complement.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.ApplyMathematicalLogicCommandFlags.ValueZero">
      <summary>
            Change all bits to 0.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.ApplyMathematicalLogicCommandFlags.ValueOne">
      <summary>
            Change all bits to 1.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.ApplyMathematicalLogicCommandFlags.OperationAnd">
      <summary>
             Combine each pixel component value and the <see cref="P:Leadtools.ImageProcessing.Color.ApplyMathematicalLogicCommand.Factor">Factor property</see> using a bitwise AND (&amp;). (pixel = pixel &amp; Factor)
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.ApplyMathematicalLogicCommandFlags.OperationOr">
      <summary>
            Combine each pixel component value and the Factor property using a bitwise OR (|). (pixel = pixel | Factor)
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.ApplyMathematicalLogicCommandFlags.OperationXor">
      <summary>
            Combine each pixel component value and the Factor property using a bitwise XOR (^). (pixel = pixel ^ Factor)
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.ApplyMathematicalLogicCommandFlags.OperationAdd">
      <summary>
            Add pixel component value to the Factor property, clamping the result to the maximum allowed pixel value. (pixel = min(pixel + Factor, MaximumPixelValue) )
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.ApplyMathematicalLogicCommandFlags.OperationSubtractFactor">
      <summary>
            Subtract each pixel component value from the Factor property, clamping the result to the allowed pixel range. (pixel = min(max(Factor - pixel, MinimumPixelValue), MaximumPixelValue) )
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.ApplyMathematicalLogicCommandFlags.OperationSubtractValue">
      <summary>
            Subtract the Factor property from each pixel component value, clamping the result to the allowed pixel range. (pixel = min(max(pixel - Factor), MinimumPixelValue, MaximumPixelValue) )
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.ApplyMathematicalLogicCommandFlags.OperationAbsoluteDifference">
      <summary>
            Calculate the Absolute difference between the Factor property and each pixel component value. (pixel = abs(pixel - Factor))
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.ApplyMathematicalLogicCommandFlags.OperationMultiply">
      <summary>
            Multiply each pixel component value by Factor/100. (pixel = pixel * Factor / 100)
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.ApplyMathematicalLogicCommandFlags.OperationDivisionByFactor">
      <summary>
            Divide each pixel component value by Factor/100. An error will be returned if Factor = 0. (pixel = pixel * 100 / Factor)
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.ApplyMathematicalLogicCommandFlags.OperationDivisionByValue">
      <summary>
            Divide the Factor property by each pixel value. If the pixel value is 0, the result is set to the maximum allowed pixel value. (pixel = pixel ? min(Factor / pixel, MaximumPixelValue) : MaximumPixelValue)
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.ApplyMathematicalLogicCommandFlags.OperationAverage">
      <summary>
            Use the average of the each pixel component value and the Factor property. (pixel = (pixel+Factor) / 2).
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.ApplyMathematicalLogicCommandFlags.OperationMinimum">
      <summary>
            Use the lesser of the pixel component values and the Factor property. (pixel = min(pixel, Factor) ) 
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.ApplyMathematicalLogicCommandFlags.OperationMaximum">
      <summary>
             Use the greater of the pixel component values and the Factor property. (pixel = max(pixel, Factor) )
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.ApplyMathematicalLogicCommandFlags.ResultDoNothing">
      <summary>
            No change.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.ApplyMathematicalLogicCommandFlags.ResultNot">
      <summary>
            Invert the color, resulting in its complement.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.ApplyMathematicalLogicCommandFlags.ResultZero">
      <summary>
            Change all bits to 0.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.ApplyMathematicalLogicCommandFlags.ResultOne">
      <summary>
             Change all bits to 1.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.Color.ApplyMathematicalLogicCommand">
      <summary>
            Performs specific mathematical or logical operations on the colors of the image. 
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>This command supports 12 and 16-bit grayscale and 48 and 64-bit color images. Support for 12 and 16-bit grayscale and 48 and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <see cref="T:Leadtools.Topics.ChangingBrightnessAndContrast">Changing Brightness and Contrast</see>.<br />
            For more information, refer to <see cref="T:Leadtools.Topics.CorrectingColors">Correcting Colors</see>.<br />
            For more information, refer to <see cref="T:Leadtools.Topics.FlagsForTheApplyMathLogicMethod">Flags for ApplyMathematicalLogicCommand</see>.
            </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.ApplyMathematicalLogicCommand" /> on an image.</para>
        <code lang="VB">   Public Sub ApplyMathematicalLogicCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As ApplyMathematicalLogicCommand = New ApplyMathematicalLogicCommand
      command.Factor = 151
      command.Flags = ApplyMathematicalLogicCommandFlags.OperationMultiply Or ApplyMathematicalLogicCommandFlags.ValueDoNothing Or ApplyMathematicalLogicCommandFlags.ResultDoNothing
      ' Multiply the colors of the bitmap using a factor of 1.51 .
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void ApplyMathematicalLogicCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         ApplyMathematicalLogicCommand command = new ApplyMathematicalLogicCommand();
         command.Factor = 151;
         command.Flags = ApplyMathematicalLogicCommandFlags.OperationMultiply | ApplyMathematicalLogicCommandFlags.ValueDoNothing | ApplyMathematicalLogicCommandFlags.ResultDoNothing;
         // Multiply the colors of the bitmap using a factor of 1.51 .
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void ApplyMathematicalLogicCommandExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         ApplyMathematicalLogicCommand command = new ApplyMathematicalLogicCommand();
         command.Factor = 151;
         command.Flags = ApplyMathematicalLogicCommandFlags.OperationMultiply | ApplyMathematicalLogicCommandFlags.ValueDoNothing | ApplyMathematicalLogicCommandFlags.ResultDoNothing;
         // Multiply the colors of the bitmap using a factor of 1.51 .
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub ApplyMathematicalLogicCommandExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As ApplyMathematicalLogicCommand = New ApplyMathematicalLogicCommand()
         command.Factor = 151
         command.Flags = ApplyMathematicalLogicCommandFlags.OperationMultiply Or ApplyMathematicalLogicCommandFlags.ValueDoNothing Or ApplyMathematicalLogicCommandFlags.ResultDoNothing
         ' Multiply the colors of the bitmap using a factor of 1.51 .
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <seealso cref="T:Leadtools.Topics.FlagsForTheApplyMathLogicMethod">Flags for ApplyMathematicalLogicCommand</seealso>.
            <seealso cref="T:Leadtools.Topics.ChangingBrightnessAndContrast">Changing Brightness and Contrast</seealso>.
            <seealso cref="T:Leadtools.Topics.CorrectingColors">Correcting Colors</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.CombineCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.GammaCorrectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeContrastCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.HistogramContrastCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.StretchIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.RemapIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeHueCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeSaturationCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.HistogramEqualizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.FillCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.HistogramCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.WindowLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AdjustTintCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.HalfToneCommand"></seealso>.
            <noremarks /></member>
    <member name="M:Leadtools.ImageProcessing.Color.ApplyMathematicalLogicCommand.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Color.ApplyMathematicalLogicCommand" /> with default parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ApplyMathematicalLogicCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.ApplyMathematicalLogicCommand.#ctor(System.Int32,Leadtools.ImageProcessing.Color.ApplyMathematicalLogicCommandFlags)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Color.ApplyMathematicalLogicCommand" /> with explicit parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <param name="factor">Mathematical or logical operation factor.</param>
      <param name="flags">Flags that indicate the channel that will be used, the treatment of the input pixel values, the mathematical operation, and the treatment of the output pixel values. Use a bitwise OR ( | ) to specify one flag from each group.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.ApplyMathematicalLogicCommand" /> on an image.</para>
        <code lang="VB">   Public Sub ApplyMathematicalLogicConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As ApplyMathematicalLogicCommand = New ApplyMathematicalLogicCommand(151, ApplyMathematicalLogicCommandFlags.OperationMultiply Or ApplyMathematicalLogicCommandFlags.ValueDoNothing Or ApplyMathematicalLogicCommandFlags.ResultDoNothing)
      ' Multiply the colors of the bitmap using a factor of 1.51 .
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void ApplyMathematicalLogicConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         ApplyMathematicalLogicCommand command = new ApplyMathematicalLogicCommand(151, ApplyMathematicalLogicCommandFlags.OperationMultiply | ApplyMathematicalLogicCommandFlags.ValueDoNothing | ApplyMathematicalLogicCommandFlags.ResultDoNothing);
         // Multiply the colors of the bitmap using a factor of 1.51.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      [TestMethod]
      [Asynchronous]
      public void TestApplyMathematicalLogicConstructorExample()
      {
         using (SampleImageStream outputStream = new SampleImageStream("ApplyMathematicalLogicConstructorExample.jpg"))
         {
            ApplyMathematicalLogicConstructorExample(SampleImage.Get(SampleImageNames.Image1_cmp).Clone(), outputStream);
         }
         EnqueueTestComplete();
      }
      public void ApplyMathematicalLogicConstructorExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         ApplyMathematicalLogicCommand command = new ApplyMathematicalLogicCommand(151, ApplyMathematicalLogicCommandFlags.OperationMultiply | ApplyMathematicalLogicCommandFlags.ValueDoNothing | ApplyMathematicalLogicCommandFlags.ResultDoNothing);
         // Multiply the colors of the bitmap using a factor of 1.51.
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      &lt;TestMethod, Asynchronous&gt; _
      Public Sub TestApplyMathematicalLogicConstructorExample()
         Using outputStream As SampleImageStream = New SampleImageStream("ApplyMathematicalLogicConstructorExample.jpg")
            ApplyMathematicalLogicConstructorExample(SampleImage.Get(SampleImageNames.Image1_cmp).Clone(), outputStream)
         End Using
         EnqueueTestComplete()
      End Sub
      Public Sub ApplyMathematicalLogicConstructorExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As ApplyMathematicalLogicCommand = New ApplyMathematicalLogicCommand(151, ApplyMathematicalLogicCommandFlags.OperationMultiply Or ApplyMathematicalLogicCommandFlags.ValueDoNothing Or ApplyMathematicalLogicCommandFlags.ResultDoNothing)
         ' Multiply the colors of the bitmap using a factor of 1.51.
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.ApplyMathematicalLogicCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this class.
             <strong> Supported in Silverlight</strong>.
</summary>
      <returns>Character string that contains the name of this class.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.ApplyMathematicalLogicCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.ApplyMathematicalLogicCommand.Factor">
      <summary>
            Mathematical or logical operation factor.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Mathematical or logical operation factor.</value>
      <remarks>
            For more information, refer to <see cref="T:Leadtools.Topics.FlagsForTheApplyMathLogicMethod">Flags for ApplyMathematicalLogicCommand</see>.
            </remarks>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ApplyMathematicalLogicCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.ApplyMathematicalLogicCommand.Flags">
      <summary>
            Flags that indicate the channel that will be used, the treatment of the input pixel values, the mathematical operation, and the treatment of the output pixel values.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Flags that indicate the channel that will be used, the treatment of the input pixel values, the mathematical operation, and the treatment of the output pixel values. Use a bitwise OR ( | ) to specify one flag from each group.</value>
      <remarks>
            For more information, refer to <see cref="T:Leadtools.Topics.FlagsForTheApplyMathLogicMethod">Flags for ApplyMathematicalLogicCommand</see>.
            </remarks>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ApplyMathematicalLogicCommand" /> example.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.Color.RemapHueCommand">
      <summary>
            Uses a lookup table to change an image's hue values.  The saturation and value tables change S and V values only if a particular hue value is marked as non-zero in the Mask property. It is used for all resolutions, including 48 and 64-bit images.
             <strong> Supported in Silverlight</strong>.
</summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>This command can be used to change a range of colors to another range of colors. For example, it could be used to change all red pixels to any color, where a red pixel can have any brightness (V) and any amount of white (saturation). A red pixel in this case would be RGB(x,y,y) where 0 &lt;= x &lt;(LookUpTableLength - 1) and 0 &lt;= y &lt; x or in the HSV color space HSV(0,x,x) where 0&lt;=x&lt;=(LookUpTableLength - 1)</description>
          </item>
          <item>
            <description>The Mask lookup table identifies which values in the HueTable are valid. If a Mask value is 0, then the corresponding value in the HueTable is ignored. If a Mask value is non-zero, then the corresponding value in the HueTable is used. For example, if a pixel has a hue value of 240 and Mask[240] is nonzero, then the hue value of 240 is replaced with HueTable[240]. Traditionally, hue ranges from 0 to 359. For the lookup table, the range of 0 to 359 is remapped to a range of 0.. LookUpTableLength - 1. For example, if LookUpTableLength = 256</description>
          </item>
          <item>
            <description>This command supports 48 and 64-bit colored images.</description>
          </item>
          <item>
            <description>This command does not support signed data images.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <see cref="T:Leadtools.Topics.ChangingBrightnessAndContrast">Changing Brightness and Contrast</see>.
            </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.RemapHueCommand" /> on an image and change all green hues (and hues near green).</para>
        <code lang="VB">   Public Function INCREMENT_S1(ByVal x As Integer, ByVal Length As Integer) As Integer
      Return ((x + 1) Mod Length)
   End Function
   Public Function DECREMENT_S1(ByVal x As Integer, ByVal Length As Integer) As Integer
      Return ((x + (Length - 1)) Mod Length)
   End Function

   Public Function ADD_S1(ByVal x As Integer, ByVal y As Integer, ByVal Length As Integer) As Integer
      Return ((x + y) Mod Length)
   End Function


   Public Sub RemapHueCommandCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim MaskTable() As Integer
      Dim HueTable() As Integer
      Dim hsvRef As RasterHsvColor
      Dim HueGreen As Integer
      Dim HueChange As Integer

      Dim Change As Integer
      Dim i As Integer
      Dim Count As Integer
      Dim Length As Integer

      If (leadImage.BitsPerPixel &gt;= 48) Then

         Length = 65536

      ElseIf (Not (leadImage.BitsPerPixel = 16 Or leadImage.BitsPerPixel = 12)) Then
         Length = 256
      ElseIf (IsNothing(leadImage.GetLookupTable) And leadImage.UseLookupTable) Then
         Length = 256
      Else
         Length = (1 &lt;&lt; leadImage.BitsPerPixel)
      End If
      'Allocate tables
      ReDim MaskTable(Length - 1)
      ReDim HueTable(Length - 1)

      'Initialize tables
      For i = 0 To Length - 1
         MaskTable(i) = 0
         HueTable(i) = i
      Next

      'Get the hue for green
      hsvRef = RasterHsvColor.FromRasterColor(New RasterColor(0, 255, 0))

      HueGreen = hsvRef.H

      'Obtain new hue  
      hsvRef = RasterHsvColor.FromRasterColor(New RasterColor(255, 128, 0))
      Change = hsvRef.H - HueGreen
      If (Change &gt; 0) Then
         HueChange = Change
      Else
         HueChange = Change + Length - 1
      End If

      HueGreen = (HueGreen * (Length - 1)) \ 255
      HueChange = (HueChange * (Length - 1)) \ 255

      'Set values in HueTable, MaskTable 
      HueTable(HueGreen) = HueTable(HueGreen) + HueChange
      MaskTable(HueGreen) = 1

      'set the hues near green (+/- 15)
      i = INCREMENT_S1(HueGreen, Length)

      For Count = (15 * (Length - 1)) \ 255 To 1 Step -1
         i = INCREMENT_S1(i, Length)
         HueTable(i) = ADD_S1(HueTable(i), HueChange, Length)
         MaskTable(i) = 1
      Next

      i = DECREMENT_S1(HueGreen, Length)

      For Count = (15 * (Length - 1)) \ 255 To 1 Step -1

         i = DECREMENT_S1(i, Length)
         HueTable(i) = ADD_S1(HueTable(i), HueChange, Length)
         MaskTable(i) = 1
      Next
      Dim command As RemapHueCommand = New RemapHueCommand(MaskTable, HueTable, Nothing, Nothing, Length)

      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public int INCREMENT_S1(int x, int Length)
      {
         return ((x + 1) % Length);
      }
      public int DECREMENT_S1(int x, int Length)
      {
         return ((x + (Length - 1)) % Length);
      }

      public int ADD_S1(int x, int y, int Length)
      {
         return ((x + y) % Length);
      }


      public void RemapHueCommandCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         int[]  MaskTable;
         int[]  HueTable;
         RasterHsvColor hsvRef;
         int    HueGreen, HueChange;
         int    Change;
         int    i, Count;
         int    Length;

         if(image.BitsPerPixel &gt;= 48)
            Length = 0x10000;
         else if(!(image.BitsPerPixel == 16 || image.BitsPerPixel == 12))
            Length = 256;
         else if(image.GetLookupTable() != null &amp;&amp; image.UseLookupTable)
            Length = 256;
         else
            Length = (1 &lt;&lt; image.BitsPerPixel);

         //Allocate tables
         MaskTable = new int[Length];
         HueTable  = new int[Length];

         //Initialize tables
         for (i = 0; i &lt; Length; i++)
         {
            MaskTable[i] = 0;
            HueTable[i] = i;
         }

         //Get the hue for green
         hsvRef = RasterHsvColor.FromRasterColor(new RasterColor(0,255,0));

         HueGreen = hsvRef.H;

         //Obtain new hue  
         hsvRef =  RasterHsvColor.FromRasterColor(new RasterColor(255, 128, 0));
         Change = (int)hsvRef.H - (int)HueGreen;
         HueChange = (Change&gt;0) ? (int)Change : (int)(Change + Length - 1);
         HueGreen   *= (Length - 1)/255;
         HueChange *= (Length - 1)/255;

         //Set values in HueTable, MaskTable 
         HueTable[HueGreen] = (HueTable[HueGreen] + HueChange);
         MaskTable[HueGreen] = 1;

         //set the hues near green (+/- 15)
         Count = (15 * (Length - 1))/255;
         for (i = INCREMENT_S1(HueGreen, Length); Count &gt; 0; i = INCREMENT_S1(i, Length), Count--)
         {
            HueTable[i] = ADD_S1(HueTable[i], HueChange, Length);
            MaskTable[i] = 1;
         }

         Count = (15 * (Length - 1))/255;
         for (i = DECREMENT_S1(HueGreen, Length); Count &gt; 0; i = DECREMENT_S1(i, Length), Count--)
         {
            HueTable[i] = ADD_S1(HueTable[i], HueChange, Length);
            MaskTable[i] = 1;
         }

         RemapHueCommand command = new RemapHueCommand(MaskTable, HueTable, null, null, Length);
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public int INCREMENT_S1(int x, int Length)
      {
         return ((x + 1) % Length);
      }
      public int DECREMENT_S1(int x, int Length)
      {
         return ((x + (Length - 1)) % Length);
      }

      public int ADD_S1(int x, int y, int Length)
      {
         return ((x + y) % Length);
      }

      public void RemapHueCommandCommandExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         int[]  MaskTable;
         int[]  HueTable;
         RasterHsvColor hsvRef;
         int    HueGreen, HueChange;
         int    Change;
         int    i, Count;
         int    Length;

         if(image.BitsPerPixel &gt;= 48)
            Length = 0x10000;
         else if(!(image.BitsPerPixel == 16 || image.BitsPerPixel == 12))
            Length = 256;
         else if(image.GetLookupTable() != null &amp;&amp; image.UseLookupTable)
            Length = 256;
         else
            Length = (1 &lt;&lt; image.BitsPerPixel);

         //Allocate tables
         MaskTable = new int[Length];
         HueTable  = new int[Length];

         //Initialize tables
         for (i = 0; i &lt; Length; i++)
         {
            MaskTable[i] = 0;
            HueTable[i] = i;
         }

         //Get the hue for green
         hsvRef = RasterHsvColor.FromRasterColor(new RasterColor(0,255,0));

         HueGreen = hsvRef.H;

         //Obtain new hue  
         hsvRef =  RasterHsvColor.FromRasterColor(new RasterColor(255, 128, 0));
         Change = hsvRef.H - HueGreen;
         HueChange = (Change&gt;0) ? Change : (Change + Length - 1);
         HueGreen   *= (Length - 1)/255;
         HueChange *= (Length - 1)/255;

         //Set values in HueTable, MaskTable 
         HueTable[HueGreen] = (HueTable[HueGreen] + HueChange);
         MaskTable[HueGreen] = 1;

         //set the hues near green (+/- 15)
         Count = (15 * (Length - 1))/255;
         for (i = INCREMENT_S1(HueGreen, Length); Count &gt; 0; i = INCREMENT_S1(i, Length), Count--)
         {
            HueTable[i] = ADD_S1((int)HueTable[i], HueChange, Length);
            MaskTable[i] = 1;
         }

         Count = (15 * (Length - 1))/255;
         for (i = DECREMENT_S1(HueGreen, Length); Count &gt; 0; i = DECREMENT_S1(i, Length), Count--)
         {
            HueTable[i] = ADD_S1(HueTable[i], HueChange, Length);
            MaskTable[i] = 1;
         }

         RemapHueCommand command = new RemapHueCommand(MaskTable, HueTable, null, null, Length);
         command.Run(image);

         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Function INCREMENT_S1(ByVal x As Integer, ByVal Length As Integer) As Integer
         Return ((x + 1) Mod Length)
      End Function
      Public Function DECREMENT_S1(ByVal x As Integer, ByVal Length As Integer) As Integer
         Return ((x + (Length - 1)) Mod Length)
      End Function

      Public Function ADD_S1(ByVal x As Integer, ByVal y As Integer, ByVal Length As Integer) As Integer
         Return ((x + y) Mod Length)
      End Function

      Public Sub RemapHueCommandCommandExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim MaskTable As Integer()
         Dim HueTable As Integer()
         Dim hsvRef As RasterHsvColor
         Dim HueGreen, HueChange As Integer
         Dim Change As Integer
         Dim i, Count As Integer
         Dim Length As Integer

         If image.BitsPerPixel &gt;= 48 Then
            Length = &amp;H10000
         Else If Not(image.BitsPerPixel = 16 OrElse image.BitsPerPixel = 12) Then
            Length = 256
         Else If Not image.GetLookupTable() Is Nothing AndAlso image.UseLookupTable Then
            Length = 256
         Else
            Length = (1 &lt;&lt; image.BitsPerPixel)
         End If

         'Allocate tables
         MaskTable = New Integer(Length - 1){}
         HueTable = New Integer(Length - 1){}

         'Initialize tables
         i = 0
         Do While i &lt; Length
            MaskTable(i) = 0
            HueTable(i) = i
            i += 1
         Loop

         'Get the hue for green
         hsvRef = RasterHsvColor.FromRasterColor(New RasterColor(0,255,0))

         HueGreen = hsvRef.H

         'Obtain new hue  
         hsvRef = RasterHsvColor.FromRasterColor(New RasterColor(255, 128, 0))
         Change = hsvRef.H - HueGreen
         If (Change&gt;0) Then
            HueChange = Change
         Else
            HueChange = (Change + Length - 1)
         End If
         HueGreen *= (Length - 1)/255
         HueChange *= (Length - 1)/255

         'Set values in HueTable, MaskTable 
         HueTable(HueGreen) = (HueTable(HueGreen) + HueChange)
         MaskTable(HueGreen) = 1

         'set the hues near green (+/- 15)
         Count = (15 * (Length - 1))/255
         i = INCREMENT_S1(HueGreen, Length)
         Do While Count &gt; 0
            HueTable(i) = ADD_S1(CInt(HueTable(i)), HueChange, Length)
            MaskTable(i) = 1
            i = INCREMENT_S1(i, Length)
            Count -= 1
         Loop

         Count = (15 * (Length - 1))/255
         i = DECREMENT_S1(HueGreen, Length)
         Do While Count &gt; 0
            HueTable(i) = ADD_S1(HueTable(i), HueChange, Length)
            MaskTable(i) = 1
            i = DECREMENT_S1(i, Length)
            Count -= 1
         Loop

         Dim command As RemapHueCommand = New RemapHueCommand(MaskTable, HueTable, Nothing, Nothing, Length)
         command.Run(image)

         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <seealso cref="T:Leadtools.Topics.ChangingBrightnessAndContrast">Changing Brightness and Contrast</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.GammaCorrectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeContrastCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.HistogramContrastCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.StretchIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.InvertCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeHueCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeSaturationCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.HistogramEqualizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.FillCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.HistogramCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.WindowLevelCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Color.RemapHueCommand.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Color.RemapHueCommand" /> class object with default parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.RemapHueCommand" /> on an image and change all green hues (and hues near green).</para>
        <code lang="VB">   Public Function INCREMENT_S2(ByVal x As Integer, ByVal Length As Integer) As Integer
      Return ((x + 1) Mod Length)
   End Function
   Public Function DECREMENT_S2(ByVal x As Integer, ByVal Length As Integer) As Integer
      Return ((x + (Length - 1)) Mod Length)
   End Function

   Public Function ADD_S2(ByVal x As Integer, ByVal y As Integer, ByVal Length As Integer) As Integer
      Return ((x + y) Mod Length)
   End Function

   Public Sub RemapHueCommandConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim Length As Integer
      If (leadImage.BitsPerPixel &gt;= 48) Then
         Length = 65536
      ElseIf (Not (leadImage.BitsPerPixel = 16 Or leadImage.BitsPerPixel = 12)) Then
         Length = 256
      ElseIf (IsNothing(leadImage.GetLookupTable) And leadImage.UseLookupTable) Then
         Length = 256
      Else
         Length = (1 &lt;&lt; leadImage.BitsPerPixel)
      End If

      Dim MaskTable() As Integer
      Dim HueTable() As Integer
      'Allocate tables
      ReDim MaskTable(Length - 1)
      ReDim HueTable(Length - 1)

      Dim i As Integer
      'Initialize tables
      For i = 0 To Length - 1
         MaskTable(i) = 0
         HueTable(i) = i
      Next

      'Get the hue for green
      Dim hsvRef As RasterHsvColor = RasterHsvColor.FromRasterColor(New RasterColor(0, 255, 0))

      Dim HueGreen As Integer
      HueGreen = hsvRef.H

      'Obtain new hue  
      hsvRef = RasterHsvColor.FromRasterColor(New RasterColor(255, 128, 0))
      Dim Change As Integer = hsvRef.H - HueGreen
      Dim HueChange As Integer
      If (Change &gt; 0) Then
         HueChange = Change
      Else
         HueChange = Change + Length - 1
      End If

      HueGreen = (HueGreen * (Length - 1)) \ 255
      HueChange = (HueChange * (Length - 1)) \ 255

      'Set values in HueTable, MaskTable 
      HueTable(HueGreen) = HueTable(HueGreen) + HueChange
      MaskTable(HueGreen) = 1

      'set the hues near green (+/- 15)
      i = INCREMENT_S2(HueGreen, Length)

      Dim Count As Integer
      For Count = (15 * (Length - 1)) \ 255 To 1 Step -1
         i = INCREMENT_S2(i, Length)
         HueTable(i) = ADD_S2(HueTable(i), HueChange, Length)
         MaskTable(i) = 1
      Next

      i = DECREMENT_S2(HueGreen, Length)

      For Count = (15 * (Length - 1)) \ 255 To 1 Step -1

         i = DECREMENT_S2(i, Length)
         HueTable(i) = ADD_S2(HueTable(i), HueChange, Length)
         MaskTable(i) = 1
      Next
      Dim command As RemapHueCommand = New RemapHueCommand
      command.Mask = MaskTable
      command.HueTable = HueTable
      command.SaturationTable = Nothing
      command.ValueTable = Nothing
      command.LookUpTableLength = Length

      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public int INCREMENT_S2(int x, int Length)
      {
         return ((x+1)% Length);
      }
      public int DECREMENT_S2(int x, int Length)
      {
         return (( x + (Length - 1)) % Length);
      }

      public int ADD_S2(int x,int y, int Length)
      {
         return ((x+y)% Length);
      }

      public void RemapHueCommandConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         int    Length;
         if(image.BitsPerPixel &gt;= 48)
            Length = 0x10000;
         else if(!(image.BitsPerPixel == 16 || image.BitsPerPixel == 12))
            Length = 256;
         else if(image.GetLookupTable() != null &amp;&amp; image.UseLookupTable)
            Length = 256;
         else
            Length = (1 &lt;&lt; image.BitsPerPixel);

         //Allocate tables
         int[] MaskTable = new int[Length];
         int[] HueTable  = new int[Length];

         //Initialize tables
         for (int i = 0; i &lt; Length; i++)
         {
            MaskTable[i] = 0;
            HueTable[i] = i;
         }

         //Get the hue for green
         RasterHsvColor hsvRef = RasterHsvColor.FromRasterColor(new RasterColor(0,255,0));

         int HueGreen = hsvRef.H;

         //Obtain new hue  
         hsvRef =  RasterHsvColor.FromRasterColor(new RasterColor(255, 128, 0));
         int Change = (int)hsvRef.H - (int)HueGreen;
         int HueChange = (Change&gt;0) ? (int)Change : (int)(Change + Length - 1);
         HueGreen   *= (Length - 1)/255;
         HueChange *= (Length - 1)/255;

         //Set values in HueTable, MaskTable 
         HueTable[HueGreen] = (HueTable[HueGreen] + HueChange);
         MaskTable[HueGreen] = 1;

         //set the hues near green (+/- 15)
         int Count = (15 * (Length - 1))/255;
         for (int i = INCREMENT_S2(HueGreen, Length); Count &gt; 0; i = INCREMENT_S2(i, Length), Count--)
         {
            HueTable[i] = ADD_S2(HueTable[i], HueChange, Length);
            MaskTable[i] = 1;
         }

         Count = (15 * (Length - 1)) / 255;
         for (int i = DECREMENT_S2(HueGreen, Length); Count &gt; 0; i = DECREMENT_S2(i, Length), Count--)
         {
            HueTable[i] = ADD_S2(HueTable[i], HueChange, Length);
            MaskTable[i] = 1;
         }

         RemapHueCommand command = new RemapHueCommand();
         command.Mask = MaskTable;
         command.HueTable = HueTable;
         command.SaturationTable = null;
         command.ValueTable = null;
         command.LookUpTableLength = Length;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public int INCREMENT_S2(int x, int Length)
      {
         return ((x+1)% Length);
      }
      public int DECREMENT_S2(int x, int Length)
      {
         return (( x + (Length - 1)) % Length);
      }

      public int ADD_S2(int x,int y, int Length)
      {
         return ((x+y)% Length);
      }
      public void RemapHueCommandConstructorExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         int    Length;
         if(image.BitsPerPixel &gt;= 48)
            Length = 0x10000;
         else if(!(image.BitsPerPixel == 16 || image.BitsPerPixel == 12))
            Length = 256;
         else if(image.GetLookupTable() != null &amp;&amp; image.UseLookupTable)
            Length = 256;
         else
            Length = (1 &lt;&lt; image.BitsPerPixel);

         //Allocate tables
         int[] MaskTable = new int[Length];
         int[] HueTable  = new int[Length];

         //Initialize tables
         for (int i = 0; i &lt; Length; i++)
         {
            MaskTable[i] = 0;
            HueTable[i] = i;
         }

         //Get the hue for green
         RasterHsvColor hsvRef = RasterHsvColor.FromRasterColor(new RasterColor(0,255,0));

         int HueGreen = hsvRef.H;

         //Obtain new hue  
         hsvRef =  RasterHsvColor.FromRasterColor(new RasterColor(255, 128, 0));
         int Change = (int)hsvRef.H - (int)HueGreen;
         int HueChange = (Change&gt;0) ? (int)Change : (int)(Change + Length - 1);
         HueGreen   *= (Length - 1)/255;
         HueChange *= (Length - 1)/255;

         //Set values in HueTable, MaskTable 
         HueTable[HueGreen] = (HueTable[HueGreen] + HueChange);
         MaskTable[HueGreen] = 1;

         //set the hues near green (+/- 15)
         int Count = (15 * (Length - 1))/255;
         for (int i = INCREMENT_S2(HueGreen, Length); Count &gt; 0; i = INCREMENT_S2(i, Length), Count--)
         {
            HueTable[i] = ADD_S2(HueTable[i], HueChange, Length);
            MaskTable[i] = 1;
         }

         Count = (15 * (Length - 1)) / 255;
         for (int i = DECREMENT_S2(HueGreen, Length); Count &gt; 0; i = DECREMENT_S2(i, Length), Count--)
         {
            HueTable[i] = ADD_S2(HueTable[i], HueChange, Length);
            MaskTable[i] = 1;
         }

         RemapHueCommand command = new RemapHueCommand();
         command.Mask = MaskTable;
         command.HueTable = HueTable;
         command.SaturationTable = null;
         command.ValueTable = null;
         command.LookUpTableLength = Length;
         command.Run(image);

         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Function INCREMENT_S2(ByVal x As Integer, ByVal Length As Integer) As Integer
         Return ((x+1) Mod Length)
      End Function
      Public Function DECREMENT_S2(ByVal x As Integer, ByVal Length As Integer) As Integer
         Return ((x + (Length - 1)) Mod Length)
      End Function

      Public Function ADD_S2(ByVal x As Integer, ByVal y As Integer, ByVal Length As Integer) As Integer
         Return ((x+y) Mod Length)
      End Function
      Public Sub RemapHueCommandConstructorExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim Length As Integer
         If image.BitsPerPixel &gt;= 48 Then
            Length = &amp;H10000
         Else If Not(image.BitsPerPixel = 16 OrElse image.BitsPerPixel = 12) Then
            Length = 256
         Else If Not image.GetLookupTable() Is Nothing AndAlso image.UseLookupTable Then
            Length = 256
         Else
            Length = (1 &lt;&lt; image.BitsPerPixel)
         End If

         'Allocate tables
         Dim MaskTable As Integer() = New Integer(Length - 1){}
         Dim HueTable As Integer() = New Integer(Length - 1){}

         'Initialize tables
         Dim i As Integer = 0
         Do While i &lt; Length
            MaskTable(i) = 0
            HueTable(i) = i
            i += 1
         Loop

         'Get the hue for green
         Dim hsvRef As RasterHsvColor = RasterHsvColor.FromRasterColor(New RasterColor(0,255,0))

         Dim HueGreen As Integer = hsvRef.H

         'Obtain new hue  
         hsvRef = RasterHsvColor.FromRasterColor(New RasterColor(255, 128, 0))
         Dim Change As Integer = CInt(hsvRef.H) - CInt(HueGreen)
         Dim HueChange As Integer
         If (Change&gt;0) Then
            HueChange = CInt(Change)
         Else
            HueChange = CInt(Change + Length - 1)
         End If
         HueGreen *= (Length - 1)/255
         HueChange *= (Length - 1)/255

         'Set values in HueTable, MaskTable 
         HueTable(HueGreen) = (HueTable(HueGreen) + HueChange)
         MaskTable(HueGreen) = 1

         'set the hues near green (+/- 15)
         Dim Count As Integer = (15 * (Length - 1))/255
         i = INCREMENT_S2(HueGreen, Length)
         Do While Count &gt; 0
            HueTable(i) = ADD_S2(HueTable(i), HueChange, Length)
            MaskTable(i) = 1
            i = INCREMENT_S2(i, Length)
            Count -= 1
         Loop

         Count = (15 * (Length - 1)) / 255
         i = DECREMENT_S2(HueGreen, Length)
         Do While Count &gt; 0
            HueTable(i) = ADD_S2(HueTable(i), HueChange, Length)
            MaskTable(i) = 1
            i = DECREMENT_S2(i, Length)
            Count -= 1
         Loop

         Dim command As RemapHueCommand = New RemapHueCommand()
         command.Mask = MaskTable
         command.HueTable = HueTable
         command.SaturationTable = Nothing
         command.ValueTable = Nothing
         command.LookUpTableLength = Length
         command.Run(image)

         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.RemapHueCommand.#ctor(System.Int32[],System.Int32[],System.Int32[],System.Int32[],System.Int32)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Color.RemapHueCommand" /> class object with explicit parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <param name="mask">Lookup table that identifies which values in the hueTable, saturationTable and valueTable are valid. If Mask[i] is non-zero, then hueTable, saturationTable and valueTable are to be used. If Mask[i] is 0 then hueTable, saturationTable and valueTable are ignored. If Mask is null, all entries in the hueTable, saturationTable and valueTable are used.</param>
      <param name="hueTable">Hue look up table. If the Mask table value for a particular pixel hue is non-zero, then the hue is changed to the corresponding entry in hueTable.  For example, if a pixel value has a hue of 85 and Mask[85] is non-zero, the hue is changed to hueTable[85]. If hueTable is null, the hue of each pixel is unchanged.</param>
      <param name="saturationTable">Saturation look up table. If the Mask table value for a particular pixel hue is non-zero, then the saturation is changed to the corresponding entry in saturationTable. For example, if a pixel value has a hue of 85 and Mask[85] is non-zero, the saturation is changed to saturationTable[85]. If hueTable is null, the saturation is changed to saturationTable[85]. If saturationTable is null, the saturation of each pixel is unchanged.</param>
      <param name="valueTable">Value look up table. If the Mask table value for a particular pixel hue is non-zero, then the value is changed to the corresponding entry in valueTable. For example, if a pixel value has a hue of 85 and Mask[85] is non-zero, the value is changed to valueTable[85]. If hueTable is null, the value is changed to ValueTable[85]. If valueTable is null, the value of each pixel is unchanged.</param>
      <param name="lookUpTableLength">Length of the lookup table. Possible values are 65536	for 16-bit image, 4096 for 12-bit image, 256	for 8-bit image</param>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.RemapHueCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.RemapHueCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this class.
             <strong> Supported in Silverlight</strong>.
</summary>
      <returns>String that contains the name of this class.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.RemapHueCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.RemapHueCommand.Mask">
      <summary>
            Gets or sets the lookup table that identifies which values in the HueTable, SaturationTable and ValueTable properties are valid.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Lookup table that identifies which values in the HueTable, SaturationTable and ValueTable properties are valid. If Mask[i] is non-zero, then the HueTable, SaturationTable and ValueTable properties are to be used. If Mask[i] is 0 then the HueTable, SaturationTable and ValueTable properties are ignored. If Mask is null, all entries in the HueTable, SaturationTable and ValueTable properties are used.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.RemapHueCommand">RemapHueCommand</see></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.RemapHueCommand.HueTable">
      <summary>
            Gets or sets the hue look up table.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Hue look up table. If the Mask table value for a particular pixel hue is non-zero, then the hue is changed to the corresponding entry in the HueTable property.  For example, if a pixel value has a hue of 85 and Mask[85] is non-zero, the hue is changed to HueTable[85]. If HueTable is null, the hue of each pixel is unchanged.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.RemapHueCommand">RemapHueCommand</see></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.RemapHueCommand.SaturationTable">
      <summary>
            Gets or sets the saturation look up table.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Saturation look up table. If the Mask table value for a particular pixel hue is non-zero, then the saturation is changed to the corresponding entry in the SaturationTable property. For example, if a pixel value has a hue of 85 and Mask[85] is non-zero, the saturation is changed to SaturationTable[85]. If HueTable is null, the saturation is changed to SaturationTable[85]. If SaturationTable is null, the saturation of each pixel is unchanged.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.RemapHueCommand">RemapHueCommand</see></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.RemapHueCommand.ValueTable">
      <summary>
            Gets or sets the value look up table.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Value look up table. If the Mask table value for a particular pixel hue is non-zero, then the value is changed to the corresponding entry in ValueTable. For example, if a pixel value has a hue of 85 and Mask[85] is non-zero, the value is changed to ValueTable[85]. If HueTable is null, the value is changed to ValueTable[85]. If ValueTable is null, the value of each pixel is unchanged.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.RemapHueCommand">RemapHueCommand</see></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.RemapHueCommand.LookUpTableLength">
      <summary>
            Gets or sets the length of the lookup table.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Length of the lookup table. Possible values are 65536	for a 16-bit image, 4096 for a 12-bit image, 256	for an 8-bit image.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.RemapHueCommand">RemapHueCommand</see></example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.Color.ContrastBrightnessIntensityCommand">
      <summary>
            Applies contrast, brightness and intensity adjustments to enhance the image tonal range. This class is available in the <see cref="T:Leadtools.Topics.RasterProDocMed">Raster Pro</see> and above toolkits.
             <strong> Supported in Silverlight</strong>.
</summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>The transformations are applied in this order: Contrast, Brightness then Intensity. Were the three commands to be called separately, then after each method was applied calculated values less than 0 and more than 255 (for 8 bits per component for example) would be clamped to 0 and 255 respectively. Using this method, the values are accumulative and the final result would be clamped. In addition, this command is faster than calling each method separately.</description>
          </item>
          <item>
            <description>It also can process the whole image or a region of the image. If a image has a region, the effect is applied only to the region.</description>
          </item>
          <item>
            <description>This command supports 12 and 16-bit grayscale and 48 and 64-bit color images. Support for 12 and 16-bit grayscale and 48 and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support signed data images.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <see cref="T:Leadtools.Topics.ChangingBrightnessAndContrast">Changing Brightness and Contrast</see>.
            </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.ContrastBrightnessIntensityCommand" /> on an image.</para>
        <code lang="VB">   Public Sub ContrastBrightnessIntensityCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As ContrastBrightnessIntensityCommand = New ContrastBrightnessIntensityCommand
      command.Contrast = -146
      command.Brightness = 358
      command.Intensity = 240
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void ContrastBrightnessIntensityCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         ContrastBrightnessIntensityCommand command = new ContrastBrightnessIntensityCommand();
         command.Contrast = -146;
         command.Brightness = 358;
         command.Intensity = 240;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void ContrastBrightnessIntensityCommandExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         ContrastBrightnessIntensityCommand command = new ContrastBrightnessIntensityCommand();
         command.Contrast = -146;
         command.Brightness = 358;
         command.Intensity = 240;
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub ContrastBrightnessIntensityCommandExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As ContrastBrightnessIntensityCommand = New ContrastBrightnessIntensityCommand()
         command.Contrast = -146
         command.Brightness = 358
         command.Intensity = 240
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <seealso cref="T:Leadtools.Topics.ChangingBrightnessAndContrast">Changing Brightness and Contrast</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeContrastCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeSaturationCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SharpenCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.PosterizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.MosaicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EmbossCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MedianCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.AddNoiseCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.IntensityDetectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SpatialFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.BinaryFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MaximumCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MinimumCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.OilifyCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SolarizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.WindowLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AutoColorLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.SelectDataCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.ColorizeGrayCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Color.ContrastBrightnessIntensityCommand.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Color.ContrastBrightnessIntensityCommand" /> class objects with default parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ContrastBrightnessIntensityCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.ContrastBrightnessIntensityCommand.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>
            Initializes a new ContrastBrightnessIntensityCommand class object with explicit parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <param name="contrast">Value that refers to the histogram stretching amount. It represents the amount of contrast change. The contrast ranges from -1000 to +1000. This value is divided internally by 1000. A positive value increases the contrast whereas a negative value decreases the contrast.</param>
      <param name="brightness">Value that refers to colors intensities scale factor. It indicates the amount of brightness change. The brightness ranges from -1000 to 1000. This value is divided internally by 1000. A positive value increases (or lightens) the brightness of the image image. A negative value decreases (or darkens) the brightness of the image image.</param>
      <param name="intensity">Value that refers to colors intensities shifting amount. It indicates the amount of intensity change. The intensity ranges from -1000 to +1000. This value is divided internally by 1000. A positive value lightens the brightness pixels whereas a negative value darkens the brightness pixels.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.ContrastBrightnessIntensityCommand" /> on an image.</para>
        <code lang="VB">   Public Sub ContrastBrightnessIntensityConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As ContrastBrightnessIntensityCommand = New ContrastBrightnessIntensityCommand(-146, 200, 310)
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void ContrastBrightnessIntensityConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         ContrastBrightnessIntensityCommand command = new ContrastBrightnessIntensityCommand(-146, 200, 310);
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void ContrastBrightnessIntensityConstructorExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         ContrastBrightnessIntensityCommand command = new ContrastBrightnessIntensityCommand(-146, 200, 310);
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub ContrastBrightnessIntensityConstructorExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As ContrastBrightnessIntensityCommand = New ContrastBrightnessIntensityCommand(-146, 200, 310)
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.ContrastBrightnessIntensityCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this class.
             <strong> Supported in Silverlight</strong>.
</summary>
      <returns>String that contains the name of this class.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.ContrastBrightnessIntensityCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.ContrastBrightnessIntensityCommand.Contrast">
      <summary>
            Gets or sets the amount of contrast change.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Value that refers to the histogram stretching amount. The contrast ranges from -1000 to +1000. This value is divided internally by 1000. A positive value increases the contrast whereas a negative value decreases the contrast.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ContrastBrightnessIntensityCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.ContrastBrightnessIntensityCommand.Brightness">
      <summary>
            Gets or sets the amount of change in the brightness.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value> Value that refers to the color intensity scale factor. The brightness ranges from -1000 to 1000. This value is divided internally by 1000. A positive value increases (or lightens) the brightness of the image. A negative value decreases (or darkens) the brightness of the image.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ContrastBrightnessIntensityCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.ContrastBrightnessIntensityCommand.Intensity">
      <summary>
            Gets or sets the amount of change to the intensity.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value> Value that refers to amount of shift in the color intensity. The intensity ranges from -1000 to +1000. This value is divided internally by 1000. A positive value lightens the brightness pixels whereas a negative value darkens the brightness pixels.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ContrastBrightnessIntensityCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.Color.ColorThresholdCommandFlags">
      <summary>
            Flags that represent the treatment of the values within the threshold range, the treatment of a pixel that falls on the threshold and new values for rejected values.
            <para>These flags have a <see cref="T:System.FlagsAttribute" /> attribute that allows a bitwise combination of its member values.</para><strong> Supported in Silverlight</strong>.
</summary>
      <remarks>
             You can use a bitwise OR (|) to specify one flag from each group.
             <table><tr><td><b>Group</b></td><td><b>Flags</b></td></tr><tr><td>Flags that define treatment of the values between the minimum and maximum threshold values</td><td>BandBass, BandReject</td></tr><tr><td>Flags that define treatment of a pixel that falls on the threshold</td><td>EffectChannel, EffectAll</td></tr><tr><td>Flags that define the new values for the rejected values</td><td>SetToMinimum, SetToMaximum, SetToClamp</td></tr></table></remarks>
      <noexample />
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.ColorThresholdCommandFlags.BandBass">
      <summary>
            The values falling outside the range are modified.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.ColorThresholdCommandFlags.BandReject">
      <summary>
            The values falling inside the range are modified.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.ColorThresholdCommandFlags.EffectChannel">
      <summary>
            Each channel component is modified independently.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.ColorThresholdCommandFlags.EffectAll">
      <summary>
            The pixel is rejected by the test if one of the components is rejected.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.ColorThresholdCommandFlags.SetToMinimum">
      <summary>
            The rejected values are set to 0.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.ColorThresholdCommandFlags.SetToMaximum">
      <summary>
            The rejected values are set to the maximum value.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.ColorThresholdCommandFlags.SetToClamp">
      <summary>
            The rejected component values less than the MinimumRange property go to the minimum value in the used color space component. Rejected component values greater than the MaximumRange property go to the maximum value in the used color space component. This works only with the EffectChannel flag.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.Color.ColorThresholdCommandType">
      <summary>
            Color space on which the threshold is based.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.ColorThresholdCommandType.Rgb">
      <summary>
            RGB color space.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.ColorThresholdCommandType.Hsv">
      <summary>
            HSV color space.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.ColorThresholdCommandType.Hls">
      <summary>
            HLS color space
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.ColorThresholdCommandType.Xyz">
      <summary>
            XYZ color space
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.ColorThresholdCommandType.YcrCb">
      <summary>
            YCrCb color space
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.ColorThresholdCommandType.Yuv">
      <summary>
            YUV color space
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.ColorThresholdCommandType.Lab">
      <summary>
            LAB color space
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.ColorThresholdCommandType.Cmy">
      <summary>
            CMY color space
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.Color.ColorThresholdCommandComponent">
      <summary>
        <see cref="T:Leadtools.ImageProcessing.Color.ColorThresholdCommandComponent" /> class contains the values to be used for thresholding and redistributing the image's color component values for the <see cref="T:Leadtools.ImageProcessing.Color.ColorThresholdCommand" /> class.
             <strong> Supported in Silverlight</strong>.
</summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ColorThresholdCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.ColorThresholdCommandComponent.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Color.ColorThresholdCommandComponent" /> class with default parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <example>
            Refer to <see cref="M:Leadtools.ImageProcessing.Color.ColorThresholdCommand.#ctor">ColorThresholdCommand()</see></example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.ColorThresholdCommandComponent.#ctor(System.Int32,System.Int32,Leadtools.ImageProcessing.Color.ColorThresholdCommandFlags)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Color.ColorThresholdCommandComponent" /> class with explicit parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <param name="minimumRange">Value that represents the minimum boundary used to threshold a specific color.</param>
      <param name="maximumRange">Value that represents the maximum boundary used to threshold a specific color.</param>
      <param name="flags">Flags that represent the value that should be distributed to the thresholded component.</param>
      <example>
            Refer to <see cref="M:Leadtools.ImageProcessing.Color.ColorThresholdCommand.#ctor">ColorThresholdCommand()</see></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.ColorThresholdCommandComponent.MinimumRange">
      <summary>
            Gets or sets a value that represents the minimum boundary used to threshold a specific color.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Value that represents the minimum boundary used to threshold a specific color.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ColorThresholdCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.ColorThresholdCommandComponent.MaximumRange">
      <summary>
            Gets or sets a value that represents the maximum boundary used to threshold a specific color.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Value that represents the maximum boundary used to threshold a specific color.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ColorThresholdCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.ColorThresholdCommandComponent.Flags">
      <summary>
            Gets or sets values that represent the treatment of the values within the threshold range, the treatment of a pixel that falls on the threshold and new values for rejected values.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Values that represent the treatment of the values within the threshold range, the treatment of a pixel that falls on the threshold and new values for rejected values.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ColorThresholdCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.Color.ColorThresholdCommand">
      <summary>
            Using any one of eight color spaces, resets those image's pixel component values that fall inside or outside of a specified range.
            </summary>
      <remarks>
            Every color space component may have a different range:
            <TABLE><TR><TD bgcolor="LightGrey"><b>Color Component</b></TD><TD bgcolor="LightGrey"><b>Range for 8 bit per component.</b></TD><TD bgcolor="LightGrey"><b>Range for 16 bit per component.</b></TD></TR><TR><TD bgcolor="Gainsboro">
                  RGB
               </TD><TD></TD><TD></TD></TR><TR><TD>
                  R
               </TD><TD>
                  0 ... 255
               </TD><TD>
                  0 ... 65535
               </TD></TR><TR><TD>
                  G
               </TD><TD>
                  0 ... 255
               </TD><TD>
                  0 ... 65535
               </TD></TR><TR><TD>
                  B
               </TD><TD>
                  0 ... 255
               </TD><TD>
                  0 ... 65535
               </TD></TR><TR><TD bgcolor="Gainsboro">
                  HSV
               </TD><TD></TD><TD></TD></TR><TR><TD>
                  H
               </TD><TD>
                  0 ... 360
               </TD><TD>
                  0 ... 36000
               </TD></TR><TR><TD>
                  S
               </TD><TD>
                  0 ... 100
               </TD><TD>
                  0 ... 10000
               </TD></TR><TR><TD>
                  V
               </TD><TD>
                  0 ... 255
               </TD><TD>
                  0 ... 65535
               </TD></TR><TR><TD bgcolor="Gainsboro">
                  HLS
               </TD><TD></TD><TD></TD></TR><TR><TD>
                  H
               </TD><TD>
                  0 ... 360
               </TD><TD>
                  0 ... 36000
               </TD></TR><TR><TD>
                  L
               </TD><TD>
                  0 ... 255
               </TD><TD>
                  0 ... 65535
               </TD></TR><TR><TD>
                  S
               </TD><TD>
                  0 ... 100
               </TD><TD>
                  0 ... 10000
               </TD></TR><TR><TD bgcolor="Gainsboro">
                  XYZ
               </TD><TD></TD><TD></TD></TR><TR><TD>
                  X
               </TD><TD>
                  0 ... 255
               </TD><TD>
                  0 ... 65535
               </TD></TR><TR><TD>
                  Y
               </TD><TD>
                  0 ... 255
               </TD><TD>
                  0 ... 65535
               </TD></TR><TR><TD>
                  Z
               </TD><TD>
                  0 ... 255
               </TD><TD>
                  0 ... 65535
               </TD></TR><TR><TD bgcolor="Gainsboro">
                  YCrCb
               </TD><TD></TD><TD></TD></TR><TR><TD>
                  Y
               </TD><TD>
                  0 ... 255
               </TD><TD>
                  0 ... 65535
               </TD></TR><TR><TD>
                  Cr
               </TD><TD>
                  -128 ... 127
               </TD><TD>
                  -32768 ... 32767
               </TD></TR><TR><TD>
                  Cb
               </TD><TD>
                  -128 ... 127
               </TD><TD>
                  -32768 ... 32767
               </TD></TR><TR><TD bgcolor="Gainsboro">
                  YUV
               </TD><TD></TD><TD></TD></TR><TR><TD>
                  Y
               </TD><TD>
                  0 ... 255
               </TD><TD>
                  0 ... 65535
               </TD></TR><TR><TD>
                  U
               </TD><TD>
                  -112 ... 111
               </TD><TD>
                  -28567 ... 28566
               </TD></TR><TR><TD>
                  V
               </TD><TD>
                  -138 ... 137
               </TD><TD>
                  -35337 ... 35336
               </TD></TR><TR><TD bgcolor="Gainsboro">
                  LAB
               </TD><TD></TD><TD></TD></TR><TR><TD>
                  L
               </TD><TD>
                  0 ... 100
               </TD><TD>
                  0 ... 10000
               </TD></TR><TR><TD>
                  A
               </TD><TD>
                  -128 ... 127
               </TD><TD>
                  -32768 ... 32767
               </TD></TR><TR><TD>
                  B
               </TD><TD>
                  -128 ... 127
               </TD><TD>
                  -32768 ... 32767
               </TD></TR><TR><TD bgcolor="Gainsboro">
                  CMY
               </TD><TD></TD><TD></TD></TR><TR><TD>
                  C
               </TD><TD>
                  0 ... 255
               </TD><TD>
                  0 ... 65535
               </TD></TR><TR><TD>
                  M
               </TD><TD>
                  0 ... 255
               </TD><TD>
                  0 ... 65535
               </TD></TR><TR><TD>
                  Y
               </TD><TD>
                  0 ... 255
               </TD><TD>
                  0 ... 65535
               </TD></TR></TABLE><br></br>
            This class works as follows:
            <list type="number"><item><description>The image is converted to the required color space. </description></item><item><description>For every pixel, the following operations are performed: Each component is compared with the MinimumRange and MaximumRange values of the appropriate <see cref="T:Leadtools.ImageProcessing.Color.ColorThresholdCommandComponent" /> class.<br /><list type="bullet"><item><description>If it is inside the range, the component is considered to have "passed" the test.</description></item><item><description>If it is outside the range, the component has been rejected". The <see cref="T:Leadtools.ImageProcessing.Color.ColorThresholdCommandFlags" />.BandReject flag inverts this by making "rejected" components "passed" and vice-versa.</description></item></list></description></item><item><description>If <see cref="T:Leadtools.ImageProcessing.Color.ColorThresholdCommandFlags" />.EffectChannel is set, the components are modified independently. If <see cref="T:Leadtools.ImageProcessing.Color.ColorThresholdCommandFlags" />.EffectAll has been set, the pixel is rejected by the test if any component is rejected. If the pixel/component is rejected, then:<br /><list type="bullet"><item><description>If <see cref="T:Leadtools.ImageProcessing.Color.ColorThresholdCommandFlags" />.SetToMinimum is set, the rejected pixel/component is set to 0. </description></item><item><description>If <see cref="T:Leadtools.ImageProcessing.Color.ColorThresholdCommandFlags" />.SetToMaximum is set, the rejected pixel/component is set to 255.</description></item><item><description>If <see cref="T:Leadtools.ImageProcessing.Color.ColorThresholdCommandFlags" />.SetToClamp is set, components less that MinimumRange go to 0 and components greater than MaximumRange go to 255. This would work only with the <see cref="T:Leadtools.ImageProcessing.Color.ColorThresholdCommandFlags" />.EffectChannel and <see cref="T:Leadtools.ImageProcessing.Color.ColorThresholdCommandFlags" />.BandBass flags.</description></item></list></description></item></list><list type="bullet"><item><description>This class works for 1, 2, 3, _ 8,16, 24, 32, 48 and 64-bit color images and can support regions for 24 and 48-bit images. If a 24 or 48-bit image has a region the effect will be applied on the region only.</description></item><item><description>One class is used for  each color component. The order is considered to be the same as in the xxx Space name. For example, for Rgb Space:<br /><list type="bullet"><item><description>Components[0] class is used for the Red component.</description></item><item><description>Components[1] class is used for the Green component.</description></item><item><description>Components[2] class is used for the Blue component.</description></item></list></description></item><item><description>This command does not support 32-bit grayscale images.</description></item><item><description>This command does not support signed images.</description></item></list><br />
            For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.<br />
            For more information, refer to <see cref="T:Leadtools.Topics.CorrectingColors">Correcting Colors</see>.<br /></remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.ColorThresholdCommand" /> on an image.</para>
        <code lang="VB">   Public Sub ColorThresholdCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim components() As ColorThresholdCommandComponent
      ReDim components(2)
      components(0) = New ColorThresholdCommandComponent
      components(1) = New ColorThresholdCommandComponent
      components(2) = New ColorThresholdCommandComponent

      components(0).MinimumRange = 128
      components(0).MaximumRange = 255
      components(0).Flags = 0
      components(1).MinimumRange = 128
      components(1).MaximumRange = 255
      components(1).Flags = 0
      components(2).MinimumRange = 128
      components(2).MaximumRange = 255
      components(2).Flags = 0
      Dim command As ColorThresholdCommand = New ColorThresholdCommand(ColorThresholdCommandType.Rgb, components)
      'Apply color Threshold effect on the image.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void ColorThresholdCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         ColorThresholdCommandComponent[] Components = new ColorThresholdCommandComponent[3];

         Components[0] = new ColorThresholdCommandComponent();
         Components[0].MinimumRange = 128;
         Components[0].MaximumRange = 255;
         Components[0].Flags        = 0;
         Components[1] = new ColorThresholdCommandComponent();
         Components[1].MinimumRange = 128;
         Components[1].MaximumRange = 255;
         Components[1].Flags        = 0;
         Components[2] = new ColorThresholdCommandComponent();
         Components[2].MinimumRange = 128;
         Components[2].MaximumRange = 255;
         Components[2].Flags        = 0;

         ColorThresholdCommand command = new ColorThresholdCommand(ColorThresholdCommandType.Rgb, Components);
         //Apply color Threshold effect on the image.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void ColorThresholdCommandExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         ColorThresholdCommandComponent[] Components = new ColorThresholdCommandComponent[3];
         Components[0] = new ColorThresholdCommandComponent();
         Components[0].MinimumRange = 128;
         Components[0].MaximumRange = 255;
         Components[0].Flags        = 0;
         Components[1] = new ColorThresholdCommandComponent();
         Components[1].MinimumRange = 128;
         Components[1].MaximumRange = 255;
         Components[1].Flags        = 0;
         Components[2] = new ColorThresholdCommandComponent();
         Components[2].MinimumRange = 128;
         Components[2].MaximumRange = 255;
         Components[2].Flags        = 0;

         ColorThresholdCommand command = new ColorThresholdCommand(ColorThresholdCommandType.Rgb, Components);
         //Apply color Threshold effect on the image.
         command.Run(image);

         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub ColorThresholdCommandExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim Components As ColorThresholdCommandComponent() = New ColorThresholdCommandComponent(2){}
         Components(0) = New ColorThresholdCommandComponent()
         Components(0).MinimumRange = 128
         Components(0).MaximumRange = 255
         Components(0).Flags = 0
         Components(1) = New ColorThresholdCommandComponent()
         Components(1).MinimumRange = 128
         Components(1).MaximumRange = 255
         Components(1).Flags = 0
         Components(2) = New ColorThresholdCommandComponent()
         Components(2).MinimumRange = 128
         Components(2).MaximumRange = 255
         Components(2).Flags = 0

         Dim command As ColorThresholdCommand = New ColorThresholdCommand(ColorThresholdCommandType.Rgb, Components)
         'Apply color Threshold effect on the image.
         command.Run(image)

         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <seealso cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</seealso>.
            <seealso cref="T:Leadtools.Topics.CorrectingColors">Correcting Colors</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.BinaryFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorSeparateCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorMergeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.AddNoiseCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.IntensityDetectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SpatialFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.BinaryFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MaximumCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MinimumCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ShadowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeHueSaturationIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorThresholdCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.DiscreteFourierTransformCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.FastFourierTransformCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.FourierTransformDisplayCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.FrequencyFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.FrequencyFilterMaskCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.DirectionEdgeStatisticalCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.MathematicalFunctionCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RevEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SegmentCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.SubtractBackgroundCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.UserFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AdjustTintCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.HalfToneCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Color.ColorThresholdCommand.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Color.ColorThresholdCommand" /> class object with default parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.ColorThresholdCommand" /> on an image.</para>
        <code lang="VB">   Public Sub ColorThresholdConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim components() As ColorThresholdCommandComponent
      ReDim components(2)

      Dim i As Integer
      For i = 0 To 2
         components(i) = New ColorThresholdCommandComponent(128, 255, 0)
      Next i

      Dim command As ColorThresholdCommand = New ColorThresholdCommand
      command.ColorSpace = ColorThresholdCommandType.Rgb
      command.Components = components
      'Apply color Threshold effect on the image.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void ColorThresholdConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         ColorThresholdCommandComponent[] components = new  ColorThresholdCommandComponent[3];
         for (int i = 0; i &lt; 3; i++)
            components[i] = new ColorThresholdCommandComponent(128, 255, 0);

         ColorThresholdCommand command = new ColorThresholdCommand();
         command.ColorSpace = ColorThresholdCommandType.Rgb;
         command.Components = components;

         //Apply color Threshold effect on the image.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void ColorThresholdConstructorExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         ColorThresholdCommandComponent[] components = new  ColorThresholdCommandComponent[3];
         for (int i = 0; i &lt; 3; i++)
            components[i] = new ColorThresholdCommandComponent(128, 255, 0);
         ColorThresholdCommand command = new ColorThresholdCommand();
         command.ColorSpace = ColorThresholdCommandType.Rgb;
         command.Components = components;

         //Apply color Threshold effect on the image.
         command.Run(image);

         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub ColorThresholdConstructorExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim components As ColorThresholdCommandComponent() = New ColorThresholdCommandComponent(2){}
         For i As Integer = 0 To 2
            components(i) = New ColorThresholdCommandComponent(128, 255, 0)
         Next i
         Dim command As ColorThresholdCommand = New ColorThresholdCommand()
         command.ColorSpace = ColorThresholdCommandType.Rgb
         command.Components = components

         'Apply color Threshold effect on the image.
         command.Run(image)

         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.ColorThresholdCommand.#ctor(Leadtools.ImageProcessing.Color.ColorThresholdCommandType,Leadtools.ImageProcessing.Color.ColorThresholdCommandComponent[])">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Color.ColorThresholdCommand" /> class object with explicit parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <param name="type">Value that represents the color space on which the threshold is based.</param>
      <param name="components">Array of 3 <see cref="T:Leadtools.ImageProcessing.Color.ColorThresholdCommandComponent" /> classs that contains the properties used to compare and modify each component.</param>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ColorThresholdCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.ColorThresholdCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this class.
             <strong> Supported in Silverlight</strong>.
</summary>
      <returns>String that contains the name of this class.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.ColorThresholdCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.ColorThresholdCommand.ColorSpace">
      <summary>
            Gets or sets the color space on which the threshold is based.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Value that represents the color space on which the threshold is based.</value>
      <example>
            Refer to <see cref="M:Leadtools.ImageProcessing.Color.ColorThresholdCommand.#ctor">ColorThresholdCommand()</see></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.ColorThresholdCommand.Components">
      <summary>
            Gets or sets an array of 3 <see cref="T:Leadtools.ImageProcessing.Color.ColorThresholdCommandComponent" /> classes that contains the properties used to compare and modify each component.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Array of 3 <see cref="T:Leadtools.ImageProcessing.Color.ColorThresholdCommandComponent" /> classes that contains the properties used to compare and modify each component.</value>
      <example>
            Refer to <see cref="M:Leadtools.ImageProcessing.Color.ColorThresholdCommand.#ctor">ColorThresholdCommand()</see></example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.Color.MathematicalFunctionCommandType">
      <summary>
            Value that indicates the function used by the MathematicalFunctionCommand class object.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.MathematicalFunctionCommandType.Square">
      <summary>
            Square function.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.MathematicalFunctionCommandType.Logarithm">
      <summary>
            Logarithmic function.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.MathematicalFunctionCommandType.SquareRoot">
      <summary>
            Square root function.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.MathematicalFunctionCommandType.Sine">
      <summary>
            Sine function.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.MathematicalFunctionCommandType.Cosine">
      <summary>
            Cosine function.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.Color.MathematicalFunctionCommand">
      <summary>
            Re-maps the image colors according to a mathematical function such as: 
            square, logarithm, square root, sine and cosine.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>This class uses the RGB color space.</description>
          </item>
          <item>
            <description>This class makes it possible to apply one of five 
            mathematical functions to an image's pixel values: square, square root, 
            logarithm, sine and cosine.</description>
          </item>
          <item>
            <description>Set the mathematical operation to be performed on 
            each pixel's values in the Type property. The resulting values are 
            multiplied by the Factor property value.  The Factor property can be any
            value greater than 0. It is divided internally by different amounts, 
            according to the type of the function being used.</description>
          </item>
          <item>
            <description>If the image has a region, the effect will be applied
            on the region only.</description>
          </item>
          <item>
            <description>This class supports 12 and 16-bit grayscale and 48 and 64-bit color images. Support for 12 and 16-bit grayscale and 48 and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <see cref="T:Leadtools.Topics.ChangingBrightnessAndContrast">Changing Brightness and Contrast</see>.
            </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.MathematicalFunctionCommand" /> on an image with square function selected and factor = 50.</para>
        <code lang="VB">   Public Sub MathematicalFunctionCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As MathematicalFunctionCommand = New MathematicalFunctionCommand
      command.Type = MathematicalFunctionCommandType.Square
      command.Factor = 50
      'Apply Square Function to this image.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void MathematicalFunctionCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         MathematicalFunctionCommand command = new MathematicalFunctionCommand();
         command.Type   = MathematicalFunctionCommandType.Square;
         command.Factor = 50;
         //Apply Square Function to this image.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void MathematicalFunctionCommandExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         MathematicalFunctionCommand command = new MathematicalFunctionCommand();
         command.Type   = MathematicalFunctionCommandType.Square;
         command.Factor = 50;
         //Apply Square Function to this image.
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub MathematicalFunctionCommandExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As MathematicalFunctionCommand = New MathematicalFunctionCommand()
         command.Type = MathematicalFunctionCommandType.Square
         command.Factor = 50
         'Apply Square Function to this image.
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <seealso cref="T:Leadtools.Topics.ChangingBrightnessAndContrast">Changing Brightness and Contrast</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AddCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.CombineCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ShadowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeHueSaturationIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorReplaceCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorThresholdCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.DiscreteFourierTransformCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.FastFourierTransformCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.FourierTransformDisplayCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.FrequencyFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.FrequencyFilterMaskCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RevEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SegmentCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.SubtractBackgroundCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.UserFilterCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Color.MathematicalFunctionCommand.#ctor">
      <summary>
            Initializes a new MathematicalFunctionCommand  class object with default parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.MathematicalFunctionCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.MathematicalFunctionCommand.#ctor(Leadtools.ImageProcessing.Color.MathematicalFunctionCommandType,System.Int32)">
      <summary>
            Initializes a new MathematicalFunctionCommand  class object with explicit parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <param name="type">Flag that indicates the function to be applied.</param>
      <param name="factor">Value that is used as an amplitude factor when
            squaring, taking the logarithm of or taking the square root of the color 
            values and as a frequency factor when taking the sine or cosine of the 
            color values. The factor value is divided internally by different amounts, according to the 
            type of the function being used. These amounts are as follows:
            <br /><table><tr><th>if the type parameter is set to:</th><td></td><th>then the factor parameter will be divided by:</th></tr><tr><td>Square</td><td></td><td>10000 internally</td></tr><tr><td>Logarithm</td><td></td><td>10 internally</td></tr><tr><td>Square Root</td><td></td><td>10 internally</td></tr><tr><td>Sine</td><td></td><td>100 internally</td></tr><tr><td>Cosine</td><td></td><td>100 internally</td></tr></table><br /><br />Only positive values are accepted.
            </param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.MathematicalFunctionCommand" /> on an image with square function selected and factor = 50.</para>
        <code lang="VB">   Public Sub MathematicalFunctionConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As MathematicalFunctionCommand = New MathematicalFunctionCommand(MathematicalFunctionCommandType.Square, 50)
      'Apply Square Function to this image.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void MathematicalFunctionConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         MathematicalFunctionCommand command = new MathematicalFunctionCommand(MathematicalFunctionCommandType.Square, 50);
         //Apply Square Function to this image.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void MathematicalFunctionConstructorExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         MathematicalFunctionCommand command = new MathematicalFunctionCommand(MathematicalFunctionCommandType.Square, 50);
         //Apply Square Function to this image.
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub MathematicalFunctionConstructorExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As MathematicalFunctionCommand = New MathematicalFunctionCommand(MathematicalFunctionCommandType.Square, 50)
         'Apply Square Function to this image.
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.MathematicalFunctionCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this class.
             <strong> Supported in Silverlight</strong>.
</summary>
      <returns>String that contains the name of this class.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.MathematicalFunctionCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.MathematicalFunctionCommand.Type">
      <summary>
            Gets or sets a value that indicates the type of 
            mathematical operation to be performed on each pixel's values.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Value that indicates the type of mathematical operation 
            to be performed on each pixel's values.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.MathematicalFunctionCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.MathematicalFunctionCommand.Factor">
      <summary>
             Gets or sets a value used as an amplitude factor if the Type property is 
             Square, Square Root, or Logarithm, and is used as a frequency factor 
             if the Type property  is Sine or Cosine.
              <strong> Supported in Silverlight</strong>.
</summary>
      <value>Value used as an amplitude factor when
             squaring, taking the logarithm of or taking the square root of the color 
             values and as a frequency factor when taking the sine or cosine of the 
             color values. The value of the Factor property is divided internally by 
             different amounts, according to the 
             type of math operation being performed. These amounts are as follows:
             <br /><table><tr><th>if the Type property is set to:</th><td></td><th>then the Factor property will be divided by:</th></tr><tr><td>Square</td><td></td><td>10000 internally</td></tr><tr><td>Logarithm</td><td></td><td>10 internally</td></tr><tr><td>Square Root</td><td></td><td>10 internally</td></tr><tr><td>Sine</td><td></td><td>100 internally</td></tr><tr><td>Cosine</td><td></td><td>100 internally</td></tr></table><br /><br />Only positive values are accepted.
             </value>
      <example>
             Refer to <see cref="T:Leadtools.ImageProcessing.Color.MathematicalFunctionCommand" />.
             </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.Color.GrayScaleToMultitoneCommandToneType">
      <summary>
            Flag that indicates the number of colors to add to the grayscale image.
             <strong> Supported in Silverlight</strong>.
</summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.GrayScaleToMultitoneCommandToneType.Monotone">
      <summary>
            Add one color.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.GrayScaleToMultitoneCommandToneType.Duotone">
      <summary>
            Add two colors.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.GrayScaleToMultitoneCommandToneType.Tritone">
      <summary>
            Add three colors.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.GrayScaleToMultitoneCommandToneType.Quadtone">
      <summary>
            Add four colors.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.Color.GrayScaleToMultitoneCommandDistributionType">
      <summary>
             Flag that indicates the source of the colors to be added to the image.
              <strong> Supported in Silverlight</strong>.
</summary>
      <noexample />
      <noremarks />
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.GrayScaleToMultitoneCommandDistributionType.Linear">
      <summary>
            Use the linear gradient from dark to light, generated by the toolkit. If this flag is set, LEADTOOLS will ignore the Gradient property and use an array of colors generated by the toolkit.
            </summary>
    </member>
    <member name="F:Leadtools.ImageProcessing.Color.GrayScaleToMultitoneCommandDistributionType.UserDefined">
      <summary>
             Use the user-defined gradient in the Gradient property.
            </summary>
    </member>
    <member name="T:Leadtools.ImageProcessing.Color.GrayScaleToMultitoneCommand">
      <summary>
            Converts a grayscale image into a colored one by mixing or replacing the original values of the pixels with one or more new colors. This class is available in the <see cref="T:Leadtools.Topics.RasterProDocMed">Raster Pro</see> and above toolkits.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>This class was designed for use with grayscale images. If the image being used is not grayscale, this class only affects those pixels or areas of the image where Red = Green = Blue.</description>
          </item>
          <item>
            <description>Monotone conversion is possible by setting Type to Replace, which clears the palette.</description>
          </item>
          <item>
            <description>This class gives you the option of having the toolkit generate the array of colors to use or creating the array of colors to use yourself.</description>
          </item>
          <item>
            <description>To have the toolkit generate the array of colors:<br /><list type="bullet"><item><description>If the image is binary, call <see cref="T:Leadtools.ImageProcessing.Color.GrayScaleToMultitoneCommand" /> with Tone set to <see cref="T:Leadtools.ImageProcessing.Color.GrayScaleToMultitoneCommandToneType" />.MonoTone, Distribution set to <see cref="T:Leadtools.ImageProcessing.Color.GrayScaleToMultitoneCommandDistributionType" />.Linear and the color you wish to use set in Color. The <see cref="P:Leadtools.RasterImage.GrayscaleMode" /> property will be set by <see cref="T:Leadtools.ImageProcessing.Color.GrayScaleToDuotoneCommand" /> class object to determine the kind of grayscale palette being used. If the <see cref="P:Leadtools.RasterImage.GrayscaleMode" /> property is <see cref="P:Leadtools.RasterImage.GrayscaleMode" />.OrderedInverse or <see cref="P:Leadtools.RasterImage.GrayscaleMode" />.NotOrdered, then the color set in the Color property for the <see cref="T:Leadtools.ImageProcessing.Color.GrayScaleToMultitoneCommand" /> class object will become the first color in the array generated by the toolkit, and the toolkit will create the second color in the array. The Color array will be updated with these two colors. If the <see cref="P:Leadtools.RasterImage.GrayscaleMode" /> property is a value other than <see cref="P:Leadtools.RasterImage.GrayscaleMode" />.OrderedInverse or <see cref="P:Leadtools.RasterImage.GrayscaleMode" />.NotOrdered, then the color set in the Color property for the <see cref="T:Leadtools.ImageProcessing.Color.GrayScaleToMultitoneCommand" /> class object will become the second color in the array generated by the toolkit, and the toolkit will create the first color in the array. The Color property will be updated with these two colors.</description></item><item><description>If the image is grayscale (not binary) call the <see cref="T:Leadtools.ImageProcessing.Color.GrayScaleToMultitoneCommand" /> with Distribution set to <see cref="T:Leadtools.ImageProcessing.Color.GrayScaleToMultitoneCommandDistributionType" />.Linear. The GrayScaleToMultitoneCommand will take the color(s) set in the Color property and generate a 256 color gradient for each color.<br /><list type="number"><item><description>If the Tone is set to <see cref="T:Leadtools.ImageProcessing.Color.GrayScaleToMultitoneCommandToneType" />.Duotone, set two colors in the Color property. The toolkit will create a 256 color array for each color.</description></item><item><description>If the Tone is set to <see cref="T:Leadtools.ImageProcessing.Color.GrayScaleToMultitoneCommandToneType" />.Tritone, set three colors in the Color property. The toolkit will create a 256 color array for each color.</description></item><item><description>If the Tone is set to <see cref="T:Leadtools.ImageProcessing.Color.GrayScaleToMultitoneCommandToneType" />.Quadtone, set four colors in the Color property. The toolkit will create a 256 color array for each color.</description></item></list></description></item><item><description>If the image is not grayscale (it is color) call the GrayScaleToMultitoneCommand with Distribution set to <see cref="T:Leadtools.ImageProcessing.Color.GrayScaleToMultitoneCommandDistributionType" />.Linear. The GrayScaleToMultitoneCommand will take the color(s) set in the Color property and generate a 256 color gradient for each color. These colors will be used to change only those pixels in the color image for which Red = Green = Blue.</description></item></list></description>
          </item>
          <item>
            <description>To use a user-defined array of colors:<br /><list type="bullet"><item><description>If the image is binary, call GrayScaleToMultitoneCommand with Tone set to <see cref="T:Leadtools.ImageProcessing.Color.GrayScaleToMultitoneCommandToneType" />.Monotone, Distribution set to <see cref="T:Leadtools.ImageProcessing.Color.GrayScaleToMultitoneCommandDistributionType" />.UserDefined and the two colors you wish to use in the Gradient property.</description></item><item><description>If the image is grayscale (not binary) call GrayScaleToMultitoneCommand with Distribution set to <see cref="T:Leadtools.ImageProcessing.Color.GrayScaleToMultitoneCommandDistributionType" />.UserDefined.<br /><list type="number"><item><description>If the Tone is set to <see cref="T:Leadtools.ImageProcessing.Color.GrayScaleToMultitoneCommandToneType" />.Duotone, set 512 colors (256 for each basic color) in the Gradient property.</description></item><item><description>If the Tone is set to <see cref="T:Leadtools.ImageProcessing.Color.GrayScaleToMultitoneCommandToneType" />.Tritone, set 768 colors (256 for each basic color) in the Gradient property.</description></item><item><description>If the Tone is set to <see cref="T:Leadtools.ImageProcessing.Color.GrayScaleToMultitoneCommandToneType" />.Quadtone, set 1024 colors (256 for each basic color) in the Gradient property.</description></item></list></description></item><item><description>If the image is not grayscale (it is color) call GrayScaleToMultitoneCommand with Distribution set to <see cref="T:Leadtools.ImageProcessing.Color.GrayScaleToMultitoneCommandDistributionType" />.UserDefined. (See the expanded explanation in i, ii and iii of (b) above.) These colors will be used to change only those pixels in the color image for which Red = Green = Blue.</description></item></list></description>
          </item>
          <item>
            <description>This class supports 12 and 16-bit grayscale and 48 and 64-bit color images. Support for 12 and 16-bit grayscale and 48 and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This class does not support signed data images.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.<br />
            For more information, refer to <see cref="T:Leadtools.Topics.GrayScaleImages">Grayscale Images</see>.
            </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.GrayScaleToMultitoneCommand" /> on an image.</para>
        <code lang="VB">   Public Sub GrayScaleToMultitoneCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim Colors() As RasterColor
      ReDim Colors(1)

      Dim command As GrayScaleToMultitoneCommand = New GrayScaleToMultitoneCommand
      command.Colors = Colors
      command.Colors(0).R = 255
      command.Colors(0).G = 255
      command.Colors(0).B = 0
      command.Colors(1).R = 255
      command.Colors(1).G = 0
      command.Colors(1).B = 0
      command.Gradient = Nothing
      command.Distribution = GrayScaleToMultitoneCommandDistributionType.Linear
      command.Tone = GrayScaleToMultitoneCommandToneType.Duotone
      command.Type = GrayScaleToDuotoneCommandMixingType.ReplaceOldWithNew
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void GrayScaleToMultitoneCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         GrayScaleToMultitoneCommand command = new GrayScaleToMultitoneCommand();
         command.Colors = new RasterColor[2];
         command.Colors[0].R = 255;
         command.Colors[0].G = 255;
         command.Colors[0].B = 0;
         command.Colors[1].R = 255;
         command.Colors[1].G = 0;
         command.Colors[1].B = 0;
         command.Gradient = null;
         command.Distribution = GrayScaleToMultitoneCommandDistributionType.Linear;
         command.Tone = GrayScaleToMultitoneCommandToneType.Duotone;
         command.Type  = GrayScaleToDuotoneCommandMixingType.ReplaceOldWithNew;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void GrayScaleToMultitoneCommandExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         GrayScaleToMultitoneCommand command = new GrayScaleToMultitoneCommand();
         command.Colors = new RasterColor[2];
         command.Colors[0].R = 255;
         command.Colors[0].G = 255;
         command.Colors[0].B = 0;
         command.Colors[1].R = 255;
         command.Colors[1].G = 0;
         command.Colors[1].B = 0;
         command.Gradient = null;
         command.Distribution = GrayScaleToMultitoneCommandDistributionType.Linear;
         command.Tone = GrayScaleToMultitoneCommandToneType.Duotone;
         command.Type  = GrayScaleToDuotoneCommandMixingType.ReplaceOldWithNew;
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub GrayScaleToMultitoneCommandExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As GrayScaleToMultitoneCommand = New GrayScaleToMultitoneCommand()
         command.Colors = New RasterColor(1){}
         command.Colors(0).R = 255
         command.Colors(0).G = 255
         command.Colors(0).B = 0
         command.Colors(1).R = 255
         command.Colors(1).G = 0
         command.Colors(1).B = 0
         command.Gradient = Nothing
         command.Distribution = GrayScaleToMultitoneCommandDistributionType.Linear
         command.Tone = GrayScaleToMultitoneCommandToneType.Duotone
         command.Type = GrayScaleToDuotoneCommandMixingType.ReplaceOldWithNew
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <seealso cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</seealso>.
            <seealso cref="T:Leadtools.Topics.GrayScaleImages">Grayscale Images</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.GrayscaleCommand"></seealso>.
            <seealso cref="P:Leadtools.RasterImage.IsGray"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.GrayScaleToDuotoneCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Color.GrayScaleToMultitoneCommand.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Color.GrayScaleToMultitoneCommand" /> class object with default parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.GrayScaleToMultitoneCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.GrayScaleToMultitoneCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this class.
             <strong> Supported in Silverlight</strong>.
</summary>
      <returns>String that contains the name of this method.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.GrayScaleToMultitoneCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.GrayScaleToMultitoneCommand.Tone">
      <summary>
            Gets or sets a flag that indicates the number of colors to add to the grayscale image.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Value that indicates the number of colors to add to the grayscale image.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.GrayScaleToMultitoneCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.GrayScaleToMultitoneCommand.Distribution">
      <summary>
            Gets or sets a flag that indicates the source of the colors to be added to the image.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Value that indicates the source of the colors to be added to the image.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.GrayScaleToMultitoneCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.GrayScaleToMultitoneCommand.Colors">
      <summary>
            Gets or sets an array of <see cref="T:Leadtools.RasterColor" /> structures that contain the colors that will be added to the grayscale image.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Array of <see cref="T:Leadtools.RasterColor" /> structures that contain the colors that will be added to the grayscale image. This property is ignored when the Distribution property is set to UserDefined. If the toolkit is generating the gradient colors, the user sets the desired base color(s) in this property when GrayScaleToMultitoneCommand is called. The number of entries in the array depends on the value of Tone: 1 for Monotone, 2 for Duotone, 3 for Tritone, 4 for Quadtone. When the toolkit generates the array of gradient colors.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.GrayScaleToMultitoneCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.GrayScaleToMultitoneCommand.Gradient">
      <summary>
            Gets or sets a user-defined two dimensional array of <see cref="T:Leadtools.RasterColor" /> structures that will hold the set of color shade gradients.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>User-defined two dimensional array of <see cref="T:Leadtools.RasterColor" /> structures that will hold the set of color shade gradients. This property is used when the Distribution property is set to UserDefined.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.GrayScaleToMultitoneCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.GrayScaleToMultitoneCommand.Type">
      <summary>
            Gets or sets a flag that indicates whether the new colors replace the old colors, or the new colors will be mixed with the old colors.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Value that indicates whether the new colors replace the old colors, or the new colors will be mixed with the old colors.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.GrayScaleToMultitoneCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.Color.GrayScaleExtendedCommand">
      <summary>
            Converts any image to a gray scale image without changing its resolution.
             <strong> Supported in Silverlight</strong>.
</summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>
              <para>RedFactor + GreenFactor + BlueFactor must equal
            1000.  (Internally the values are divided by 1000).</para>
            </description>
          </item>
          <item>
            <description>For each pixel in the image the red, green and blue 
            values are modified by the RedFactor, GreenFactor and BlueFactor 
            properties, respectively. This allows the user to give more weight to one
            color, essentially enhancing that color, before the pixel is converted 
            to grayscale.</description>
          </item>
          <item>
            <description>For example, if an object of this class has the 
            RedFactor set to 500, the GreenFactor set to 250 and the BlueFactor set 
            to 250, the red value of each pixel will get 50 percent of the weight when 
            determining the grayscale value. The green value will get 25 percent of the 
            weight and the blue value will get 25 percent of the weight when determining the
            grayscale value. This highlights or enhances the red in the image, prior
            to conversion to grayscale.</description>
          </item>
          <item>
            <description>This class supports 12 and 16-bit grayscale and 48 and 64-bit color images. Support for 12 and 16-bit grayscale and 48 and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support signed images.</description>
          </item>
        </list>
            For more information, refer to <see cref="T:Leadtools.Topics.GrayScaleImages">Grayscale Images</see>.
            </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.GrayScaleExtendedCommand" /> on an image with RedFactor = 300, GreenFactor = 590, and BlueFactor = 110.</para>
        <code lang="VB">   Public Sub GrayScaleExtendedCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As GrayScaleExtendedCommand = New GrayScaleExtendedCommand
      command.RedFactor = 300
      command.GreenFactor = 590
      command.BlueFactor = 110
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void GrayScaleExtendedCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         GrayScaleExtendedCommand command = new GrayScaleExtendedCommand();
         command.RedFactor   = 300;
         command.GreenFactor = 590;
         command.BlueFactor  = 110;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void GrayScaleExtendedCommandExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         GrayScaleExtendedCommand command = new GrayScaleExtendedCommand();
         command.RedFactor   = 300;
         command.GreenFactor = 590;
         command.BlueFactor  = 110;
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub GrayScaleExtendedCommandExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As GrayScaleExtendedCommand = New GrayScaleExtendedCommand()
         command.RedFactor = 300
         command.GreenFactor = 590
         command.BlueFactor = 110
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <seealso cref="T:Leadtools.Topics.GrayScaleImages">Grayscale Images</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.GrayscaleCommand"></seealso>.
            <seealso cref="P:Leadtools.RasterImage.IsGray"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ConvertToColoredGrayCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.BalanceColorsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SwapColorsCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Color.GrayScaleExtendedCommand.#ctor">
      <summary>
            Initializes a new GrayScaleExtendedCommand class object with default parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.GrayScaleExtendedCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.GrayScaleExtendedCommand.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>
            Initializes a new GrayScaleExtendedCommand class object with explicit parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <param name="redFactor">Value that represents the percentage or weight
            given to the red value of each pixel in the image. Possible values are
            0 to 1000.</param>
      <param name="greenFactor">Value that represents the percentage or 
            weight given to the green value of each pixel in the image. Possible 
            values are 0 to 1000.</param>
      <param name="blueFactor">Value that represents the percentage or 
            weight given to the blue value of each pixel in the image. Possible 
            values are 0 to 1000.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.GrayScaleExtendedCommand" /> on an image with RedFactor = 300, GreenFactor = 590, and BlueFactor = 110.</para>
        <code lang="VB">   Public Sub GrayScaleExtendedConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As GrayScaleExtendedCommand = New GrayScaleExtendedCommand(300, 590, 100)
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void GrayScaleExtendedConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         GrayScaleExtendedCommand command = new GrayScaleExtendedCommand(300, 590, 100);
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void GrayScaleExtendedConstructorExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         GrayScaleExtendedCommand command = new GrayScaleExtendedCommand(300, 590, 100);
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub GrayScaleExtendedConstructorExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As GrayScaleExtendedCommand = New GrayScaleExtendedCommand(300, 590, 100)
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.GrayScaleExtendedCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this class.
             <strong> Supported in Silverlight</strong>.
</summary>
      <returns>String that contains the name of this class.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.GrayScaleExtendedCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.GrayScaleExtendedCommand.RedFactor">
      <summary>
            Gets or sets a value that represents the percentage or weight given to the red value 
            of each pixel in the image.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Value that represents the percentage or weight given to the 
            red value of each pixel in the image. Possible values are 0 to 1000.
            </value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.GrayScaleExtendedCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.GrayScaleExtendedCommand.GreenFactor">
      <summary>
            Gets or sets a value that represents the percentage or weight given to the green 
            value of each pixel in the image.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Value that represents the percentage or weight given to the 
            green value of each pixel in the image. Possible values are 0 to 1000.
            </value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.GrayScaleExtendedCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.GrayScaleExtendedCommand.BlueFactor">
      <summary>
            Gets or sets a value that represents the percentage or weight given to the blue value
            of each pixel in the image.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Value that represents the percentage or weight given to the 
            blue value of each pixel in the image. Possible values are 0 to 1000.
            </value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.GrayScaleExtendedCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.Color.ChannelMixerCommandFactor">
      <summary>
            Defines the color balancing information used by the <see cref="T:Leadtools.ImageProcessing.Color.ChannelMixerCommand" /> class.
             <strong> Supported in Silverlight</strong>.
</summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ChannelMixerCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.ChannelMixerCommandFactor.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Color.ChannelMixerCommandFactor" /> class with default parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ChannelMixerCommand">ChannelMixerCommand()</see></example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.ChannelMixerCommandFactor.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Color.ChannelMixerCommandFactor" /> class with explicit parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <param name="red">Value that represents the percentage of the red color value that should be distributed to the red component. Valid values are -200 to 200.</param>
      <param name="green">Value that represents the percentage of the green color value that should be distributed to the green component. Valid values are -200 to 200.</param>
      <param name="blue">Value that represents the percentage of the blue color value that should be distributed to the blue component. Valid values are -200 to 200.</param>
      <param name="constant">Value that represents the color value that should be added to the whole image. Valid values are -200 to 200.</param>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ChannelMixerCommand">ChannelMixerCommand()</see></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.ChannelMixerCommandFactor.Red">
      <summary>
            Gets or sets a value that represents the percentage of the red color value that should be distributed to the red component.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Value that represents the percentage of the red color value that should be distributed to the red component. Valid values are -200 to 200.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ChannelMixerCommand">ChannelMixerCommand()</see></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.ChannelMixerCommandFactor.Green">
      <summary>
            Gets or sets a value that represents the percentage of the green color value that should be distributed to the green component.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Value that represents the percentage of the green color value that should be distributed to the green component. Valid values are -200 to 200.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ChannelMixerCommand">ChannelMixerCommand()</see></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.ChannelMixerCommandFactor.Blue">
      <summary>
            Gets or sets a value that represents the percentage of the blue color value that should be distributed to the blue component.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Value that represents the percentage of the blue color value that should be distributed to the blue component. Valid values are -200 to 200.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ChannelMixerCommand">ChannelMixerCommand()</see></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.ChannelMixerCommandFactor.Constant">
      <summary>
            Gets or sets a value that represents the color value that should be added to the whole image.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Value that represents the color value that should be added to the whole image. Valid values are -200 to 200.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ChannelMixerCommand">ChannelMixerCommand()</see></example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.Color.ChannelMixerCommand">
      <summary>
            Redistributes the RGB values of a specific image, using the values in the <see cref="T:Leadtools.ImageProcessing.Color.ChannelMixerCommandFactor" /> classes.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>This command is used to rebalance the colors in an image. It can be used to make color adjustments and corrections.</description>
          </item>
          <item>
            <description>This command supports 1-, 2-, 3-, 4-, 5-, 6-, 7-, 8-, 24-, 48- and 64-bit images and can support regions for 24-, 48- and 64-bit images. If the image has a region, the effect will be applied on the region only.</description>
          </item>
          <item>
            <description>This command does not support signed data images.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <see cref="T:Leadtools.Topics.ProcessingAnImage">Introduction to Image Processing With LEADTOOLS</see>.<br />
            For more information, refer to <see cref="T:Leadtools.Topics.CorrectingColors">Correcting Colors</see>.<br /></remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.ChannelMixerCommand" /> on an image.</para>
        <code lang="VB">   Public Sub ChannelMixerCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim RedFactor As ChannelMixerCommandFactor = New ChannelMixerCommandFactor
      RedFactor.Red = 50
      RedFactor.Green = 0
      RedFactor.Blue = 0
      RedFactor.Constant = 0
      Dim GreenFactor As ChannelMixerCommandFactor = New ChannelMixerCommandFactor
      GreenFactor.Red = 100
      GreenFactor.Green = 100
      GreenFactor.Blue = 0
      GreenFactor.Constant = 0
      Dim BlueFactor As ChannelMixerCommandFactor = New ChannelMixerCommandFactor
      BlueFactor.Red = 0
      BlueFactor.Green = 0
      BlueFactor.Blue = 100
      BlueFactor.Constant = 0
      Dim command As ChannelMixerCommand = New ChannelMixerCommand(RedFactor, GreenFactor, BlueFactor)
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void ChannelMixerCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         ChannelMixerCommandFactor RedFactor = new ChannelMixerCommandFactor();
         RedFactor.Red = 50;
         RedFactor.Green = 0;
         RedFactor.Blue = 0;
         RedFactor.Constant = 0;
         ChannelMixerCommandFactor GreenFactor = new ChannelMixerCommandFactor();
         GreenFactor.Red = 100;
         GreenFactor.Green = 100;
         GreenFactor.Blue = 0;
         GreenFactor.Constant = 0;
         ChannelMixerCommandFactor BlueFactor = new ChannelMixerCommandFactor();
         BlueFactor.Red = 0;
         BlueFactor.Green = 0;
         BlueFactor.Blue = 100;
         BlueFactor.Constant = 0;
         ChannelMixerCommand command = new ChannelMixerCommand(RedFactor, GreenFactor, BlueFactor);
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void ChannelMixerCommandExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         ChannelMixerCommandFactor RedFactor = new ChannelMixerCommandFactor();
         RedFactor.Red = 50;
         RedFactor.Green = 0;
         RedFactor.Blue = 0;
         RedFactor.Constant = 0;
         ChannelMixerCommandFactor GreenFactor = new ChannelMixerCommandFactor();
         GreenFactor.Red = 100;
         GreenFactor.Green = 100;
         GreenFactor.Blue = 0;
         GreenFactor.Constant = 0;
         ChannelMixerCommandFactor BlueFactor = new ChannelMixerCommandFactor();
         BlueFactor.Red = 0;
         BlueFactor.Green = 0;
         BlueFactor.Blue = 100;
         BlueFactor.Constant = 0;
         ChannelMixerCommand command = new ChannelMixerCommand(RedFactor, GreenFactor, BlueFactor);
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub ChannelMixerCommandExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim RedFactor As ChannelMixerCommandFactor = New ChannelMixerCommandFactor()
         RedFactor.Red = 50
         RedFactor.Green = 0
         RedFactor.Blue = 0
         RedFactor.Constant = 0
         Dim GreenFactor As ChannelMixerCommandFactor = New ChannelMixerCommandFactor()
         GreenFactor.Red = 100
         GreenFactor.Green = 100
         GreenFactor.Blue = 0
         GreenFactor.Constant = 0
         Dim BlueFactor As ChannelMixerCommandFactor = New ChannelMixerCommandFactor()
         BlueFactor.Red = 0
         BlueFactor.Green = 0
         BlueFactor.Blue = 100
         BlueFactor.Constant = 0
         Dim command As ChannelMixerCommand = New ChannelMixerCommand(RedFactor, GreenFactor, BlueFactor)
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <seealso cref="T:Leadtools.Topics.CorrectingColors">Correcting Colors</seealso>.
            <seealso cref="T:Leadtools.Topics.CorrectingColors">Correcting Colors</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ConvertToColoredGrayCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.BalanceColorsCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.GrayscaleCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.GrayScaleExtendedCommand"></seealso>.
            <seealso cref="P:Leadtools.RasterImage.IsGray"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AutoColorLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.CorrelationListCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.GrayScaleToDuotoneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.GrayScaleToMultitoneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.HolePunchRemoveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SelectiveColorCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SkeletonCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AdjustTintCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.HalfToneCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Color.ChannelMixerCommand.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Color.ChannelMixerCommand" /> class object with default parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.ChannelMixerCommand" /> on an image.</para>
        <code lang="VB">   Public Sub ChannelMixerConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim RedFactor As ChannelMixerCommandFactor = New ChannelMixerCommandFactor(50, 0, 0, 0)
      Dim GreenFactor As ChannelMixerCommandFactor = New ChannelMixerCommandFactor(10, 100, 0, 0)
      Dim BlueFactor As ChannelMixerCommandFactor = New ChannelMixerCommandFactor(0, 0, 100, 0)
      Dim command As ChannelMixerCommand = New ChannelMixerCommand
      command.RedFactor = RedFactor
      command.GreenFactor = GreenFactor
      command.BlueFactor = BlueFactor
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void ChannelMixerConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         ChannelMixerCommandFactor RedFactor = new ChannelMixerCommandFactor(50, 0, 0, 0);
         ChannelMixerCommandFactor GreenFactor = new ChannelMixerCommandFactor(10, 100, 0, 0);
         ChannelMixerCommandFactor BlueFactor = new ChannelMixerCommandFactor(0, 0, 100, 0);
         ChannelMixerCommand command = new ChannelMixerCommand();
         command.RedFactor = RedFactor;
         command.GreenFactor = GreenFactor;
         command.BlueFactor = BlueFactor;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void ChannelMixerConstructorExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         ChannelMixerCommandFactor RedFactor = new ChannelMixerCommandFactor(50, 0, 0, 0);
         ChannelMixerCommandFactor GreenFactor = new ChannelMixerCommandFactor(10, 100, 0, 0);
         ChannelMixerCommandFactor BlueFactor = new ChannelMixerCommandFactor(0, 0, 100, 0);
         ChannelMixerCommand command = new ChannelMixerCommand();
         command.RedFactor = RedFactor;
         command.GreenFactor = GreenFactor;
         command.BlueFactor = BlueFactor;
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub ChannelMixerConstructorExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim RedFactor As ChannelMixerCommandFactor = New ChannelMixerCommandFactor(50, 0, 0, 0)
         Dim GreenFactor As ChannelMixerCommandFactor = New ChannelMixerCommandFactor(10, 100, 0, 0)
         Dim BlueFactor As ChannelMixerCommandFactor = New ChannelMixerCommandFactor(0, 0, 100, 0)
         Dim command As ChannelMixerCommand = New ChannelMixerCommand()
         command.RedFactor = RedFactor
         command.GreenFactor = GreenFactor
         command.BlueFactor = BlueFactor
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.ChannelMixerCommand.#ctor(Leadtools.ImageProcessing.Color.ChannelMixerCommandFactor,Leadtools.ImageProcessing.Color.ChannelMixerCommandFactor,Leadtools.ImageProcessing.Color.ChannelMixerCommandFactor)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Color.ChannelMixerCommand" /> class object with explicit parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <param name="redFactor">Contains the values to use for redistributing the image's red values.</param>
      <param name="greenFactor">Contains the values to use for redistributing the image's green values.</param>
      <param name="blueFactor">Contains the values to use for redistributing the image's blue values.</param>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ChannelMixerCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.ChannelMixerCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this class.
             <strong> Supported in Silverlight</strong>.
</summary>
      <returns>String that contains the name of this class.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.ChannelMixerCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.ChannelMixerCommand.RedFactor">
      <summary>
            Gets or sets the values to use for redistributing the image's red values.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Values to use for redistributing the image's red values.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ChannelMixerCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.ChannelMixerCommand.GreenFactor">
      <summary>
            Gets or sets the values to use for redistributing the image's green values.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Values to use for redistributing the image's green values.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ChannelMixerCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.ChannelMixerCommand.BlueFactor">
      <summary>
            Gets or sets the values to use for redistributing the image's blue values.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Values to use for redistributing the image's blue values.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ChannelMixerCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.Color.ChangeIntensityCommand">
      <summary>
            Changes the intensity (brightness) of the image.
             <strong> Supported in Silverlight</strong>.
</summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>This command supports 12 and 16-bit grayscale and 48 and 64-bit color images. Support for 12 and 16-bit grayscale and 48 and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
        <p>If the image has a LUT and you want to work on the image data, set 
            <see cref="P:Leadtools.RasterImage.UseLookupTable">RasterImage.UseLookupTable</see> 
            to false. Then, after calling the method, reset the 
            <see cref="P:Leadtools.RasterImage.UseLookupTable">UselookupTable property</see> to true, as follows:
            </p>
        <code>
            rasterImage.UseLookupTable = false;
            Method(rasterImage);
            
            rasterImage.UseLookupTable = true;
            </code>
            For more information, refer to <see cref="T:Leadtools.Topics.CorrectingColors">Correcting Colors</see>.<br />
            For more information, refer to <see cref="T:Leadtools.Topics.ChangingBrightnessAndContrast">Changing Brightness and Contrast</see>.
            </remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.ChangeIntensityCommand" /> on an image and increase its intensity.</para>
        <code lang="VB">   Public Sub ChangeIntensityCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As ChangeIntensityCommand = New ChangeIntensityCommand
      'Increase the brightness by 25 percent  of the possible range.
      command.Brightness = 250

      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void ChangeIntensityCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         ChangeIntensityCommand command = new ChangeIntensityCommand();
         //Increase the brightness by 25 percent  of the possible range.
         command.Brightness = 250;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void ChangeIntensityCommandExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         ChangeIntensityCommand command = new ChangeIntensityCommand();
         //Increase the brightness by 25 percent  of the possible range.
         command.Brightness = 250;
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub ChangeIntensityCommandExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As ChangeIntensityCommand = New ChangeIntensityCommand()
         'Increase the brightness by 25 percent  of the possible range.
         command.Brightness = 250
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <seealso cref="T:Leadtools.Topics.CorrectingColors">Correcting Colors</seealso>.
            <seealso cref="T:Leadtools.Topics.ChangingBrightnessAndContrast">Changing Brightness and Contrast</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.GammaCorrectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeContrastCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.HistogramContrastCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.StretchIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.RemapIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.InvertCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeHueCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeSaturationCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.HistogramEqualizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.FillCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.HistogramCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.WindowLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChannelMixerCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.DeinterlaceCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.DesaturateCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EdgeDetectStatisticalCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.LightControlCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SmoothEdgesCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.LocalHistogramEqualizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AddWeightedCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorMergeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorSeparateCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.MultiplyCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AutoColorLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.CorrelationListCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.GrayScaleToDuotoneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.GrayScaleToMultitoneCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.HolePunchRemoveCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SelectiveColorCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SkeletonCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeHueSaturationIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorReplaceCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorThresholdCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.MathematicalFunctionCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SegmentCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AdaptiveContrastCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ApplyMathematicalLogicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorIntensityBalanceCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.ColorizeGrayCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ContrastBrightnessIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.DigitalSubtractCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.DynamicBinaryCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.EdgeDetectEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MultiscaleEnhancementCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.SelectDataCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.ShiftDataCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AdjustTintCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.GammaCorrectCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Color.ChangeIntensityCommand.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Color.ChangeIntensityCommand" /> class object with default parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ChangeIntensityCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.ChangeIntensityCommand.#ctor(System.Int32)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Color.ChangeIntensityCommand" /> class object with explicit parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <param name="brightness">Amount to change the intensity. The intensity ranges from -1000 to 1000. A positive value increases (or lightens) the brightness of the image. A negative values decreases (or darkens) the brightness of the image.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.ChangeIntensityCommand" /> on an image and increase its intensity.</para>
        <code lang="VB">   Public Sub ChangeIntensityConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As ChangeIntensityCommand = New ChangeIntensityCommand(250)

      'Increase the brightness by 25 percent  of the possible range.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void ChangeIntensityConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         ChangeIntensityCommand command = new ChangeIntensityCommand(250);
         // Increase the brightness by 25 percent  of the possible range.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void ChangeIntensityConstructorExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         ChangeIntensityCommand command = new ChangeIntensityCommand(250);
         // Increase the brightness by 25 percent  of the possible range.
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub ChangeIntensityConstructorExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As ChangeIntensityCommand = New ChangeIntensityCommand(250)
         ' Increase the brightness by 25 percent  of the possible range.
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.ChangeIntensityCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this class.
             <strong> Supported in Silverlight</strong>.
</summary>
      <returns>String that contains the name of this class.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.ChangeIntensityCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.ChangeIntensityCommand.Brightness">
      <summary>
            Gets or sets a value that represents the amount to change the intensity.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Amount to change the intensity. The intensity ranges from -1000 to 1000. A positive value increases (or lightens) the brightness of the image. A negative values decreases (or darkens) the brightness of the image.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ChangeIntensityCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.Color.ChangeHueSaturationIntensityCommandData">
      <summary>
            Defines the color range information used by the <see cref="T:Leadtools.ImageProcessing.Color.ChangeHueSaturationIntensityCommand" />class.
             <strong> Supported in Silverlight</strong>.
</summary>
      <remarks>
            The hue values for the inner and outer ranges are expressed as degrees in the HSB color space. Values inside the inner range are changed fully and those within the outer range are changed partially.
            </remarks>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ChangeHueSaturationIntensityCommand" />.
            </example>
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.ChangeHueSaturationIntensityCommandData.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Color.ChangeHueSaturationIntensityCommandData" /> class with default parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <example>
            Refer to <see cref="M:Leadtools.ImageProcessing.Color.ChangeHueSaturationIntensityCommand.#ctor(System.Int32,System.Int32,System.Int32,Leadtools.ImageProcessing.Color.ChangeHueSaturationIntensityCommandData[])">ChangeHueSaturationIntensityCommand(int,int,int, ChangeHueSaturationIntensityCommandData[])</see></example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.ChangeHueSaturationIntensityCommandData.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Color.ChangeHueSaturationIntensityCommandData" /> class with explicit parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <param name="hue">Angular amount to change the hue, in hundredths of degrees. Valid values range from -18000 through 18000. This value is divided internally by 100.</param>
      <param name="saturation">Percentage amount to change saturation, in tenths of percent. Valid values range from -1000 through 1000. This value is divided internally by 10.</param>
      <param name="intensity">Percentage amount to change the intensity , in tenths of percent. Valid values range from -1000 through 1000. This value is divided internally by 10.</param>
      <param name="outerLow">Specifies the start of the color range to be changed. Valid values range from -359 through 359.</param>
      <param name="outerHigh">Specifies the end of the color range to be changed. Valid values range is from -359 through 359.</param>
      <param name="innerLow">Specifies the start of the color range to be fully changed. The valid range is between the OuterLow and OuterHigh values.</param>
      <param name="innerHigh">Specifies the end of the color range to be fully changed. The valid range is between the OuterLow and OuterHigh values.</param>
      <example>
            Refer to <see cref="M:Leadtools.ImageProcessing.Color.ChangeHueSaturationIntensityCommand.#ctor(System.Int32,System.Int32,System.Int32,Leadtools.ImageProcessing.Color.ChangeHueSaturationIntensityCommandData[])">ChangeHueSaturationIntensityCommand(int,int,int, ChangeHueSaturationIntensityCommandData[])</see></example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.ChangeHueSaturationIntensityCommandData.Hue">
      <summary>
            Gets or sets a value that represents the angular amount to change the hue, in hundredths of a degree.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value> Angular amount to change the hue, in hundredths of a degree. Valid values range from -18000 through 18000. This value is divided internally by 100.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ChangeHueSaturationIntensityCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.ChangeHueSaturationIntensityCommandData.Saturation">
      <summary>
            Gets or sets a value that represents the percentage amount to change the saturation, in tenths of a percent.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value> Percentage amount to change the saturation, in tenths of a percent. Valid values range from -1000 through 1000. This value is divided internally by 10.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ChangeHueSaturationIntensityCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.ChangeHueSaturationIntensityCommandData.Intensity">
      <summary>
            Gets or sets a value that represents the percentage amount to change the intensity , in tenths of a percent.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value> Percentage amount to change the intensity , in tenths of a percent.  Valid values range from -1000 through 1000. This value is divided internally by 10.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ChangeHueSaturationIntensityCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.ChangeHueSaturationIntensityCommandData.OuterLow">
      <summary>
            Gets or sets the starting color of the color range to be changed.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value> Specifies the starting color of the color range to be changed.  Valid values range from -359 through 359.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ChangeHueSaturationIntensityCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.ChangeHueSaturationIntensityCommandData.OuterHigh">
      <summary>
            Gets or sets the ending color of the color range to be changed.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value> Specifies the ending color of the color range to be changed.  Valid values range is from -359 through 359.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ChangeHueSaturationIntensityCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.ChangeHueSaturationIntensityCommandData.InnerLow">
      <summary>
            Gets or sets the starting color of the color range to be fully changed.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value> Specifies the starting color of the color range to be fully changed.  The valid range is between the OuterLow and OuterHigh values.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ChangeHueSaturationIntensityCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.ChangeHueSaturationIntensityCommandData.InnerHigh">
      <summary>
            Gets or sets the ending color of the color range to be fully changed.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value> Specifies the ending color of the color range to be fully changed.  The valid range is between the OuterLow and OuterHigh values.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ChangeHueSaturationIntensityCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.Color.ChangeHueSaturationIntensityCommand">
      <summary>
            Changes the hue, saturation and brightness of all colors or specific colors in the image.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>This command combines the basic functionality found in the <see cref="T:Leadtools.ImageProcessing.Color.ChangeHueCommand" />, <see cref="T:Leadtools.ImageProcessing.Color.ChangeSaturationCommand" />, 
            and <see cref="T:Leadtools.ImageProcessing.Color.ChangeIntensityCommand" /> commands. In addition, special options can be specified in the <see cref="T:Leadtools.ImageProcessing.Color.ChangeHueSaturationIntensityCommandData" /> class.   </description>
          </item>
          <item>
            <description>To change the overall hue, saturation and intensity all at one time, set the Data property to null.
             To adjust the parameters separately, or to make adjustments in successive passes, use the <see cref="T:Leadtools.ImageProcessing.Color.ChangeHueSaturationIntensityCommandData" /> classes and pass 0 for the Hue, Saturation, and Intensity properties in the this class.   </description>
          </item>
          <item>
            <description>For detailed information about using the ranges refer to <see cref="T:Leadtools.ImageProcessing.Color.ChangeHueSaturationIntensityCommandData" /> class.</description>
          </item>
          <item>
            <description>This command supports 12 and 16-bit grayscale and 48 and 64-bit color images. Support for 12 and 16-bit grayscale and 48 and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support signed data images. </description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <see cref="T:Leadtools.Topics.ChangingBrightnessAndContrast">Changing Brightness and Contrast</see>.
            <br />
            For more information, refer to <see cref="T:Leadtools.Topics.CorrectingColors">Correcting Colors</see>.<br /></remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.ChangeHueSaturationIntensityCommand" /> on an image to change its hue, saturation, and brightness and change the red color to green.</para>
        <code lang="VB">   Public Sub ChangeHueSaturationIntensityCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As ChangeHueSaturationIntensityCommand = New ChangeHueSaturationIntensityCommand
      Dim Data() As ChangeHueSaturationIntensityCommandData
      ReDim Data(0)

      Data(0) = New ChangeHueSaturationIntensityCommandData
      Data(0).Hue = 18000
      Data(0).Saturation = 0
      Data(0).Intensity = 0
      Data(0).OuterLow = 315
      Data(0).OuterHigh = 45
      Data(0).InnerLow = 345
      Data(0).InnerHigh = 15
      command.Data = Data
      command.Hue = 0
      command.Saturation = 0
      command.Intensity = 0

      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void ChangeHueSaturationIntensityCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         ChangeHueSaturationIntensityCommand command    = new ChangeHueSaturationIntensityCommand();
         ChangeHueSaturationIntensityCommandData[] data = new ChangeHueSaturationIntensityCommandData[1];
         data[0]            = new ChangeHueSaturationIntensityCommandData();
         data[0].Hue        = 18000;
         data[0].Saturation = 0;
         data[0].Intensity  = 0;
         data[0].OuterLow   = 315;
         data[0].OuterHigh  = 45;
         data[0].InnerLow   = 345;
         data[0].InnerHigh  = 15;
         command.Data       = data;
         command.Hue        = 0;
         command.Saturation = 0;
         command.Intensity  = 0;

         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void ChangeHueSaturationIntensityCommandExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         ChangeHueSaturationIntensityCommand command    = new ChangeHueSaturationIntensityCommand();
         ChangeHueSaturationIntensityCommandData[] data = new ChangeHueSaturationIntensityCommandData[1];
         data[0]            = new ChangeHueSaturationIntensityCommandData();
         data[0].Hue        = 18000;
         data[0].Saturation = 0;
         data[0].Intensity  = 0;
         data[0].OuterLow   = 315;
         data[0].OuterHigh  = 45;
         data[0].InnerLow   = 345;
         data[0].InnerHigh  = 15;
         command.Data       = data;
         command.Hue        = 0;
         command.Saturation = 0;
         command.Intensity  = 0;
         command.Run(image);

         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub ChangeHueSaturationIntensityCommandExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As ChangeHueSaturationIntensityCommand = New ChangeHueSaturationIntensityCommand()
         Dim data As ChangeHueSaturationIntensityCommandData() = New ChangeHueSaturationIntensityCommandData(0){}
         data(0) = New ChangeHueSaturationIntensityCommandData()
         data(0).Hue = 18000
         data(0).Saturation = 0
         data(0).Intensity = 0
         data(0).OuterLow = 315
         data(0).OuterHigh = 45
         data(0).InnerLow = 345
         data(0).InnerHigh = 15
         command.Data = data
         command.Hue = 0
         command.Saturation = 0
         command.Intensity = 0
         command.Run(image)

         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <seealso cref="T:Leadtools.Topics.ChangingBrightnessAndContrast">Changing Brightness and Contrast</seealso>.
            <seealso cref="T:Leadtools.Topics.CorrectingColors">Correcting Colors</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.GammaCorrectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeContrastCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.HistogramContrastCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.StretchIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.RemapIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.InvertCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeSaturationCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.HistogramEqualizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.FillCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.HistogramCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.WindowLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeHueCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.AverageCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MedianCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.AddNoiseCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.IntensityDetectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SpatialFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.BinaryFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MaximumCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MinimumCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.ShadowCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorReplaceCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorThresholdCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.DirectionEdgeStatisticalCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.DiscreteFourierTransformCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.FastFourierTransformCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.FourierTransformDisplayCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.FrequencyFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.FrequencyFilterMaskCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.MathematicalFunctionCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.RevEffectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SegmentCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.SubtractBackgroundCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.UserFilterCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AdjustTintCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.HalfToneCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Color.ChangeHueSaturationIntensityCommand.#ctor">
      <summary>
            Initializes a new ChangeHueSaturationIntensityCommand class object with default parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ChangeHueSaturationIntensityCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.ChangeHueSaturationIntensityCommand.#ctor(System.Int32,System.Int32,System.Int32,Leadtools.ImageProcessing.Color.ChangeHueSaturationIntensityCommandData[])">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Color.ChangeHueSaturationIntensityCommand" /> class object with explicit parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <param name="hue">Angular amount to change the hue, in hundredths of a degree.  Valid values range from -18000 through 18000. This value is divided internally by 100.</param>
      <param name="saturation">Percentage amount to change saturation, in tenths of a percent. 
            Valid values range from -1000 through 1000. This value is divided internally by 10. 
            Negative values decrease the saturation of colors. Positive values increase the saturation. 
            The saturation level is increased or decreased by a percentage of its present saturation level. 
            For example, an increase of 20<![CDATA[&#37;]]> of the current saturation level "L" will raise the new saturation level "L1" to 
            a value L = 0.20 * L. Likewise, increasing the saturation level 100<![CDATA[&#37;]]> doubles the saturation level (L1 = L + 1.0 * L).
             Decreasing the saturation level 100<![CDATA[&#37;]]> will set the new saturation level to 0. This process is carried out for every pixel. 
             The saturation is set to 1000 (maximum value) if the new value exceeds 1000).</param>
      <param name="intensity">Percentage amount to change the intensity , in tenths of a percent. Valid values range from -1000 (black) through 1000 (white). This value is divided internally by 10. Positive values increase (or lighten) the brightness of the image. Negative values decrease (or darken) the brightness of the image.</param>
      <param name="data">An array of <see cref="T:Leadtools.ImageProcessing.Color.ChangeHueSaturationIntensityCommandData" /> classes that provides information about the color ranges used by this method.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.ChangeHueSaturationIntensityCommand" /> on an image to change its hue, saturation, and brightness and change the red color to green.</para>
        <code lang="VB">   Public Sub ChangeHueSaturationIntensityConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim Data() As ChangeHueSaturationIntensityCommandData
      ReDim Data(0)
      Data(0) = New ChangeHueSaturationIntensityCommandData(18000, 0, 0, 315, 45, 345, 15)
      Dim command As ChangeHueSaturationIntensityCommand = New ChangeHueSaturationIntensityCommand(0, 0, 0, Data)
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void ChangeHueSaturationIntensityConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         ChangeHueSaturationIntensityCommandData[] data = new ChangeHueSaturationIntensityCommandData[1];
         data[0] = new ChangeHueSaturationIntensityCommandData(18000, 0, 0, 315, 45, 345, 15);
         ChangeHueSaturationIntensityCommand command = new ChangeHueSaturationIntensityCommand(0, 0, 0, data);
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void ChangeHueSaturationIntensityConstructorExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         ChangeHueSaturationIntensityCommandData[] data = new ChangeHueSaturationIntensityCommandData[1];
         data[0] = new ChangeHueSaturationIntensityCommandData(18000, 0, 0, 315, 45, 345, 15);
         ChangeHueSaturationIntensityCommand command = new ChangeHueSaturationIntensityCommand();
         command.Data = data;
         command.Hue = 0;
         command.Intensity = 0;
         command.Saturation = 0;
         command.Run(image);

         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub ChangeHueSaturationIntensityConstructorExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim data As ChangeHueSaturationIntensityCommandData() = New ChangeHueSaturationIntensityCommandData(0){}
         data(0) = New ChangeHueSaturationIntensityCommandData(18000, 0, 0, 315, 45, 345, 15)
         Dim command As ChangeHueSaturationIntensityCommand = New ChangeHueSaturationIntensityCommand()
         command.Data = data
         command.Hue = 0
         command.Intensity = 0
         command.Saturation = 0
         command.Run(image)

         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.ChangeHueSaturationIntensityCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this class.
             <strong> Supported in Silverlight</strong>.
</summary>
      <returns>String that contains the name of this command.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.ChangeHueSaturationIntensityCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.ChangeHueSaturationIntensityCommand.Hue">
      <summary>
            Gets or sets a value that represents the angular amount to change the hue, in hundredths of degrees.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Angular amount to change the hue, in hundredths of degrees. Valid values range from -18000 through 18000. This value is divided internally by 100. </value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ChangeHueSaturationIntensityCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.ChangeHueSaturationIntensityCommand.Saturation">
      <summary>
            Gets or sets a value that represents the percentage amount to change saturation, in tenths of percent. 
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Percentage amount to change saturation, in tenths of a percent. 
            Valid values range from -1000 through 1000. This value is divided internally by 10. 
            Negative values decrease the saturation of colors. Positive values increase the saturation. 
            The saturation level is increased or decreased by a percentage of its present saturation level. 
            For example, an increase of 20<![CDATA[&#37;]]> of the current saturation level "L" will raise the new saturation level "L1" to 
            a value L = 0.20 * L. Likewise, increasing the saturation level 100<![CDATA[&#37;]]> doubles the saturation level (L1 = L + 1.0 * L).
             Decreasing the saturation level 100<![CDATA[&#37;]]> will set the new saturation level to 0. This process is carried out for every pixel. 
             The saturation is set to 1000 (maximum value) if the new value exceeds 1000). </value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ChangeHueSaturationIntensityCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.ChangeHueSaturationIntensityCommand.Intensity">
      <summary>
            Gets or sets a value that represents the percentage amount to change the intensity , in tenths of a percent.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value> Percentage amount to change the intensity , in tenths of percent. Valid values range from --1000 (black) through 1000 (white). This value is divided internally by 10. Positive values increase (or lighten) the brightness of the image. Negative values decrease (or darken) the brightness of the image. </value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ChangeHueSaturationIntensityCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.ChangeHueSaturationIntensityCommand.Data">
      <summary>
            An array of <see cref="T:Leadtools.ImageProcessing.Color.ChangeHueSaturationIntensityCommandData" /> classes that provides information about the color ranges used by this class.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>An array of <see cref="T:Leadtools.ImageProcessing.Color.ChangeHueSaturationIntensityCommandData" /> classes that provides information about the color ranges used by this class. </value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ChangeHueSaturationIntensityCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="T:Leadtools.ImageProcessing.Color.ChangeHueCommand">
      <summary>
            Changes the hue of colors in an image by rotating the color wheel.
             <strong> Supported in Silverlight</strong>.
</summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>This command can rotate the color wheel in either direction. A 180-degree rotation in either direction changes each color to its complement. Positive rotation takes red toward green, green toward blue, and blue toward red. Negative rotation has the opposite effect.</description>
          </item>
          <item>
            <description>This command supports 12 and 16-bit grayscale and 48 and 64-bit color images. Support for 12 and 16-bit grayscale and 48 and 64-bit color images is available only in the <see cref="T:Leadtools.Topics.RasterProDocMed">Document/Medical</see> toolkits.</description>
          </item>
          <item>
            <description>This command does not support signed data images.</description>
          </item>
          <item>
            <description>This command does not support 32-bit grayscale images.</description>
          </item>
        </list>
            For more information, refer to <see cref="T:Leadtools.Topics.ChangingBrightnessAndContrast">Changing Brightness and Contrast</see>.
            <br />
            For more information, refer to <see cref="T:Leadtools.Topics.CorrectingColors">Correcting Colors</see>.<br /></remarks>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.ChangeHueCommand" /> on an image and change its hue.</para>
        <code lang="VB">   Public Sub ChangeHueCommandExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As ChangeHueCommand = New ChangeHueCommand
      'Change each color to its complement.
      command.Angle = 180

      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void ChangeHueCommandExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         ChangeHueCommand command = new ChangeHueCommand();
         //Change each color to its complement.
         command.Angle = 180;
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void ChangeHueCommandExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         ChangeHueCommand command = new ChangeHueCommand();
         //Change each color to its complement.
         command.Angle = 180;
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub ChangeHueCommandExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As ChangeHueCommand = New ChangeHueCommand()
         'Change each color to its complement.
         command.Angle = 180
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <seealso cref="T:Leadtools.Topics.ChangingBrightnessAndContrast">Changing Brightness and Contrast</seealso>.
            <seealso cref="T:Leadtools.Topics.CorrectingColors">Correcting Colors</seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.GammaCorrectCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeContrastCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.HistogramContrastCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.StretchIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.RemapIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.InvertCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeSaturationCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.HistogramEqualizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.FillCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.HistogramCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChannelMixerCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.LightControlCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Effects.SmoothEdgesCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.LocalHistogramEqualizeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AddWeightedCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorMergeCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorSeparateCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.MultiplyCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AutoColorLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorLevelCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.SelectiveColorCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ChangeHueSaturationIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorReplaceCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorThresholdCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.MathematicalFunctionCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AdaptiveContrastCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ApplyMathematicalLogicCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ColorIntensityBalanceCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.ContrastBrightnessIntensityCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.SpecialEffects.FunctionalLightCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.MultiscaleEnhancementCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.SelectDataCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.ShiftDataCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Color.AdjustTintCommand"></seealso>.
            <seealso cref="T:Leadtools.ImageProcessing.Core.HalfToneCommand"></seealso>.
        </member>
    <member name="M:Leadtools.ImageProcessing.Color.ChangeHueCommand.#ctor">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Color.ChangeHueCommand" /> class object with default parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ChangeHueCommand" />.
            </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.ChangeHueCommand.#ctor(System.Int32)">
      <summary>
            Initializes a new <see cref="T:Leadtools.ImageProcessing.Color.ChangeHueCommand" /> class object with explicit parameters.
             <strong> Supported in Silverlight</strong>.
</summary>
      <param name="angle">Angular amount to change the hue, in degrees.</param>
      <example>
        <para>Run the <see cref="T:Leadtools.ImageProcessing.Color.ChangeHueCommand" /> on an image and change its hue.</para>
        <code lang="VB">   Public Sub ChangeHueConstructorExample()
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      codecs.ThrowExceptionsOnInvalidImages = True

      Dim leadImage As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg")

      ' Prepare the command
      Dim command As ChangeHueCommand = New ChangeHueCommand(180)
      'Change each color to its complement.
      command.Run(leadImage)
      codecs.Save(leadImage, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24)

      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void ChangeHueConstructorExample()
      {
         // Load an image
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         codecs.ThrowExceptionsOnInvalidImages = true;

         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Master.jpg");

         // Prepare the command
         ChangeHueCommand command = new ChangeHueCommand(180);
         //Change each color to its complement.
         command.Run(image);
         codecs.Save(image, LeadtoolsExamples.Common.ImagesPath.Path + "Result.jpg", RasterImageFormat.Jpeg, 24);

         RasterCodecs.Shutdown();
      }</code>
        <code lang="SilverlightCSharp">      public void ChangeHueConstructorExample(RasterImage image, Stream outStream)
      {
         // Prepare the command
         ChangeHueCommand command = new ChangeHueCommand(180);
         //Change each color to its complement.
         command.Run(image);
         // Save result image
         RasterCodecs codecs = new RasterCodecs();
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24);
         image.Dispose();
      }</code>
        <code lang="SilverlightVB">      Public Sub ChangeHueConstructorExample(ByVal image As RasterImage, ByVal outStream As Stream)
         ' Prepare the command
         Dim command As ChangeHueCommand = New ChangeHueCommand(180)
         'Change each color to its complement.
         command.Run(image)
         ' Save result image
         Dim codecs As RasterCodecs = New RasterCodecs()
         codecs.Save(image, outStream, RasterImageFormat.Jpeg, 24)
         image.Dispose()
      End Sub</code>
      </example>
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.ChangeHueCommand.ToString">
      <summary>
            Overridden. Returns a meaningful name for this class.
             <strong> Supported in Silverlight</strong>.
</summary>
      <returns>Character string that contains the name of this class.</returns>
      <noexample />
      <noremarks />
    </member>
    <member name="M:Leadtools.ImageProcessing.Color.ChangeHueCommand.RunCommand(Leadtools.RasterImage,System.IntPtr,Leadtools.RasterImageChangedFlags@)">
      <exclude />
    </member>
    <member name="P:Leadtools.ImageProcessing.Color.ChangeHueCommand.Angle">
      <summary>
            Gets or sets a value that represents the angular amount to change the hue, in degrees.
             <strong> Supported in Silverlight</strong>.
</summary>
      <value>Angular amount to change the hue, in degrees.</value>
      <example>
            Refer to <see cref="T:Leadtools.ImageProcessing.Color.ChangeHueCommand" />.
            </example>
      <noremarks />
    </member>
  </members>
</doc>
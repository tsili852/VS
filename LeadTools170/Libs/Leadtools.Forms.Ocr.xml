<?xml version="1.0"?>
<doc>
  <assembly>
    <name>Leadtools.Forms.Ocr</name>
  </assembly>
  <members>
    <member name="T:Leadtools.Forms.Ocr.OcrSpellCheckOpinion">
      <summary>
            Possible return values for a user-defined spell checking callback.
            </summary>
      <remarks>
        <para>You can set the <see cref="T:Leadtools.Forms.Ocr.OcrSpellCheckCallback">OcrSpellCheckCallback</see> to be used globally in the engine through the
            <see cref="M:Leadtools.Forms.Ocr.IOcrSpellCheckManager.SetSpellCheckCallback(Leadtools.Forms.Ocr.OcrSpellCheckCallback)">IOcrSpellCheckManager.SetSpellCheckCallback</see> method.</para>
        <para>This callback allows user intervention during the spell checking process. The callback is called by the checking subsystem of the engine during the recognition
            operation. The user can then influence the decision about the recognized result through the returned <see cref="T:Leadtools.Forms.Ocr.OcrSpellCheckOpinion" /> value.</para>
        <para>For an example, if the particular zone in the page to be recognized is allowed to contain digits and only certain values are allowed. The user can
            return the following values:
            <list type="bullet"><item><description>If the value contains digits only and falls in the range of the values allowed, the user should return <see cref="T:Leadtools.Forms.Ocr.OcrSpellCheckOpinion">OcrSpellCheckOpinion.Sure</see>.</description></item><item><description>If the value fails to to fulfill any of the above two requirements, the user should return <see cref="T:Leadtools.Forms.Ocr.OcrSpellCheckOpinion">OcrSpellCheckOpinion.Impossible</see>.</description></item></list></para>
        <para>If the particular zone in the page to be recognized is allowed to have digits only but no further restrictions, the user can return the following values:
            <list type="bullet"><item><description>If the value is digits only, the user should return <see cref="T:Leadtools.Forms.Ocr.OcrSpellCheckOpinion">OcrSpellCheckOpinion.Possible</see>.</description></item><item><description>If the value contains digits plus punctuation (for example, a comma or a period), the user should return <see cref="T:Leadtools.Forms.Ocr.OcrSpellCheckOpinion">OcrSpellCheckOpinion.Unlikely</see>.</description></item></list></para>
        <para>
          <strong>Note: User-defined checking through the <see cref="T:Leadtools.Forms.Ocr.OcrSpellCheckCallback">OcrSpellCheckCallback</see> callback is not supported when using the LEADTOOLS OCR Advantage Engine.</strong>
        </para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrSpellCheckCallback">OcrSpellCheckCallback</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrSpellCheckCallback" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSpellCheckManager" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrSpellCheckOpinion.Sure">
      <summary>
            The recognized value is certainly acceptable.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrSpellCheckOpinion.Possible">
      <summary>
            The recognized value is possibly acceptable.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrSpellCheckOpinion.Impossible">
      <summary>
            The recognized value cannot be possible.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrSpellCheckOpinion.Unlikely">
      <summary>
            The recognized value is unlikely to be acceptable.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrSpellCheckOpinion.Unresolved">
      <summary>
            Cannot make a decision about the acceptability of the recognized value.
            </summary>
    </member>
    <member name="T:Leadtools.Forms.Ocr.OcrSpellCheckCallback">
      <summary>
            Provides a callback for the global user-defined spell checking.
            </summary>
      <param name="engine">The OCR engine instance.</param>
      <param name="page">The page currently being recognized. To get the index of this page, use <see cref="M:System.Collections.Generic.IList`1.IndexOf(`0)">OcrDocument.Pages.IndexOf</see>.</param>
      <param name="zoneIndex">The zero-based index of the zone in <paramref name="page" /> currently being recognized. To get the zone info, use <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones">IOcrPage.Zones</see> passing
            <paramref name="zoneIndex" /> as the index value.</param>
      <param name="value">Word or line to be checked by the method.</param>
      <returns>One of the <see cref="T:Leadtools.Forms.Ocr.OcrSpellCheckOpinion" /> members that expresses the opinion of the application about the recognized string's acceptability.</returns>
      <remarks>
        <para>You can set the <see cref="T:Leadtools.Forms.Ocr.OcrSpellCheckCallback">OcrSpellCheckCallback</see> to be used globally in the engine through the
            <see cref="M:Leadtools.Forms.Ocr.IOcrSpellCheckManager.SetSpellCheckCallback(Leadtools.Forms.Ocr.OcrSpellCheckCallback)">IOcrSpellCheckManager.SetSpellCheckCallback</see> method.</para>
        <para>The callback will only work with zones added manually by the user. The zones automatically found by the engine through <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPage~AutoZone.html">IOcrPage.AutoZone</a>
            will not cause the callback to be called.</para>
        <para>This callback allows the user to intervene during the spell checking process. The callback is called by the checking subsystem of the engine during the recognition
            operation. The user can then influence the decision about the recognized result through the returned <see cref="T:Leadtools.Forms.Ocr.OcrSpellCheckOpinion" /> value.</para>
        <para>For an example, if the particular zone in the page to be recognized is allowed to contain digits and only certain values are allowed. The user can
            return the following values:
            <list type="bullet"><item><description>If the value contains digits only and falls in the range of the values allowed, the user should return <see cref="T:Leadtools.Forms.Ocr.OcrSpellCheckOpinion">OcrSpellCheckOpinion.Sure</see></description></item><item><description>If the value fails to to fulfill any of the above two requirements, the user should return <see cref="T:Leadtools.Forms.Ocr.OcrSpellCheckOpinion">OcrSpellCheckOpinion.Impossible</see></description></item></list></para>
        <para>If the particular zone in the page to be recognized is allowed to have digits only by no further restrictions, the user can return the following values:
            <list type="bullet"><item><description>If the value is digits only, the user should return <see cref="T:Leadtools.Forms.Ocr.OcrSpellCheckOpinion">OcrSpellCheckOpinion.Possible</see></description></item><item><description>If the value contains digits plus punctuation (for example, a comma or a period), the user should return <see cref="T:Leadtools.Forms.Ocr.OcrSpellCheckOpinion">OcrSpellCheckOpinion.Unlikely</see></description></item></list></para>
        <para>
          <strong>Note: User-defined checking through the <see cref="T:Leadtools.Forms.Ocr.OcrSpellCheckCallback">OcrSpellCheckCallback</see> callback is not supported when using the LEADTOOLS OCR Advantage Engine.</strong>
        </para>
      </remarks>
      <example>
        <para>This example attempts to recognize an image having a misspelled word and then uses the user-defined spell checking callback to give an opinion about the engine suggestions.</para>
        <code lang="VB">   Public Sub OcrSpellCheckWordCallbackExample()
      ' Unlock the support needed for LEADTOOLS Plus OCR engine
      RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here")
      RasterSupport.Unlock(RasterSupportType.OcrPlus, "Replace with your own key here")
      RasterSupport.Unlock(RasterSupportType.OcrPlusPdfLeadOutput, "Replace with your own key here")
      ' Create an image with misspelled number
      Dim numberString As String = "123!4"

      Dim image As New RasterImage(RasterMemoryFlags.Conventional, 320, 200, 1, RasterByteOrder.Bgr, RasterViewPerspective.TopLeft, Nothing, IntPtr.Zero, 0)
      Dim imageRect As New Rectangle(0, 0, image.ImageWidth, image.ImageHeight)

      Dim hdc As IntPtr = RasterImagePainter.CreateLeadDC(image)
      Using g As Graphics = Graphics.FromHdc(hdc)
         g.FillRectangle(Brushes.White, imageRect)

         Using f As New Font("Arial", 60, FontStyle.Regular)
            Using sf As New StringFormat()
               sf.Alignment = StringAlignment.Center
               sf.LineAlignment = StringAlignment.Center
               g.DrawString(numberString, f, Brushes.Black, imageRect, sf)
            End Using
         End Using
      End Using

      RasterImagePainter.DeleteLeadDC(hdc)

      ' Create an instance of the engine
      Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, False)
         ' Start the engine using default parameters
         ocrEngine.Startup(Nothing, Nothing, Nothing, Nothing)

         ' Create an OCR document
         Using ocrDocument As IOcrDocument = ocrEngine.DocumentManager.CreateDocument()

            ' Add this image to the document
            Dim ocrPage As IOcrPage = ocrDocument.Pages.AddPage(image, Nothing)
            image.Dispose()

            ' Add a callback for user-defined spell checking
            ocrEngine.SpellCheckManager.SetSpellCheckCallback(AddressOf MySpellCheckCallback)

            ' For the spell checking to work, we need to add the zone manually as apposed to calling
            ' AutoZone. So add one zone for the whole page
            Dim ocrZone As New OcrZone()
            ocrZone.Name = "MyZone"
            ocrZone.Selected = False
            Dim lRect As LeadRect = New LeadRect(0, 0, image.ImageWidth, image.ImageHeight)
            ocrZone.Bounds = New LogicalRectangle(lRect)

            ocrZone.ZoneType = OcrZoneType.Text
            ocrZone.FillMethod = OcrZoneFillMethod.Default
            ocrZone.RecognitionModule = OcrZoneRecognitionModule.Auto
            ocrZone.CharacterFilters = OcrZoneCharacterFilters.None
            ocrZone.UserDictionarySectionName = Nothing
            ocrZone.RecognitionOptions = OcrZoneRecognitionOptions.None

            ' Add the zone, this will use our spell check callback since we set it before
            ocrPage.Zones.Add(ocrZone)

            ' Recognize this page
            Dim text As String = ocrPage.RecognizeText(Nothing)
            Console.WriteLine("Recognition results\n--------------\n{0}", text)
         End Using

         ' Shutdown the engine
         ' Note: calling Dispose will also automatically shutdown the engine if it has been started
         ocrEngine.Shutdown()
      End Using
   End Sub

   Private Function MySpellCheckCallback(ByVal engine As IOcrEngine, ByVal page As IOcrPage, ByVal zoneIndex As Integer, ByVal recognizedValue As String) As OcrSpellCheckOpinion
      Dim pageIndex As Integer = page.Document.Pages.IndexOf(page)
      Console.WriteLine("Checking (Page: {0}/Zone: {1}): {2}", pageIndex, zoneIndex, recognizedValue)

      ' See if the text contains digits only
      Dim result As Integer
      If (Integer.TryParse(recognizedValue, result)) Then
         Return OcrSpellCheckOpinion.Sure
      Else
         Return OcrSpellCheckOpinion.Impossible
      End If
   End Function</code>
        <code lang="CS">      public void OcrSpellCheckWordCallbackExample()
      {
         // Unlock the support needed for LEADTOOLS Plus OCR engine
         RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here");
         RasterSupport.Unlock(RasterSupportType.OcrPlus, "Replace with your own key here");
         RasterSupport.Unlock(RasterSupportType.OcrPlusPdfLeadOutput, "Replace with your own key here");
         // Create an image with misspelled number
         string numberString = "123!4";

         RasterImage image = new RasterImage(RasterMemoryFlags.Conventional, 320, 200, 1, RasterByteOrder.Bgr, RasterViewPerspective.TopLeft, null, IntPtr.Zero, 0);
         Rectangle imageRect = new Rectangle(0, 0, image.ImageWidth, image.ImageHeight);

         IntPtr hdc = RasterImagePainter.CreateLeadDC(image);
         using (Graphics g = Graphics.FromHdc(hdc))
         {
            g.FillRectangle(Brushes.White, imageRect);

            using(Font f = new Font("Arial", 60, FontStyle.Regular))
            {
               using(StringFormat sf = new StringFormat())
               {
                  sf.Alignment = StringAlignment.Center;
                  sf.LineAlignment = StringAlignment.Center;
                  g.DrawString(numberString, f, Brushes.Black, imageRect, sf);
               }
            }
         }

         RasterImagePainter.DeleteLeadDC(hdc);

         // Create an instance of the engine
         using(IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, false))
         {
            // Start the engine using default parameters
            ocrEngine.Startup(null, null, null, null);

            // Create an OCR document
            using(IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument())
            {
               // Add this image to the document
               IOcrPage ocrPage = ocrDocument.Pages.AddPage(image, null);
               image.Dispose();

               // Add a callback for user-defined spell checking
               ocrEngine.SpellCheckManager.SetSpellCheckCallback(new OcrSpellCheckCallback(MySpellCheckCallback));

               // For the spell checking to work, we need to add the zone manually as apposed to calling
               // AutoZone. So add one zone for the whole page
               OcrZone ocrZone = new OcrZone();
               ocrZone.Name = "MyZone";
               ocrZone.Selected = false;
               LeadRect lRect = new LeadRect(0, 0, image.ImageWidth, image.ImageHeight);
               ocrZone.Bounds = new LogicalRectangle(lRect);

               ocrZone.ZoneType = OcrZoneType.Text;
               ocrZone.FillMethod = OcrZoneFillMethod.Default;
               ocrZone.RecognitionModule = OcrZoneRecognitionModule.Auto;
               ocrZone.CharacterFilters = OcrZoneCharacterFilters.None;
               ocrZone.UserDictionarySectionName = null;
               ocrZone.RecognitionOptions = OcrZoneRecognitionOptions.None;

               // Add the zone, this will use our spell check callback since we set it before
               ocrPage.Zones.Add(ocrZone);

               // Recognize this page and get the text
               string text = ocrPage.RecognizeText(null);

               Console.WriteLine("Recognition results\n--------------\n{0}", text);
            }

            // Shutdown the engine
            // Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown();
         }
      }

      private OcrSpellCheckOpinion MySpellCheckCallback(IOcrEngine engine, IOcrPage page, int zoneIndex, string recognizedValue)
      {
         int pageIndex = page.Document.Pages.IndexOf(page);
         Console.WriteLine("Checking (Page: {0}/Zone: {1}): {2}", pageIndex, zoneIndex, recognizedValue);

         // See if the text contains digits only
         int result;
         if(int.TryParse(recognizedValue, out result))
            return OcrSpellCheckOpinion.Sure;
         else
            return OcrSpellCheckOpinion.Impossible;
      }</code>
        <!--OcrSpellCheckWordCallback-->
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrSpellCheckOpinion" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSpellCheckManager" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="T:Leadtools.Forms.Ocr.OcrCharacterPosition">
      <summary>
            Recognition character data position information.
            </summary>
      <remarks>
        <para>Since the recognition character data does not contain extra characters for marking the ends of lines, paragraphs, pages, etc, these pieces of information are stored
            for the particular characters in the <see cref="P:Leadtools.Forms.Ocr.OcrCharacter.Position">OcrCharacter.Position</see> property.</para>
        <para> The values of <see cref="T:Leadtools.Forms.Ocr.OcrCharacterPosition" /> can be combined together (OR-ed).</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.SetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized">IOcrPage.IsRecognized</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrCharacter" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrCharacterPosition.None">
      <summary>
            None
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrCharacterPosition.EndOfLine">
      <summary>
            This is the last character in a line
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrCharacterPosition.EndOfParagraph">
      <summary>
            This is the last character in a paragraph
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrCharacterPosition.EndOfWord">
      <summary>
            This is the last character of a word
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrCharacterPosition.EndOfZone">
      <summary>
            This is the last character in a zone
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrCharacterPosition.EndOfPage">
      <summary>
            This is the last character on a page
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrCharacterPosition.EndOfCell">
      <summary>
            This is the last character in a cell. (applicable only for <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Table</see> type zones)
            </summary>
    </member>
    <member name="T:Leadtools.Forms.Ocr.IOcrZoneManager">
      <summary>
            Support for determining the various zone types, recognition modules and fill methods supported by the OCR engine.
            </summary>
      <keywords>Zones</keywords>
      <remarks>
        <para>You can access the instance of the <see cref="T:Leadtools.Forms.Ocr.IOcrZoneManager" /> used by an <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> through the <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.ZoneManager">IOcrEngine.ZoneManager</see>
            property.</para>
        <para>When calling the <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPage~AutoZone.html">IOcrPage.AutoZone</a> method on a page, the generated zone's type
            (<see cref="P:Leadtools.Forms.Ocr.OcrZone.ZoneType">OcrZone.ZoneType</see>), recognition module (<see cref="P:Leadtools.Forms.Ocr.OcrZone.RecognitionModule">OcrZone.RecognitionModule</see>) and fill method
            (<see cref="P:Leadtools.Forms.Ocr.OcrZone.FillMethod">OcrZone.FillMethod</see>) will always be one of the supported values as reported by the <see cref="T:Leadtools.Forms.Ocr.IOcrZoneManager" />.</para>
        <para>Before manually changing any of the above zone properties, you must determine whether the particular value is supported by this instance of <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />. You do this
            by using the instance of <see cref="T:Leadtools.Forms.Ocr.IOcrZoneManager" /> of the engine through the <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.ZoneManager">IOcrEngine.ZoneManager</see> property as follows:
            <list type="bullet"><item><description>To change the zone type, use <see cref="M:Leadtools.Forms.Ocr.IOcrZoneManager.IsZoneTypeSupported(Leadtools.Forms.Ocr.OcrZoneType)" /> first.</description></item><item><description>To change the recognition module, use <see cref="M:Leadtools.Forms.Ocr.IOcrZoneManager.IsRecognitionModuleSupported(Leadtools.Forms.Ocr.OcrZoneRecognitionModule)" /> first.</description></item><item><description>To change the fill method, use <see cref="M:Leadtools.Forms.Ocr.IOcrZoneManager.IsFillMethodSupported(Leadtools.Forms.Ocr.OcrZoneFillMethod)" /> first.</description></item></list></para>
        <para>To get all the supported zone types, recognition modules or fill methods use <see cref="M:Leadtools.Forms.Ocr.IOcrZoneManager.GetSupportedZoneTypes" />, <see cref="M:Leadtools.Forms.Ocr.IOcrZoneManager.GetSupportedRecognitionModules" /> and 
            <see cref="M:Leadtools.Forms.Ocr.IOcrZoneManager.GetSupportedFillMethods" /> respectively.</para>
      </remarks>
      <example>
        <para>This example will show the different zone types, recognition modules and fill types supported by the Plus OCR engine.</para>
        <code lang="VB">   Public Sub ZoneManagerExample()
      ' Unlock the support needed for LEADTOOLS Plus OCR engine
      RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here")
      RasterSupport.Unlock(RasterSupportType.OcrPlus, "Replace with your own key here")
      RasterSupport.Unlock(RasterSupportType.OcrPlusPdfLeadOutput, "Replace with your own key here")
      ' Create an instance of the engine
      Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, False)
         ' Start the engine using default parameters
         ocrEngine.Startup(Nothing, Nothing, Nothing, Nothing)

         ' Get the zone manager
         Dim ocrZoneManager As IOcrZoneManager = ocrEngine.ZoneManager

         ' Show all the zone types supported by this engine
         Console.WriteLine("Hit enter to show the supported zone types")
         Console.ReadLine()

         Dim zoneTypes() As OcrZoneType = ocrZoneManager.GetSupportedZoneTypes()
         Console.WriteLine("Supported zone types:")
         Console.WriteLine("---------------------")
         For Each zoneType As OcrZoneType In zoneTypes
            Console.WriteLine("  {0}", zoneType)
         Next

         Console.WriteLine("Hit enter to show the supported recognition modules")
         Console.ReadLine()

         Dim recognitionModules() As OcrZoneRecognitionModule = ocrZoneManager.GetSupportedRecognitionModules()
         Console.WriteLine("Supported recognition modules:")
         Console.WriteLine("---------------------")
         For Each recognitionModule As OcrZoneRecognitionModule In recognitionModules
            Console.WriteLine("  {0}", recognitionModule)
         Next

         Console.WriteLine("Hit enter to show the supported fill methods")
         Console.ReadLine()

         Dim fillMethods() As OcrZoneFillMethod = ocrZoneManager.GetSupportedFillMethods()
         Console.WriteLine("Supported fillMethods:")
         Console.WriteLine("---------------------")
         For Each fillMethod As OcrZoneFillMethod In fillMethods
            Console.WriteLine("  {0}", fillMethod)
         Next

         ' Shutdown the engine
         ' Note: calling Dispose will also automatically shutdown the engine if it has been started
         ocrEngine.Shutdown()
      End Using
   End Sub</code>
        <code lang="CS">      public void ZoneManagerExample()
      {
         // Unlock the support needed for LEADTOOLS Plus OCR engine
         RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here");
         RasterSupport.Unlock(RasterSupportType.OcrPlus, "Replace with your own key here");
         RasterSupport.Unlock(RasterSupportType.OcrPlusPdfLeadOutput, "Replace with your own key here");
         // Create an instance of the engine
         using(IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, false))
         {
            // Start the engine using default parameters
            ocrEngine.Startup(null, null, null, null);

            // Get the zone manager
            IOcrZoneManager ocrZoneManager = ocrEngine.ZoneManager;

            // Show all the zone types supported by this engine
            Console.WriteLine("Hit enter to show the supported zone types");
            Console.ReadLine();

            OcrZoneType[] zoneTypes = ocrZoneManager.GetSupportedZoneTypes();
            Console.WriteLine("Supported zone types:");
            Console.WriteLine("---------------------");
            foreach(OcrZoneType zoneType in zoneTypes)
               Console.WriteLine("  {0}", zoneType);

            Console.WriteLine("Hit enter to show the supported recognition modules");
            Console.ReadLine();

            OcrZoneRecognitionModule[] recognitionModules = ocrZoneManager.GetSupportedRecognitionModules();
            Console.WriteLine("Supported recognition modules:");
            Console.WriteLine("---------------------");
            foreach(OcrZoneRecognitionModule recognitionModule in recognitionModules)
               Console.WriteLine("  {0}", recognitionModule);

            Console.WriteLine("Hit enter to show the supported fill methods");
            Console.ReadLine();

            OcrZoneFillMethod[] fillMethods = ocrZoneManager.GetSupportedFillMethods();
            Console.WriteLine("Supported fillMethods:");
            Console.WriteLine("---------------------");
            foreach(OcrZoneFillMethod fillMethod in fillMethods)
               Console.WriteLine("  {0}", fillMethod);

            // Shutdown the engine
            // Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown();
         }
      }</code>
        <!--IOcrZoneManager-->
      </example>
      <docaddon>yes</docaddon>
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPage~AutoZone.html">IOcrPage.AutoZone</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneType" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.WorkingWithOcrZones.html">Working with OCR Zones</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrZoneManager.GetSupportedZoneTypes">
      <summary>
            Gets a list of zone types supported by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.
            </summary>
      <returns>An array of <see cref="T:Leadtools.Forms.Ocr.OcrZoneType" /> members that list the zone types supported by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.</returns>
      <remarks>
        <para>To determine whether a particular zone type is supported by the engine, use <see cref="M:Leadtools.Forms.Ocr.IOcrZoneManager.IsZoneTypeSupported(Leadtools.Forms.Ocr.OcrZoneType)" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrZoneManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPage~AutoZone.html">IOcrPage.AutoZone</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneType" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrZoneManager.IsZoneTypeSupported(Leadtools.Forms.Ocr.OcrZoneType)">
      <summary>
            Checks whether the specified zone type is supported by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.
            </summary>
      <param name="zoneType">The zone type to check.</param>
      <returns>True if <paramref name="zoneType" /> is supported by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> otherwise; it is false.</returns>
      <remarks>
        <para>To get all the zone types supported by the engine, use <see cref="M:Leadtools.Forms.Ocr.IOcrZoneManager.GetSupportedZoneTypes" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrZoneManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPage~AutoZone.html">IOcrPage.AutoZone</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneType" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrZoneManager.GetSupportedRecognitionModules">
      <summary>
            Gets a list of the recognition modules supported by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.
            </summary>
      <returns>An array of <see cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule" /> members that list the recognition modules supported by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.</returns>
      <remarks>
        <para>To determine whether a particular recognition module is supported by the engine, use <see cref="M:Leadtools.Forms.Ocr.IOcrZoneManager.IsRecognitionModuleSupported(Leadtools.Forms.Ocr.OcrZoneRecognitionModule)" />.</para>
        <para>The supported recognition modules are values that are both supported by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> and are installed on your system. To determine whether there are
            additional recognition modules that are supported by the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> but not currently installed on your system, use <see cref="M:Leadtools.Forms.Ocr.IOcrZoneManager.GetAdditionalRecognitionModules" />.</para>
        <para>
          <strong>Note: This method is not supported in the LEADTOOLS OCR Advantage Engine. This method will always return an array of one item that contains <see cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule">OcrZoneRecognitionModule.Auto</see>.</strong>
        </para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrZoneManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPage~AutoZone.html">IOcrPage.AutoZone</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneType" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrZoneManager.IsRecognitionModuleSupported(Leadtools.Forms.Ocr.OcrZoneRecognitionModule)">
      <summary>
            Checks whether the specified recognition module is supported by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.
            </summary>
      <param name="recognitionModule">The recognition module to check.</param>
      <returns>
        <strong>True</strong> if <paramref name="recognitionModule" /> is supported by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />; otherwise it is <strong>false</strong>.</returns>
      <remarks>
        <para>To get all the recognition modules supported by the engine, use <see cref="M:Leadtools.Forms.Ocr.IOcrZoneManager.GetSupportedRecognitionModules" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrZoneManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPage~AutoZone.html">IOcrPage.AutoZone</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneType" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrZoneManager.GetAdditionalRecognitionModules">
      <summary>
            Gets an array of the additional recognition modules supported by the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.
            </summary>
      <returns>An array of <see cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule" /> enumeration members that contain the additional recognition modules supported by the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.</returns>
      <remarks>
        <para>The additional recognition modules are values that are supported by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> but could not be found on the system. You need to install additional
            recognition module packs to be able to support these modules in your application. For more information, refer to <see cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</see>.</para>
        <para>To get all the recognition modules supported by the engine, use <see cref="M:Leadtools.Forms.Ocr.IOcrZoneManager.GetSupportedRecognitionModules" />.</para>
        <para>To determine whether a particular recognition module is supported by the engine, use <see cref="M:Leadtools.Forms.Ocr.IOcrZoneManager.IsRecognitionModuleSupported(Leadtools.Forms.Ocr.OcrZoneRecognitionModule)" />.</para>
        <para>
          <strong>Note: This method is not supported in the LEADTOOLS OCR Advantage Engine. This method will always return an array of one item that contains <see cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule">OcrZoneRecognitionModule.Auto</see>.</strong>
        </para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrZoneManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPage~AutoZone.html">IOcrPage.AutoZone</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneType" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrZoneManager.GetSupportedFillMethods">
      <summary>
            Gets a list of the fill method supported by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.
            </summary>
      <returns>An array of <see cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod" /> members that list the fill method supported by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.</returns>
      <remarks>
        <para>To determine whether a particular fill method is supported by the engine, use <see cref="M:Leadtools.Forms.Ocr.IOcrZoneManager.IsFillMethodSupported(Leadtools.Forms.Ocr.OcrZoneFillMethod)" />.</para>
        <para>The supported fill methods are values that are both supported by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> and are installed on your system. To determine whether there are
            additional fill methods that are supported by the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> but not currently installed on your system, use <see cref="M:Leadtools.Forms.Ocr.IOcrZoneManager.GetAdditionalFillMethods" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrZoneManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPage~AutoZone.html">IOcrPage.AutoZone</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneType" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrZoneManager.IsFillMethodSupported(Leadtools.Forms.Ocr.OcrZoneFillMethod)">
      <summary>
            Checks whether the specified fill method is supported by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.
            </summary>
      <param name="fillMethod">The fill method to check.</param>
      <returns>
        <strong>True</strong> if <paramref name="fillMethod" /> is supported by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />; otherwise it is <strong>false</strong>.</returns>
      <remarks>
        <para>To get all the fill methods supported by the engine, use <see cref="M:Leadtools.Forms.Ocr.IOcrZoneManager.GetSupportedFillMethods" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrZoneManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPage~AutoZone.html">IOcrPage.AutoZone</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneType" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrZoneManager.GetAdditionalFillMethods">
      <summary>
            Gets an array of the additional fill methods supported by the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.
            </summary>
      <returns>An array of <see cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod" /> enumeration members that contain the additional fill methods supported by the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.</returns>
      <remarks>
        <para>The additional fill methods are values that are supported by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> but could not be found on the system. You need to install additional
            fill methods packs to be able to support these methods in your application. For more information, refer to <see cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</see>.</para>
        <para>To get all the fill methods supported by the engine, use <see cref="M:Leadtools.Forms.Ocr.IOcrZoneManager.GetSupportedFillMethods" />.</para>
        <para>To determine whether a particular fill method is supported by the engine, use <see cref="M:Leadtools.Forms.Ocr.IOcrZoneManager.IsFillMethodSupported(Leadtools.Forms.Ocr.OcrZoneFillMethod)" />.</para>
        <para>
          <strong>Note: This method is not supported in the LEADTOOLS OCR Advantage Engine. This method will always return an empty array.</strong>
        </para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrZoneManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPage~AutoZone.html">IOcrPage.AutoZone</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneType" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrZoneManager.OmrOptions">
      <summary>Gets the OMR settings currently used by the engine.</summary>
      <value>
                An <see cref="T:Leadtools.Forms.Ocr.IOcrOmrOptions" /> interface implementation object that defines
                the OMR settings currently used by the engine.
            </value>
      <remarks>
        <para>OMR stands for Optical Mark Recognition. For more information refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.UsingOmrInLeadtoolsDotNetOcr.html">Using OMR in LEADTOOLS .NET OCR</a>.</para>
        <para>You can get the instance of the <see cref="T:Leadtools.Forms.Ocr.IOcrOmrOptions" /> interface currently used in the engine using the <see cref="P:Leadtools.Forms.Ocr.IOcrZoneManager.OmrOptions">IOcrSpellCheckManager.OmrOptions</see> property.</para>
        <para>With the <see cref="T:Leadtools.Forms.Ocr.IOcrOmrOptions" /> interface, you can change the following OMR settings:
            <list type="bullet"><item><description>Change the frame detection method using the <see cref="P:Leadtools.Forms.Ocr.IOcrOmrOptions.FrameDetectionMethod">IOcrOmrOptions.FrameDetectionMethod</see> property. Frames stand for the check boxes that may exist around OMR fields.</description></item><item><description>Change the sensitivity of the OMR detection engine using the <see cref="P:Leadtools.Forms.Ocr.IOcrOmrOptions.Sensitivity">IOcrOmrOptions.Sensitivity</see> property.</description></item><item><description>Change the characters being used to replace unfilled and filled OMR marks in the output document (for example, in a PDF file) using the
            <see cref="M:Leadtools.Forms.Ocr.IOcrOmrOptions.GetStateRecognitionCharacter(Leadtools.Forms.Ocr.OcrOmrZoneState)">IOcrOmrOptions.GetStateRecognitionCharacter</see> and <see cref="M:Leadtools.Forms.Ocr.IOcrOmrOptions.SetStateRecognitionCharacter(Leadtools.Forms.Ocr.OcrOmrZoneState,System.Char)">IOcrOmrOptions.SetStateRecognitionCharacter</see> methods. Note that outputting OMR characters in final document is not supported in native engine formats.</description></item></list></para>
        <para>Calling <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see>, updates all OMR zone properties as follows:
            <list type="table"><listheader><term>Property</term><description>Description</description></listheader><item><term><see cref="P:Leadtools.Forms.Ocr.OcrZone.OmrState">OcrZone.OmrState</see></term><description>Either <see cref="T:Leadtools.Forms.Ocr.OcrOmrZoneState">OcrOmrZoneState.Filled</see> if the mark is recognized as being filled or checked, or <see cref="T:Leadtools.Forms.Ocr.OcrOmrZoneState">OcrOmrZoneState.Unfilled</see> if the mark
            is recognized as being unfilled or unchecked.</description></item><item><term><see cref="P:Leadtools.Forms.Ocr.OcrZone.OmrConfidence">OcrZone.OmrConfidence</see></term><description>A number between 0 and 100 (where 100 is maximum confidence) that specifies the confidence the OCR engine has in recognizing the <see cref="P:Leadtools.Forms.Ocr.OcrZone.OmrState">OcrZone.OmrState</see>.</description></item></list></para>
        <para>The OMR zones of a page have the following properties:
            <list type="table"><listheader><term>Property</term><description>Value</description></listheader><item><term><see cref="P:Leadtools.Forms.Ocr.OcrZone.FillMethod">OcrZone.FillMethod</see></term><description>Set to <see cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod">OcrZoneFillMethod.Omr</see></description></item><item><term><see cref="P:Leadtools.Forms.Ocr.OcrZone.RecognitionModule">OcrZone.RecognitionModule</see></term><description>Set to <see cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule">OcrZoneRecognitionModule.Omr</see></description></item></list></para>
        <para>All LEADTOOLS OCR engines support OMR. However, currently autodetection of OMR 
            zones is not supported. Instead, you need to: here is no current support for auto-detecting OMR zones in a page, you have to add the OMR zones manually to the page
            by setting their boundary (through <see cref="P:Leadtools.Forms.Ocr.OcrZone.Bounds">OcrZone.Bounds</see>, the fill method and recognition module as described above and adding the zone to the page using
            the <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones">IOcrPage.Zones</see> collection before calling <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see>.</para>
        <para>To use OMR in LEADTOOLS, you need a special key to unlock the OMR capabilities. For more information, refer to <see cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrOmrOptions" />.</example>
      <isnew>5/8/2009</isnew>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrOmrOptions" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.UsingOmrInLeadtoolsDotNetOcr.html">Using OMR in LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="T:Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand">
      <summary>
            Performs page pre-processing commands
            </summary>
      <remarks>
        <para>The OCR engine can perform a series of image pre-processing steps in order to enhance the quality of the image before starting its recognition.</para>
        <para>Perform these image pre-processing steps by calling the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoPreprocess(Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoPreprocess</see> method. Call this method prior to
            calling <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.RecognizeText(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.RecognizeText</see>.</para>
      </remarks>
      <keywords>OCR,Preprocess</keywords>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoPreprocess(Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoPreprocess</see>.</example>
      <docaddon>yes</docaddon>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand.Deskew">
      <summary>
            Automatic deskewing. If the image is skewed, the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoPreprocess(Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoPreprocess</see> method will try to deskew it
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand.Rotate">
      <summary>
            Automatic rotation. If the image is rotated (its view perspective is anything other than top-left), the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoPreprocess(Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoPreprocess</see> method
            will auto orient it to top-left. This command is especially useful if the image upside-down.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand.Invert">
      <summary>
            Automatic inversion. If the image is black and white and is inverted (contains white on black data), the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoPreprocess(Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoPreprocess</see> method
            will automatically convert the image data to be black on white
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand.All">
      <summary>
            Run all the commands (Deskew, Rotate, Invert)
            </summary>
    </member>
    <member name="T:Leadtools.Forms.Ocr.IOcrPageCharacters">
      <summary>
            The recognized characters collection of a page.
            </summary>
      <remarks>
        <para>To get the recognized characters of a page, call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see> after
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.RecognizeText(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.RecognizeText</see>.</para>
        <para>To update the recognized characters of a page, call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.GetRecognizedCharacters</see> before calling
            <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~Save.html">IOcrDocument.Save</a> or
            <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~SaveXml.html">IOcrDocument.SaveXml</a></para>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" /> implements the standard <see cref="T:System.Collections.Generic.IList`1" />, <see cref="T:System.Collections.Generic.ICollection`1" /> and <see cref="T:System.Collections.Generic.IEnumerable`1" /> interfaces with items
            of type <see cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />. Thus each item in the <see cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" /> contains a collection of the character collections of the zones.</para>
        <para>The <see cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" /> interface contains a collection of the characters of a particular zones.</para>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" /> also implements <see cref="T:System.Collections.Generic.IList`1" />, <see cref="T:System.Collections.Generic.ICollection`1" /> and <see cref="T:System.Collections.Generic.IEnumerable`1" /> interfaces but with items
            of type <see cref="T:Leadtools.Forms.Ocr.OcrCharacter" />. Each item in the <see cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" /> contains a collection of the characters of the zone.</para>
        <para>For example, if you are interested in iterating through the characters of the 2nd zone in the page, you can do the following:</para>
        <para>
          <code>
            // Get the page characters
            IOcrPageCharacters pageCharacters = ocrPage.GetRecognizedCharacters();
            // Get the 2nd zone characters. Note, index is zero-based so 2nd zone is index 1
            // You can also iterate through the pageCharacters collection and find the IOcrZoneCharacters item with ZoneIndex = 1
            IOcrZoneCharacters zoneCharacters = pageCharacters.FindZoneCharacters(1);
            // Loop through the characters
            foreach(OcrCharacter ocrCharacter in zoneCharacters)
            {
               // Do something with ocrCharacter
            }
            </code>
        </para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.SetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized">IOcrPage.IsRecognized</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrCharacter" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPageCharacters.FindZoneCharacters(System.Int32)">
      <summary>
            Gets the character collection for the specified zone index.
            </summary>
      <param name="zoneIndex">Zero-based index of the required zone.</param>
      <returns>An <see cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" /> collection containing the characters for the specified zone.</returns>
      <remarks>
        <para>Each <see cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" /> contain a collection of the collection of characters for each zone. To get the characters of a particular zone you
            can either iterate through all the members of <see cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" /> and find the item with <see cref="P:Leadtools.Forms.Ocr.IOcrZoneCharacters.ZoneIndex">IOcrZoneCharacters.ZoneIndex</see>
            equal to <paramref name="zoneIndex" />, or you can use the <see cref="M:Leadtools.Forms.Ocr.IOcrPageCharacters.FindZoneCharacters(System.Int32)" /> helper method to get the same value.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.SetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized">IOcrPage.IsRecognized</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrCharacter" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrPageCharacters.Page">
      <summary>
            Gets the page associated with this <see cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" /></summary>
      <value>A <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> interface implementation object that define the page associated with this <see cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" /></value>
      <remarks>
        <para>
          <see cref="P:Leadtools.Forms.Ocr.IOcrPageCharacters.Page" /> is the same <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> object you used to get this <see cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" /> object through
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.SetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized">IOcrPage.IsRecognized</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrCharacter" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="T:Leadtools.Forms.Ocr.OcrZoneRecognitionOptions">
      <summary>
            Zone checking control options.
            </summary>
      <remarks>
        <para>The accuracy of the recognition for a zone can also be improved by enabling the checking subsystem to run. Enable the checking subsystem by setting the 
            <see cref="P:Leadtools.Forms.Ocr.IOcrSpellCheckManager.Enabled">IOcrSpellCheckManager.Enabled</see> property to <strong>true</strong>. The application may need to call additional checking
            functions to configure the checking subsystem properly.</para>
        <para>Use the <see cref="P:Leadtools.Forms.Ocr.OcrZone.RecognitionOptions">OcrZone.RecognitionOptions</see> property to control how the checking subsystem will check the recognized result for
            the zone.</para>
      </remarks>
      <example> For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="P:Leadtools.Forms.Ocr.OcrZone.RecognitionOptions">OcrZone.RecognitionOptions</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.OcrZone.AfterRecognitionNotes">OcrZone.RecognitionNotes</seealso>
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPage~AutoZone.html">IOcrPage.AutoZone</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrSpellCheckCallback" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.AnOverviewOfOcrRecognitionModules.html">An Overview of OCR Recognition Modules</seealso>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneRecognitionOptions.None">
      <summary>
            No options.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneRecognitionOptions.DisableLanguageDictionary">
      <summary>
            Prohibit the use of the language dictionary in this zone.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneRecognitionOptions.DisableUserDictionary">
      <summary>
            Prohibit the use of the user dictionary in this zone.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneRecognitionOptions.DisableVerification">
      <summary>
            Prohibit the use of the user-written checking callback <see cref="T:Leadtools.Forms.Ocr.OcrSpellCheckCallback">OcrSpellCheckCallback</see> for this zone.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneRecognitionOptions.IgnoreWhiteSpace">
      <summary>
            Ignore white space characters (SPACE and TAB characters) during checking of this zone. This field should be used together with the
            <see cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionOptions">OcrZoneRecognitionOptions.PassEntireLines.</see></summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneRecognitionOptions.IgnoreCase">
      <summary>
            Case insensitive user dictionary checking for this zone.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneRecognitionOptions.PassEntireLines">
      <summary>
            Instructs the recognition module to pass entire lines to the checker for this zone, instead of words. Do not use this attribute in conjunction with spell checking.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneRecognitionOptions.DisableCorrection">
      <summary>
            Correction done by the <see cref="T:Leadtools.Forms.Ocr.IOcrSpellCheckManager" /> is disabled for this zone even if the value of the
            <see cref="P:Leadtools.Forms.Ocr.IOcrSpellCheckManager.Enabled">IOcrSpellCheckManager.Enabled</see> property is set to <strong>true</strong>.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneRecognitionOptions.IncludePunctuation">
      <summary>
            Punctuatuation characters will also be considered during checking of this zone.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneRecognitionOptions.CorrectProperNames">
      <summary>
            Enables the correction of words beginning with an uppercase letter inside a sentence (i.e. typically but not always proper names).
            </summary>
    </member>
    <member name="T:Leadtools.Forms.Ocr.OcrZoneCharacterFilters">
      <summary>
            Character set filter.
            </summary>
      <remarks>
        <para>This enumeration lists the available character set filter elements. The Language environment can be narrowed by specifying Character Set filters. The name of each filter
            element denotes which category of characters it validates. This enumeration is attributes with the <see cref="T:System.FlagsAttribute" /> and its members can be combined  (OR-ed) together.</para>
        <para>The filters can have an effect either at zone level (by specifying the zone's <see cref="P:Leadtools.Forms.Ocr.OcrZone.CharacterFilters">OcrZone.CharacterFilters</see> property), or globally, at
            image level (defined by the "Recognition.DefaultCharacterFilter" setting).</para>
        <para>The way to set no filtering is to give the value <see cref="T:Leadtools.Forms.Ocr.OcrZoneCharacterFilters">OcrZoneCharacterFilters.All</see>.</para>
        <para>Characters of the document that are not part of the specified character set will either be rejected or will be recognized as a validated character with a similar shape. For instance,
            if only the English language has been selected and the document contains a letter "Capital A with acute", then the recognized output will be a letter "Capital A"</para>
        <para>The recognition module selected for recognition can also impose restrictions, e.g. the <see cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule">OcrZoneRecognitionModule.IcrNumeral</see> module is
            restricted to numerals and four other characters.</para>
        <para>Not all recognition modules support all filter elements:
            <list type="table"><listheader><term>Recognition module</term><description>Character filters supported</description></listheader><item><term><see cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule">OcrZoneRecognitionModule.OmniFontMText</see></term><description><see cref="T:Leadtools.Forms.Ocr.OcrZoneCharacterFilters">OcrZoneCharacterFilters.All</see>, <see cref="T:Leadtools.Forms.Ocr.OcrZoneCharacterFilters">OcrZoneCharacterFilters.Digit</see> and
            <see cref="T:Leadtools.Forms.Ocr.OcrZoneCharacterFilters">OcrZoneCharacterFilters.Alpha</see></description></item><item><term><see cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule">OcrZoneRecognitionModule.OmniFontMor</see></term><description>All filters</description></item><item><term><see cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule">OcrZoneRecognitionModule.DotMatrix</see></term><description>All filters</description></item><item><term><see cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule">OcrZoneRecognitionModule.Omr</see></term><description>None (All ignored)</description></item><item><term><see cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule">OcrZoneRecognitionModule.IcrNumeral</see></term><description><see cref="T:Leadtools.Forms.Ocr.OcrZoneCharacterFilters">OcrZoneCharacterFilters.All</see>, <see cref="T:Leadtools.Forms.Ocr.OcrZoneCharacterFilters">OcrZoneCharacterFilters.Digit</see>,
            <see cref="T:Leadtools.Forms.Ocr.OcrZoneCharacterFilters">OcrZoneCharacterFilters.Punctuation</see> and <see cref="T:Leadtools.Forms.Ocr.OcrZoneCharacterFilters">OcrZoneCharacterFilters.Miscellaneous</see></description></item><item><term><see cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule">OcrZoneRecognitionModule.IcrCharacter</see></term><description>All filters</description></item><item><term><see cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule">OcrZoneRecognitionModule.MatrixMatching</see></term><description>All filters</description></item><item><term><see cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule">OcrZoneRecognitionModule.OmniFontPlus2WayVoting</see></term><description>All filters</description></item><item><term><see cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule">OcrZoneRecognitionModule.OmniFontFireWorx</see></term><description>All filters</description></item><item><term><see cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule">OcrZoneRecognitionModule.OmniFontPlus3WayVoting</see></term><description>All filters</description></item></list></para>
      </remarks>
      <example> For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see>.</example>
      <docaddon>yes</docaddon>
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPage~AutoZone.html">IOcrPage.AutoZone</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettingsPlus.html">LEADTOOLS OCR Plus Engine Settings</seealso>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneCharacterFilters.None">
      <summary>
            No character filters.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneCharacterFilters.Digit">
      <summary>
            Recognition of numerals only. For example: "3" (Digit Three).
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneCharacterFilters.Uppercase">
      <summary>
            Recognition of uppercase letters only, including accented ones. For example: "A" (Capital A).
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneCharacterFilters.Lowercase">
      <summary>
            Recognition of lowercase letters only including accented ones. For example: "a" (Lowercase a).
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneCharacterFilters.Punctuation">
      <summary>
            Recognition of punctuation signs only. For example: "!" (Exclamation Mark).
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneCharacterFilters.Miscellaneous">
      <summary>
            Recognition of other miscellaneous characters only. For example: "+" (Plus sign).
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneCharacterFilters.Plus">
      <summary>
            Enables the use of the "FilterPlus" characters. The FilterPlus characters are added after any filtering. For more information, refer to <a href="ms-help://Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettingsPlus.html">LEADTOOLS OCR Plus Engine Settings</a> and <a href="ms-help://Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettingsProfessional.html">LEADTOOLS OCR Professional Engine Settings</a>.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneCharacterFilters.All">
      <summary>
            All characters. Since all elements are enabled, there is no filtering. This a combination of Digit (| Uppercase | Lowercase | Punctuation | Miscellaneous).
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneCharacterFilters.Alpha">
      <summary>
            Upper and lowercase letters only. This is a combination of (Uppercase | Lowercase).
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneCharacterFilters.Numbers">
      <summary>
            Digits plus the "FilterPlus" characters This is a combination of (Digit | Plus).
            </summary>
    </member>
    <member name="T:Leadtools.Forms.Ocr.IOcrPageCollection">
      <summary>
            The pages of an OCR document object.
            </summary>
      <remarks>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" /> holds the pages currently added into an OCR document (<see cref="T:Leadtools.Forms.Ocr.IOcrDocument" />). <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> through the
            <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.Pages">IOcrDocument.Pages</see> holds a collection of <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> object. Each of these <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />
            objects contains the raster image used to create it (the image used when the page is loaded or added) and a group of OCR zones for the page either added manually or through
            auto-zoning.</para>
        <para>The <see cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" /> interface implements standard .NET <see cref="T:System.Collections.Generic.ICollection`1" />, <see cref="T:System.Collections.Generic.IList`1" />, and <see cref="T:System.Collections.Generic.IEnumerable`1" /> interfaces
            and hence, you can use the member of these interfaces to add, remove, get, set and iterate through the different pages of the OCR document.</para>
        <para>The following list contains the major functionality of the <see cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" /> interface:
            <list type="bullet"><item><description>
            Add new pages to an OCR document from raster image files. These files can be in disk files, a .NET stream (memory or otherwise) or even in a remote URL. The following table lists
            all the page addition method groups:
                 <list type="table"><listheader><term>Methods</term><description>Description</description></listheader><item><term><a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPageCollection~AddPage.html">AddPage</a></term><description>Adds a single page from a <see cref="T:Leadtools.RasterImage" />, DIB or an image file in disk file, .NET stream, remote URL.</description></item><item><term><a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPageCollection~AddPages.html">AddPages</a></term><description>Adds multiple pages from a multi-page <see cref="T:Leadtools.RasterImage" /> or an image file in disk file, .NET stream or remote URL.</description></item><item><term><a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPageCollection~InsertPage.html">InsertPage</a></term><description>Inserts into a specific location a single page from a <see cref="T:Leadtools.RasterImage" />, DIB or an image file in disk file, .NET stream, remote URL.</description></item><item><term><a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPageCollection~InsertPages.html">InsertPages</a></term><description>Inserts into a specific location multiple pages from a multi-page <see cref="T:Leadtools.RasterImage" /> or an image file in disk file, .NET stream or remote URL.</description></item></list></description></item><item><description>
            Export pages from the OCR document to raster image files. You can save the pages in disk files, .NET streams or as a single or multi-page <see cref="T:Leadtools.RasterImage" /> object with any of the
            file formats supported by LEADTOOLS. The following table list all the page exporting method groups:
                 <list type="table"><listheader><term>Methods</term><description>Description</description></listheader><item><term><a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPageCollection~ExportPage.html">ExportPage</a></term><description>Saves a single page from the OCR document to a <see cref="T:Leadtools.RasterImage" /> object, an image file in disk file or a .NET stream.</description></item><item><term><a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPageCollection~ExportPages.html">ExportPages</a></term><description>Saves multiple pages from the OCR document to a multi-page <see cref="T:Leadtools.RasterImage" /> object,  an image file in disk file or a .NET stream.</description></item></list></description></item><item><description>
            Perform auto image preprocessing on a single or multiple pages in the OCR document through <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPageCollection~AutoPreprocess.html">AutoPreprocess</a>. These methods
            provide a shortcut for iterating through the pages in the collection and calling <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoPreprocess(Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoPreprocess</see> on each page.
            </description></item><item><description>
            Perform auto-zoning on a single or multiple pages in the OCR document through <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPageCollection~AutoZone.html">AutoZone</a>. These methods
            provide a shortcut for iterating through the pages in the collection and calling <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPage~AutoZone.html">IOcrPage.AutoZone</a> on each page.
            </description></item><item><description>
            Update the type of text in the zones of on a single or multiple pages in the OCR document through <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPageCollection~UpdateFillMethod.html">UpdateFillMethod</a>. These
            methods provide a shortcut for iterating through the pages in the collection and calling <see cref="M:Leadtools.Forms.Ocr.IOcrPage.UpdateFillMethod">IOcrPage.UpdateFillMethod</see> on each page.
            </description></item><item><description>
            Recognize a single or multiple pages in the OCR document through <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPageCollection~Recognize.html">Recognize</a>. These
            methods provide a shortcut for iterating through the pages in the collection and calling <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see> on each page.
            </description></item></list></para>
        <para>The LEADTOOLS OCR engine supports pages of dots per inch (DPI) values of 150 and greater. If you try to add a page with a DPI of less than 150 then the
            engine might be able to recognize any data from this page.</para>
        <para>Note, the LEADTOOLS Plus OCR engine does not support image size greater than A3 paper size (11.7 by 16.5 inches at 300 dpi). Attempting to add an image
            that has a size greater than A3 will result in an error. For document of size greater than the maximum allowed, you must first resize the image before
            adding it to the LEADTOOLS Plus OCR engine. The Professional and Advantage engines do not have a restriction on the image size.</para>
      </remarks>
      <example>
        <para>This example will load multiple-pages into an OCR document and saves the OCR result into a multiple-page PDF file.</para>
        <code lang="VB">   Public Sub PageCollectionExamples()
      ' Unlock the support needed for LEADTOOLS Plus OCR engine
      RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here")
      RasterSupport.Unlock(RasterSupportType.OcrPlus, "Replace with your own key here")
      RasterSupport.Unlock(RasterSupportType.OcrPlusPdfLeadOutput, "Replace with your own key here")
      ' For this example, we need a multi-page TIF file.
      ' Create a muti-page TIF from Ocr1.tif, Ocr2.tif, Ocr3.tif and Ocr4.tif
      Dim imagesPath As String = LeadtoolsExamples.Common.ImagesPath.Path + ""
      Dim tifFileName As String = Path.Combine(imagesPath, "Ocr.tif")
      If (File.Exists(tifFileName)) Then
         File.Delete(tifFileName)
      End If

      RasterCodecs.Startup()
      Using codecs As New RasterCodecs()
         For i As Integer = 0 To 3
            Dim pageFileName As String = Path.Combine(imagesPath, String.Format("Ocr{0}.tif", i + 1))
            Using image As RasterImage = codecs.Load(pageFileName)
               codecs.Save(image, tifFileName, RasterImageFormat.CcittGroup4, 1, 1, 1, -1, CodecsSavePageMode.Append)
            End Using
         Next
      End Using
      RasterCodecs.Shutdown()

      Dim pdfFileName As String = LeadtoolsExamples.Common.ImagesPath.Path + "Ocr.pdf"

      ' Create an instance of the engine
      Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, False)
         ' Start the engine using default parameters
         ocrEngine.Startup(Nothing, Nothing, Nothing, Nothing)

         ' Create an OCR document
         Using ocrDocument As IOcrDocument = ocrEngine.DocumentManager.CreateDocument()
            ' Load all the pages of the multi-page tif file we created into the document
            ocrDocument.Pages.AddPages(tifFileName, 1, -1, Nothing)
            Console.WriteLine("{0} pages added to the document", ocrDocument.Pages.Count)

            ' Auto-zone
            ocrDocument.Pages.AutoZone(Nothing)

            ' Recognize
            ocrDocument.Pages.Recognize(Nothing)

            ' Save
            ocrDocument.Save(pdfFileName, DocumentFormat.Pdf, Nothing)
         End Using


         ' Shutdown the engine
         ' Note: calling Dispose will also automatically shutdown the engine if it has been started
         ocrEngine.Shutdown()
      End Using
   End Sub</code>
        <code lang="CS">      public void PageCollectionExamples()
      {
         // Unlock the support needed for LEADTOOLS Plus OCR engine
         RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here");
         RasterSupport.Unlock(RasterSupportType.OcrPlus, "Replace with your own key here");
         RasterSupport.Unlock(RasterSupportType.OcrPlusPdfLeadOutput, "Replace with your own key here");
         // For this example, we need a multi-page TIF file.
         // Create a muti-page TIF from Ocr1.tif, Ocr2.tif, Ocr3.tif and Ocr4.tif
         string imagesPath = LeadtoolsExamples.Common.ImagesPath.Path;
         string tifFileName = Path.Combine(imagesPath, "Ocr.tif");
         if(File.Exists(tifFileName))
            File.Delete(tifFileName);

         RasterCodecs.Startup();
         using(RasterCodecs codecs = new RasterCodecs())
         {
            for(int i = 0; i &lt; 4; i++)
            {
               string pageFileName = Path.Combine(imagesPath, string.Format("Ocr{0}.tif", i + 1));
               using(RasterImage image = codecs.Load(pageFileName))
                  codecs.Save(image, tifFileName, RasterImageFormat.CcittGroup4, 1, 1, 1, -1, CodecsSavePageMode.Append);
            }
         }
         RasterCodecs.Shutdown();

         string pdfFileName = LeadtoolsExamples.Common.ImagesPath.Path + "Ocr.pdf";

         // Create an instance of the engine
         using(IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, false))
         {
            // Start the engine using default parameters
            ocrEngine.Startup(null, null, null, null);

            // Create an OCR document
            using(IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument())
            {
               // Load all the pages of the multi-page tif file we created into the form
               ocrDocument.Pages.AddPages(tifFileName, 1, -1, null);
               Console.WriteLine("{0} pages added to the document", ocrDocument.Pages.Count);

               // Auto-zone
               ocrDocument.Pages.AutoZone(null);

                  // Recognize
               ocrDocument.Pages.Recognize(null);

               // Save
               ocrDocument.Save(pdfFileName, DocumentFormat.Pdf, null);
            }

            // Shutdown the engine
            // Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown();
         }
      }</code>
        <!--IOcrPageCollection-->
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPage" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Leadtools~Topics.SummaryOfAllSupportedImageFileFormats.html">Summary of All Supported Image File Formats</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.WorkingWithOcrPages.html">Working with OCR Pages</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPageCollection.AddPage(Leadtools.RasterImage,Leadtools.Forms.Ocr.OcrProgressCallback)">
      <summary>
            Adds a page from a <see cref="T:Leadtools.RasterImage" /> object.
            </summary>
      <param name="image">The <see cref="T:Leadtools.RasterImage" /> object containing the page to add.</param>
      <param name="callback">Optional callback to show operation progress.</param>
      <returns>The <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> object that define the newly added page.</returns>
      <remarks>
        <para>This method copies the <see cref="T:Leadtools.RasterImage" /> object image data into the newly created <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />. Therefore, after this method returns there is no
            relationship between <paramref name="image" /> and the <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> inside the OCR document. For example, if you do not need the <paramref name="image" /> object
            after calling this method, you should dispose it after this method returns.</para>
        <para>This method guarantees that no changes will be made to <paramref name="image" />.</para>
        <para>If <paramref name="image" /> contains more than one page, then the current page as defined in <see cref="P:Leadtools.RasterImage.Page">RasterImage.Page</see> is the one added to the OCR document.</para>
        <para>To add all or specific range of the pages of a multi-page <see cref="T:Leadtools.RasterImage" /> object to the OCR document, either iterate through the pages by changing to the value
            of <see cref="P:Leadtools.RasterImage.Page">RasterImage.Page</see> to go from 1 to <see cref="P:Leadtools.RasterImage.PageCount">RasterImage.PageCount</see> or use the
            <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.AddPages(Leadtools.RasterImage,System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrProgressCallback)">AddPages(RasterImage image, int imageFirstPageNumber, int imageLastPageNumber, OcrProgressCallback callback)</see> method.</para>
        <para>This method will add the page to the end of the collection if you already have pages in this <see cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />.</para>
        <para>You can use the <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see> to show the operation progress or to abort it. For more information and an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see>.</para>
        <para>The LEADTOOLS OCR engine supports pages of dots per inch (DPI) values of 150 and greater. If you try to add a page with a DPI of less than 150 then the
            engine might be able to recognize any data from this page.</para>
        <para>Note, the LEADTOOLS Plus OCR engine does not support image size greater than A3 paper size (11.7 by 16.5 inches at 300 dpi). Attempting to add an image
            that has a size greater than A3 will result in an error. For document of size greater than the maximum allowed, you must first resize the image before
            adding it to the LEADTOOLS Plus OCR engine. The Professional and Advantage engines do not have a restriction on the image size.</para>
      </remarks>
      <example>
        <para>This example will load a <see cref="T:Leadtools.RasterImage" /> object, perform image cleanup on it using LEADTOOLS then add it to an OCR document</para>
        <code lang="VB">   Public Sub AddPageOcrExample()
      ' Unlock the support needed for LEADTOOLS Plus OCR engine
      RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here")
      RasterSupport.Unlock(RasterSupportType.OcrPlus, "Replace with your own key here")
      RasterSupport.Unlock(RasterSupportType.OcrPlusPdfLeadOutput, "Replace with your own key here")
      ' For this example, we will use the Clean.tif image. This image is skewed so we will do that using the
      ' LEADTOOLS Deskew command before we add it to the document
      Dim tifFileName As String = LeadtoolsExamples.Common.ImagesPath.Path + "Clean.tif"
      Dim pdfFileName As String = LeadtoolsExamples.Common.ImagesPath.Path + "Clean.pdf"

      ' Load the TIF file
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()

      Dim image As RasterImage = codecs.Load(tifFileName)

      ' Check if the image needs to be deskewed
      Dim deskewCommand As New DeskewCommand()
      deskewCommand.FillColor = RasterColor.FromKnownColor(RasterKnownColor.White)
      deskewCommand.Flags = DeskewCommandFlags.ReturnAngleOnly
      deskewCommand.Run(image)

      If (deskewCommand.Angle &lt;&gt; 0) Then
         ' Deskew it
         deskewCommand.Flags = DeskewCommandFlags.RotateLinear
         deskewCommand.Run(image)
      End If

      ' Create an instance of the engine
      Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, False)
         ' Start the engine using default parameters
         ' Since we have a RasterCodecs object, re-use it in the OCR engine. Although
         ' this demo will not use it, it is always a good practice
         ocrEngine.Startup(codecs, Nothing, Nothing, Nothing)

         ' Create an OCR document
         Using ocrDocument As IOcrDocument = ocrEngine.DocumentManager.CreateDocument()
            ' Add the image
            ocrDocument.Pages.AddPage(image, Nothing)

            ' We do not need the image anymore
            image.Dispose()

            ' Recognize
            ocrDocument.Pages.Recognize(Nothing)

            ' Save
            ocrDocument.Save(pdfFileName, DocumentFormat.Pdf, Nothing)
         End Using

         ' Shutdown the engine
         ' Note: calling Dispose will also automatically shutdown the engine if it has been started
         ocrEngine.Shutdown()
      End Using

      codecs.Dispose()
      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void AddPageOcrExample()
      {
         // Unlock the support needed for LEADTOOLS Plus OCR engine
         RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here");
         RasterSupport.Unlock(RasterSupportType.OcrPlus, "Replace with your own key here");
         RasterSupport.Unlock(RasterSupportType.OcrPlusPdfLeadOutput, "Replace with your own key here");
         // For this example, we will use the Clean.tif image. This image is skewed so we will do that using the
         // LEADTOOLS Deskew command before we add it to the document
         string tifFileName = LeadtoolsExamples.Common.ImagesPath.Path + "Clean.tif";
         string pdfFileName = LeadtoolsExamples.Common.ImagesPath.Path + "Clean.pdf";

         // Load the TIF file
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();

         RasterImage image = codecs.Load(tifFileName);

         // Check if the image needs to be deskewed
         DeskewCommand deskewCommand = new DeskewCommand();
         deskewCommand.FillColor = RasterColor.FromKnownColor(RasterKnownColor.White);
         deskewCommand.Flags = DeskewCommandFlags.ReturnAngleOnly;
         deskewCommand.Run(image);

         if(deskewCommand.Angle != 0)
         {
            // Deskew it
            deskewCommand.Flags = DeskewCommandFlags.RotateLinear;
            deskewCommand.Run(image);
         }

         // Create an instance of the engine
         using(IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, false))
         {
            // Start the engine using default parameters
            // Since we have a RasterCodecs object, re-use it in the OCR engine. Although
            // this demo will not use it, it is always a good practice
            ocrEngine.Startup(codecs, null, null, null);

            // Create an OCR document
            using(IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument())
            {
               // Add the image
               ocrDocument.Pages.AddPage(image, null);

               // We do not need the image anymore
               image.Dispose();

               // Recognize
               ocrDocument.Pages.Recognize(null);

               // Save
               ocrDocument.Save(pdfFileName, DocumentFormat.Pdf, null);
            }

            // Shutdown the engine
            // Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown();
         }

         codecs.Dispose();
         RasterCodecs.Shutdown();
      }</code>
        <!--IOcrPageCollection.AddPage(RasterImage)-->
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPage" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPageCollection.AddPage(System.String,Leadtools.Forms.Ocr.OcrProgressCallback)">
      <summary>
            Adds a page from a disk file.
            </summary>
      <param name="fileName">The name of the file containing the image.</param>
      <param name="callback">Optional callback to show operation progress.</param>
      <returns>The <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> object that define the newly added page.</returns>
      <remarks>
        <para>This method will load the first page from a raster image file on disk and adds it to the OCR document.</para>
        <para>To add all or specific range of the pages of a multi-page image file to the OCR document, use the
            <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.AddPages(System.String,System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrProgressCallback)">AddPages(string fileName, int imageFirstPageNumber, int imageLastPageNumber, OcrProgressCallback callback)</see> method.</para>
        <para>This method will add the page to the end of the collection if you already have pages in this <see cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />.</para>
        <para>If you passed a <see cref="T:Leadtools.Codecs.RasterCodecs" /> object to the <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">IOcrEngine.Startup</see>, then this method will use the same <see cref="T:Leadtools.Codecs.RasterCodecs" />
            object to load the raster image file. If you did not pass a <see cref="T:Leadtools.Codecs.RasterCodecs" /> object, the engine will create an instance the first time one of the add or export page
            methods is called.</para>
        <para>The image file in <paramref name="fileName" /> can be any of the file formats supported by LEADTOOLS. For more information, refer to
            <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Leadtools~Topics.SummaryOfAllSupportedImageFileFormats.html">Summary of All Supported Image File Formats</a>.</para>
        <para>You can use the <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see> to show the operation progress or to abort it. For more information and an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see>.</para>
        <para>The LEADTOOLS OCR engine supports pages of dots per inch (DPI) values of 150 and greater. If you try to add a page with a DPI of less than 150 then the
            engine might be able to recognize any data from this page.</para>
        <para>Note, the LEADTOOLS Plus OCR engine does not support image size greater than A3 paper size (11.7 by 16.5 inches at 300 dpi). Attempting to add an image
            that has a size greater than A3 will result in an error. For document of size greater than the maximum allowed, you must first resize the image before
            adding it to the LEADTOOLS Plus OCR engine. The Professional and Advantage engines do not have a restriction on the image size.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPage" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Leadtools~Topics.SummaryOfAllSupportedImageFileFormats.html">Summary of All Supported Image File Formats</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPageCollection.AddPage(System.IO.Stream,Leadtools.Forms.Ocr.OcrProgressCallback)">
      <summary>
            Adds a page from a disk file.
            </summary>
      <param name="stream">A .NET stream containing the image.</param>
      <param name="callback">Optional callback to show operation progress.</param>
      <returns>The <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> object that define the newly added page.</returns>
      <remarks>
        <para>This method will load the first page from a raster image stored inside a .NET stream and adds it to the OCR document.</para>
        <para>To add all or specific range of the pages of a multi-page image file stored in a .NET stream to the OCR document, use the
            <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.AddPages(System.IO.Stream,System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrProgressCallback)">AddPages(Stream stream, int imageFirstPageNumber, int imageLastPageNumber, OcrProgressCallback callback)</see> method.</para>
        <para>This method will add the page to the end of the collection if you already have pages in this <see cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />.</para>
        <para>If you passed a <see cref="T:Leadtools.Codecs.RasterCodecs" /> object to the <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">IOcrEngine.Startup</see>, then this method will use the same <see cref="T:Leadtools.Codecs.RasterCodecs" />
            object to load the raster image file. If you did not pass a <see cref="T:Leadtools.Codecs.RasterCodecs" /> object, the engine will create an instance the first time one of the add or export page
            methods is called.</para>
        <para>The image file in <paramref name="stream" /> can be any of the file formats supported by LEADTOOLS. For more information, refer to
            <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Leadtools~Topics.SummaryOfAllSupportedImageFileFormats.html">Summary of All Supported Image File Formats</a>.</para>
        <para>You can use the <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see> to show the operation progress or to abort it. For more information and an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see>.</para>
        <para>The LEADTOOLS OCR engine supports pages of dots per inch (DPI) values of 150 and greater. If you try to add a page with a DPI of less than 150 then the
            engine might be able to recognize any data from this page.</para>
        <para>Note, the LEADTOOLS Plus OCR engine does not support image size greater than A3 paper size (11.7 by 16.5 inches at 300 dpi). Attempting to add an image
            that has a size greater than A3 will result in an error. For document of size greater than the maximum allowed, you must first resize the image before
            adding it to the LEADTOOLS Plus OCR engine. The Professional and Advantage engines do not have a restriction on the image size.</para>
      </remarks>
      <example>
        <para>This example will add a raster image stored in a memory stream to the OCR engine.</para>
        <code lang="VB">   Public Sub AddPageFromStreamExample()
      ' Unlock the support needed for LEADTOOLS Plus OCR engine
      RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here")
      RasterSupport.Unlock(RasterSupportType.OcrPlus, "Replace with your own key here")
      RasterSupport.Unlock(RasterSupportType.OcrPlusPdfLeadOutput, "Replace with your own key here")
      Dim tifFileName As String = LeadtoolsExamples.Common.ImagesPath.Path + "Ocr1.tif"
      Dim pdfFileName As String = LeadtoolsExamples.Common.ImagesPath.Path + "Ocr1.pdf"

      ' Load the TIF image into a memory stream
      Dim ms As New MemoryStream()

      Using fs As FileStream = File.OpenRead(tifFileName)
         Dim bufferSize As Integer = 1024 * 4
         Dim buffer(bufferSize - 1) As Byte
         Dim bytes As Integer = 0
         Do
            bytes = fs.Read(buffer, 0, bufferSize)
            If (bytes &gt; 0) Then
               ms.Write(buffer, 0, bytes)
            End If
         Loop While (bytes &gt; 0)
      End Using

      ' Reset the stream position
      ms.Position = 0

      ' Create an instance of the engine
      Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, False)
         ' Start the engine using default parameters
         ocrEngine.Startup(Nothing, Nothing, Nothing, Nothing)

         ' Create an OCR document
         Using ocrDocument As IOcrDocument = ocrEngine.DocumentManager.CreateDocument()
            ' Add the image
            ocrDocument.Pages.AddPage(ms, Nothing)

            ' We do not need the stream anymore
            ms.Dispose()

            ' Recognize
            ocrDocument.Pages.Recognize(Nothing)

            ' Save
            ocrDocument.Save(pdfFileName, DocumentFormat.Pdf, Nothing)
         End Using

         ' Shutdown the engine
         ' Note: calling Dispose will also automatically shutdown the engine if it has been started
         ocrEngine.Shutdown()
      End Using
   End Sub</code>
        <code lang="CS">      public void AddPageFromStreamExample()
      {
         // Unlock the support needed for LEADTOOLS Plus OCR engine
         RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here");
         RasterSupport.Unlock(RasterSupportType.OcrPlus, "Replace with your own key here");
         RasterSupport.Unlock(RasterSupportType.OcrPlusPdfLeadOutput, "Replace with your own key here");
         string tifFileName = LeadtoolsExamples.Common.ImagesPath.Path + "Ocr1.tif";
         string pdfFileName = LeadtoolsExamples.Common.ImagesPath.Path + "Ocr1.pdf";

         // Load the TIF image into a memory stream
         MemoryStream ms = new MemoryStream();

         using(FileStream fs = File.OpenRead(tifFileName))
         {
            const int bufferSize = 1024 * 4;
            byte[] buffer = new byte[bufferSize];
            int bytes = 0;
            do
            {
               bytes = fs.Read(buffer, 0, bufferSize);
               if(bytes &gt; 0)
                  ms.Write(buffer, 0, bytes);
            }
            while(bytes &gt; 0);
         }

         // Reset the stream position
         ms.Position = 0;

         // Create an instance of the engine
         using(IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, false))
         {
            // Start the engine using default parameters
            ocrEngine.Startup(null, null, null, null);

            // Create an OCR document
            using(IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument())
            {
               // Add the image
               ocrDocument.Pages.AddPage(ms, null);

               // We do not need the stream anymore
               ms.Dispose();

               // Recognize
               ocrDocument.Pages.Recognize(null);

               // Save
               ocrDocument.Save(pdfFileName, DocumentFormat.Pdf, null);
            }

            // Shutdown the engine
            // Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown();
         }
      }</code>
        <!--IOcrPageCollection.AddPage(Stream)-->
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPage" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Leadtools~Topics.SummaryOfAllSupportedImageFileFormats.html">Summary of All Supported Image File Formats</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPageCollection.AddPage(System.Uri,Leadtools.Forms.Ocr.OcrProgressCallback)">
      <summary>
            Adds a page from a URI.
            </summary>
      <param name="uri">A URI containing the path to the image.</param>
      <param name="callback">Optional callback to show operation progress.</param>
      <returns>The <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> object that define the newly added page.</returns>
      <remarks>
        <para>This method will load the first page from a raster image stored in a URI and adds it to the OCR document.</para>
        <para>The URI can point to a file in a remote HTTP server, UNC or FTP.</para>
        <para>To add all or specific range of the pages of a multi-page image file stored in a URI to the OCR document, use the
            <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.AddPages(System.Uri,System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrProgressCallback)">AddPages(Uri uri, int imageFirstPageNumber, int imageLastPageNumber, OcrProgressCallback callback)</see> method.</para>
        <para>This method will add the page to the end of the collection if you already have pages in this <see cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />.</para>
        <para>If you passed a <see cref="T:Leadtools.Codecs.RasterCodecs" /> object to the <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">IOcrEngine.Startup</see>, then this method will use the same <see cref="T:Leadtools.Codecs.RasterCodecs" />
            object to load the raster image file. If you did not pass a <see cref="T:Leadtools.Codecs.RasterCodecs" /> object, the engine will create an instance the first time one of the add or export page
            methods is called.</para>
        <para>The image file in <paramref name="uri" /> can be any of the file formats supported by LEADTOOLS. For more information, refer to
            <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Leadtools~Topics.SummaryOfAllSupportedImageFileFormats.html">Summary of All Supported Image File Formats</a>.</para>
        <para>You can use the <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see> to show the operation progress or to abort it. For more information and an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see>.</para>
        <para>The LEADTOOLS OCR engine supports pages of dots per inch (DPI) values of 150 and greater. If you try to add a page with a DPI of less than 150 then the
            engine might be able to recognize any data from this page.</para>
        <para>Note, the LEADTOOLS Plus OCR engine does not support image size greater than A3 paper size (11.7 by 16.5 inches at 300 dpi). Attempting to add an image
            that has a size greater than A3 will result in an error. For document of size greater than the maximum allowed, you must first resize the image before
            adding it to the LEADTOOLS Plus OCR engine. The Professional and Advantage engines do not have a restriction on the image size.</para>
      </remarks>
      <example>
        <para>This example will add a raster image stored in an HTTP location to an OCR document.</para>
        <code lang="VB">   Public Sub AddPageFromUriExample()
      ' Unlock the support needed for LEADTOOLS Plus OCR engine
      RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here")
      RasterSupport.Unlock(RasterSupportType.OcrPlus, "Replace with your own key here")
      RasterSupport.Unlock(RasterSupportType.OcrPlusPdfLeadOutput, "Replace with your own key here")
      ' Change this URI to the location of the image you want to load
      Dim uri As New Uri("http:'localhost/MyImages/Ocr1.tif")
      Dim pdfFileName As String = LeadtoolsExamples.Common.ImagesPath.Path + "Ocr1.pdf"

      ' Create an instance of the engine
      Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, False)
         ' Start the engine using default parameters
         ocrEngine.Startup(Nothing, Nothing, Nothing, Nothing)

         ' Create an OCR document
         Using ocrDocument As IOcrDocument = ocrEngine.DocumentManager.CreateDocument()
            ' Add the image
            ocrDocument.Pages.AddPage(uri, Nothing)

            ' Recognize
            ocrDocument.Pages.Recognize(Nothing)

            ' Save
            ocrDocument.Save(pdfFileName, DocumentFormat.Pdf, Nothing)
         End Using

         ' Shutdown the engine
         ' Note: calling Dispose will also automatically shutdown the engine if it has been started
         ocrEngine.Shutdown()
      End Using
   End Sub</code>
        <code lang="CS">      public void AddPageFromUriExample()
      {
         // Unlock the support needed for LEADTOOLS Plus OCR engine
         RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here");
         RasterSupport.Unlock(RasterSupportType.OcrPlus, "Replace with your own key here");
         RasterSupport.Unlock(RasterSupportType.OcrPlusPdfLeadOutput, "Replace with your own key here");
         // Change this URI to the location of the image you want to load
         Uri uri = new Uri(@"http://localhost/MyImages/Ocr1.tif");
         string pdfFileName = LeadtoolsExamples.Common.ImagesPath.Path + "Ocr1.pdf";

         // Create an instance of the engine
         using(IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, false))
         {
            // Start the engine using default parameters
            ocrEngine.Startup(null, null, null, null);

            // Create an OCR document
            using(IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument())
            {
               // Add the image
               ocrDocument.Pages.AddPage(uri, null);

               // Recognize
               ocrDocument.Pages.Recognize(null);

               // Save
               ocrDocument.Save(pdfFileName, DocumentFormat.Pdf, null);
            }

            // Shutdown the engine
            // Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown();
         }
      }</code>
        <!--IOcrPageCollection.AddPage(Uri)-->
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPage" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Leadtools~Topics.SummaryOfAllSupportedImageFileFormats.html">Summary of All Supported Image File Formats</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPageCollection.AddDib(System.IntPtr,Leadtools.Forms.Ocr.OcrProgressCallback)">
      <summary>
            Adds a page from a DIB (Device-independent bitmap).
            </summary>
      <param name="dib">An unmanaged pointer to the DIB (device-independent bitmap).</param>
      <param name="callback">Optional callback to show operation progress.</param>
      <returns>The <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> object that define the newly added page.</returns>
      <remarks>
        <para>This method will add a device independent bitmap (DIB) stored in an unmanaged memory pointer to the OCR document.</para>
        <para>This method will add the page to the end of the collection if you already have pages in this <see cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />.</para>
        <para>You can use the <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see> to show the operation progress or to abort it. For more information and an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see>.</para>
        <para>The LEADTOOLS OCR engine supports pages of dots per inch (DPI) values of 150 and greater. If you try to add a page with a DPI of less than 150 then the
            engine might be able to recognize any data from this page.</para>
        <para>Note, the LEADTOOLS Plus OCR engine does not support image size greater than A3 paper size (11.7 by 16.5 inches at 300 dpi). Attempting to add an image
            that has a size greater than A3 will result in an error. For document of size greater than the maximum allowed, you must first resize the image before
            adding it to the LEADTOOLS Plus OCR engine. The Professional and Advantage engines do not have a restriction on the image size.</para>
      </remarks>
      <example>
        <para>This example will add a raster image stored in an HTTP location to an OCR document</para>
        <code lang="VB">   Public Sub AddPageFromDibExample()
      ' Unlock the support needed for LEADTOOLS Plus OCR engine
      RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here")
      RasterSupport.Unlock(RasterSupportType.OcrPlus, "Replace with your own key here")
      RasterSupport.Unlock(RasterSupportType.OcrPlusPdfLeadOutput, "Replace with your own key here")
      Dim tifFileName As String = LeadtoolsExamples.Common.ImagesPath.Path + "Ocr1.tif"
      Dim bmpFileName As String = LeadtoolsExamples.Common.ImagesPath.Path + "Ocr1.bmp"
      Dim pdfFileName As String = LeadtoolsExamples.Common.ImagesPath.Path + "Ocr1.pdf"

      ' Get a DIB
      ' In this example, we will save the TIF file as BMP, then load it without the BITMAPFILEHEADER structure
      ' The result is a valid Windows DIB
      RasterCodecs.Startup()

      Using codecs As New RasterCodecs()
         codecs.Convert(tifFileName, bmpFileName, RasterImageFormat.Bmp, 0, 0, 1, Nothing)
      End Using

      RasterCodecs.Shutdown()

      ' From MSDN
      Dim bitmapFileHeaderStructSize As Integer = 14
      Dim dib As IntPtr = IntPtr.Zero

      Using fs As FileStream = File.OpenRead(bmpFileName)
         ' Allocate the DIB
         Dim dibSize As Integer = CType(fs.Length - bitmapFileHeaderStructSize, Integer)
         dib = Marshal.AllocHGlobal(dibSize)
         Dim dibOffset As Integer = 0

         ' Now read it
         fs.Seek(bitmapFileHeaderStructSize, SeekOrigin.Begin)

         Dim bufferSize As Integer = 1024 * 4
         Dim buffer(bufferSize - 1) As Byte
         Dim bytes As Integer = 0
         Do
            bytes = fs.Read(buffer, 0, bufferSize)
            If (bytes &gt; 0) Then
               Dim dibPtr As New IntPtr(dib.ToInt64() + dibOffset)
               Marshal.Copy(buffer, 0, dibPtr, bytes)
               dibOffset += bytes
            End If

         Loop While (bytes &gt; 0)
      End Using

      ' Create an instance of the engine
      Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, False)
         ' Start the engine using default parameters
         ocrEngine.Startup(Nothing, Nothing, Nothing, Nothing)

         ' Create an OCR document
         Using ocrDocument As IOcrDocument = ocrEngine.DocumentManager.CreateDocument()
            ' Add the image
            ocrDocument.Pages.AddDib(dib, Nothing)

            ' Free the DIB since we do not need it anymore
            Marshal.FreeHGlobal(dib)

            ' Recognize
            ocrDocument.Pages.Recognize(Nothing)

            ' Save
            ocrDocument.Save(pdfFileName, DocumentFormat.Pdf, Nothing)
         End Using

         ' Shutdown the engine
         ' Note: calling Dispose will also automatically shutdown the engine if it has been started
         ocrEngine.Shutdown()
      End Using
   End Sub</code>
        <code lang="CS">      public void AddPageFromDibExample()
      {
         // Unlock the support needed for LEADTOOLS Plus OCR engine
         RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here");
         RasterSupport.Unlock(RasterSupportType.OcrPlus, "Replace with your own key here");
         RasterSupport.Unlock(RasterSupportType.OcrPlusPdfLeadOutput, "Replace with your own key here");
         string tifFileName = LeadtoolsExamples.Common.ImagesPath.Path + "Ocr1.tif";
         string bmpFileName = LeadtoolsExamples.Common.ImagesPath.Path + "Ocr1.bmp";
         string pdfFileName = LeadtoolsExamples.Common.ImagesPath.Path + "Ocr1.pdf";

         // Get a DIB
         // In this example, we will save the TIF file as BMP, then load it without the BITMAPFILEHEADER structure
         // The result is a valid Windows DIB
         RasterCodecs.Startup();

         using(RasterCodecs codecs = new RasterCodecs())
            codecs.Convert(tifFileName, bmpFileName, RasterImageFormat.Bmp, 0, 0, 1, null);

         RasterCodecs.Shutdown();

         // From MSDN
         const int bitmapFileHeaderStructSize = 14;
         IntPtr dib = IntPtr.Zero;

         using(FileStream fs = File.OpenRead(bmpFileName))
         {
            // Allocate the DIB
            int dibSize = (int)fs.Length - bitmapFileHeaderStructSize;
            dib = Marshal.AllocHGlobal(dibSize);
            int dibOffset = 0;

            // Now read it
            fs.Seek(bitmapFileHeaderStructSize, SeekOrigin.Begin);

            const int bufferSize = 1024 * 4;
            byte[] buffer = new byte[bufferSize];
            int bytes = 0;
            do
            {
               bytes = fs.Read(buffer, 0, bufferSize);
               if(bytes &gt; 0)
               {
                  IntPtr dibPtr = new IntPtr(dib.ToInt64() + dibOffset);
                  Marshal.Copy(buffer, 0, dibPtr, bytes);
                  dibOffset += bytes;
               }
            }
            while(bytes &gt; 0);
         }

         // Create an instance of the engine
         using(IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, false))
         {
            // Start the engine using default parameters
            ocrEngine.Startup(null, null, null, null);

            // Create an OCR document
            using(IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument())
            {
               // Add the image
               ocrDocument.Pages.AddDib(dib, null);

               // Free the DIB since we do not need it anymore
               Marshal.FreeHGlobal(dib);

               // Recognize
               ocrDocument.Pages.Recognize(null);

               // Save
               ocrDocument.Save(pdfFileName, DocumentFormat.Pdf, null);
            }

            // Shutdown the engine
            // Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown();
         }
      }</code>
        <!--IOcrPageCollection.AddPage(Dib)-->
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPage" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPageCollection.AddPages(Leadtools.RasterImage,System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrProgressCallback)">
      <summary>
            Adds one or more pages from a multi-page <see cref="T:Leadtools.RasterImage" /> object.
            </summary>
      <param name="image">The <see cref="T:Leadtools.RasterImage" /> object containing the pages to add.</param>
      <param name="imageFirstPageNumber">1-based index of the first page in <paramref name="image" /> to add.</param>
      <param name="imageLastPageNumber">1-based index of the last page in <paramref name="image" /> to add. A value of -1 means add up to and including the last page in
            <paramref name="image" />.</param>
      <param name="callback">Optional callback to show operation progress.</param>
      <remarks>
        <para>This method copies the <see cref="T:Leadtools.RasterImage" /> object image data into the newly created <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />. Therefore, after this method returns, there is no
            relationship between <paramref name="image" /> and the <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> inside the OCR document. For example, if you do not need the <paramref name="image" /> object
            after calling this method, you should dispose it after this method returns.</para>
        <para>This method guarantees that no changes will be made to <paramref name="image" />.</para>
        <para>A short-cut to add all the pages of a <see cref="T:Leadtools.RasterImage" /> object to the OCR document is <c>AddPages(image, 1, -1, callback)</c>.</para>
        <para>To add a single page from a <see cref="T:Leadtools.RasterImage" /> object, you can use <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.AddPage(Leadtools.RasterImage,Leadtools.Forms.Ocr.OcrProgressCallback)">AddPage(RasterImage image, OcrProgressCallback callback)</see>.</para>
        <para>This method will add the page(s) to the end of the collection if you already have pages in this <see cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />.</para>
        <para>You can use the <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see> to show the operation progress or to abort it. For more information and an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see>.</para>
        <para>The LEADTOOLS OCR engine supports pages of dots per inch (DPI) values of 150 and greater. If you try to add a page with a DPI of less than 150 then the
            engine might be able to recognize any data from this page.</para>
        <para>Note, the LEADTOOLS Plus OCR engine does not support image size greater than A3 paper size (11.7 by 16.5 inches at 300 dpi). Attempting to add an image
            that has a size greater than A3 will result in an error. For document of size greater than the maximum allowed, you must first resize the image before
            adding it to the LEADTOOLS Plus OCR engine. The Professional and Advantage engines do not have a restriction on the image size.</para>
      </remarks>
      <example>
        <para>This example will load multiple pages into a <see cref="T:Leadtools.RasterImage" /> object then add them to the OCR engine.</para>
        <code lang="VB">   Public Sub AddMultiPageRasterImageExample()
      ' Unlock the support needed for LEADTOOLS Plus OCR engine
      RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here")
      RasterSupport.Unlock(RasterSupportType.OcrPlus, "Replace with your own key here")
      RasterSupport.Unlock(RasterSupportType.OcrPlusPdfLeadOutput, "Replace with your own key here")
      Dim imagesPath As String = LeadtoolsExamples.Common.ImagesPath.Path
      Dim pdfFileName As String = LeadtoolsExamples.Common.ImagesPath.Path + "Ocr1.pdf"

      ' Load the Ocr1.tif, Ocr2.tif, Ocr3.tif and Ocr4.tif to a single RasterImage object
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()

      Dim image As RasterImage = Nothing
      For i As Integer = 0 To 3
         Dim pageFileName As String = Path.Combine(imagesPath, String.Format("Ocr{0}.tif", i + 1))
         Dim tempImage As RasterImage = codecs.Load(pageFileName)
         If (image Is Nothing) Then
            image = tempImage
         Else
            image.AddPage(tempImage)
         End If
      Next

      Console.WriteLine("RasterImage has {0} pages", image.PageCount)

      ' Create an instance of the engine
      Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, False)
         ' Since we have a RasterCodecs object, re-use it in the OCR engine. Although
         ' this demo will not use it, it is always a good practice
         ocrEngine.Startup(codecs, Nothing, Nothing, Nothing)

         ' Create an OCR document
         Using ocrDocument As IOcrDocument = ocrEngine.DocumentManager.CreateDocument()
            ' Add the 2nd and 3rd pages to the document
            Console.WriteLine("Adding the pages from 2 to 3 to the document")
            ocrDocument.Pages.AddPages(image, 2, 3, Nothing)
            Console.WriteLine("OCR document has {0} pages", ocrDocument.Pages.Count)

            ' We do not need the image anymore
            image.Dispose()

            ' Recognize
            ocrDocument.Pages.Recognize(Nothing)

            ' Save
            ocrDocument.Save(pdfFileName, DocumentFormat.Pdf, Nothing)
         End Using

         ' Shutdown the engine
         ' Note: calling Dispose will also automatically shutdown the engine if it has been started
         ocrEngine.Shutdown()
      End Using

      codecs.Dispose()
      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void AddMultiPageRasterImageExample()
      {
         // Unlock the support needed for LEADTOOLS Plus OCR engine
         RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here");
         RasterSupport.Unlock(RasterSupportType.OcrPlus, "Replace with your own key here");
         RasterSupport.Unlock(RasterSupportType.OcrPlusPdfLeadOutput, "Replace with your own key here");
         string imagesPath = LeadtoolsExamples.Common.ImagesPath.Path;
         string pdfFileName = LeadtoolsExamples.Common.ImagesPath.Path + "Ocr1.pdf";

         // Load the Ocr1.tif, Ocr2.tif, Ocr3.tif and Ocr4.tif to a single RasterImage object
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();

         RasterImage image = null;
         for(int i = 0; i &lt; 4; i++)
         {
            string pageFileName = Path.Combine(imagesPath, string.Format("Ocr{0}.tif", i + 1));
            RasterImage tempImage = codecs.Load(pageFileName);
            if(image == null)
               image = tempImage;
            else
               image.AddPage(tempImage);
         }

         Console.WriteLine("RasterImage has {0} pages", image.PageCount);

         // Create an instance of the engine
         using(IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, false))
         {
            // Since we have a RasterCodecs object, re-use it in the OCR engine. Although
            // this demo will not use it, it is always a good practice
            ocrEngine.Startup(codecs, null, null, null);

            // Create an OCR document
            using(IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument())
            {
               // Add the 2nd and 3rd pages to the document
               Console.WriteLine("Adding the pages from 2 to 3 to the document");
               ocrDocument.Pages.AddPages(image, 2, 3, null);
               Console.WriteLine("Document has {0} pages", ocrDocument.Pages.Count);

               // We do not need the image anymore
               image.Dispose();

               // Recognize
               ocrDocument.Pages.Recognize(null);

               // Save
               ocrDocument.Save(pdfFileName, DocumentFormat.Pdf, null);
            }

            // Shutdown the engine
            // Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown();
         }

         codecs.Dispose();
         RasterCodecs.Shutdown();
      }</code>
        <!--IOcrPageCollection.AddPages(RasterImage)-->
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPage" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPageCollection.AddPages(System.String,System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrProgressCallback)">
      <summary>
            Adds one or more pages from a multi-page image file on disk.
            </summary>
      <param name="fileName">The name of the file containing the multi-page image file.</param>
      <param name="imageFirstPageNumber">1-based index of the first page in <paramref name="fileName" /> to add.</param>
      <param name="imageLastPageNumber">1-based index of the last page in <paramref name="fileName" /> to add. A value of -1 means add up to and including the last page in
            <paramref name="fileName" />.</param>
      <param name="callback">Optional callback to show operation progress.</param>
      <remarks>
        <para>A short-cut to add all the pages of a disk file to the OCR document is <c>AddPages(fileName, 1, -1, callback)</c>.</para>
        <para>To add the first page from a multi-page disk file, you can also use <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.AddPage(System.String,Leadtools.Forms.Ocr.OcrProgressCallback)">AddPage(string fileName, OcrProgressCallback callback)</see>.</para>
        <para>This method will add the page(s) to the end of the collection if you already have pages in this <see cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />.</para>
        <para>The image file in <paramref name="fileName" /> can be any of the file formats supported by LEADTOOLS. For more information, refer to
            <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Leadtools~Topics.SummaryOfAllSupportedImageFileFormats.html">Summary of All Supported Image File Formats</a>.</para>
        <para>You can use the <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see> to show the operation progress or to abort it. For more information and an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see>.</para>
        <para>The LEADTOOLS OCR engine supports pages of dots per inch (DPI) values of 150 and greater. If you try to add a page with a DPI of less than 150 then the
            engine might be able to recognize any data from this page.</para>
        <para>Note, the LEADTOOLS Plus OCR engine does not support image size greater than A3 paper size (11.7 by 16.5 inches at 300 dpi). Attempting to add an image
            that has a size greater than A3 will result in an error. For document of size greater than the maximum allowed, you must first resize the image before
            adding it to the LEADTOOLS Plus OCR engine. The Professional and Advantage engines do not have a restriction on the image size.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPage" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Leadtools~Topics.SummaryOfAllSupportedImageFileFormats.html">Summary of All Supported Image File Formats</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPageCollection.AddPages(System.IO.Stream,System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrProgressCallback)">
      <summary>
            Adds one or more pages from a .NET stream containing a multi-page image file.
            </summary>
      <param name="stream">The .NET stream containing the multi-page image file.</param>
      <param name="imageFirstPageNumber">1-based index of the first page in <paramref name="stream" /> to add.</param>
      <param name="imageLastPageNumber">1-based index of the last page in <paramref name="stream" /> to add. A value of -1 means add up to and including the last page in
            <paramref name="stream" />.</param>
      <param name="callback">Optional callback to show operation progress.</param>
      <remarks>
        <para>A short-cut to add all the pages in a .NET stream to the OCR document is <c>AddPages(stream, 1, -1, callback)</c>.</para>
        <para>To add the first page from a multi-page file stored in a .NET stream, you can also use <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.AddPage(System.IO.Stream,Leadtools.Forms.Ocr.OcrProgressCallback)">AddPage(Stream stream, OcrProgressCallback callback)</see>.</para>
        <para>This method will add the page(s) to the end of the collection if you already have pages in this <see cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />.</para>
        <para>The image file in <paramref name="stream" /> can be any of the file formats supported by LEADTOOLS. For more information, refer to
            <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Leadtools~Topics.SummaryOfAllSupportedImageFileFormats.html">Summary of All Supported Image File Formats</a>.</para>
        <para>You can use the <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see> to show the operation progress or to abort it. For more information and an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see>.</para>
        <para>The LEADTOOLS OCR engine supports pages of dots per inch (DPI) values of 150 and greater. If you try to add a page with a DPI of less than 150 then the
            engine might be able to recognize any data from this page.</para>
        <para>Note, the LEADTOOLS Plus OCR engine does not support image size greater than A3 paper size (11.7 by 16.5 inches at 300 dpi). Attempting to add an image
            that has a size greater than A3 will result in an error. For document of size greater than the maximum allowed, you must first resize the image before
            adding it to the LEADTOOLS Plus OCR engine. The Professional and Advantage engines do not have a restriction on the image size.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPage" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Leadtools~Topics.SummaryOfAllSupportedImageFileFormats.html">Summary of All Supported Image File Formats</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPageCollection.AddPages(System.Uri,System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrProgressCallback)">
      <summary>
            Adds one or more pages from a URI containing a multi-page image file.
            </summary>
      <param name="uri">A URI containing the path to the multi-page image file.</param>
      <param name="imageFirstPageNumber">1-based index of the first page in <paramref name="uri" /> to add.</param>
      <param name="imageLastPageNumber">1-based index of the last page in <paramref name="uri" /> to add. A value of -1 means add up to and including the last page in
            <paramref name="uri" />.</param>
      <param name="callback">Optional callback to show operation progress.</param>
      <remarks>
        <para>A short-cut to add all the pages in a URI to the OCR document is <c>AddPages(uri, 1, -1, callback)</c>.</para>
        <para>The URI can point to a file in a remote HTTP server, UNC or FTP.</para>
        <para>To add the first page from a multi-page file stored in a URI, you can also use <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.AddPage(System.Uri,Leadtools.Forms.Ocr.OcrProgressCallback)">AddPage(Uri uri, OcrProgressCallback callback)</see>.</para>
        <para>This method will add the page(s) to the end of the collection if you already have pages in this <see cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />.</para>
        <para>The image file in <paramref name="uri" /> can be any of the file formats supported by LEADTOOLS. For more information, refer to
            <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Leadtools~Topics.SummaryOfAllSupportedImageFileFormats.html">Summary of All Supported Image File Formats</a>.</para>
        <para>You can use the <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see> to show the operation progress or to abort it. For more information and an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see>.</para>
        <para>The LEADTOOLS OCR engine supports pages of dots per inch (DPI) values of 150 and greater. If you try to add a page with a DPI of less than 150 then the
            engine might be able to recognize any data from this page.</para>
        <para>Note, the LEADTOOLS Plus OCR engine does not support image size greater than A3 paper size (11.7 by 16.5 inches at 300 dpi). Attempting to add an image
            that has a size greater than A3 will result in an error. For document of size greater than the maximum allowed, you must first resize the image before
            adding it to the LEADTOOLS Plus OCR engine. The Professional and Advantage engines do not have a restriction on the image size.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPage" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Leadtools~Topics.SummaryOfAllSupportedImageFileFormats.html">Summary of All Supported Image File Formats</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPageCollection.InsertPage(System.Int32,Leadtools.RasterImage,Leadtools.Forms.Ocr.OcrProgressCallback)">
      <summary>
            Inserts a <see cref="T:Leadtools.RasterImage" /> object to the specified location.
            </summary>
      <param name="pageIndex">The zero-based index at which <paramref name="image" /> should be inserted.</param>
      <param name="image">The <see cref="T:Leadtools.RasterImage" /> object containing the page to insert.</param>
      <param name="callback">Optional callback to show operation progress.</param>
      <returns>The <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> object that define the newly inserted page.</returns>
      <remarks>
        <para>This method copies the <see cref="T:Leadtools.RasterImage" /> object image data into the newly created <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />. Therefore, after this method returns, there is no
            relationship between <paramref name="image" /> and the <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> inside the OCR document. For example, if you do not need the <paramref name="image" /> object
            after calling this method, you should dispose it after this method returns.</para>
        <para>This method guarantees that no changes will be made to <paramref name="image" />.</para>
        <para>If <paramref name="image" /> contains more than one page, then the current page as defined in <see cref="P:Leadtools.RasterImage.Page">RasterImage.Page</see> is the one inserted to the OCR document.</para>
        <para>To insert all or specific range of the pages of a multi-page <see cref="T:Leadtools.RasterImage" /> object to the OCR document, either iterate through the pages by changing to the value
            of <see cref="P:Leadtools.RasterImage.Page">RasterImage.Page</see> to go from 1 to <see cref="P:Leadtools.RasterImage.PageCount">RasterImage.PageCount</see> or use the
            <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.InsertPages(System.Int32,Leadtools.RasterImage,System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrProgressCallback)">InsertPages(int pageIndex, RasterImage image, int imageFirstPageNumber, int imageLastPageNumber, OcrProgressCallback callback)</see> method.</para>
        <para>You can use the <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see> to show the operation progress or to abort it. For more information and an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see>.</para>
        <para>The LEADTOOLS OCR engine supports pages of dots per inch (DPI) values of 150 and greater. If you try to add a page with a DPI of less than 150 then the
            engine might be able to recognize any data from this page.</para>
        <para>Note, the LEADTOOLS Plus OCR engine does not support image size greater than A3 paper size (11.7 by 16.5 inches at 300 dpi). Attempting to add an image
            that has a size greater than A3 will result in an error. For document of size greater than the maximum allowed, you must first resize the image before
            adding it to the LEADTOOLS Plus OCR engine. The Professional and Advantage engines do not have a restriction on the image size.</para>
      </remarks>
      <example>
        <para>This example will load then insert in reverse order a group of <see cref="T:Leadtools.RasterImage" /> objects.</para>
        <code lang="VB">   Public Sub InsertPageFromRasterImageExample()
      ' Unlock the support needed for LEADTOOLS Plus OCR engine
      RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here")
      RasterSupport.Unlock(RasterSupportType.OcrPlus, "Replace with your own key here")
      RasterSupport.Unlock(RasterSupportType.OcrPlusPdfLeadOutput, "Replace with your own key here")
      Dim imagesPath As String = LeadtoolsExamples.Common.ImagesPath.Path
      Dim pdfFileName As String = LeadtoolsExamples.Common.ImagesPath.Path + "Ocr1.pdf"

      ' Load the Ocr1.tif, Ocr2.tif, Ocr3.tif and Ocr4.tif to a single RasterImage object
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()

      ' Create an instance of the engine
      Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, False)
         ' Since we have a RasterCodecs object, re-use it in the OCR engine. Although
         ' this demo will not use it, it is always a good practice
         ocrEngine.Startup(codecs, Nothing, Nothing, Nothing)

         ' Create an OCR document
         Using ocrDocument As IOcrDocument = ocrEngine.DocumentManager.CreateDocument()
            ' Loop through the images, insert them in the reverse order
            For i As Integer = 0 To 3
               Dim pageFileName As String = Path.Combine(imagesPath, String.Format("Ocr{0}.tif", i + 1))
               Using image As RasterImage = codecs.Load(pageFileName)
                  ocrDocument.Pages.InsertPage(0, image, Nothing)
               End Using
            Next

            ' Recognize
            ocrDocument.Pages.Recognize(Nothing)

            ' Save
            ocrDocument.Save(pdfFileName, DocumentFormat.Pdf, Nothing)
         End Using

         ' Shutdown the engine
         ' Note: calling Dispose will also automatically shutdown the engine if it has been started
         ocrEngine.Shutdown()
      End Using

      codecs.Dispose()
      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void InsertPageFromRasterImageExample()
      {
         // Unlock the support needed for LEADTOOLS Plus OCR engine
         RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here");
         RasterSupport.Unlock(RasterSupportType.OcrPlus, "Replace with your own key here");
         RasterSupport.Unlock(RasterSupportType.OcrPlusPdfLeadOutput, "Replace with your own key here");
         string imagesPath = LeadtoolsExamples.Common.ImagesPath.Path;
         string pdfFileName = LeadtoolsExamples.Common.ImagesPath.Path + "Ocr1.pdf";

         // Load the Ocr1.tif, Ocr2.tif, Ocr3.tif and Ocr4.tif to a single RasterImage object
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();

         // Create an instance of the engine
         using(IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, false))
         {
            // Since we have a RasterCodecs object, re-use it in the OCR engine. Although
            // this demo will not use it, it is always a good practice
            ocrEngine.Startup(codecs, null, null, null);

            // Create an OCR document
            using(IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument())
            {
               // Loop through the images, insert them in the reverse order
               for(int i = 0; i &lt; 4; i++)
               {
                  string pageFileName = Path.Combine(imagesPath, string.Format("Ocr{0}.tif", i + 1));
                  using(RasterImage image = codecs.Load(pageFileName))
                     ocrDocument.Pages.InsertPage(0, image, null);
               }

               // Recognize
               ocrDocument.Pages.Recognize(null);

               // Save
               ocrDocument.Save(pdfFileName, DocumentFormat.Pdf, null);
            }

            // Shutdown the engine
            // Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown();
         }

         codecs.Dispose();
         RasterCodecs.Shutdown();
      }</code>
        <!--IOcrPageCollection.InsertPage(RasterImage)-->
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPage" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPageCollection.InsertPage(System.Int32,System.String,Leadtools.Forms.Ocr.OcrProgressCallback)">
      <summary>
            Inserts the image stored in a disk file to the specified location.
            </summary>
      <param name="pageIndex">The zero-based index at which <paramref name="fileName" /> should be inserted.</param>
      <param name="fileName">The name of the file containing the image.</param>
      <param name="callback">Optional callback to show operation progress.</param>
      <returns>The <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> object that define the newly inserted page.</returns>
      <remarks>
        <para>This method will load the first page from a raster image file on disk and inserts it to the OCR document at the specified location.</para>
        <para>To insert all or specific range of the pages of a multi-page image file to the OCR document, use the
            <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.InsertPages(System.Int32,System.String,System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrProgressCallback)">InsertPages(int pageIndex, string fileName, int imageFirstPageNumber, int imageLastPageNumber, OcrProgressCallback callback)</see> method.</para>
        <para>If you passed a <see cref="T:Leadtools.Codecs.RasterCodecs" /> object to the <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">IOcrEngine.Startup</see>, then this method will use the same <see cref="T:Leadtools.Codecs.RasterCodecs" />
            object to load the raster image file. If you did not pass a <see cref="T:Leadtools.Codecs.RasterCodecs" /> object, the engine will create an instance the first time one of the add or export page
            methods is called.</para>
        <para>The image file in <paramref name="fileName" /> can be any of the file formats supported by LEADTOOLS. For more information, refer to
            <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Leadtools~Topics.SummaryOfAllSupportedImageFileFormats.html">Summary of All Supported Image File Formats</a>.</para>
        <para>You can use the <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see> to show the operation progress or to abort it. For more information and an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see>.</para>
        <para>The LEADTOOLS OCR engine supports pages of dots per inch (DPI) values of 150 and greater. If you try to add a page with a DPI of less than 150 then the
            engine might be able to recognize any data from this page.</para>
        <para>Note, the LEADTOOLS Plus OCR engine does not support image size greater than A3 paper size (11.7 by 16.5 inches at 300 dpi). Attempting to add an image
            that has a size greater than A3 will result in an error. For document of size greater than the maximum allowed, you must first resize the image before
            adding it to the LEADTOOLS Plus OCR engine. The Professional and Advantage engines do not have a restriction on the image size.</para>
      </remarks>
      <example>
        <para>This example will load then insert in reverse order a group of image files from disk.</para>
        <code lang="VB">   Public Sub InsertPageFromFileExample()
      ' Unlock the support needed for LEADTOOLS Plus OCR engine
      RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here")
      RasterSupport.Unlock(RasterSupportType.OcrPlus, "Replace with your own key here")
      RasterSupport.Unlock(RasterSupportType.OcrPlusPdfLeadOutput, "Replace with your own key here")
      Dim imagesPath As String = LeadtoolsExamples.Common.ImagesPath.Path
      Dim pdfFileName As String = LeadtoolsExamples.Common.ImagesPath.Path + "Ocr1.pdf"

      ' Load the Ocr1.tif, Ocr2.tif, Ocr3.tif and Ocr4.tif to a single RasterImage object
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()

      ' Create an instance of the engine
      Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, False)
         ' Since we have a RasterCodecs object, re-use it in the OCR engine. Although
         ' this demo will not use it, it is always a good practice
         ocrEngine.Startup(codecs, Nothing, Nothing, Nothing)

         ' Create an OCR document
         Using ocrDocument As IOcrDocument = ocrEngine.DocumentManager.CreateDocument()
            ' Loop through the images, insert them in the reverse order
            For i As Integer = 0 To 3
               Dim pageFileName As String = Path.Combine(imagesPath, String.Format("Ocr{0}.tif", i + 1))
               ocrDocument.Pages.InsertPage(0, pageFileName, Nothing)
            Next

            ' Recognize
            ocrDocument.Pages.Recognize(Nothing)

            ' Save
            ocrDocument.Save(pdfFileName, DocumentFormat.Pdf, Nothing)
         End Using

         ' Shutdown the engine
         ' Note: calling Dispose will also automatically shutdown the engine if it has been started
         ocrEngine.Shutdown()
      End Using

      codecs.Dispose()
      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void InsertPageFromFileExample()
      {
         // Unlock the support needed for LEADTOOLS Plus OCR engine
         RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here");
         RasterSupport.Unlock(RasterSupportType.OcrPlus, "Replace with your own key here");
         RasterSupport.Unlock(RasterSupportType.OcrPlusPdfLeadOutput, "Replace with your own key here");
         string imagesPath = LeadtoolsExamples.Common.ImagesPath.Path;
         string pdfFileName = LeadtoolsExamples.Common.ImagesPath.Path + "Ocr1.pdf";

         // Load the Ocr1.tif, Ocr2.tif, Ocr3.tif and Ocr4.tif to a single RasterImage object
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();

         // Create an instance of the engine
         using(IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, false))
         {
            // Since we have a RasterCodecs object, re-use it in the OCR engine. Although
            // this demo will not use it, it is always a good practice
            ocrEngine.Startup(codecs, null, null, null);

            // Create an OCR document
            using(IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument())
            {
               // Loop through the images, insert them in the reverse order
               for(int i = 0; i &lt; 4; i++)
               {
                  string pageFileName = Path.Combine(imagesPath, string.Format("Ocr{0}.tif", i + 1));
                  ocrDocument.Pages.InsertPage(0, pageFileName, null);
               }

               // Recognize
               ocrDocument.Pages.Recognize(0, 1, null);

               // Save
               ocrDocument.Save(pdfFileName, DocumentFormat.Pdf, null);
            }

            // Shutdown the engine
            // Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown();
         }

         codecs.Dispose();
         RasterCodecs.Shutdown();
      }</code>
        <!--IOcrPageCollection.InsertPage(string)-->
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPage" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPageCollection.InsertPage(System.Int32,System.IO.Stream,Leadtools.Forms.Ocr.OcrProgressCallback)">
      <summary>
            Inserts the image stored in a .NET stream to the specified location.
            </summary>
      <param name="pageIndex">The zero-based index at which <paramref name="stream" /> should be inserted.</param>
      <param name="stream">The .NET stream object containing the image.</param>
      <param name="callback">Optional callback to show operation progress.</param>
      <returns>The <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> object that define the newly inserted page.</returns>
      <remarks>
        <para>This method will load the first page from a raster image file in the stream and inserts it to the OCR document at the specified location.</para>
        <para>To insert all or specific range of the pages of a multi-page image from a stream to the OCR document, use the
            <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.InsertPages(System.Int32,System.IO.Stream,System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrProgressCallback)">InsertPages(int pageIndex, Stream stream, int imageFirstPageNumber, int imageLastPageNumber, OcrProgressCallback callback)</see> method.</para>
        <para>If you passed a <see cref="T:Leadtools.Codecs.RasterCodecs" /> object to the <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">IOcrEngine.Startup</see>, then this method will use the same <see cref="T:Leadtools.Codecs.RasterCodecs" />
            object to load the raster image file. If you did not pass a <see cref="T:Leadtools.Codecs.RasterCodecs" /> object, the engine will create an instance the first time one of the add or export page
            methods is called.</para>
        <para>The image file in <paramref name="stream" /> can be any of the file formats supported by LEADTOOLS. For more information, refer to
            <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Leadtools~Topics.SummaryOfAllSupportedImageFileFormats.html">Summary of All Supported Image File Formats</a>.</para>
        <para>You can use the <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see> to show the operation progress or to abort it. For more information and an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see>.</para>
        <para>The LEADTOOLS OCR engine supports pages of dots per inch (DPI) values of 150 and greater. If you try to add a page with a DPI of less than 150 then the
            engine might be able to recognize any data from this page.</para>
        <para>Note, the LEADTOOLS Plus OCR engine does not support image size greater than A3 paper size (11.7 by 16.5 inches at 300 dpi). Attempting to add an image
            that has a size greater than A3 will result in an error. For document of size greater than the maximum allowed, you must first resize the image before
            adding it to the LEADTOOLS Plus OCR engine. The Professional and Advantage engines do not have a restriction on the image size.</para>
      </remarks>
      <example>
            For an example on how to insert a page, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.InsertPage(System.Int32,System.String,Leadtools.Forms.Ocr.OcrProgressCallback)">InsertPage</see>. For an example on how to add pages from a stream,
            refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.AddPage(System.IO.Stream,Leadtools.Forms.Ocr.OcrProgressCallback)">AddPage</see>.
            </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPage" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPageCollection.InsertPage(System.Int32,System.Uri,Leadtools.Forms.Ocr.OcrProgressCallback)">
      <summary>
            Inserts the image stored in a URI to the specified location.
            </summary>
      <param name="pageIndex">The zero-based index at which <paramref name="uri" /> should be inserted.</param>
      <param name="uri">A URI containing the path to the image.</param>
      <param name="callback">Optional callback to show operation progress.</param>
      <returns>The <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> object that define the newly inserted page.</returns>
      <remarks>
        <para>This method will load the first page from a raster image file in the URI and inserts it to the OCR document at the specified location.</para>
        <para>The URI can point to a file in a remote HTTP server, UNC or FTP.</para>
        <para>To insert all or specific range of the pages of a multi-page image from a URI to the OCR document, use the
            <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.InsertPages(System.Int32,System.Uri,System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrProgressCallback)">InsertPages(int pageIndex, Uri uri, int imageFirstPageNumber, int imageLastPageNumber, OcrProgressCallback callback)</see> method.</para>
        <para>If you passed a <see cref="T:Leadtools.Codecs.RasterCodecs" /> object to the <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">IOcrEngine.Startup</see>, then this method will use the same <see cref="T:Leadtools.Codecs.RasterCodecs" />
            object to load the raster image file. If you did not pass a <see cref="T:Leadtools.Codecs.RasterCodecs" /> object, the engine will create an instance the first time one of the add or export page
            methods is called.</para>
        <para>The image file in <paramref name="uri" /> can be any of the file formats supported by LEADTOOLS. For more information, refer to
            <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Leadtools~Topics.SummaryOfAllSupportedImageFileFormats.html">Summary of All Supported Image File Formats</a>.</para>
        <para>You can use the <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see> to show the operation progress or to abort it. For more information and an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see>.</para>
        <para>The LEADTOOLS OCR engine supports pages of dots per inch (DPI) values of 150 and greater. If you try to add a page with a DPI of less than 150 then the
            engine might be able to recognize any data from this page.</para>
        <para>Note, the LEADTOOLS Plus OCR engine does not support image size greater than A3 paper size (11.7 by 16.5 inches at 300 dpi). Attempting to add an image
            that has a size greater than A3 will result in an error. For document of size greater than the maximum allowed, you must first resize the image before
            adding it to the LEADTOOLS Plus OCR engine. The Professional and Advantage engines do not have a restriction on the image size.</para>
      </remarks>
      <example>
            For an example on how to insert a page, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.InsertPage(System.Int32,System.String,Leadtools.Forms.Ocr.OcrProgressCallback)">InsertPage</see>. For an example on how to add pages from a URI,
            refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.AddPage(System.Uri,Leadtools.Forms.Ocr.OcrProgressCallback)">AddPage</see>.
            </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPage" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPageCollection.InsertDib(System.Int32,System.IntPtr,Leadtools.Forms.Ocr.OcrProgressCallback)">
      <summary>
            Inserts a DIB (Device-independent bitmap) to the specified location.
            </summary>
      <param name="pageIndex">The zero-based index at which <paramref name="dib" /> should be inserted.</param>
      <param name="dib">An unmanaged pointer to the DIB (device-independent bitmap).</param>
      <param name="callback">Optional callback to show operation progress.</param>
      <returns>The <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> object that define the newly inserted page.</returns>
      <remarks>
        <para>This method will insert a device independent bitmap (DIB) stored in an unmanaged memory pointer to the OCR document.</para>
        <para>You can use the <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see> to show the operation progress or to abort it. For more information and an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see>.</para>
        <para>The LEADTOOLS OCR engine supports pages of dots per inch (DPI) values of 150 and greater. If you try to add a page with a DPI of less than 150 then the
            engine might be able to recognize any data from this page.</para>
        <para>Note, the LEADTOOLS Plus OCR engine does not support image size greater than A3 paper size (11.7 by 16.5 inches at 300 dpi). Attempting to add an image
            that has a size greater than A3 will result in an error. For document of size greater than the maximum allowed, you must first resize the image before
            adding it to the LEADTOOLS Plus OCR engine. The Professional and Advantage engines do not have a restriction on the image size.</para>
      </remarks>
      <example>
            For an example on how to insert a page, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.InsertPage(System.Int32,System.String,Leadtools.Forms.Ocr.OcrProgressCallback)">InsertPage</see>. For an example on how to add pages from a DIB,
            refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.AddDib(System.IntPtr,Leadtools.Forms.Ocr.OcrProgressCallback)" />.
            </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPage" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPageCollection.InsertPages(System.Int32,Leadtools.RasterImage,System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrProgressCallback)">
      <summary>
            Insert one or more pages from a multi-page <see cref="T:Leadtools.RasterImage" /> object at the specified location.
            </summary>
      <param name="pageIndex">The zero-based index at which the new pages from <paramref name="image" /> should be inserted.</param>
      <param name="image">The <see cref="T:Leadtools.RasterImage" /> object containing the pages to insert.</param>
      <param name="imageFirstPageNumber">1-based index of the first page in <paramref name="image" /> to insert.</param>
      <param name="imageLastPageNumber">1-based index of the last page in <paramref name="image" /> to add. A value of -1 means add up to and including the last page in
            <paramref name="image" />.</param>
      <param name="callback">Optional callback to show operation progress.</param>
      <remarks>
        <para>This method copies the <see cref="T:Leadtools.RasterImage" /> object image data into the newly created <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />. Therefore, after this method returns, there is no
            relationship between <paramref name="image" /> and the <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> inside the OCR document. For example, if you do not need the <paramref name="image" /> object
            after calling this method, you should dispose it after this method returns.</para>
        <para>This method gurantees that no changes will be made to <paramref name="image" />.</para>
        <para>A short-cut to insert all the pages of a <see cref="T:Leadtools.RasterImage" /> object to the OCR document is <c>InsertPages(index, image, 1, -1, callback)</c>.</para>
        <para>To insert a single page from a <see cref="T:Leadtools.RasterImage" /> object, you can use <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.InsertPage(System.Int32,Leadtools.RasterImage,Leadtools.Forms.Ocr.OcrProgressCallback)">InsertPage(int pageIndex, RasterImage image, OcrProgressCallback callback)</see>.</para>
        <para>You can use the <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see> to show the operation progress or to abort it. For more information and an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see>.</para>
        <para>The LEADTOOLS OCR engine supports pages of dots per inch (DPI) values of 150 and greater. If you try to add a page with a DPI of less than 150 then the
            engine might be able to recognize any data from this page.</para>
        <para>Note, the LEADTOOLS Plus OCR engine does not support image size greater than A3 paper size (11.7 by 16.5 inches at 300 dpi). Attempting to add an image
            that has a size greater than A3 will result in an error. For document of size greater than the maximum allowed, you must first resize the image before
            adding it to the LEADTOOLS Plus OCR engine. The Professional and Advantage engines do not have a restriction on the image size.</para>
      </remarks>
      <example>
            For an example on how to insert a page, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.InsertPage(System.Int32,Leadtools.RasterImage,Leadtools.Forms.Ocr.OcrProgressCallback)">InsertPage</see>. For an example on how to add pages from a RasterImage,
            refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.AddPages(Leadtools.RasterImage,System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrProgressCallback)">AddPages</see>.
            </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPage" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPageCollection.InsertPages(System.Int32,System.String,System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrProgressCallback)">
      <summary>
            Insert one or more pages from a multi-page file on disk at the specified location.
            </summary>
      <param name="pageIndex">The zero-based index at which the new pages from <paramref name="fileName" /> should be inserted.</param>
      <param name="fileName">The name of the file containing the multi-page image file.</param>
      <param name="imageFirstPageNumber">1-based index of the first page in <paramref name="fileName" /> to insert.</param>
      <param name="imageLastPageNumber">1-based index of the last page in <paramref name="fileName" /> to insert. A value of -1 means insert up to and including the last page in
            <paramref name="fileName" />.</param>
      <param name="callback">Optional callback to show operation progress.</param>
      <remarks>
        <para>A short-cut to insert all the pages of a disk file to the OCR document is <c>InsertPages(index, fileName, 1, -1, callback)</c>.</para>
        <para>To insert a single page from a multi-page disk file, you can also use <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.InsertPage(System.Int32,System.String,Leadtools.Forms.Ocr.OcrProgressCallback)">AddPage(int pageIndex, string fileName, OcrProgressCallback callback)</see>.</para>
        <para>The image file in <paramref name="fileName" /> can be any of the file formats supported by LEADTOOLS. For more information, refer to
            <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Leadtools~Topics.SummaryOfAllSupportedImageFileFormats.html">Summary of All Supported Image File Formats</a>.</para>
        <para>You can use the <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see> to show the operation progress or to abort it. For more information and an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see>.</para>
        <para>The LEADTOOLS OCR engine supports pages of dots per inch (DPI) values of 150 and greater. If you try to add a page with a DPI of less than 150 then the
            engine might be able to recognize any data from this page.</para>
        <para>Note, the LEADTOOLS Plus OCR engine does not support image size greater than A3 paper size (11.7 by 16.5 inches at 300 dpi). Attempting to add an image
            that has a size greater than A3 will result in an error. For document of size greater than the maximum allowed, you must first resize the image before
            adding it to the LEADTOOLS Plus OCR engine. The Professional and Advantage engines do not have a restriction on the image size.</para>
      </remarks>
      <example>
            For an example on how to insert a page, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.InsertPage(System.Int32,System.String,Leadtools.Forms.Ocr.OcrProgressCallback)">InsertPage</see>. For an example on how to add pages from a disk file,
            refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.AddPages(System.String,System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrProgressCallback)">AddPages</see>.
            </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPage" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Leadtools~Topics.SummaryOfAllSupportedImageFileFormats.html">Summary of All Supported Image File Formats</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPageCollection.InsertPages(System.Int32,System.IO.Stream,System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrProgressCallback)">
      <summary>
            Insert one or more pages from a multi-page image file stored in a .NET stream at the specified location.
            </summary>
      <param name="pageIndex">The zero-based index at which the new pages from <paramref name="stream" /> should be inserted.</param>
      <param name="stream">The .NET stream containing the multi-page image file.</param>
      <param name="imageFirstPageNumber">1-based index of the first page in <paramref name="stream" /> to insert.</param>
      <param name="imageLastPageNumber">1-based index of the last page in <paramref name="stream" /> to insert. A value of -1 means insert up to and including the last page in
            <paramref name="stream" />.</param>
      <param name="callback">Optional callback to show operation progress.</param>
      <remarks>
        <para>A short-cut to insert all the pages of an image file stored in a stream to the OCR document is <c>InsertPages(index, stream, 1, -1, callback)</c>.</para>
        <para>To insert a single page from a multi-page image stored in a stream, you can also use <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.InsertPage(System.Int32,System.IO.Stream,Leadtools.Forms.Ocr.OcrProgressCallback)">AddPage(int pageIndex, Stream stream, OcrProgressCallback callback)</see>.</para>
        <para>The image file in <paramref name="stream" /> can be any of the file formats supported by LEADTOOLS. For more information, refer to
            <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Leadtools~Topics.SummaryOfAllSupportedImageFileFormats.html">Summary of All Supported Image File Formats</a>.</para>
        <para>You can use the <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see> to show the operation progress or to abort it. For more information and an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see>.</para>
        <para>The LEADTOOLS OCR engine supports pages of dots per inch (DPI) values of 150 and greater. If you try to add a page with a DPI of less than 150 then the
            engine might be able to recognize any data from this page.</para>
        <para>Note, the LEADTOOLS Plus OCR engine does not support image size greater than A3 paper size (11.7 by 16.5 inches at 300 dpi). Attempting to add an image
            that has a size greater than A3 will result in an error. For document of size greater than the maximum allowed, you must first resize the image before
            adding it to the LEADTOOLS Plus OCR engine. The Professional and Advantage engines do not have a restriction on the image size.</para>
      </remarks>
      <example>
            For an example on how to insert a page, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.InsertPage(System.Int32,System.IO.Stream,Leadtools.Forms.Ocr.OcrProgressCallback)">InsertPage</see>. For an example on how to add pages from a .NET stream,
            refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.AddPages(System.IO.Stream,System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrProgressCallback)">AddPages</see>.
            </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPage" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Leadtools~Topics.SummaryOfAllSupportedImageFileFormats.html">Summary of All Supported Image File Formats</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPageCollection.InsertPages(System.Int32,System.Uri,System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrProgressCallback)">
      <summary>
            Insert one or more pages from a multi-page image file stored in a URI at the specified location.
            </summary>
      <param name="pageIndex">The zero-based index at which the new pages from <paramref name="uri" /> should be inserted.</param>
      <param name="uri">A URI containing the path to the image.</param>
      <param name="imageFirstPageNumber">1-based index of the first page in <paramref name="uri" /> to insert.</param>
      <param name="imageLastPageNumber">1-based index of the last page in <paramref name="uri" /> to insert. A value of -1 means insert up to and including the last page in
            <paramref name="uri" />.</param>
      <param name="callback">Optional callback to show operation progress.</param>
      <remarks>
        <para>The URI can point to a file in a remote HTTP server, UNC or FTP.</para>
        <para>A short-cut to insert all the pages of an image file stored in a URI is <c>InsertPages(index, uri, 1, -1, callback)</c>.</para>
        <para>To insert a single page from a multi-page image stored in a URI, you can also use <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.InsertPage(System.Int32,System.Uri,Leadtools.Forms.Ocr.OcrProgressCallback)">AddPage(int pageIndex, Uri uri, OcrProgressCallback callback)</see>.</para>
        <para>The image file in <paramref name="uri" /> can be any of the file formats supported by LEADTOOLS. For more information, refer to
            <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Leadtools~Topics.SummaryOfAllSupportedImageFileFormats.html">Summary of All Supported Image File Formats</a>.</para>
        <para>You can use the <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see> to show the operation progress or to abort it. For more information and an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see>.</para>
        <para>The LEADTOOLS OCR engine supports pages of dots per inch (DPI) values of 150 and greater. If you try to add a page with a DPI of less than 150 then the
            engine might be able to recognize any data from this page.</para>
        <para>Note, the LEADTOOLS Plus OCR engine does not support image size greater than A3 paper size (11.7 by 16.5 inches at 300 dpi). Attempting to add an image
            that has a size greater than A3 will result in an error. For document of size greater than the maximum allowed, you must first resize the image before
            adding it to the LEADTOOLS Plus OCR engine. The Professional and Advantage engines do not have a restriction on the image size.</para>
      </remarks>
      <example>
            For an example on how to insert a page, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.InsertPage(System.Int32,System.Uri,Leadtools.Forms.Ocr.OcrProgressCallback)">InsertPage</see>. For an example on how to add pages from a URI,
            refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.AddPages(System.Uri,System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrProgressCallback)">AddPages</see>.
            </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPage" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Leadtools~Topics.SummaryOfAllSupportedImageFileFormats.html">Summary of All Supported Image File Formats</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPageCollection.ExportPage(System.Int32)">
      <summary>
            Export the page at the specified index to a <see cref="T:Leadtools.RasterImage" /> object.
            </summary>
      <param name="pageIndex">The zero-based index of the page to export.</param>
      <returns>A <see cref="T:Leadtools.RasterImage" /> object containing a copy of the image data of the specified page.</returns>
      <remarks>
        <para>This method copies the image data to the created <see cref="T:Leadtools.RasterImage" /> object image. Therefore, after this method returns, there is no
            relationship between the returned value and the <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> inside the OCR document. The returned <see cref="T:Leadtools.RasterImage" /> object will need to be disposed.</para>
        <para>To export more than one page to a multi-page <see cref="T:Leadtools.RasterImage" /> object, use <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.ExportPages(System.Int32,System.Int32)">ExportPages(int firstPageIndex, int lastPageIndex)</see>.</para>
        <para>This method is identical to calling <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRasterImage">IOcrPage.GetRasterImage</see> on the page whose index is at <paramref name="pageIndex" />.</para>
      </remarks>
      <example>
        <para>This example will add a page to an OCR document before exporting it back and saving it to disk</para>
        <code lang="VB">   Public Sub ExportPageToRasterImageExample()
      ' Unlock the support needed for LEADTOOLS Plus OCR engine
      RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here")
      RasterSupport.Unlock(RasterSupportType.OcrPlus, "Replace with your own key here")
      RasterSupport.Unlock(RasterSupportType.OcrPlusPdfLeadOutput, "Replace with your own key here")
      Dim tifFileName As String = LeadtoolsExamples.Common.ImagesPath.Path + "Ocr1.tif"
      Dim exportedFileName As String = LeadtoolsExamples.Common.ImagesPath.Path + "OcrExported.jpg"

      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()

      ' Create an instance of the engine
      Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, False)
         ' Since we have a RasterCodecs object, re-use it in the OCR engine. Although
         ' this demo will not use it, it is always a good practice
         ocrEngine.Startup(codecs, Nothing, Nothing, Nothing)

         ' Create an OCR document
         Using ocrDocument As IOcrDocument = ocrEngine.DocumentManager.CreateDocument()

            ' Add the image to the document
            ocrDocument.Pages.AddPage(tifFileName, Nothing)

            ' Export it back as a RasterImage
            Dim image As RasterImage = ocrDocument.Pages.ExportPage(0)

            ' Save this image to disk
            codecs.Save(image, exportedFileName, RasterImageFormat.Jpeg, 0)

            ' We need to dispose the image ourselves
            image.Dispose()
         End Using

         ' Shutdown the engine
         ' Note: calling Dispose will also automatically shutdown the engine if it has been started
         ocrEngine.Shutdown()
      End Using

      codecs.Dispose()
      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void ExportPageToRasterImageExample()
      {
         // Unlock the support needed for LEADTOOLS Plus OCR engine
         RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here");
         RasterSupport.Unlock(RasterSupportType.OcrPlus, "Replace with your own key here");
         RasterSupport.Unlock(RasterSupportType.OcrPlusPdfLeadOutput, "Replace with your own key here");
         string tifFileName = LeadtoolsExamples.Common.ImagesPath.Path + "Ocr1.tif";
         string exportedFileName = LeadtoolsExamples.Common.ImagesPath.Path + "OcrExported.jpg";

         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();

         // Create an instance of the engine
         using(IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, false))
         {
            // Since we have a RasterCodecs object, re-use it in the OCR engine. Although
            // this demo will not use it, it is always a good practice
            ocrEngine.Startup(codecs, null, null, null);

            // Create an OCR document
            using(IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument())
            {

               // Add the image to the document
               ocrDocument.Pages.AddPage(tifFileName, null);

               // Export it back as a RasterImage
               RasterImage image = ocrDocument.Pages.ExportPage(0);

               // Save this image to disk
               codecs.Save(image, exportedFileName, RasterImageFormat.Jpeg, 0);

               // We need to dispose the image ourselves
               image.Dispose();
            }

            // Shutdown the engine
            // Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown();
         }

         codecs.Dispose();
         RasterCodecs.Shutdown();
      }</code>
        <!--IOcrPageCollection.ExportPage(RasterImage)-->
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPage" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPageCollection.ExportPages(System.Int32,System.Int32)">
      <summary>
            Export one or more pages at the specified index to a multi-page <see cref="T:Leadtools.RasterImage" /> object.
            </summary>
      <param name="firstPageIndex">The zero-based index of the first page to export.</param>
      <param name="lastPageIndex">The zero-based index of the last page to export. A value of -1 means export up to and including the last page in the OCR document.</param>
      <returns>A <see cref="T:Leadtools.RasterImage" /> object containing a copy of the image data of the specified page or pages.</returns>
      <remarks>
        <para>This method copies the image data to the created <see cref="T:Leadtools.RasterImage" /> object image. Therefore, after this method returns, there is no
            relationship between the returned value and the <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> objects inside the OCR document. The returned <see cref="T:Leadtools.RasterImage" /> object will need to be disposed.</para>
        <para>To export a single page to a <see cref="T:Leadtools.RasterImage" /> object, use <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.ExportPage(System.Int32)">ExportPage(int pageIndex)</see>.</para>
        <para>A short-cut to export all the pages in the OCR document to a multi-page <see cref="T:Leadtools.RasterImage" /> object is <c>ExportPages(1, -1)</c>.</para>
      </remarks>
      <example>
        <para>This example will add a few pages to an OCR document before exporting it back and saving it to disk as a multi-page TIF file.</para>
        <code lang="VB">   Public Sub ExportPagesToRasterImageExample()
      ' Unlock the support needed for LEADTOOLS Plus OCR engine
      RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here")
      RasterSupport.Unlock(RasterSupportType.OcrPlus, "Replace with your own key here")
      RasterSupport.Unlock(RasterSupportType.OcrPlusPdfLeadOutput, "Replace with your own key here")
      Dim imagesPath As String = LeadtoolsExamples.Common.ImagesPath.Path
      Dim tifFileName As String = LeadtoolsExamples.Common.ImagesPath.Path + "OcrMultiPage.tif"

      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()

      ' Create an instance of the engine
      Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, False)
         ' Since we have a RasterCodecs object, re-use it in the OCR engine. Although
         ' this demo will not use it, it is always a good practice
         ocrEngine.Startup(codecs, Nothing, Nothing, Nothing)

         ' Create an OCR document
         Using ocrDocument As IOcrDocument = ocrEngine.DocumentManager.CreateDocument()


            ' Loop through the images, add them to the document
            For i As Integer = 0 To 3
               Dim pageFileName As String = Path.Combine(imagesPath, String.Format("Ocr{0}.tif", i + 1))
               ocrDocument.Pages.AddPage(pageFileName, Nothing)
            Next

            Console.WriteLine("OCR document contains {0} pages", ocrDocument.Pages.Count)

            ' Export the pages from index 1 to 3 to a RasterImage object
            Dim image As RasterImage = ocrDocument.Pages.ExportPages(1, 3)

            Console.WriteLine("image contains {0} pages", image.PageCount)

            ' Save this image to multi-page TIF file
            codecs.Save(image, tifFileName, RasterImageFormat.Tif, 1, 1, -1, 1, CodecsSavePageMode.Overwrite)
         End Using

         ' Shutdown the engine
         ' Note: calling Dispose will also automatically shutdown the engine if it has been started
         ocrEngine.Shutdown()
      End Using

      codecs.Dispose()
      RasterCodecs.Shutdown()
   End Sub</code>
        <code lang="CS">      public void ExportPagesToRasterImageExample()
      {
         // Unlock the support needed for LEADTOOLS Plus OCR engine
         RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here");
         RasterSupport.Unlock(RasterSupportType.OcrPlus, "Replace with your own key here");
         RasterSupport.Unlock(RasterSupportType.OcrPlusPdfLeadOutput, "Replace with your own key here");
         string imagesPath = LeadtoolsExamples.Common.ImagesPath.Path;
         string tifFileName = LeadtoolsExamples.Common.ImagesPath.Path + "OcrMultiPage.tif";

         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();

         // Create an instance of the engine
         using(IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, false))
         {
            // Since we have a RasterCodecs object, re-use it in the OCR engine. Although
            // this demo will not use it, it is always a good practice
            ocrEngine.Startup(codecs, null, null, null);

            // Create an OCR document
            using(IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument())
            {
               // Loop through the images, add them to the document
               for(int i = 0; i &lt; 4; i++)
               {
                  string pageFileName = Path.Combine(imagesPath, string.Format("Ocr{0}.tif", i + 1));
                  ocrDocument.Pages.AddPage(pageFileName, null);
               }

               Console.WriteLine("OCR Document contains {0} pages", ocrDocument.Pages.Count);

               // Export the pages from index 1 to 3 to a RasterImage object
               RasterImage image = ocrDocument.Pages.ExportPages(1, 3);

               Console.WriteLine("Image contains {0} pages", image.PageCount);

               // Save this image to multi-page TIF file
               codecs.Save(image, tifFileName, RasterImageFormat.Tif, 1, 1, -1, 1, CodecsSavePageMode.Overwrite);
            }

            // Shutdown the engine
            // Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown();
         }

         codecs.Dispose();
         RasterCodecs.Shutdown();
      }</code>
        <!--IOcrPageCollection.ExportPages(RasterImage)-->
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPage" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPageCollection.ExportPage(System.Int32,System.String,Leadtools.RasterImageFormat,System.Int32)">
      <summary>
            Export the page at the specified index to a disk file.
            </summary>
      <param name="pageIndex">The zero-based index of the page to export.</param>
      <param name="fileName">The name of the file to save the page to.</param>
      <param name="format">The image file format to use.</param>
      <param name="bitsPerPixel">The bits/pixel value of the result image file.</param>
      <remarks>
        <para>To export more than one page to a multi-page disk file, use <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.ExportPages(System.Int32,System.Int32,System.String,Leadtools.RasterImageFormat,System.Int32,System.Int32,Leadtools.Codecs.CodecsSavePageMode)">ExportPages(int firstPageIndex, int lastPageIndex, string fileName, RasterImageFormat format, int bitsPerPixel, int firstSavePageNumber, CodecsSavePageMode pageMode)</see>.</para>
        <para>You can export the page to any of the file formats supported by LEADTOOLS. For more information, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Leadtools~Topics.SummaryOfAllSupportedImageFileFormats.html">Summary of All Supported Image File Formats</a>.</para>
      </remarks>
      <example>
        <para>This example will add a page to an OCR document before exporting it back to disk</para>
        <code lang="VB">   Public Sub ExportPageToFile()
      ' Unlock the support needed for LEADTOOLS Plus OCR engine
      RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here")
      RasterSupport.Unlock(RasterSupportType.OcrPlus, "Replace with your own key here")
      RasterSupport.Unlock(RasterSupportType.OcrPlusPdfLeadOutput, "Replace with your own key here")
      Dim tifFileName As String = LeadtoolsExamples.Common.ImagesPath.Path + "Ocr1.tif"
      Dim exportedFileName As String = LeadtoolsExamples.Common.ImagesPath.Path + "OcrExported.jpg"

      ' Create an instance of the engine
      Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, False)
         ' Since we have a RasterCodecs object, re-use it in the OCR engine. Although
         ' this demo will not use it, it is always a good practice
         ocrEngine.Startup(Nothing, Nothing, Nothing, Nothing)

         ' Create an OCR document
         Using ocrDocument As IOcrDocument = ocrEngine.DocumentManager.CreateDocument()

            ' Add the image to the document
            ocrDocument.Pages.AddPage(tifFileName, Nothing)

            ' Save it to disk
            ocrDocument.Pages.ExportPage(0, exportedFileName, RasterImageFormat.Jpeg, 0)
         End Using

         ' Shutdown the engine
         ' Note: calling Dispose will also automatically shutdown the engine if it has been started
         ocrEngine.Shutdown()
      End Using
   End Sub</code>
        <code lang="CS">      public void ExportPageToFile()
      {
         // Unlock the support needed for LEADTOOLS Plus OCR engine
         RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here");
         RasterSupport.Unlock(RasterSupportType.OcrPlus, "Replace with your own key here");
         RasterSupport.Unlock(RasterSupportType.OcrPlusPdfLeadOutput, "Replace with your own key here");
         string tifFileName = LeadtoolsExamples.Common.ImagesPath.Path + "Ocr1.tif";
         string exportedFileName = LeadtoolsExamples.Common.ImagesPath.Path + "OcrExported.jpg";

         // Create an instance of the engine
         using(IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, false))
         {
            // Since we have a RasterCodecs object, re-use it in the OCR engine. Although
            // this demo will not use it, it is always a good practice
            ocrEngine.Startup(null, null, null, null);

            // Create an OCR document
            using(IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument())
            {
               // Add the image to the document
               ocrDocument.Pages.AddPage(tifFileName, null);

               // Save it to disk
               ocrDocument.Pages.ExportPage(0, exportedFileName, RasterImageFormat.Jpeg, 0);
            }

            // Shutdown the engine
            // Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown();
         }
      }</code>
        <!--IOcrPageCollection.ExportPage(string)-->
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPage" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Leadtools~Topics.SummaryOfAllSupportedImageFileFormats.html">Summary of All Supported Image File Formats</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPageCollection.ExportPages(System.Int32,System.Int32,System.String,Leadtools.RasterImageFormat,System.Int32,System.Int32,Leadtools.Codecs.CodecsSavePageMode)">
      <summary>
            Exports one of more page at the specified index to a disk file.
            </summary>
      <param name="firstPageIndex">The zero-based index of the first page to export.</param>
      <param name="lastPageIndex">The zero-based index of the last page to export. A value of -1 means export up to and including the last page in the OCR document.</param>
      <param name="fileName">The name of the file to save the pages to.</param>
      <param name="format">The image file format to use.</param>
      <param name="bitsPerPixel">The bits/pixel value of the result image file.</param>
      <param name="firstSavePageNumber">1-based index of the first output page. If the output file already exists, then this parameter lets you control which pages to overwrite
            and/or where to append the new pages.</param>
      <param name="pageMode">
        <para>Determines how to handle the page when saving to multipage formats. This can be one of the following:</para>
        <para>
          <list type="table">
            <listheader>
              <term>Value</term>
              <description>Meaning</description>
            </listheader>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsSavePageMode">CodecsSavePageMode.Append</see>
              </term>
              <description>Append the new page(s) to the end of the file. If the file does not exist, this option will create
            the file and add the pages to it.  <paramref name="firstSavePageNumber" /> is not used.</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsSavePageMode">CodecsSavePageMode.Insert</see>
              </term>
              <description>Insert the new page(s) at the index specified by <paramref name="firstSavePageNumber" />.</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsSavePageMode">CodecsSavePageMode.Replace</see>
              </term>
              <description>Replace the page(s) starting at the index specified by <paramref name="firstSavePageNumber" />.</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsSavePageMode">CodecsSavePageMode.Overwrite</see>
              </term>
              <description>Overwrite the page(s) starting at the index specified by <paramref name="firstSavePageNumber" />.</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsSavePageMode">CodecsSavePageMode.Append</see>
              </term>
              <description>Append the new page(s) to the end of the file. If the file does not exist, this option will create the file and add the pages to it.</description>
            </item>
          </list>
        </para>
      </param>
      <remarks>
        <para>To export one page to a disk file, use <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.ExportPage(System.Int32,System.String,Leadtools.RasterImageFormat,System.Int32)">ExportPages(int pageIndex, string fileName, RasterImageFormat format, int bitsPerPixel)</see>.</para>
        <para>You can export the page to any of the file formats supported by LEADTOOLS. For more information, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Leadtools~Topics.SummaryOfAllSupportedImageFileFormats.html">Summary of All Supported Image File Formats</a>.</para>
      </remarks>
      <example>
        <para>This example will add pages to an OCR document before exporting a range of it back to disk to a multi-page file.</para>
        <code lang="VB">   Public Sub ExportPagesToFile()
      ' Unlock the support needed for LEADTOOLS Plus OCR engine
      RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here")
      RasterSupport.Unlock(RasterSupportType.OcrPlus, "Replace with your own key here")
      RasterSupport.Unlock(RasterSupportType.OcrPlusPdfLeadOutput, "Replace with your own key here")
      Dim imagesPath As String = LeadtoolsExamples.Common.ImagesPath.Path
      Dim tifFileName As String = LeadtoolsExamples.Common.ImagesPath.Path + "OcrMultiPage.tif"

      ' Create an instance of the engine
      Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, False)
         ' Since we have a RasterCodecs object, re-use it in the OCR engine. Although
         ' this demo will not use it, it is always a good practice
         ocrEngine.Startup(Nothing, Nothing, Nothing, Nothing)

         ' Create an OCR document
         Using ocrDocument As IOcrDocument = ocrEngine.DocumentManager.CreateDocument()

            ' Loop through the images, add them to the document
            For i As Integer = 0 To 4
               Dim pageFileName As String = Path.Combine(imagesPath, String.Format("Ocr{0}.tif", i + 1))
               ocrDocument.Pages.AddPage(pageFileName, Nothing)
            Next

            Console.WriteLine("OCR document contains {0} pages", ocrDocument.Pages.Count)

            ' Export the pages from index 1 to 3 to disk
            ocrDocument.Pages.ExportPages(1, 3, tifFileName, RasterImageFormat.Tif, 1, 1, CodecsSavePageMode.Overwrite)
         End Using

         ' Shutdown the engine
         ' Note: calling Dispose will also automatically shutdown the engine if it has been started
         ocrEngine.Shutdown()
      End Using
   End Sub</code>
        <code lang="CS">      public void ExportPagesToFile()
      {
         // Unlock the support needed for LEADTOOLS Plus OCR engine
         RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here");
         RasterSupport.Unlock(RasterSupportType.OcrPlus, "Replace with your own key here");
         RasterSupport.Unlock(RasterSupportType.OcrPlusPdfLeadOutput, "Replace with your own key here");
         string imagesPath = LeadtoolsExamples.Common.ImagesPath.Path;
         string tifFileName = LeadtoolsExamples.Common.ImagesPath.Path + "OcrMultiPage.tif";

         // Create an instance of the engine
         using(IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, false))
         {
            // Since we have a RasterCodecs object, re-use it in the OCR engine. Although
            // this demo will not use it, it is always a good practice
            ocrEngine.Startup(null, null, null, null);

            // Create an OCR document
            using(IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument())
            {
               // Loop through the images, add them to the document
               for(int i = 0; i &lt; 4; i++)
               {
                  string pageFileName = Path.Combine(imagesPath, string.Format("Ocr{0}.tif", i + 1));
                  ocrDocument.Pages.AddPage(pageFileName, null);
               }

               Console.WriteLine("OCR Document contains {0} pages", ocrDocument.Pages.Count);

               // Export the pages from index 1 to 3 to disk
               ocrDocument.Pages.ExportPages(1, 3, tifFileName, RasterImageFormat.Tif, 1, 1, CodecsSavePageMode.Overwrite);
            }

            // Shutdown the engine
            // Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown();
         }
      }</code>
        <!--IOcrPageCollection.ExportPages(string)-->
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPage" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Leadtools~Topics.SummaryOfAllSupportedImageFileFormats.html">Summary of All Supported Image File Formats</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPageCollection.ExportPage(System.Int32,System.IO.Stream,Leadtools.RasterImageFormat,System.Int32)">
      <summary>
            Export the page at the specified index to a .NET stream.
            </summary>
      <param name="pageIndex">The zero-based index of the page to export.</param>
      <param name="stream">The .NET stream to save the page to.</param>
      <param name="format">The image file format to use.</param>
      <param name="bitsPerPixel">The bits/pixel value of the result image file.</param>
      <remarks>
        <para>To export more than one page to a multi-page file to a stream, use <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.ExportPages(System.Int32,System.Int32,System.IO.Stream,Leadtools.RasterImageFormat,System.Int32,System.Int32,Leadtools.Codecs.CodecsSavePageMode)">ExportPages(int firstPageIndex, int lastPageIndex, Stream stream, RasterImageFormat format, int bitsPerPixel, int firstSavePageNumber, CodecsSavePageMode pageMode)</see>.</para>
        <para>You can export the page to any of the file formats supported by LEADTOOLS. For more information, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Leadtools~Topics.SummaryOfAllSupportedImageFileFormats.html">Summary of All Supported Image File Formats</a>.</para>
      </remarks>
      <example>
        <para />
        <code lang="VB">   Public Sub ExportPageToStream()
      ' Unlock the support needed for LEADTOOLS Plus OCR engine
      RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here")
      RasterSupport.Unlock(RasterSupportType.OcrPlus, "Replace with your own key here")
      RasterSupport.Unlock(RasterSupportType.OcrPlusPdfLeadOutput, "Replace with your own key here")
      Dim tifFileName As String = LeadtoolsExamples.Common.ImagesPath.Path + "Ocr1.tif"
      Dim exportedFileName As String = LeadtoolsExamples.Common.ImagesPath.Path + "OcrExported.jpg"

      ' Create an instance of the engine
      Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, False)
         ' Since we have a RasterCodecs object, re-use it in the OCR engine. Although
         ' this demo will not use it, it is always a good practice
         ocrEngine.Startup(Nothing, Nothing, Nothing, Nothing)

         ' Create an OCR document
         Using ocrDocument As IOcrDocument = ocrEngine.DocumentManager.CreateDocument()

            ' Add the image to the document
            ocrDocument.Pages.AddPage(tifFileName, Nothing)

            ' Save it to a file stream
            Using fs As FileStream = File.Create(exportedFileName)
               ocrDocument.Pages.ExportPage(0, fs, RasterImageFormat.Jpeg, 0)
            End Using

         End Using

         ' Shutdown the engine
         ' Note: calling Dispose will also automatically shutdown the engine if it has been started
         ocrEngine.Shutdown()
      End Using
   End Sub</code>
        <code lang="CS">      public void ExportPageToStream()
      {
         // Unlock the support needed for LEADTOOLS Plus OCR engine
         RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here");
         RasterSupport.Unlock(RasterSupportType.OcrPlus, "Replace with your own key here");
         RasterSupport.Unlock(RasterSupportType.OcrPlusPdfLeadOutput, "Replace with your own key here");
         string tifFileName = LeadtoolsExamples.Common.ImagesPath.Path + "Ocr1.tif";
         string exportedFileName = LeadtoolsExamples.Common.ImagesPath.Path + "OcrExported.jpg";

         // Create an instance of the engine
         using(IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, false))
         {
            // Since we have a RasterCodecs object, re-use it in the OCR engine. Although
            // this demo will not use it, it is always a good practice
            ocrEngine.Startup(null, null, null, null);

            // Create an OCR document
            using(IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument())
            {
               // Add the image to the document
               ocrDocument.Pages.AddPage(tifFileName, null);

               // Save it to a file stream
               using(FileStream fs = File.Create(exportedFileName))
               {
                  ocrDocument.Pages.ExportPage(0, fs, RasterImageFormat.Jpeg, 0);
               }
            }

            // Shutdown the engine
            // Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown();
         }
      }</code>
        <!--IOcrPageCollection.ExportPage(Stream)-->
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPage" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Leadtools~Topics.SummaryOfAllSupportedImageFileFormats.html">Summary of All Supported Image File Formats</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPageCollection.ExportPages(System.Int32,System.Int32,System.IO.Stream,Leadtools.RasterImageFormat,System.Int32,System.Int32,Leadtools.Codecs.CodecsSavePageMode)">
      <summary>
            Exports one of more page at the specified index to a .NET stream.
            </summary>
      <param name="firstPageIndex">The zero-based index of the first page to export.</param>
      <param name="lastPageIndex">The zero-based index of the last page to export. A value of -1 means export up to and including the last page in the OCR document.</param>
      <param name="stream">The .NET stream to save the pages to.</param>
      <param name="format">The image file format to use.</param>
      <param name="bitsPerPixel">The bits/pixel value of the result image file.</param>
      <param name="firstSavePageNumber">1-based index of the first output page. If the output file already exists, then this parameter lets you control which pages to overwrite
            and/or where to append the new pages.</param>
      <param name="pageMode">
        <para>Determines how to handle the page when saving to multipage formats. This can be one of the following:</para>
        <para>
          <list type="table">
            <listheader>
              <term>Value</term>
              <description>Meaning</description>
            </listheader>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsSavePageMode">CodecsSavePageMode.Append</see>
              </term>
              <description>Append the new page(s) to the end of the file. If the file does not exist, this option will create
            the file and add the pages to it.  <paramref name="firstSavePageNumber" /> is not used.</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsSavePageMode">CodecsSavePageMode.Insert</see>
              </term>
              <description>Insert the new page(s) at the index specified by <paramref name="firstSavePageNumber" />.</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsSavePageMode">CodecsSavePageMode.Replace</see>
              </term>
              <description>Replace the page(s) starting at the index specified by <paramref name="firstSavePageNumber" />.</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsSavePageMode">CodecsSavePageMode.Overwrite</see>
              </term>
              <description>Overwrite the page(s) starting at the index specified by <paramref name="firstSavePageNumber" />.</description>
            </item>
            <item>
              <term>
                <see cref="T:Leadtools.Codecs.CodecsSavePageMode">CodecsSavePageMode.Append</see>
              </term>
              <description>Append the new page(s) to the end of the file. If the file does not exist, this option will create the file and add the pages to it.</description>
            </item>
          </list>
        </para>
      </param>
      <remarks>
        <para>To export one page to a .NET stream, use <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.ExportPage(System.Int32,System.IO.Stream,Leadtools.RasterImageFormat,System.Int32)">ExportPages(int pageIndex, Stream stream, RasterImageFormat format, int bitsPerPixel)</see></para>.
            <para>You can export the page to any of the file formats supported by LEADTOOLS. For more information, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Leadtools~Topics.SummaryOfAllSupportedImageFileFormats.html">Summary of All Supported Image File Formats</a>.</para></remarks>
      <example>
        <para>This example will add pages to an OCR document before exporting a range of it back to a .NET stream.</para>
        <code lang="VB">   Public Sub ExportPagesToStream()
      ' Unlock the support needed for LEADTOOLS Plus OCR engine
      RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here")
      RasterSupport.Unlock(RasterSupportType.OcrPlus, "Replace with your own key here")
      RasterSupport.Unlock(RasterSupportType.OcrPlusPdfLeadOutput, "Replace with your own key here")
      Dim imagesPath As String = LeadtoolsExamples.Common.ImagesPath.Path
      Dim tifFileName As String = LeadtoolsExamples.Common.ImagesPath.Path + "OcrMultiPage.tif"

      ' Create an instance of the engine
      Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, False)
         ' Since we have a RasterCodecs object, re-use it in the OCR engine. Although
         ' this demo will not use it, it is always a good practice
         ocrEngine.Startup(Nothing, Nothing, Nothing, Nothing)

         ' Create an OCR document
         Using ocrDocument As IOcrDocument = ocrEngine.DocumentManager.CreateDocument()

            ' Loop through the images, add them to the document
            For i As Integer = 0 To 3
               Dim pageFileName As String = Path.Combine(imagesPath, String.Format("Ocr{0}.tif", i + 1))
               ocrDocument.Pages.AddPage(pageFileName, Nothing)
            Next

            Console.WriteLine("OCR document contains {0} pages", ocrDocument.Pages.Count)

            ' Export the pages from index 1 to 3 to disk
            Using fs As FileStream = File.Create(tifFileName)
               ocrDocument.Pages.ExportPages(1, 3, fs, RasterImageFormat.Tif, 1, 1, CodecsSavePageMode.Overwrite)
            End Using
         End Using

         ' Shutdown the engine
         ' Note: calling Dispose will also automatically shutdown the engine if it has been started
         ocrEngine.Shutdown()
      End Using
   End Sub</code>
        <code lang="CS">      public void ExportPagesToStream()
      {
         // Unlock the support needed for LEADTOOLS Plus OCR engine
         RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here");
         RasterSupport.Unlock(RasterSupportType.OcrPlus, "Replace with your own key here");
         RasterSupport.Unlock(RasterSupportType.OcrPlusPdfLeadOutput, "Replace with your own key here");
         string imagesPath = LeadtoolsExamples.Common.ImagesPath.Path;
         string tifFileName = LeadtoolsExamples.Common.ImagesPath.Path + "OcrMultiPage.tif";

         // Create an instance of the engine
         using(IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, false))
         {
            // Since we have a RasterCodecs object, re-use it in the OCR engine. Although
            // this demo will not use it, it is always a good practice
            ocrEngine.Startup(null, null, null, null);

            // Create an OCR document
            using(IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument())
            {
               // Loop through the images, add them to the document
               for(int i = 0; i &lt; 4; i++)
               {
                  string pageFileName = Path.Combine(imagesPath, string.Format("Ocr{0}.tif", i + 1));
                  ocrDocument.Pages.AddPage(pageFileName, null);
               }

               Console.WriteLine("OCR Document contains {0} pages", ocrDocument.Pages.Count);

               // Export the pages from index 1 to 3 to disk
               using(FileStream fs = File.Create(tifFileName))
               {
                  ocrDocument.Pages.ExportPages(1, 3, fs, RasterImageFormat.Tif, 1, 1, CodecsSavePageMode.Overwrite);
               }
            }

            // Shutdown the engine
            // Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown();
         }
      }</code>
        <!--IOcrPageCollection.ExportPages(Stream)-->
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPage" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Leadtools~Topics.SummaryOfAllSupportedImageFileFormats.html">Summary of All Supported Image File Formats</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPageCollection.AutoPreprocess(Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand,Leadtools.Forms.Ocr.OcrProgressCallback)">
      <summary>
            Perform auto image processing clean up on all the pages in the OCR document to enhance the quality of the pages before starting its recognition.
            </summary>
      <param name="command">The preprocessing command to perform.</param>
      <param name="callback">Optional callback to show operation progress.</param>
      <remarks>
        <para>This method will iterate through all the pages in this OCR document and run <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoPreprocess(Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoPreprocess</see> on each page.</para>
        <para>You can use this method to deskew, rotate or invert the image according to <paramref name="command" />. By performing auto pre-processing on the page, you can improve the
            image quality of draft mode faxes.</para>
        <para>You can use the <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see> to show the operation progress or to abort it. For more information and an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see>.</para>
        <para>You should call this method prior to calling <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPageCollection~Recognize.html">Recognize</a>.</para>
        <para>To perform auto-preprocessing to a range of pages in the OCR document use <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.AutoPreprocess(Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand,System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrProgressCallback)">AutoPreprocess(OcrAutoPreprocessPageCommand command, int firstPageIndex, int lastPageIndex, OcrProgressCallback callback)</see>.</para>
      </remarks>
      <keywords>OCR,Preprocess</keywords>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoPreprocess(Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoPreprocess</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetDeskewAngle">IOcrPage.GetDeskewAngle</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRotateAngle">IOcrPage.GetRotateAngle</seealso>
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPageCollection~Recognize.html">Recognize</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPageCollection.AutoPreprocess(Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand,System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrProgressCallback)">
      <summary>
            Perform auto image processing clean up on a range of the pages in the OCR document to enhance the quality of the pages before starting its recognition.
            </summary>
      <param name="command">The preprocessing command to perform.</param>
      <param name="firstPageIndex">The zero-based index of the first page to preprocess.</param>
      <param name="lastPageIndex">The zero-based index of the last page to preprocess. A value of -1 means preprocess up to and including the last page in the OCR document.</param>
      <param name="callback">Optional callback to show operation progress.</param>
      <remarks>
        <para>This method will iterate through pages between <paramref name="firstPageIndex" /> and <paramref name="lastPageIndex" /> in this OCR document and run
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoPreprocess(Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoPreprocess</see> on each page.</para>
        <para>You can use this method to deskew, rotate or invert the image according to <paramref name="command" />. By performing auto pre-processing on the page, you can improve the
            image quality of draft mode faxes.</para>
        <para>You can use the <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see> to show the operation progress or to abort it. For more information and an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see>.</para>
        <para>You should call this method prior to calling <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPageCollection~Recognize.html">Recognize</a>.</para>
        <para>To perform auto-preprocessing on all the pages in the OCR document use <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.AutoPreprocess(Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand,Leadtools.Forms.Ocr.OcrProgressCallback)">AutoPreprocess(OcrAutoPreprocessPageCommand command, OcrProgressCallback callback)</see>.</para>
      </remarks>
      <keywords>OCR,Preprocess</keywords>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoPreprocess(Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoPreprocess</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetDeskewAngle">IOcrPage.GetDeskewAngle</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRotateAngle">IOcrPage.GetRotateAngle</seealso>
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPageCollection~Recognize.html">Recognize</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPageCollection.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">
      <summary>
            Performs auto decomposition of all the pages in the OCR document to find the text and graphics zones using predefined parameters
            </summary>
      <param name="callback">Optional callback to show operation progress.</param>
      <remarks>
        <para>For more information on auto zoning and decomposition, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see>.</para>
        <para>This method will iterate through all the pages in this OCR document and run <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see> on each page.</para>
        <para>You can use the <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see> to show the operation progress or to abort it. For more information and an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see>.</para>
        <para>To perform auto decomposition to a range of pages in the OCR document use <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.AutoZone(Leadtools.Forms.Ocr.OcrZoneParser,Leadtools.Forms.Ocr.OcrZoneFillMethod,Leadtools.Forms.LogicalUnit,System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone(OcrZoneParser zoneParser, OcrZoneFillMethod fillMethod, LogicalUnit zonesUnit, int firstPageIndex, int lastPageIndex, OcrProgressCallback callback)</see>.</para>
      </remarks>
      <keywords>OCR,Zoning</keywords>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</seealso>
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPageCollection~Recognize.html">Recognize</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPageCollection.AutoZone(Leadtools.Forms.Ocr.OcrZoneParser,Leadtools.Forms.Ocr.OcrZoneFillMethod,Leadtools.Forms.LogicalUnit,System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrProgressCallback)">
      <summary>
            Performs auto decomposition of a range of pages in the OCR document to find the text and graphics zones using predefined parameters
            </summary>
      <param name="zoneParser">The parser used for auto zoning.
            <para><strong>Note: This parameter will always contain <see cref="T:Leadtools.Forms.Ocr.OcrZoneParser">OcrZoneParser.Default</see> when using the LEADTOOLS OCR Advantage Engine.</strong></para></param>
      <param name="fillMethod">The fill method used in the zones found.</param>
      <param name="zonesUnit">The units for the bounding rectangle of the new zones.</param>
      <param name="firstPageIndex">The zero-based index of the first page to decompose.</param>
      <param name="lastPageIndex">The zero-based index of the last page to decompose. A value of -1 means decompose up to and including the last page in the OCR document.</param>
      <param name="callback">Optional callback to show operation progress.</param>
      <remarks>
        <para>For more information on auto zoning and decomposition, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrZoneParser,Leadtools.Forms.Ocr.OcrZoneFillMethod,Leadtools.Forms.LogicalUnit,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see>.</para>
        <para>This method will iterate through the pages between <paramref name="firstPageIndex" /> and <paramref name="lastPageIndex" /> and run <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrZoneParser,Leadtools.Forms.Ocr.OcrZoneFillMethod,Leadtools.Forms.LogicalUnit,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see> on each page.</para>
        <para>You can use the <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see> to show the operation progress or to abort it. For more information and an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see>.</para>
        <para>To perform auto decomposition to all the pages in the OCR document use <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone(OcrProgressCallback callback)</see>.</para>
      </remarks>
      <keywords>OCR,Zoning</keywords>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrZoneParser,Leadtools.Forms.Ocr.OcrZoneFillMethod,Leadtools.Forms.LogicalUnit,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrZoneParser,Leadtools.Forms.Ocr.OcrZoneFillMethod,Leadtools.Forms.LogicalUnit,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</seealso>
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPageCollection~Recognize.html">Recognize</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPageCollection.UpdateFillMethod">
      <summary>
            Update the type of text in the zones for all the pages in the OCR document.
            </summary>
      <remarks>
        <para>For more information on fill method updating of a page, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.UpdateFillMethod">IOcrPage.UpdateFillMethod</see>.</para>
        <para>This method will iterate through all the pages in the OCR document and run <see cref="M:Leadtools.Forms.Ocr.IOcrPage.UpdateFillMethod">IOcrPage.UpdateFillMethod</see> on each page.</para>
        <para>To update the fill method of a range of the pages in the OCR document use <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.UpdateFillMethod(System.Int32,System.Int32)">UpdateFillMethod(int firstPageIndex, int lastPageIndex)</see>.</para>
        <para>
          <strong>Note: This method is not supported in the LEADTOOLS OCR Advantage Engine, any call to this method will have no effect.</strong>
        </para>
      </remarks>
      <example> For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see>. </example>
      <docaddon>yes</docaddon>
      <keywords>OCR,Zoning</keywords>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.UpdateFillMethod">IOcrPage.UpdateFillMethod</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPageCollection~Recognize.html">Recognize</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPageCollection.UpdateFillMethod(System.Int32,System.Int32)">
      <summary>
            Update the type of text in the zones for all the pages in the OCR document.
            </summary>
      <param name="firstPageIndex">The zero-based index of the first page to update.</param>
      <param name="lastPageIndex">The zero-based index of the last page to update. A value of -1 means update up to and including the last page in the OCR document.</param>
      <remarks>
        <para>For more information on fill method updating of a page, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.UpdateFillMethod">IOcrPage.UpdateFillMethod</see>.</para>
        <para>This method will iterate through the pages between <paramref name="firstPageIndex" /> and <paramref name="lastPageIndex" /> and run <see cref="M:Leadtools.Forms.Ocr.IOcrPage.UpdateFillMethod">IOcrPage.UpdateFillMethod</see> on each page.</para>
        <para>To update the fill method of all the pages in the OCR document use <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.UpdateFillMethod">UpdateFillMethod()</see>.</para>
        <para>
          <strong>Note: This method is not supported in the LEADTOOLS OCR Advantage Engine, any call to this method will have no effect.</strong>
        </para>
      </remarks>
      <example> For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see>. </example>
      <docaddon>yes</docaddon>
      <keywords>OCR,Zoning</keywords>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.UpdateFillMethod">IOcrPage.UpdateFillMethod</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPageCollection~Recognize.html">Recognize</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPageCollection.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">
      <summary>
            Recognizes the OCR data found on all the pages in the OCR document.
            </summary>
      <param name="callback">Optional callback to show operation progress.</param>
      <remarks>
        <para>For more information on recognition of OCR data a page, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see>.</para>
        <para>This method will iterate through all the pages in the OCR document and run <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see> on each page.</para>
        <para>To recognize a range of the pages in the OCR document use <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.Recognize(System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrProgressCallback)">Recognize(int firstPageIndex, int lastPageIndex, OcrProgressCallback callback)</see>.</para>
        <para>You can use the <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see> to show the operation progress or to abort it. For more information and an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />.</example>
      <docaddon>yes</docaddon>
      <keywords>OCR,Recognition</keywords>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPageCollection~AutoZone.html">AutoZone</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPageCollection.Recognize(System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrProgressCallback)">
      <summary>
            Recognizes the OCR data found on a range of pages in the OCR document.
            </summary>
      <param name="firstPageIndex">The zero-based index of the first page to recognize.</param>
      <param name="lastPageIndex">The zero-based index of the last page to recognize. A value of -1 means recognize up to and including the last page in the OCR document.</param>
      <param name="callback">Optional callback to show operation progress.</param>
      <remarks>
        <para>For more information on recognition of OCR data a page, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see>.</para>
        <para>This method will iterate through all the pages between <paramref name="firstPageIndex" /> and <paramref name="lastPageIndex" /> in the OCR document and run <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see> on each page.</para>
        <para>To recognize all the pages in the OCR document use <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">Recognize(OcrProgressCallback callback)</see>.</para>
        <para>You can use the <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see> to show the operation progress or to abort it. For more information and an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />.</example>
      <docaddon>yes</docaddon>
      <keywords>OCR,Recognition</keywords>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPageCollection~AutoZone.html">AutoZone</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrPageCollection.Item(System.Int32)">
      <summary>
            Gets the page at the specified index.
            </summary>
      <param name="index">zero-based index of the page to get.</param>
      <value>The <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> object at the specified index.</value>
      <remarks>
        <para>The "setter" of this collection is hidden and should not be called.</para>
      </remarks>
      <noexample />
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPage" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="T:Leadtools.Forms.Ocr.IOcrEngine">
      <summary>Provides support for OCR functionality in LEADTOOLS.</summary>
      <remarks>
        <para>The <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> interface is your application entry point to the OCR functionality provided by LEADTOOLS.</para>
        <para>LEADTOOLS OCR class library uses various interfaces to perform various OCR functions. These interfaces group logically related operations and encapsulates them from the rest
            of the toolkit. By using interfaces, LEADTOOLS ensures that you can use an engine-independent approach when programming your OCR-based application. At any time you can switch the
            engine type and ensure that your program will continue to function correctly. (Providing you have used the various "GetSupported" and "IsSupported" methods when dealing
            with engine-specific capabilities).</para>
        <para>Obtain an instance of <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> by calling the <see cref="M:Leadtools.Forms.Ocr.OcrEngineManager.CreateEngine(Leadtools.Forms.Ocr.OcrEngineType,System.Boolean)">OcrEngineManager.CreateEngine</see> method with the appropriate
            engine type.</para>
        <para>Once an instance is obtained, use the members of the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> to perform various OCR tasks. OCR functions are grouped into
            "managers". Through these managers, you can create OCR documents (and add pages to these documents), perform zoning, recognition and saving the result documents. These managers are standard .NET interfaces with the
            implementation hidden inside the corresponding engine assembly. The following table lists the various "managers" and their main functionality:
            <list type="table"><listheader><term>Member</term><description>Description</description></listheader><item><term><see cref="P:Leadtools.Forms.Ocr.IOcrEngine.DocumentManager" /> member</term><description>Allows you to create <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> objects that encapsulate an OCR'ed document. Each <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> contains an
            <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.Pages">IOcrDocument.Pages</see> property that is an implementation of standard .NET collection of <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> objects. Use this member
            to add, remove or update image (raster) pages in the OCR document. Pages can be image files on disk, memory or even in a remote URL. Any file format supported by
            LEADTOOLS (TIFF, JPEG, BMP, etc) can be loaded into the OCR document. Once the image is loaded to the document, use the various <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> methods to zone
            the page (or pages) in preparation to be recognized and saved as a document. For more information refer to <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" />, <see cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" /> and
            <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />. Once you are done with adding and preparing the pages, you can use the save methods of the <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object to save
            the document into its final format. LEADTOOLS supports saving to various standard document formats such as PDF, Microsoft Word, HTML and several others.
            For more information, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrDocumentManager" />, <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> and <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />.</description></item><item><term><see cref="P:Leadtools.Forms.Ocr.IOcrEngine.ZoneManager" /> member</term><description>Provides support for determining the various zone types, recognition modules and fill methods supported by this engine type. For more information, refer to
            <see cref="T:Leadtools.Forms.Ocr.IOcrZoneManager" />, <see cref="T:Leadtools.Forms.Ocr.OcrZoneType" />, <see cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule" /> and <see cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod" />.</description></item><item><term><see cref="P:Leadtools.Forms.Ocr.IOcrEngine.AutoRecognizeManager" /> member</term><description>Provides support for one shot "fire and forget" approach to OCR. The methods of this interface will let you create a result document from an image file on disk with
            optional progress and status monitors. For more information, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager" />.</description></item><item><term><see cref="P:Leadtools.Forms.Ocr.IOcrEngine.LanguageManager" /> member</term><description>Provides access to the language environment used by the OCR engine. You can use the methods and properties of this member to set the character set used by the OCR
            engine as well as spell correction. For more information, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrLanguageManager" />.</description></item><item><term><see cref="P:Leadtools.Forms.Ocr.IOcrEngine.SpellCheckManager" /> member</term><description>Allows you to enable/disable the spell checking system as well to maintain language and user dictionaries. Also lets you set up a global callback for manual word or line
            verification when performing a recognition operation. </description></item><item><term><see cref="P:Leadtools.Forms.Ocr.IOcrEngine.SettingManager" /> member</term><description>Each OCR engine supported by LEADTOOLS has additional options and functionalities that can be accessed through this member. After setting up the engine, you can quickly save and later load the settings using the <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.SettingManager" />. For more information, refer to <see href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrSettingManager.html">IOcrSettingManager</see>.</description></item></list></para>
      </remarks>
      <keywords>OCR|OCR,Engines</keywords>
      <example>
        <para>The following example will convert an image file to a PDF document.</para>
        <code lang="VB">   Public Sub OcrEngineExample()
      ' Unlock the support needed for LEADTOOLS Plus OCR engine
      RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here")
      RasterSupport.Unlock(RasterSupportType.OcrPlus, "Replace with your own key here")
      RasterSupport.Unlock(RasterSupportType.OcrPlusPdfLeadOutput, "Replace with your own key here")
      ' Create an instance of the engine
      Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, False)
         ' Start the engine using default parameters
         ocrEngine.Startup(Nothing, Nothing, Nothing, Nothing)

         Dim tifFileName As String = LeadtoolsExamples.Common.ImagesPath.Path + "Ocr1.tif"
         Dim pdfFileName As String = LeadtoolsExamples.Common.ImagesPath.Path + "Ocr1.pdf"

         ' Create an OCR document
         Using ocrDocument As IOcrDocument = ocrEngine.DocumentManager.CreateDocument()

            ' Add a page to the document
            Dim ocrPage As IOcrPage = ocrDocument.Pages.AddPage(tifFileName, Nothing)

            ' Recognize the page
            ' Note, Recognize can be called without calling AutoZone or manually adding zones. The engine will
            ' check and automatically auto-zones the page
            ocrPage.AutoZone(Nothing)
            ocrPage.Recognize(Nothing)

            ' Save the document we have as PDF
            ocrDocument.Save(pdfFileName, DocumentFormat.Pdf, Nothing)
         End Using

         ' Shutdown the engine
         ' Note: calling Dispose will also automatically shutdown the engine if it has been started
         ocrEngine.Shutdown()
      End Using
   End Sub</code>
        <code lang="CS">      public void OcrEngineExample()
      {
         // Unlock the support needed for LEADTOOLS Plus OCR engine
         RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here");
         RasterSupport.Unlock(RasterSupportType.OcrPlus, "Replace with your own key here");
         RasterSupport.Unlock(RasterSupportType.OcrPlusPdfLeadOutput, "Replace with your own key here");
         // Create an instance of the engine
         using(IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, false))
         {
            // Start the engine using default parameters
            ocrEngine.Startup(null, null, null, null);

            string tifFileName = LeadtoolsExamples.Common.ImagesPath.Path + "Ocr1.tif";
            string pdfFileName = LeadtoolsExamples.Common.ImagesPath.Path + "Ocr1.pdf";

            // Create an OCR document
            using(IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument())
            {
               // Add a page to the document
               IOcrPage ocrPage = ocrDocument.Pages.AddPage(tifFileName, null);

               // Recognize the page
               // Note, Recognize can be called without calling AutoZone or manually adding zones. The engine will
               // check and automatically auto-zones the page
               ocrPage.AutoZone(null);
               ocrPage.Recognize(null);

               // Save the document we have as PDF
               ocrDocument.Save(pdfFileName, DocumentFormat.Pdf, null);
            }

            // Shutdown the engine
            // Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown();
         }
      }</code>
        <!--IOcrEngine-->
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.CreatingAnOcrEngineInstance.html">Creating an OCR Engine Instance</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.StartingAndShuttingDownTheOcrEngine.html">Starting and Shutting Down the OCR Engine</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">
      <summary>
            Starts the OCR engine.
            </summary>
      <param name="rasterCodecs">Optional instance of a <see cref="T:Leadtools.Codecs.RasterCodecs" /> object to be used when loading image files from disk inside the engine. You can pass your own initialized
            instance of <see cref="T:Leadtools.Codecs.RasterCodecs" /> to be used. The same object will then be used internally by the OCR engine when loading raster image files. Otherwise, pass <strong>null</strong>
            (<strong>Nothing</strong> in Visual Basic) and the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> will create and use its own version of <see cref="T:Leadtools.Codecs.RasterCodecs" /> when needed.</param>
      <param name="documentWriter">Optional instance of a <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" /> object to be used when saving OCR documents to disk inside the engine. You can pass your own initialized
            instance of <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" /> to be used. The same object will then be used internally by the OCR engine when saving OCR documents to disk. Otherwise, pass <strong>null</strong>
            (<strong>Nothing</strong> in Visual Basic) and the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> will create and use its own version of <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" /> when needed.</param>
      <param name="workDirectory">
        <para>Optional path to a directory to be used when the engine saves temporary files. The <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> object will create various temporary files
            during recognition and document saving processes. It will use the path passed in <i>workDirectory</i> as the location where these temporary files will be created. You
            can pass <strong>null</strong> (<strong>Nothing</strong> in Visual Basic) to let the engine select the temporary directory of the current logged in user (<strong>TEMP</strong>).</para>
        <para>In either case, the value of working directory of the current started <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> can be obtained through the <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.WorkDirectory" /> property.</para>
        <para>The engine automatically deletes any temporary files created. However, if an unexpected error occurs (for example, an unhandled exception), some temporary files
            may still reside in the work directory after the application exits. A typical application may use a custom directory inside the application path and manually deletes
            any files that may reside there before calling <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</see> in case the previous instance of the application exited abnormally.</para>
        <para>If the value of the <i>workDirectory</i> parameter is not <strong>null</strong> (<strong>Nothing</strong> in Visual Basic), then it must refer to a valid
            directory that exists in the system and the process that created the engine must have enough access rights to read, write and delete files from this directory.</para>
      </param>
      <param name="startupParameters">Optional startup parameter. The value of this parameter depends on the type of this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> as follows:
            <list type="table"><listheader><term>Engine</term><description>startupParameters</description></listheader><item><term><see cref="T:Leadtools.Forms.Ocr.OcrEngineType">OcrEngineType.Advantage</see></term><description><para>The path to the folder containing the OCR engine files.</para><para>
            By default, during setup the LEADTOOLS OCR Module setup installs the OCR engine files to <strong>"<i>Installation Path</i>\Bin\Common\OcrAdvantageRuntime"</strong>
            where <i>Installation Path</i> is the root folder where the LEADTOOLS for .NET Class Library is installed (for example, <strong>C:\Program Files (x86)\LEAD Technologies\LEADTOOLS 17</strong>).
            </para><para>
            If you pass <strong>null</strong> (<strong>Nothing</strong> in Visual Basic) to <i>startupParameters</i>, then the LEADTOOLS OCR engine will look for these extra files in the
            default installation folder specified above.
            </para><para>When you are ready to package your application, you might want to change the location where the LEADTOOLS OCR engine looks for these extra files. You can use this property
            to do that.  Set the path you want before calling the <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</see> method.</para></description></item><item><term><see cref="T:Leadtools.Forms.Ocr.OcrEngineType">OcrEngineType.Plus</see></term><description><para>The path to the folder containing the OCR engine files.</para><para>
            By default, during setup the LEADTOOLS OCR Module setup installs the OCR engine files to <strong>"<i>Installation Path</i>\Bin\Common\OcrPlusRuntime"</strong>
            where <i>Installation Path</i> is the root folder where the LEADTOOLS for .NET Class Library is installed (for example, <strong>C:\Program Files (x86)\LEAD Technologies\LEADTOOLS 17</strong>).
            </para><para>
            If you pass <strong>null</strong> (<strong>Nothing</strong> in Visual Basic) to <i>startupParameters</i>, then the LEADTOOLS OCR engine will look for these extra files in the
            default installation folder specified above.
            </para><para>When you are ready to package your application, you might want to change the location where the LEADTOOLS OCR engine looks for these extra files. You can use this property
            to do that.  Set the path you want before calling the <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</see> method.</para></description></item><item><term><see cref="T:Leadtools.Forms.Ocr.OcrEngineType">OcrEngineType.Professional</see></term><description><para>The path to the folder containing the OCR engine files.</para><para>
            By default, during setup the LEADTOOLS OCR Module setup installs the OCR engine files to <strong>"<i>Installation Path</i>\Bin\Common\OcrProfessionalRuntime"</strong>
            where <i>Installation Path</i> is the root folder where the LEADTOOLS for .NET Class Library is installed (for example, <strong>C:\Program Files (x86)\LEAD Technologies\LEADTOOLS 17</strong>).
            </para><para>
            If you pass <strong>null</strong> (<strong>Nothing</strong> in Visual Basic) to <i>startupParameters</i>, then the LEADTOOLS OCR engine will look for these extra files in the
            default installation folder specified above.
            </para><para>When you are ready to package your application, you might want to change the location where the LEADTOOLS OCR engine looks for these extra files. You can use this property
            to do that.  Set the path you want before calling the <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</see> method.</para></description></item></list></param>
      <remarks>
        <para>The <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</see> method must be called before invoking any other methods or properties in this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.</para>
        <para>To check if the engine is started, use the <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.IsStarted" /> property.</para>
        <para>You must call <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Shutdown" /> to shut down the engine and free the memory and resources used.</para>
        <para>You can call the <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</see> method multiple times, only the first call will start the engine while subsequent calls will only increment an internal counter. You must
            call <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Shutdown" /> for each <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</see> called.</para>
        <para>The <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> interface implements <see cref="T:System.IDisposable" />. It is highly recommended that you call <see cref="M:System.IDisposable.Dispose" /> (or use the <strong>using</strong>
            statement in C# or <strong>Using</strong> statement in Visual Basic) when creating the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> instance. The <see cref="M:System.IDisposable.Dispose" /> method will automatically
            shuts down the engine if it has been started.</para>
      </remarks>
      <keywords>OCR,Engines</keywords>
      <example>
        <para>The following example assumes you copied the OCR engine runtime files to C:\MyApp\Ocr.</para>
        <code lang="VB">   Public Sub StartupEngineExample()
      ' Unlock the support needed for LEADTOOLS Plus OCR engine
      RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here")
      RasterSupport.Unlock(RasterSupportType.OcrPlus, "Replace with your own key here")
      RasterSupport.Unlock(RasterSupportType.OcrPlusPdfLeadOutput, "Replace with your own key here")
      ' Use RasterCodecs to load an image file
      ' Note: You can let the engine load the image file directly as shown in the other examples
      RasterCodecs.Startup()
      Dim codecs As New RasterCodecs()
      Dim image As RasterImage = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Ocr1.tif")

      ' Assume you coped the engine runtime files to C:\MyApp\Ocr
      Dim engineDir As String = "C:\MyApp\Ocr"

      ' Store the engine work directory into a path inside our application
      Dim workDir As String = "C:\MyApp\OcrTemp"

      ' Delete all files in the work directory in case the previous version of our application exited abnormally and
      ' the engine did not get the chance to clean all of its temporary files (if any)
      Directory.Delete(workDir, True)

      ' Re-create the work directory
      Directory.CreateDirectory(workDir)

      ' Create an instance of the engine
      Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, False)
         ' Show that the engine has not been started yet
         Console.WriteLine("Before calling Startup, IsStarted = " + ocrEngine.IsStarted.ToString())

         ' Start the engine using our parameters
         ' Since we already have a RasterCodecs object, we can re-use it to save memory and resources
         ocrEngine.Startup(codecs, Nothing, workDir, engineDir)

         ' Make sure the engine is using our working directory
         Console.WriteLine("workDir passed is {0}, the value of WorkDirectory after Startup is {1}", workDir, ocrEngine.WorkDirectory)

         ' Show that the engine has started fine
         Console.WriteLine("After calling Startup, EngineType is {0}, IsStarted = {1}", ocrEngine.EngineType, ocrEngine.IsStarted)

         ' Maks sure the engine is using our own version of RasterCodecs
         Debug.Assert(codecs Is ocrEngine.RasterCodecsInstance)

         ' Create an OCR document
         Using ocrDocument As IOcrDocument = ocrEngine.DocumentManager.CreateDocument()
            ' Add the raster image as page to the document
            Dim ocrPage As IOcrPage = ocrDocument.Pages.AddPage(image, Nothing)

            ' Recognize the page
            ' Note, Recognize can be called without calling AutoZone or manually adding zones. The engine will
            ' check and automatically auto-zones the page
            ocrPage.Recognize(Nothing)

            ' Save the document we have as PDF
            Dim pdfFileName As String = LeadtoolsExamples.Common.ImagesPath.Path + "Ocr1.pdf"
            ocrDocument.Save(pdfFileName, DocumentFormat.Pdf, Nothing)
         End Using

         ' Shutdown the engine
         ' Note: calling Dispose will also automatically shutdown the engine if it has been started
         ocrEngine.Shutdown()
      End Using
   End Sub</code>
        <code lang="CS">      public void StartupEngineExample()
      {
         // Unlock the support needed for LEADTOOLS Plus OCR engine
         RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here");
         RasterSupport.Unlock(RasterSupportType.OcrPlus, "Replace with your own key here");
         RasterSupport.Unlock(RasterSupportType.OcrPlusPdfLeadOutput, "Replace with your own key here");
         // Use RasterCodecs to load an image file
         // Note: You can let the engine load the image file directly as shown in the other examples
         RasterCodecs.Startup();
         RasterCodecs codecs = new RasterCodecs();
         RasterImage image = codecs.Load(LeadtoolsExamples.Common.ImagesPath.Path + "Ocr1.tif");

         // Assume you coped the engine runtime files to C:\MyApp\Ocr
         string engineDir = @"C:\MyApp\Ocr";

         // Store the engine work directory into a path inside our application
         string workDir = @"C:\MyApp\OcrTemp";

         // Delete all files in the work directory in case the previous version of our application exited abnormally and
         // the engine did not get the chance to clean all of its temporary files (if any)
         Directory.Delete(workDir, true);

         // Re-create the work directory
         Directory.CreateDirectory(workDir);

         // Create an instance of the engine
         using(IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, false))
         {
            // Show that the engine has not been started yet
            Console.WriteLine("Before calling Startup, IsStarted = " + ocrEngine.IsStarted);

            // Start the engine using our parameters
            // Since we already have a RasterCodecs object, we can re-use it to save memory and resources
            ocrEngine.Startup(codecs, null, workDir, engineDir);

            // Make sure the engine is using our working directory
            Console.WriteLine("workDir passed is {0}, the value of WorkDirectory after Startup is {1}", workDir, ocrEngine.WorkDirectory);

            // Show that the engine has started fine
            Console.WriteLine("After calling Startup, EngineType is {0}, IsStarted = {1}", ocrEngine.EngineType, ocrEngine.IsStarted);

            // Maks sure the engine is using our own version of RasterCodecs
            Debug.Assert(codecs == ocrEngine.RasterCodecsInstance);

            // Create an OCR document
            using(IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument())
            {
               // Add the raster image as page to the document
               IOcrPage ocrPage = ocrDocument.Pages.AddPage(image, null);

               // Recognize the page
               // Note, Recognize can be called without calling AutoZone or manually adding zones. The engine will
               // check and automatically auto-zones the page
               ocrPage.Recognize(null);

               // Save the document we have as PDF
               string pdfFileName = LeadtoolsExamples.Common.ImagesPath.Path + "Ocr1.pdf";
               ocrDocument.Save(pdfFileName, DocumentFormat.Pdf, null);
            }

            // Shutdown the engine
            // Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown();
         }
      }</code>
        <!--IOcrEngine.Startup-->
      </example>
      <isnew>5/8/2009</isnew>
      <docaddon>yes</docaddon>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrEngine.WorkDirectory" />
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrEngine.IsStarted" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Shutdown" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.CreatingAnOcrEngineInstance.html">Creating an OCR Engine Instance</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.StartingAndShuttingDownTheOcrEngine.html">Starting and Shutting Down the OCR Engine</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrEngine.Shutdown">
      <summary>
            Shuts down the OCR engine and frees all resources and memory allocated to it.
            </summary>
      <remarks>
        <para>The <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</see> method must be called before invoking any other methods or properties in this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.</para>
        <para>To check if the engine is started, use the <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.IsStarted" /> property.</para>
        <para>You must call <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Shutdown" /> to shut down the engine and free the memory and resources used.</para>
        <para>You can call the <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</see> method multiple times, only the first call will start the engine while subsequent calls will only increment an internal counter. You must
            call <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Shutdown" /> for each <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</see> called.</para>
        <para>The <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> interface implements <see cref="T:System.IDisposable" />. It is highly recommended that you call <see cref="M:System.IDisposable.Dispose" /> (or use the
            <strong>using</strong> statement in C# or <strong>Using</strong> statement in Visual Basic) when creating the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> instance. The
            <see cref="M:System.IDisposable.Dispose" /> method will automatically shuts down the engine if it has been started.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrEngine.IsStarted" />
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrEngine.WorkDirectory" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.CreatingAnOcrEngineInstance.html">Creating an OCR Engine Instance</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.StartingAndShuttingDownTheOcrEngine.html">Starting and Shutting Down the OCR Engine</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrEngine.GetErrorCodeString(System.Int64)">
      <summary>
            Gets a string description of an engine-specific error code value.
            </summary>
      <param name="code">engine-specific error code value. This is normally obtained as the <see cref="P:Leadtools.Forms.Ocr.OcrException.Code">Code</see> member when an exception of type
            <see cref="T:Leadtools.Forms.Ocr.OcrException" /> is thrown by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.</param>
      <returns>A <see cref="T:System.String" /> that contains a short description of the error code value.</returns>
      <remarks>
        <para>When a runtime error occurs in this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />, an exception of type <see cref="T:Leadtools.Forms.Ocr.OcrException" /> is thrown with the engine-specific error code set in the
            <see cref="P:Leadtools.Forms.Ocr.OcrException.Code">Code</see> member. This error code is engine-specific but a short description can be obtained using the <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.GetErrorCodeString(System.Int64)" /> method.</para>
        <para>Logic errors such as invalid parameters to methods or invalid operations throw standard .NET exceptions (in this case, <see cref="T:System.ArgumentException" /> and
            <see cref="T:System.InvalidOperationException" /> respectively Errors caused by loading invalid image files using <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.RasterCodecsInstance" /> will throw exceptions of type
            <see cref="T:Leadtools.RasterException" />. Errors for missing features (support locked) will throw <see cref="T:Leadtools.Forms.Ocr.OcrSupportLockedException" /> exceptions. Any other runtime error in the engine
            will throw an <see cref="T:Leadtools.Forms.Ocr.OcrException" />.</para>
      </remarks>
      <example>
        <para>This example will cause an error in the engine and then catch and display the error code message</para>
        <code lang="VB">   Public Sub GetErrorCodeStringExample()
      ' Create a brand new directory
      Dim engineDir As String = "C:\MyApp\WrongOcrEngineDirectory"
      If (Directory.Exists(engineDir)) Then
         Directory.Delete(engineDir, True)
      End If

      Directory.CreateDirectory(engineDir)

      ' This directory exists, but it does not contain the OCR runtimes.
      ' Calling Startup passing this engine parameters should throw an OcrException

      ' Create an instance of the engine
      Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, False)
         ' Start it up with our wrong engine directory (this should cause an exception)
         Try
            ocrEngine.Startup(Nothing, Nothing, Nothing, engineDir)

         Catch ex As OcrException
            ' Get and show a description of the error
            Dim code As Long = ex.Code
            Dim description As String = ocrEngine.GetErrorCodeString(code)
            Console.WriteLine(description)
         End Try
      End Using
   End Sub</code>
        <code lang="CS">      public void GetErrorCodeStringExample()
      {
         // Create a brand new directory
         string engineDir = @"C:\MyApp\WrongOcrEngineDirectory";
         if(Directory.Exists(engineDir))
            Directory.Delete(engineDir, true);

         Directory.CreateDirectory(engineDir);

         // This directory exists, but it does not contain the OCR runtimes.
         // Calling Startup passing this engine parameters should throw an OcrException

         // Create an instance of the engine
         using(IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, false))
         {
            // Start it up with our wrong engine directory (this should cause an exception)
            try
            {
               ocrEngine.Startup(null, null, null, engineDir);
            }
            catch(OcrException ex)
            {
               // Get and show a description of the error
               long code = ex.Code;
               string description = ocrEngine.GetErrorCodeString(code);
               Console.WriteLine(description);
            }
         }
      }</code>
        <!--IOcrEngine.GetErrorCodeString-->
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrEngine.IsStarted" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Shutdown" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPage" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrEngine.GetLastStatistic">
      <summary>
            Gets the accuracy and timing data of the latest successful recognition process.
            </summary>
      <returns>An <see cref="T:Leadtools.Forms.Ocr.OcrStatistic" /> object that contains accuracy and timing data of the latest successful recognition process.</returns>
      <remarks>
        <para>You can use this method after calling <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoPreprocess(Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoPreprocess</see>, <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPage~AutoZone.html">IOcrPage.AutoZone</a>,
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see> or <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~Save.html">IOcrDocument.Save</a> to get the accuracy and timing data of the latest
            successful recognition process</para>
        <para>If you use the <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPageCollection~Recognize.html">IOcrPageCollection.Recognize</a> method, the <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.GetLastStatistic" /> will return the statistic for the
            last page only.</para>
        <para>
          <strong>Note: When using the LEADTOOLS OCR Advantage Engine you can use this method ONLY after calling the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see> method.</strong>
        </para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrStatistic" /></example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrStatistic" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrEngine.IsStarted" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Shutdown" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPage" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoPreprocess(Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoPreprocess</seealso>
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPage~AutoZone.html">IOcrPage.AutoZone</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~Save.html">IOcrDocument.Save</seealso>
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~SaveXml.html">IOcrDocument.SaveXml</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrEngine.IsStarted">
      <summary>
            Determines whether this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> has been started and is ready to be used.
            </summary>
      <value>
        <strong>true</strong> if this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> has been started and is ready to be used, otherwise it is <strong>false</strong>.</value>
      <remarks>
        <para>The <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</see> method must be called before invoking any other methods or properties in this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.</para>
        <para>To check if the engine is started, use the <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.IsStarted" /> property.</para>
        <para>You must call <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Shutdown" /> to shut down the engine and free the memory and resources used.</para>
        <para>You can call the <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</see> method multiple times, only the first call will start the engine while subsequent calls will only increment an internal counter. You must
            call <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Shutdown" /> for each <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</see> called.</para>
        <para>The <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> interface implements <see cref="T:System.IDisposable" />. It is highly recommended that you call <see cref="M:System.IDisposable.Dispose" /> (or use the
            <strong>using</strong>statement in C# or <strong>Using</strong> statement in Visual Basic) when creating the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> instance. The
            <see cref="M:System.IDisposable.Dispose" /> method automatically shuts down the engine if it has been started.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Shutdown" />
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrEngine.WorkDirectory" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.CreatingAnOcrEngineInstance.html">Creating an OCR Engine Instance</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.StartingAndShuttingDownTheOcrEngine.html">Starting and Shutting Down the OCR Engine</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrEngine.EngineType">
      <summary>
            Gets the type of this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.
            </summary>
      <value>An <see cref="T:Leadtools.Forms.Ocr.OcrEngineType" /> enumeration member indicating the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> type.</value>
      <remarks>
        <para>The value returned from the <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.EngineType" /> property is the same value you pass to the <paramref name="engineType" /> parameter of the
            <see cref="M:Leadtools.Forms.Ocr.OcrEngineManager.CreateEngine(Leadtools.Forms.Ocr.OcrEngineType,System.Boolean)">OcrEngineManager.CreateEngine</see> method. If your application requires keeping track of the engine type (for example, to enable/disable
            user interface elements based on which OCR engine is being used), then you can use the <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.EngineType" /> property of the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> object instead of storing
            a variable in your program.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Shutdown" />
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrEngine.WorkDirectory" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.CreatingAnOcrEngineInstance.html">Creating an OCR Engine Instance</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.StartingAndShuttingDownTheOcrEngine.html">Starting and Shutting Down the OCR Engine</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrEngine.WorkDirectory">
      <summary>
            Gets the path to the work directory used by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> to store the engine temporary files.
            </summary>
      <value>The path to the work directory used by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> to store the engine temporary files.</value>
      <remarks>
        <para>The <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.WorkDirectory" /> is passed as the <i>workDirectory</i> parameter to the <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</see> method. This directory is used when the engine
            saves the its temporary files. The <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> object will create various temporary files during recognition and document saving processes. It will use the path passed in
            <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.WorkDirectory" /> as the location where these temporary files will be created. You can pass <strong>null</strong> (<strong>Nothing</strong> in Visual Basic)
            to let the engine select the temporary directory of the current logged in user (<strong>TEMP</strong>).</para>
        <para>In either case, the value of working directory of the current started <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> can be obtained through the <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.WorkDirectory" /> property.</para>
        <para>The engine will automatically deletes any temporary files created. However, if an unexpected error occurs (for example, an unhandled exception), some temporary files
            may still reside in the work directory after the application exits. A typical application may use a custom directory inside the application path and manually deletes
            any files that may reside there before calling <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</see> in case the previous instance of the application exited abnormally.</para>
        <para>If the value of <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.WorkDirectory" /> is not <strong>null</strong> (<strong>Nothing</strong> in Visual Basic), then it must refer to a valid
            directory that exists in the system and the process that created the engine must have  access rights to read, write and delete files from this directory.</para>
        <para>The value <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.WorkDirectory" /> will hold the current work directory used by the OCR engine, if you passed <strong>null</strong> (<strong>Nothing</strong> in Visual Basic)
            in the <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</see> method, the value of this property will be set to the current logged in user <strong>TEMP</strong> value.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrEngine.IsStarted" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Shutdown" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrEngine.RasterCodecsInstance">
      <summary>
            Gets the instance of the <see cref="T:Leadtools.Codecs.RasterCodecs" /> object being used inside this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.
            </summary>
      <value>The <see cref="T:Leadtools.Codecs.RasterCodecs" /> object being used inside this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.</value>
      <remarks>
        <para>You can pass an instance of an already initialized <see cref="T:Leadtools.Codecs.RasterCodecs" /> object to the <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</see> method. This <see cref="T:Leadtools.Codecs.RasterCodecs" /> objects will then
            be used internal by the engine when loading image files from disk or memory. Otherwise, when passing <strong>null</strong> (<strong>Nothing</strong> in Visual Basic), the
            <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> will create and use its own version of <see cref="T:Leadtools.Codecs.RasterCodecs" /> during the startup procedure.</para>
        <para>The internal <see cref="T:Leadtools.Codecs.RasterCodecs" /> object will be disposed of by the engine automatically when <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Shutdown" /> or <see cref="M:System.IDisposable.Dispose" /> is called. If
            you passed your own instance of <see cref="T:Leadtools.Codecs.RasterCodecs" />, then the engine will not dispose it and you can continue to use it as normal after the engine instance has been disposed.
            When passing your own instance of <see cref="T:Leadtools.Codecs.RasterCodecs" />, make sure this instance stays valid as long as the engine is started.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrEngine.IsStarted" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Shutdown" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrEngine.DocumentWriterInstance">
      <summary>
            Gets the instance of the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" /> object being used inside this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.
            </summary>
      <value>The <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" /> object being used inside this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.</value>
      <remarks>
        <para>You can pass an instance of an already initialized <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" /> object to the <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</see> method. This <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" /> objects will then
            be used internal by the engine when saving OCR documents to disk or memory. Otherwise, when passing <strong>null</strong> (<strong>Nothing</strong> in Visual Basic), the
            <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> will create and use its own version of <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" /> during the startup procedure.</para>
        <para>The internal <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" /> object will be disposed of by the engine automatically when <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Shutdown" /> or <see cref="M:System.IDisposable.Dispose" /> is called. If
            you passed your own instance of <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />, then the engine will not dispose it and you can continue to use it as normal after the engine instance has been disposed.
            When passing your own instance of <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter" />, make sure this instance stays valid as long as the engine is started.</para>
      </remarks>
      <example>
        <para>This example shows how to use the <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.DocumentWriterInstance" /> property to modify the save document options before creating the final document. It will set the
            the PDF options to be PDF/A image over text.</para>
        <code lang="VB">   Public Sub DocumentWriterInstanceExample()
      ' Unlock the support needed for LEADTOOLS Plus OCR engine
      RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here")
      RasterSupport.Unlock(RasterSupportType.OcrPlus, "Replace with your own key here")
      RasterSupport.Unlock(RasterSupportType.OcrPlusPdfLeadOutput, "Replace with your own key here")
      ' Create an instance of the engine
      Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, False)
         ' Start the engine using default parameters
         ocrEngine.Startup(Nothing, Nothing, Nothing, Nothing)

         ' You can change the output document options at any time after the engine has
         ' started. Here we will change the PDF options to be PDF/A format with image
         ' over text option turned on

         ' Get the DocumentWriter instance used in this OCR engine
         Dim docWriter As DocumentWriter = ocrEngine.DocumentWriterInstance

         ' Get the current PDF options, modify and then set it back
         Dim pdfOptions As PdfDocumentOptions = DirectCast(docWriter.GetOptions(DocumentFormat.Pdf), PdfDocumentOptions)

         pdfOptions.DocumentType = PdfDocumentType.PdfA
         pdfOptions.ImageOverText = True

         docWriter.SetOptions(DocumentFormat.Pdf, pdfOptions)

         ' At this point on, every call to IOcrDocument.Save with format equals to DocumentFormat.Pdf will
         ' use the options we set

         Dim tifFileName As String = LeadtoolsExamples.Common.ImagesPath.Path + "Ocr1.tif"
         Dim pdfFileName As String = LeadtoolsExamples.Common.ImagesPath.Path + "Ocr1.pdf"

         ' Create an OCR document
         Using ocrDocument As IOcrDocument = ocrEngine.DocumentManager.CreateDocument()
            ' Add a page to the document
            Dim ocrPage As IOcrPage = ocrDocument.Pages.AddPage(tifFileName, Nothing)

            ' Recognize the page
            ' Note, Recognize can be called without calling AutoZone or manually adding zones. The engine will
            ' check and automatically auto-zones the page
            ocrPage.AutoZone(Nothing)
            ocrPage.Recognize(Nothing)

            ' Save the document we have as PDF
            ' This will use the options we set earlier (PDF/A with image over text)
            ocrDocument.Save(pdfFileName, DocumentFormat.Pdf, Nothing)
         End Using

         ' Shutdown the engine
         ' Note: calling Dispose will also automatically shutdown the engine if it has been started
         ocrEngine.Shutdown()
      End Using
   End Sub</code>
        <code lang="CS">      public void DocumentWriterInstanceExample()
      {
         // Unlock the support needed for LEADTOOLS Plus OCR engine
         RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here");
         RasterSupport.Unlock(RasterSupportType.OcrPlus, "Replace with your own key here");
         RasterSupport.Unlock(RasterSupportType.OcrPlusPdfLeadOutput, "Replace with your own key here");
         // Create an instance of the engine
         using(IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, false))
         {
            // Start the engine using default parameters
            ocrEngine.Startup(null, null, null, null);

            // You can change the output document options at any time after the engine has
            // started. Here we will change the PDF options to be PDF/A format with image
            // over text option turned on

            // Get the DocumentWriter instance used in this OCR engine
            DocumentWriter docWriter = ocrEngine.DocumentWriterInstance;

            // Get the current PDF options, modify and then set it back
            PdfDocumentOptions pdfOptions = docWriter.GetOptions(DocumentFormat.Pdf) as PdfDocumentOptions;

            pdfOptions.DocumentType = PdfDocumentType.PdfA;
            pdfOptions.ImageOverText = true;

            docWriter.SetOptions(DocumentFormat.Pdf, pdfOptions);

            // At this point on, every call to IOcrDocument.Save with format equals to DocumentFormat.Pdf will
            // use the options we set

            string tifFileName = LeadtoolsExamples.Common.ImagesPath.Path + "Ocr1.tif";
            string pdfFileName = LeadtoolsExamples.Common.ImagesPath.Path + "Ocr1.pdf";

            // Create an OCR document
            using(IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument())
            {
               // Add a page to the document
               IOcrPage ocrPage = ocrDocument.Pages.AddPage(tifFileName, null);

               // Recognize the page
               // Note, Recognize can be called without calling AutoZone or manually adding zones. The engine will
               // check and automatically auto-zones the page
               ocrPage.AutoZone(null);
               ocrPage.Recognize(null);

               // Save the document we have as PDF
               // This will use the options we set earlier (PDF/A with image over text)
               ocrDocument.Save(pdfFileName, DocumentFormat.Pdf, null);
            }

            // Shutdown the engine
            // Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown();
         }
      }</code>
        <!--IOcrEngine.DocumentWriterInstance-->
      </example>
      <isnew>5/8/2009</isnew>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrEngine.IsStarted" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Shutdown" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrEngine.SettingManager">
      <summary>
            Manages the underlying engine-specific settings of this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.
            </summary>
      <value>The instance of the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> object used to manage the underlying OCR engine-specific settings of this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.</value>
      <remarks>
        <para>The <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.SettingManager" /> allows you to do the following:
            <list type="bullet"><item><description>Get and set the underlying engine-specific settings. <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> is a wrapper for different OCR engines, these engines contain additional
            features and functionalities specific to the current engine that can be queried and updated using the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface.</description></item><item><description>Load and save the engine settings. Once you set up the OCR engine you can re-use these settings by saving the engine state into memory or to
            an XML file on disk. You can later reload these settings and use them in the same or a different instance of <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.</description></item></list></para>
        <para>For more information, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</para>
        <para>You must call the <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</see> method before you can use the <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.SettingManager" />.</para>
        <para>Note: The <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.LanguageManager" /> and <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.SpellCheckManager" /> state is also saved when the engine settings are saved. For more information,
            refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</para>
        <para>For a list of supported engine-specific settings and their meanings, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettings.html">OCR engine-specific Settings</a>.</para>
      </remarks>
      <keywords>OCR,Settings</keywords>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrEngine.IsStarted" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Shutdown" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettings.html">OCR engine-specific Settings</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrEngine.LanguageManager">
      <summary>
            Provides access to the language environment of the character sets used by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.
            </summary>
      <value>The instance of the <see cref="T:Leadtools.Forms.Ocr.IOcrLanguageManager" /> object used to manage the language environment of the character sets.</value>
      <remarks>
        <para>The <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.LanguageManager" /> allows you to do the following:
            <list type="bullet"><item><description>Query the languages supported by this OCR engine.</description></item><item><description>Enable or disable specific language character sets from participating in the spell checking subsystem.</description></item></list></para>
        <para>For more information, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrLanguageManager" />.</para>
        <para>You must call the <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</see> method before you can use the <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.LanguageManager" />.</para>
        <para>Note: The <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.LanguageManager" /> state is also saved when the engine settings are saved. For more information, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</para>
      </remarks>
      <keywords>OCR,Languages</keywords>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrLanguageManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrEngine.IsStarted" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Shutdown" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrEngine.SpellCheckManager">
      <summary>
            Manages the spell checking subsystem.
            </summary>
      <value>The instance of the <see cref="T:Leadtools.Forms.Ocr.IOcrSpellCheckManager" /> object used to manage the spell checking system.</value>
      <remarks>
        <para>The spell checking system contains three parts:
            <list type="number"><item><description>The use of the language dictionary in spell checking.</description></item><item><description>The user dictionary setting.</description></item><item><description>User supplied callback for word verification.</description></item></list></para>
        <para>For more information, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSpellCheckManager" />.</para>
        <para>You must call the <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</see> method before you can use the <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.SpellCheckManager" />.</para>
        <para>Note: The <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.SpellCheckManager" /> state is also saved when the engine settings are saved. For more information, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</para>
      </remarks>
      <keywords>OCR,Spelling and correction</keywords>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSpellCheckManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrEngine.IsStarted" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Shutdown" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrEngine.ZoneManager">
      <summary>
            Provides support for determining the various zone types, recognition modules and fill methods supported by this engine type.
            </summary>
      <value>The instance of the <see cref="T:Leadtools.Forms.Ocr.IOcrZoneManager" /> object that provide support for determining the various zone types, recognition modules and fill methods supported
            by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.</value>
      <remarks>
        <para>The zone manager contains information about the following:
            <list type="bullet"><item><description>The zone types supported by this engine. For example, "Text", "Graphics" or "Table". For more information, refer to <see cref="T:Leadtools.Forms.Ocr.OcrZoneType" />.</description></item><item><description>The recognition modules supported by this engine. For example, "Auto", "ICR" or "OMR". For more information, refer to <see cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule" />.</description></item><item><description>The recognition fill methods supported by this engine. For example, "Text", "OMR" or "MICR". For more information, refer to <see cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod" />.</description></item></list></para>
        <para>For more information, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrZoneManager" />.</para>
        <para>You must call the <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</see> method before you can use the <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.ZoneManager" />.</para>
      </remarks>
      <keywords>OCR,Zoning</keywords>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrZoneManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrEngine.IsStarted" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Shutdown" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.WorkingWithOcrZones.html">Working with OCR Zones</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrEngine.DocumentManager">
      <summary>
            Allows you to create new OCR documents and to get information regarding the various document formats supported by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.
            </summary>
      <value>The instance of the <see cref="T:Leadtools.Forms.Ocr.IOcrDocumentManager" /> object that allow you to create new OCR documents and to get information regarding
            the various document formats supported by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.</value>
      <remarks>
        <para>The <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.DocumentManager" /> allows you to do the following:
            <list type="bullet"><item><description>Create instances of <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> objects that objects encapsulate OCR'ed documents. Each <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> contains an
            <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.Pages">IOcrDocument.Pages</see> property that is an implementation of standard .NET collection of <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> objects. Through this member
            you can add, remove or update image (raster) pages in the OCR document. These pages can be image files on disk, memory or even in a remote URL. Any file format supported by
            LEADTOOLS (TIFF, JPEG, BMP, etc) can be loaded into the OCR document. Once the image is loaded to the document, you can use the various <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> methods to zone
            the page (or pages) in preparation to be recognized and saved as a document. For more information refer to <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" />, <see cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" /> and
            <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />. Once you are done with adding and preparing the pages, you can use the save methods of the <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object to save
            the document into its final format. LEADTOOLS supports saving to various standard document formats such as PDF, Microsoft Word, HTML and several others.
            For more information, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrDocumentManager" />, <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> and <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />.</description></item><item><description>Query the document formats supported by this engine instance. The OCR engines support many of the popular document formats such as PDF, Microsoft Word and
            HTML as well as text. Use the <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.DocumentManager" /> object to query these formats.</description></item></list></para>
        <para>For more information, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrDocumentManager" />.</para>
        <para>You must call the <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</see> method before you can use the <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.DocumentManager" />.</para>
      </remarks>
      <keywords>OCR,Document|OCR,PDF</keywords>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrDocumentManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrEngine.IsStarted" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Shutdown" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrDocument" />
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrEngine.AutoRecognizeManager">
      <summary>
            Support for one shot "fire and forget" OCR operations.
            </summary>
      <value>The <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager" /> that allow you to do one shot "fire and forget" OCR operations.</value>
      <remarks>
        <para>The <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.AutoRecognizeManager" /> provides methods to convert a single or multi-page image file to an OCR'ed document using one call. This could be desired when the
            default setting of the engine provides the required final document and no fine tuning is required.</para>
        <para>The <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.AutoRecognizeManager" /> also provide support for a callback to monitor the various OCR operations and allow the user to abort at any time.</para>
        <para>For more information, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrDocumentManager" />.</para>
        <para>You must call the <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</see> method before you can use the <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.AutoRecognizeManager" />.</para>
      </remarks>
      <keywords>OCR,Document|OCR,PDF|OCR,Recognition</keywords>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">Startup</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrEngine.IsStarted" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Shutdown" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="T:Leadtools.Forms.Ocr.OcrProgressOperation">
      <summary>
            OCR progress callback operation identification.
            </summary>
      <remarks>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.OcrProgressOperation" /> is the value of <see cref="P:Leadtools.Forms.Ocr.IOcrProgressData.Operation">IOcrProgressData.Operation</see>. Use this value to examine
            the current operation of the process.</para>
        <para>Each operation listed represents one of the fundamental services provided by the OCR engine. Any application program will use at least some of these processes.</para>
        <para>Each operation can be initiated by the methods shown. <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see> can be used to generate progress monitoring on any of these operations.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see></example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrProgressCallback" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrProgressOperation.LoadImage">
      <summary>
            Image load operation. Used when pages are added to an OCR document through one of <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPageCollection~AddPage.html">IOcrPageCollection.AddPage</a>,
            <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPageCollection~AddPages.html">IOcrPageCollection.AddPages</a>, <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPageCollection~InsertPage.html">IOcrPageCollection.InsertPage</a> or
            <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPageCollection~InsertPages.html">IOcrPageCollection.InsertPages</a> methods.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrProgressOperation.SaveImage">
      <summary>
            Image save operation. Used when <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see> is called.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrProgressOperation.ProcessImage">
      <summary>
            Image preprocessing operation. Used when <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoPreprocess(Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoPreprocess</see> is called.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrProgressOperation.FindZones">
      <summary>
            Page-layout decomposition operation. Used when <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPage~AutoZone.html">IOcrPage.AutoZone</a> is called.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrProgressOperation.RecognizeFirstPass">
      <summary>
            First pass recognition operation that may be used when <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see> is used with the MOR recognition module
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrProgressOperation.RecognizeSecondPass">
      <summary>
            Second pass recognition operation. Used when <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see> is called.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrProgressOperation.RecognizeThirdPass">
      <summary>
            Second pass recognition operation. Used when <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see> is called with <see cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule">OcrZoneRecognitionModule.OmniFontPlus3WayVoting</see>
            is enabled.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrProgressOperation.SaveDocumentPrepare">
      <summary>
            Prepare the document operation. Used when <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~Save.html">IOcrDocument.Save</a> is called.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrProgressOperation.SaveDocument">
      <summary>
            Save document operation. Used when <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~Save.html">IOcrDocument.Save</a> is called.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrProgressOperation.SaveDocumentConvertImage">
      <summary>
            Convert the document images operation. Used when <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~Save.html">IOcrDocument.Save</a> is called.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrProgressOperation.Formatting">
      <summary>
            Format the document before saving. Used when <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~Save.html">IOcrDocument.Save</a> is called.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrProgressOperation.RecognizeOmr">
      <summary>
            Recognizing OMR zones operation. Used when <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see> is called on a page with zones containing <see cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod">OcrZoneFillMethod.Omr</see>.
            </summary>
    </member>
    <member name="T:Leadtools.Forms.Ocr.IOcrOmrOptions">
      <summary>
            The OMR settings currently used in the engine.
            </summary>
      <remarks>
        <para>OMR stands for Optical Mark Recognition. For more information refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.UsingOmrInLeadtoolsDotNetOcr.html">Using OMR in LEADTOOLS .NET OCR</a>.</para>
        <para>You can get the instance of the <see cref="T:Leadtools.Forms.Ocr.IOcrOmrOptions" /> interface currently used in the engine with the <see cref="P:Leadtools.Forms.Ocr.IOcrZoneManager.OmrOptions">IOcrSpellCheckManager.OmrOptions</see> property.</para>
        <para>With the <see cref="T:Leadtools.Forms.Ocr.IOcrOmrOptions" /> interface, you can change the following OMR settings:
            <list type="bullet"><item><description>Change the frame detection method using the <see cref="P:Leadtools.Forms.Ocr.IOcrOmrOptions.FrameDetectionMethod">IOcrOmrOptions.FrameDetectionMethod</see> property. Frames stand for the checkbox that may exist around OMR fields.</description></item><item><description>Change the sensitivity of the OMR detection engine using the <see cref="P:Leadtools.Forms.Ocr.IOcrOmrOptions.Sensitivity">IOcrOmrOptions.Sensitivity</see> property.</description></item><item><description>Change the characters to use as a replacement for unfilled and filled OMR marks in the output document (for example, in a PDF file) using the
            <see cref="M:Leadtools.Forms.Ocr.IOcrOmrOptions.GetStateRecognitionCharacter(Leadtools.Forms.Ocr.OcrOmrZoneState)">IOcrOmrOptions.GetStateRecognitionCharacter</see> and <see cref="M:Leadtools.Forms.Ocr.IOcrOmrOptions.SetStateRecognitionCharacter(Leadtools.Forms.Ocr.OcrOmrZoneState,System.Char)">IOcrOmrOptions.SetStateRecognitionCharacter</see> methods. Note that outputting OMR characters in final document is not supported in native engine formats.</description></item></list></para>
        <para>After you call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see>, all the OMR zones in the page will have the OMR properties updated as follows:
            <list type="table"><listheader><term>Property</term><description>Description</description></listheader><item><term><see cref="P:Leadtools.Forms.Ocr.OcrZone.OmrState">OcrZone.OmrState</see></term><description>Either <see cref="T:Leadtools.Forms.Ocr.OcrOmrZoneState">OcrOmrZoneState.Filled</see> if the mark is recognized to be filled or checked, or <see cref="T:Leadtools.Forms.Ocr.OcrOmrZoneState">OcrOmrZoneState.Unfilled</see> if the mark
            is recognized to be unfilled or unchecked.</description></item><item><term><see cref="P:Leadtools.Forms.Ocr.OcrZone.OmrConfidence">OcrZone.OmrConfidence</see></term><description>A number between 0 and 100 (where 100 is maximum confidence) that specifies the OCR engine confidence in the recognition status in <see cref="P:Leadtools.Forms.Ocr.OcrZone.OmrState">OcrZone.OmrState</see>.</description></item></list></para>
        <para>The OMR zones of a page are zones with the following properties:
            <list type="table"><listheader><term>Property</term><description>Value</description></listheader><item><term><see cref="P:Leadtools.Forms.Ocr.OcrZone.FillMethod">OcrZone.FillMethod</see></term><description>Set to <see cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod">OcrZoneFillMethod.Omr</see></description></item><item><term><see cref="P:Leadtools.Forms.Ocr.OcrZone.RecognitionModule">OcrZone.RecognitionModule</see></term><description>Set to <see cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule">OcrZoneRecognitionModule.Omr</see></description></item></list></para>
        <para>All LEADTOOLS OCR engines support OMR. However, there is no current support for auto-detecting OMR zones in a page, you have to add the OMR zones manually to the page
            by setting their boundary (through <see cref="P:Leadtools.Forms.Ocr.OcrZone.Bounds">OcrZone.Bounds</see>, the fill method and recognition module as described above and adding the zone to the page using
            the <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones">IOcrPage.Zones</see> collection before calling <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see>.</para>
        <para>To use OMR in LEADTOOLS, you need a special key to unlock the OMR capabilities. For more information, refer to <see cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</see>.</para>
      </remarks>
      <example>
        <para>
          <para>This example will load a TIF image, create OMR zones and recognize them.</para>
        </para>
        <code lang="VB">   Private Sub OcrOmrExample()
      ' Unlock the support needed for LEADTOOLS Plus OCR engine
      RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here")
      RasterSupport.Unlock(RasterSupportType.OcrPlus, "Replace with your own key here")
      RasterSupport.Unlock(RasterSupportType.OcrPlusPdfLeadOutput, "Replace with your own key here")
      ' Create an instance of the engine
      Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, False)
         ' Start the engine using default parameters
         ocrEngine.Startup(Nothing, Nothing, Nothing, Nothing)

         ' We will use Mixed.tif shipped with LEADTOOLS in the Images folder. This image has 3 OMR check marks
         Dim tifFileName As String = LeadtoolsExamples.Common.ImagesPath.Path + "Mixed.tif"

         ' Create an OCR document
         Using ocrDocument As IOcrDocument = ocrEngine.DocumentManager.CreateDocument()
            ' Add a page to the document
            Dim ocrPage As IOcrPage = ocrDocument.Pages.AddPage(tifFileName, Nothing)

            ' Add the OMR zones. We calculated the 3 OMR zone boundaries for this image perviously
            Dim omrBounds() As LogicalRectangle = _
            { _
               New LogicalRectangle(484, 98, 84, 78, LogicalUnit.Pixel), _
               New LogicalRectangle(494, 184, 70, 54, LogicalUnit.Pixel), _
               New LogicalRectangle(498, 244, 76, 76, LogicalUnit.Pixel) _
            }

            For Each omrBound As LogicalRectangle In omrBounds
               ' Create a new OMR zone and add it to the page
               Dim zone As New OcrZone()
               zone.ZoneType = OcrZoneType.Text
               zone.FillMethod = OcrZoneFillMethod.Omr
               zone.RecognitionModule = OcrZoneRecognitionModule.Omr
               zone.Bounds = omrBound
               ocrPage.Zones.Add(zone)
            Next

            ' Show how many zones we have and they properties
            Console.WriteLine("Page has {0} zones:", ocrPage.Zones.Count)
            For i As Integer = 0 To ocrPage.Zones.Count - 1
               Dim zone As OcrZone = ocrPage.Zones(i)
               Console.WriteLine("{0}: Type: {1}, Fill method: {2}, Recognition Module: {3}", i + 1, zone.ZoneType, zone.FillMethod, zone.RecognitionModule)
            Next

            ' Change the OMR options (Auto detection of frames with highest sensitivity)
            Dim omrOptions As IOcrOmrOptions = ocrEngine.ZoneManager.OmrOptions
            omrOptions.FrameDetectionMethod = OcrOmrFrameDetectionMethod.Auto
            omrOptions.Sensitivity = OcrOmrSensitivity.Highest

            ' Recognize the page
            Console.WriteLine("Recognizing...")
            ocrPage.Recognize(Nothing)

            ' Now show the OMR zone properties
            For i As Integer = 0 To ocrPage.Zones.Count - 1
               Dim zone As OcrZone = ocrPage.Zones(i)
               Console.WriteLine("{0}: State: {1}, Confidence: {2}", i + 1, zone.OmrState, zone.OmrConfidence)
            Next

            ' Now save the result as PDF using the default characters representation for OMR states (0 for unfilled, 1 for filled)
            Dim pdfFileName1 As String = LeadtoolsExamples.Common.ImagesPath.Path + "Omr_Results1.pdf"
            Console.WriteLine("Saving to {0}...", pdfFileName1)
            ocrDocument.Save(pdfFileName1, DocumentFormat.Pdf, Nothing)

            ' Change the character representation for the OMR states to Y for unfilled, and X for filled
            omrOptions.SetStateRecognitionCharacter(OcrOmrZoneState.Unfilled, "Y"c)
            omrOptions.SetStateRecognitionCharacter(OcrOmrZoneState.Filled, "X"c)

            Dim pdfFileName2 As String = LeadtoolsExamples.Common.ImagesPath.Path + "Omr_Results2.pdf"
            Console.WriteLine("Saving to {0}...", pdfFileName2)
            ocrDocument.Save(pdfFileName2, DocumentFormat.Pdf, Nothing)
         End Using

         ' Shutdown the engine
         ' Note: calling Dispose will also automatically shutdown the engine if it has been started
         ocrEngine.Shutdown()
      End Using
   End Sub</code>
        <code lang="CS">      private void OcrOmrExample()
      {
         // Unlock the support needed for LEADTOOLS Plus OCR engine
         RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here");
         RasterSupport.Unlock(RasterSupportType.OcrPlus, "Replace with your own key here");
         RasterSupport.Unlock(RasterSupportType.OcrPlusPdfLeadOutput, "Replace with your own key here");
         // Create an instance of the engine
         using(IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, false))
         {
            // Start the engine using default parameters
            ocrEngine.Startup(null, null, null, null);

            // We will use Mixed.tif shipped with LEADTOOLS in the Images folder. This image has 3 OMR check marks
            string tifFileName = LeadtoolsExamples.Common.ImagesPath.Path + "Mixed.tif";

            // Create an OCR document
            using(IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument())
            {
               // Add a page to the document
               IOcrPage ocrPage = ocrDocument.Pages.AddPage(tifFileName, null);

               // Add the OMR zones. We calculated the 3 OMR zone boundaries for this image perviously
               LogicalRectangle[] omrBounds =
               {
                  new LogicalRectangle(484, 98, 84, 78, LogicalUnit.Pixel),
                  new LogicalRectangle(494, 184, 70, 54, LogicalUnit.Pixel),
                  new LogicalRectangle(498, 244, 76, 76, LogicalUnit.Pixel)
               };

               foreach(LogicalRectangle omrBound in omrBounds)
               {
                  // Create a new OMR zone and add it to the page
                  OcrZone zone = new OcrZone();
                  zone.ZoneType = OcrZoneType.Text;
                  zone.FillMethod = OcrZoneFillMethod.Omr;
                  zone.RecognitionModule = OcrZoneRecognitionModule.Omr;
                  zone.Bounds = omrBound;
                  ocrPage.Zones.Add(zone);
               }

               // Show how many zones we have and they properties
               Console.WriteLine("Page has {0} zones:", ocrPage.Zones.Count);
               for(int i = 0; i &lt; ocrPage.Zones.Count; i++)
               {
                  OcrZone zone = ocrPage.Zones[i];
                  Console.WriteLine("{0}: Type: {1}, Fill method: {2}, Recognition Module: {3}", i + 1, zone.ZoneType, zone.FillMethod, zone.RecognitionModule);
               }

               // Change the OMR options (Auto detection of frames with highest sensitivity)
               IOcrOmrOptions omrOptions = ocrEngine.ZoneManager.OmrOptions;
               omrOptions.FrameDetectionMethod = OcrOmrFrameDetectionMethod.Auto;
               omrOptions.Sensitivity = OcrOmrSensitivity.Highest;

               // Recognize the page
               Console.WriteLine("Recognizing...");
               ocrPage.Recognize(null);

               // Now show the OMR zone properties
               for(int i = 0; i &lt; ocrPage.Zones.Count; i++)
               {
                  OcrZone zone = ocrPage.Zones[i];
                  Console.WriteLine("{0}: State: {1}, Confidence: {2}", i + 1, zone.OmrState, zone.OmrConfidence);
               }

               // Now save the result as PDF using the default characters representation for OMR states (0 for unfilled, 1 for filled)
               string pdfFileName1 = LeadtoolsExamples.Common.ImagesPath.Path + "Omr_Results1.pdf";
               Console.WriteLine("Saving to {0}...", pdfFileName1);
               ocrDocument.Save(pdfFileName1, DocumentFormat.Pdf, null);

               // Change the character representation for the OMR states to Y for unfilled, and X for filled
               omrOptions.SetStateRecognitionCharacter(OcrOmrZoneState.Unfilled, 'Y');
               omrOptions.SetStateRecognitionCharacter(OcrOmrZoneState.Filled, 'X');

               string pdfFileName2 = LeadtoolsExamples.Common.ImagesPath.Path + "Omr_Results2.pdf";
               Console.WriteLine("Saving to {0}...", pdfFileName2);
               ocrDocument.Save(pdfFileName2, DocumentFormat.Pdf, null);
            }

            // Shutdown the engine
            // Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown();
         }
      }</code>
        <!--IOcrOmrOptions-->
      </example>
      <isnew>5/8/2009</isnew>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.UsingOmrInLeadtoolsDotNetOcr.html">Using OMR in LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrOmrOptions.GetStateRecognitionCharacter(Leadtools.Forms.Ocr.OcrOmrZoneState)">
      <summary>
            Gets the character used to represent an OMR state in the output document.
            </summary>
      <param name="state">The OMR state for this character.</param>
      <returns>A <see cref="T:System.Char" /> that indicates the character used to represent the given OMR state in the output document.</returns>
      <remarks>
        <para>OMR stands for Optical Mark Recognition. For more information refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.UsingOmrInLeadtoolsDotNetOcr.html">Using OMR in LEADTOOLS .NET OCR</a>.</para>
        <para>When performing OMR recognition, you can obtain the OMR results by inspecting the <see cref="P:Leadtools.Forms.Ocr.OcrZone.OmrState">OcrZone.OmrState</see> property. Moreover the engine will
            add a character to represent each zone (mark) state into the recognition results. This character will then be outputted to the final document when
            <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~Save.html">IOcrDocument.Save</a> or
            <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~SaveXml.html">IOcrDocument.SaveXml</a> is called.</para>
        <para>The character will also be present as the zone data when calling <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see>.</para>
        <para>The default characters used in the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> is as follows:
            <list type="table"><listheader><term>State</term><description>Value</description></listheader><item><term><see cref="T:Leadtools.Forms.Ocr.OcrOmrZoneState">OcrOmrZoneState.Unfilled</see></term><description>0</description></item><item><term><see cref="T:Leadtools.Forms.Ocr.OcrOmrZoneState">OcrOmrZoneState.Filled</see></term><description>1</description></item></list></para>
        <para>You can get the current values using the <see cref="M:Leadtools.Forms.Ocr.IOcrOmrOptions.GetStateRecognitionCharacter(Leadtools.Forms.Ocr.OcrOmrZoneState)" /> method, you can also change them using the <see cref="M:Leadtools.Forms.Ocr.IOcrOmrOptions.SetStateRecognitionCharacter(Leadtools.Forms.Ocr.OcrOmrZoneState,System.Char)" /> method.
            If you do not want any OMR characters to show up in the final document, you can set all state characters to ' ' (a space character).
            </para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrOmrOptions" />.</example>
      <isnew>5/8/2009</isnew>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.UsingOmrInLeadtoolsDotNetOcr.html">Using OMR in LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrOmrOptions.SetStateRecognitionCharacter(Leadtools.Forms.Ocr.OcrOmrZoneState,System.Char)">
      <summary>
            Sets the character used to represent an OMR state in the output document.
            </summary>
      <param name="state">The OMR state for this character.</param>
      <param name="value">The character value.</param>
      <value>A <see cref="T:System.Char" /> that indicates the character used to represent the given OMR state in the output document.</value>
      <remarks>
        <para>OMR stands for Optical Mark Recognition. For more information refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.UsingOmrInLeadtoolsDotNetOcr.html">Using OMR in LEADTOOLS .NET OCR</a>.</para>
        <para>When performing OMR recognition, you can obtain the OMR results by inspecting the <see cref="P:Leadtools.Forms.Ocr.OcrZone.OmrState">OcrZone.OmrState</see> property. Moreover the engine will
            add a character to represent each zone (mark) state into the recognition results. This character will then be outputted to the final document when
            <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~Save.html">IOcrDocument.Save</a> or
            <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~SaveXml.html">IOcrDocument.SaveXml</a> is called.</para>
        <para>The character will also be present as the zone data when calling <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see>.</para>
        <para>The default characters used in the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> is as follows:
            <list type="table"><listheader><term>State</term><description>Value</description></listheader><item><term><see cref="T:Leadtools.Forms.Ocr.OcrOmrZoneState">OcrOmrZoneState.Unfilled</see></term><description>0</description></item><item><term><see cref="T:Leadtools.Forms.Ocr.OcrOmrZoneState">OcrOmrZoneState.Filled</see></term><description>1</description></item></list></para>
        <para>You can get the current values using the <see cref="M:Leadtools.Forms.Ocr.IOcrOmrOptions.GetStateRecognitionCharacter(Leadtools.Forms.Ocr.OcrOmrZoneState)" /> method, you can also change them using the <see cref="M:Leadtools.Forms.Ocr.IOcrOmrOptions.SetStateRecognitionCharacter(Leadtools.Forms.Ocr.OcrOmrZoneState,System.Char)" /> method.
            If you do not want any OMR characters to show up in the final document, you can set all state characters to ' ' (a space character).
            </para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrOmrOptions" />.</example>
      <isnew>5/8/2009</isnew>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.UsingOmrInLeadtoolsDotNetOcr.html">Using OMR in LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrOmrOptions.FrameDetectionMethod">
      <summary>
            Gets or sets the OMR frame detection mode.
            </summary>
      <value>An <see cref="T:Leadtools.Forms.Ocr.OcrOmrFrameDetectionMethod" /> enumeration member that indicates the OMR frame detection mode.</value>
      <remarks>
        <para>OMR stands for Optical Mark Recognition. For more information refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.UsingOmrInLeadtoolsDotNetOcr.html">Using OMR in LEADTOOLS .NET OCR</a>.</para>
        <para>Frames stand for the checkbox that may exist around OMR fields. You can set the LEADTOOLS OCR engine to automatically detect these frames and take them into consideration
            when recognizing OMR fields. If you know the OMR fields contains (or does not contain) frames, it is recommended to set <see cref="P:Leadtools.Forms.Ocr.IOcrOmrOptions.FrameDetectionMethod">IOcrOmrOptions.FrameDetectionMethod</see>
            accordingly to increase the recognition performance and accuracy.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrOmrOptions" />.</example>
      <isnew>5/8/2009</isnew>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.UsingOmrInLeadtoolsDotNetOcr.html">Using OMR in LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrOmrOptions.Sensitivity">
      <summary>
            Gets or sets the OMR sensitivity mode.
            </summary>
      <value>An <see cref="T:Leadtools.Forms.Ocr.OcrOmrSensitivity" /> enumeration member that indicates the OMR sensitivity mode.</value>
      <remarks>
        <para>OMR stands for Optical Mark Recognition. For more information refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.UsingOmrInLeadtoolsDotNetOcr.html">Using OMR in LEADTOOLS .NET OCR</a>.</para>
        <para>You can set the LEADTOOLS OCR engine OMR recognition sensitivity to be as high or low as desired. High sensitivity results in higher confidence in the recognized mark, but could
            prove to be slower.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrOmrOptions" />.</example>
      <isnew>5/8/2009</isnew>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.UsingOmrInLeadtoolsDotNetOcr.html">Using OMR in LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="T:Leadtools.Forms.Ocr.OcrZoneType">
      <summary>
            Zone types.
            </summary>
      <remarks>
        <para>The <see cref="T:Leadtools.Forms.Ocr.OcrZoneType" /> is used to classify the zone into one of the three basic zone-categories: flowing text, table or graphics. For these, use
            <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Text</see>, <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Table</see>, and <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Graphic</see> respectively.</para>
        <para>For flowing text, any of the following text types can appear instead of <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Text</see>:
            <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Column</see>, <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Header</see>, <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Footer</see>,
            <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Caption</see>, <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Title</see>,
            <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.VerticalText</see>, <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.LeftRotatedText</see>,
            <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.RightRotatedText</see> or <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Other</see>.</para>
        <para>One of these values is typically created by the page-layout decomposition (auto-zoning) process of the page (see <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPage~AutoZone.html">IOcrPage.AutoZone</a>),
            however they have the same meaning for the recognition algorithms: the zone contains flowing text.</para>
        <para>The <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Table</see> type is for table-type zones. In this type of zone is specified, the OCR engine will try to reconstruct the original table
            text layout of the zone in the final output document.</para>
        <para>For graphic zones use the <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Graphic</see> type. If <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Graphic</see> is specified, no recognition will be run
            on the zone and all other recognition related settings will be ignored. The related <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.AutoGraphic</see> type can appear as the result of the
            page-layout decomposition (auto-zoning) process, and also signifies a graphic zone. The difference is, <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Graphic</see> is the type that you as the
            user set in the zone to denote a graphic zone that contain no text, <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.AutoGraphic</see> is the type set by the engine during auto-zoning.</para>
        <para>Each OCR engine supports different type of zones. To get the type of zones supported by the engine, use <see cref="M:Leadtools.Forms.Ocr.IOcrZoneManager.GetSupportedZoneTypes">IOcrZoneManager.GetSupportedZoneTypes</see>. 
            Trying to set a zone type that is not supported by the engine will cause an error.</para>
      </remarks>
      <example> For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see>.</example>
      <docaddon>yes</docaddon>
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPage~AutoZone.html">IOcrPage.AutoZone</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneType.Text">
      <summary>
            Flowing text type zone.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneType.Table">
      <summary>
            Table type zone.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneType.Graphic">
      <summary>
            Zone containing graphics (Not sure).
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneType.Column">
      <summary>
            Column type zone.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneType.Header">
      <summary>
            Header type zone.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneType.Footer">
      <summary>
            Footer type zone.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneType.Caption">
      <summary>
            Caption type zone.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneType.Title">
      <summary>
            Title type zone.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneType.Other">
      <summary>
            Other zone type.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneType.AutoGraphic">
      <summary>
            Zone containing graphics (sure).
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneType.VerticalText">
      <summary>
            Vertical characters. For Asian characters only.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneType.LeftRotatedText">
      <summary>
            Left rotated text (90 degrees counter clockwise). For Latin, Greek and Cyrillic characters only.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneType.RightRotatedText">
      <summary>
            Right rotated text (90 degrees clockwise). For Latin, Greek and Cyrillic characters only.
            </summary>
    </member>
    <member name="T:Leadtools.Forms.Ocr.OcrXmlOutputOptions">
      <summary>
             Controls the format of the XML data obtained from <see href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~SaveXml.html">IOcrDocument.SaveXml</see>.
             </summary>
      <remarks>
        <para>
             The various <see href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~SaveXml.html">IOcrDocument.SaveXml</see>
             methods accept a combination of one or more of the OcrXmlOutputOptions enumeration members to control the format of the output XML data.
             </para>
        <para>The format of the result XML data is as follows:</para>
        <para>
          <code>
             &lt;?xml version="1.0" encoding="UTF-16" standalone="yes"?&gt;
             &lt;pages&gt;
               &lt;page&gt;
                 &lt;zone&gt;
                   &lt;paragraph&gt;
                     &lt;line&gt;
                       &lt;word&gt;
                         &lt;character/&gt;
                         &lt;character/&gt;
                       &lt;/word&gt;
                     &lt;/line&gt;
                   &lt;/paragraph&gt;
                 &lt;/zone&gt;
               &lt;/page&gt;
             &lt;/pages&gt;
             </code>
        </para>
        <para>The <c><strong>pages</strong></c> element is repeated once per document and it has no value and no additional attributes.</para>
        <para>The <c><strong>page</strong></c> element is repeated for every page in the document (<see cref="P:Leadtools.Forms.Ocr.IOcrDocument.Pages">IOcrDocument.Pages.Count</see>). If
             this page has not been recognized or contains no zones, then the <c><strong>page</strong></c> element will not contain any child <c><strong>zone</strong></c> elements.</para>
        <para>The <c><strong>page</strong></c> element has no value and contains the following additional attributes:</para>
        <list type="table">
          <listheader>
            <term>Attribute</term>
            <description>Value</description>
          </listheader>
          <item>
            <term>
              <c>
                <strong>horizontal_resolution</strong>
              </c>
            </term>
            <description>Horizontal resolution of the page. The value is <see cref="P:Leadtools.Forms.Ocr.IOcrPage.DpiX">IOcrPage.DpiX</see>.</description>
          </item>
          <item>
            <term>
              <c>
                <strong>vertical_resolution</strong>
              </c>
            </term>
            <description>Vertical resolution of the page. The value is <see cref="P:Leadtools.Forms.Ocr.IOcrPage.DpiY">IOcrPage.DpiY</see>.</description>
          </item>
          <item>
            <term>
              <c>
                <strong>width</strong>
              </c>
            </term>
            <description>Width of the page in pixels. The value is <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Width">IOcrPage.Width</see>.</description>
          </item>
          <item>
            <term>
              <c>
                <strong>height</strong>
              </c>
            </term>
            <description>Height of the page in pixels. The value is <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Height">IOcrPage.Height</see>.</description>
          </item>
        </list>
        <para>The <c><strong>zone</strong></c> element is repeated for every zone in the current page (<see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones">IOcrPage.Zones</see>). The
             <c><strong>zone</strong></c> element has no value and contains the following additional attributes:</para>
        <list type="table">
          <listheader>
            <term>Attribute</term>
            <description>Value</description>
          </listheader>
          <item>
            <term>
              <c>
                <strong>type</strong>
              </c>
            </term>
            <description>The zone type. Either "text" or "graphics". If the zone element is of type "text", then it will contain zero
             or more <c><strong>paragraph</strong></c> child elements. If the zone is of type "graphics", then it will not contain and other child elements.</description>
          </item>
          <item>
            <term>
              <c>
                <strong>left</strong>
              </c>
            </term>
            <description>The zone left position in pixels. The value is <see cref="P:Leadtools.Forms.Ocr.OcrZone.Bounds">OcrZone.Bounds.Left</see> converted to pixels.</description>
          </item>
          <item>
            <term>
              <c>
                <strong>top</strong>
              </c>
            </term>
            <description>The zone top position in pixels. The value is <see cref="P:Leadtools.Forms.Ocr.OcrZone.Bounds">OcrZone.Bounds.Top</see> converted to pixels.</description>
          </item>
          <item>
            <term>
              <c>
                <strong>right</strong>
              </c>
            </term>
            <description>The zone right position in pixels. The value is <see cref="P:Leadtools.Forms.Ocr.OcrZone.Bounds">OcrZone.Bounds.Right</see> converted to pixels.</description>
          </item>
          <item>
            <term>
              <c>
                <strong>bottom</strong>
              </c>
            </term>
            <description>The zone bottom position in pixels. The value is <see cref="P:Leadtools.Forms.Ocr.OcrZone.Bounds">OcrZone.Bounds.Bottom</see> converted to pixels.</description>
          </item>
          <item>
            <term>
              <c>
                <strong>subtype</strong>
              </c>
            </term>
            <description>The zone type. The value is <see cref="P:Leadtools.Forms.Ocr.OcrZone.ZoneType">OcrZone.ZoneType</see>.</description>
          </item>
          <item>
            <term>
              <c>
                <strong>recognition_module</strong>
              </c>
            </term>
            <description>The zone recognition module. The value is <see cref="P:Leadtools.Forms.Ocr.OcrZone.RecognitionModule">OcrZone.RecognitionModule</see>.</description>
          </item>
          <item>
            <term>
              <c>
                <strong>fill_method</strong>
              </c>
            </term>
            <description>The fill method. The value is <see cref="P:Leadtools.Forms.Ocr.OcrZone.FillMethod">OcrZone.FillMethod</see>.</description>
          </item>
        </list>
        <para>The <c><strong>paragraph</strong></c> element is repeated for every text paragraph in the current zone and it has no attributes. If this zone
             has no recognition text, then the <c><strong>paragraph</strong></c> element will not contain any child <c><strong>line</strong></c> elements.</para>
        <para>The <c><strong>paragraph</strong></c> element has no attributes and no value.</para>
        <para>The <c><strong>line</strong></c> element is repeated for every line of text in the current paragraph. The <c><strong>line</strong></c> element
             has no value and contains the following additional attributes:</para>
        <list type="table">
          <listheader>
            <term>Attribute</term>
            <description>Value</description>
          </listheader>
          <item>
            <term>
              <c>
                <strong>left</strong>
              </c>
            </term>
            <description>The line left position in pixels.</description>
          </item>
          <item>
            <term>
              <c>
                <strong>top</strong>
              </c>
            </term>
            <description>The line top position in pixels.</description>
          </item>
          <item>
            <term>
              <c>
                <strong>right</strong>
              </c>
            </term>
            <description>The line right position in pixels.</description>
          </item>
          <item>
            <term>
              <c>
                <strong>bottom</strong>
              </c>
            </term>
            <description>The line bottom position in pixels. The value of <c><strong>left</strong></c>, <c><strong>top</strong></c>, <c><strong>right</strong></c> and <c><strong>bottom</strong></c> is calculated from the
             summation of all the boundaries of the words that make up this line.</description>
          </item>
          <item>
            <term>
              <c>
                <strong>base</strong>
              </c>
            </term>
            <description>The position of the baseline of this line. The value is calculated from the summation of the baselines of all
             the words that make up this line.</description>
          </item>
        </list>
        <para>The <c><strong>word</strong></c> element is repeated for every word of text in the current line. If
             <strong>OcrXmlOutputOptions.Characters</strong> was not specified in the generation options; then the <c><strong>word</strong></c> element
             will contain the value of the word as its value. Otherwise, the <c><strong>word</strong></c> element will contain no value.</para>
        <para>The <c><strong>word</strong></c> element has the following attributes:</para>
        <list type="table">
          <listheader>
            <term>Attribute</term>
            <description>Value</description>
          </listheader>
          <item>
            <term>
              <c>
                <strong>left</strong>
              </c>
            </term>
            <description>The word left position in pixels.</description>
          </item>
          <item>
            <term>
              <c>
                <strong>top</strong>
              </c>
            </term>
            <description>The word top position in pixels.</description>
          </item>
          <item>
            <term>
              <c>
                <strong>right</strong>
              </c>
            </term>
            <description>The word right position in pixels.</description>
          </item>
          <item>
            <term>
              <c>
                <strong>bottom</strong>
              </c>
            </term>
            <description>The word bottom position in pixels. The value of <c><strong>left</strong></c>, <c><strong>top</strong></c>, <c><strong>right</strong></c> and <c><strong>bottom</strong></c> is calculated from the
             summation of all the boundaries of the characters that make up this word.</description>
          </item>
          <item>
            <term>
              <c>
                <strong>base</strong>
              </c>
            </term>
            <description>The position of the baseline of this word. The value is calculated from the summation of the baselines of all
             the characters that make up this word.</description>
          </item>
        </list>
        <para>The <c><strong>character</strong></c> element is repeated for every character in the following word only if
             <strong>OcrXmlOutputOptions.Characters</strong> was specified in the generation options. Otherwise, the <c><strong>word</strong></c> element will
             contain no child <c><strong>character</strong></c> elements. If <strong>OcrXmlOutputOptions.Characters</strong> was specified in the generation options; then the <c><strong>character</strong></c>
             element will contain the value of the character as its value. Otherwise, the <c><strong>character</strong></c> element will contain no value.</para>
        <para>The <c><strong>character</strong></c> element contains the following additional attributes:</para>
        <list type="table">
          <listheader>
            <term>Attribute</term>
            <description>Value</description>
          </listheader>
          <item>
            <term>
              <c>
                <strong>left</strong>
              </c>
            </term>
            <description>The character left position in pixels.</description>
          </item>
          <item>
            <term>
              <c>
                <strong>top</strong>
              </c>
            </term>
            <description>The character top position in pixels.</description>
          </item>
          <item>
            <term>
              <c>
                <strong>right</strong>
              </c>
            </term>
            <description>The character right position in pixels.</description>
          </item>
          <item>
            <term>
              <c>
                <strong>bottom</strong>
              </c>
            </term>
            <description>The character bottom position in pixels. The value of <c><strong>left</strong></c>, <c><strong>top</strong></c>, <c><strong>right</strong></c> and <c><strong>bottom</strong></c> is
             calculated from <see cref="P:Leadtools.Forms.Ocr.OcrCharacter.Bounds">OcrCharacter.Bounds</see>.</description>
          </item>
          <item>
            <term>
              <c>
                <strong>base</strong>
              </c>
            </term>
            <description>The position of the baseline of this character. The value is <see cref="P:Leadtools.Forms.Ocr.OcrCharacter.Base">OcrCharacter.Base</see>.</description>
          </item>
          <item>
            <term>
              <c>
                <strong>confidence</strong>
              </c>
            </term>
            <description>The confidence of this character. The value is <see cref="P:Leadtools.Forms.Ocr.OcrCharacter.Confidence">OcrCharacter.Confidence</see>.</description>
          </item>
          <item>
            <term>
              <c>
                <strong>font_size</strong>
              </c>
            </term>
            <description>The font size in points. The value is <see cref="P:Leadtools.Forms.Ocr.OcrCharacter.FontSize">OcrCharacter.FontSize</see>.
             Only available if <strong>OcrXmlOutputOptions.CharacterAttributes</strong> is specified.</description>
          </item>
          <item>
            <term>
              <c>
                <strong>proportional</strong>
              </c>
            </term>
            <description>"yes" if the character font is proportional, "no"; otherwise. The value is calculated from
             <see cref="P:Leadtools.Forms.Ocr.OcrCharacter.FontStyle">OcrCharacter.FontStyle</see>.
             Only available if <strong>OcrXmlOutputOptions.CharacterAttributes</strong> is specified.</description>
          </item>
          <item>
            <term>
              <c>
                <strong>serif</strong>
              </c>
            </term>
            <description>"yes" if the character font is serif, "no"; otherwise. The value is calculated from
             <see cref="P:Leadtools.Forms.Ocr.OcrCharacter.FontStyle">OcrCharacter.FontStyle</see>.
             Only available if <strong>OcrXmlOutputOptions.CharacterAttributes</strong> is specified.</description>
          </item>
          <item>
            <term>
              <c>
                <strong>bold</strong>
              </c>
            </term>
            <description>"yes" if the character font is bold, "no"; otherwise. The value is calculated from
             <see cref="P:Leadtools.Forms.Ocr.OcrCharacter.FontStyle">OcrCharacter.FontStyle</see>.
             Only available if <strong>OcrXmlOutputOptions.CharacterAttributes</strong> is specified.</description>
          </item>
          <item>
            <term>
              <c>
                <strong>italic</strong>
              </c>
            </term>
            <description>"yes" if the character font is italic, "no"; otherwise. The value is calculated from
             <see cref="P:Leadtools.Forms.Ocr.OcrCharacter.FontStyle">OcrCharacter.FontStyle</see>.
             Only available if <strong>OcrXmlOutputOptions.CharacterAttributes</strong> is specified.</description>
          </item>
          <item>
            <term>
              <c>
                <strong>underline</strong>
              </c>
            </term>
            <description>"yes" if the character font is underline, "no"; otherwise. The value is calculated from
             <see cref="P:Leadtools.Forms.Ocr.OcrCharacter.FontStyle">OcrCharacter.FontStyle</see>.
             Only available if <strong>OcrXmlOutputOptions.CharacterAttributes</strong> is specified.</description>
          </item>
        </list>
        <para>The following is an example of the XML output when <strong>OcrXmlOutputOptions.None</strong> is specified:</para>
        <para>
          <code>
             &lt;?xml version="1.0" encoding="UTF-16" standalone="yes"?&gt;
             &lt;pages&gt;
               &lt;page horizontal_resolution="300" vertical_resolution="300" width="2544" height="3294"&gt;
                 &lt;zone type="Text" left="371" top="370" right="831" bottom="420" subtype="Text" recognition_module="Auto" fill_method="Default"&gt;
                   &lt;paragraph&gt;
                     &lt;line left="372" top="371" right="830" bottom="419" base="29"&gt;
                       &lt;word left="372" top="371" right="554" bottom="409" base="30"&gt;License&lt;/word&gt;
                       &lt;word left="570" top="372" right="830" bottom="419" base="29"&gt;Agreement&lt;/word&gt;
                     &lt;/line&gt;
                   &lt;/paragraph&gt;
                 &lt;/zone&gt;
               &lt;/page&gt;
             &lt;/pages&gt;
             </code>
        </para>
        <para>Here is the same XML output when <strong>OcrXmlOutputOptions.Characters</strong> is specified:</para>
        <para>
          <code>
             &lt;?xml version="1.0" encoding="UTF-16" standalone="yes"?&gt;
             &lt;pages&gt;
               &lt;page horizontal_resolution="300" vertical_resolution="300" width="2544" height="3294"&gt;
                 &lt;zone type="Text" left="371" top="370" right="831" bottom="420" subtype="Text" recognition_module="Auto" fill_method="Default"&gt;
                   &lt;paragraph&gt;
                     &lt;line left="372" top="371" right="830" bottom="419" base="29"&gt;
                       &lt;word left="372" top="371" right="554" bottom="409" base="30"&gt;
                         &lt;character left="372" top="372" right="398" bottom="408" base="36" confidence="100"&gt;L&lt;/character&gt;
                         &lt;character left="402" top="371" right="409" bottom="408" base="37" confidence="100"&gt;i&lt;/character&gt;
                         &lt;character left="414" top="381" right="438" bottom="409" base="27" confidence="100"&gt;c&lt;/character&gt;
                         &lt;character left="442" top="381" right="468" bottom="409" base="27" confidence="100"&gt;e&lt;/character&gt;
                         &lt;character left="472" top="381" right="496" bottom="408" base="27" confidence="100"&gt;n&lt;/character&gt;
                         &lt;character left="501" top="381" right="525" bottom="408" base="27" confidence="100"&gt;s&lt;/character&gt;
                         &lt;character left="529" top="381" right="554" bottom="408" base="27" confidence="100"&gt;e&lt;/character&gt;
                       &lt;/word&gt;
                       &lt;word left="570" top="372" right="830" bottom="419" base="29"&gt;
                         &lt;character left="570" top="372" right="604" bottom="408" base="36" confidence="100"&gt;A&lt;/character&gt;
                         &lt;character left="607" top="381" right="633" bottom="419" base="27" confidence="100"&gt;g&lt;/character&gt;
                         &lt;character left="639" top="381" right="655" bottom="408" base="27" confidence="100"&gt;r&lt;/character&gt;
                         &lt;character left="657" top="381" right="682" bottom="408" base="27" confidence="100"&gt;e&lt;/character&gt;
                         &lt;character left="685" top="381" right="710" bottom="408" base="27" confidence="100"&gt;e&lt;/character&gt;
                         &lt;character left="715" top="381" right="753" bottom="408" base="27" confidence="100"&gt;m&lt;/character&gt;
                         &lt;character left="758" top="381" right="783" bottom="408" base="27" confidence="100"&gt;e&lt;/character&gt;
                         &lt;character left="788" top="381" right="812" bottom="408" base="27" confidence="100"&gt;n&lt;/character&gt;
                         &lt;character left="815" top="374" right="830" bottom="408" base="34" confidence="100"&gt;t&lt;/character&gt;
                       &lt;/word&gt;
                     &lt;/line&gt;
                   &lt;/paragraph&gt;
                 &lt;/zone&gt;
               &lt;/page&gt;
             &lt;/pages&gt;
             </code>
        </para>
      </remarks>
      <keywords>OCR,XML|OCR,Recognition</keywords>
      <example>For an example, refer to
             <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.String,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml(string fileName, OcrXmlOutputOptions options)</see>
             and <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml(OcrXmlOutputOptions options)</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrDocumentManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrDocument" />
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~Save.html">IOcrDocument.Save</seealso>
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~SaveXml.html">IOcrDocument.SaveXml</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrXmlOutputOptions.None">
      <summary>
        <para>Default. Write the recognized word values in the result XML data.</para>
      </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrXmlOutputOptions.Characters">
      <summary>
        <para>Write the recognized character values instead of the word values in the result XML data</para>
      </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrXmlOutputOptions.CharacterAttributes">
      <summary>
        <para>Only valid with <strong>Characters</strong>. Write the character attributes (font for example) in the result XML data.</para>
      </summary>
    </member>
    <member name="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule">
      <summary>
            Available recognition modules of the engine.
            </summary>
      <remarks>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule" /> contains the different recognition modules of the engine available to you. A recognition module must have been assigned to all zones in
            their <see cref="P:Leadtools.Forms.Ocr.OcrZone.RecognitionModule">OcrZone.RecognitionModule</see> properties before processing.</para>
        <para>Not all recognition modules are available to all engines. To determine which recognition modules are available use
            <see cref="M:Leadtools.Forms.Ocr.IOcrZoneManager.GetSupportedRecognitionModules">IOcrZoneManager.GetSupportedRecognitionModules</see>. Trying to set a recognition module that is not available to the engine will
            cause an error.</para>
        <para>Each zone needs to be associated with a <see cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule" /> and a <see cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod" />. This is needed because some recognition modules support
            more than one fill method, and some fill methods are accepted by more than one recognition module. It is important to ensure that the recognition module/fill method pair is suitable.
            For example, the multi-lingual MOR omnifont recognition module <see cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule">OcrZoneRecognitionModule.OmniFontMor</see> is capable of recognizing omnifont
            machine print (<see cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod">OcrZoneFillMethod.OmniFont</see>), 24-pin draft dot-matrix print (<see cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod">OcrZoneFillMethod.DraftDot24</see>),
            OCR-A (<see cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod">OcrZoneFillMethod.OcrA</see>) and OCR-B (<see cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod">OcrZoneFillMethod.OcrB</see>) texts.</para>
        <para>For precise information on permitted recognition module/fill method pairs refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.AnOverviewOfOcrRecognitionModules.html">An Overview of OCR Recognition Modules</a>.</para>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule">OcrZoneRecognitionModule.Auto</see> can be set in the <see cref="P:Leadtools.Forms.Ocr.OcrZone.RecognitionModule">OcrZone.RecognitionModule</see> property
            by the user, it will also be generated by <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPage~AutoZone.html">IOcrPage.AutoZone</a> (auto-zoning) and will, under certain circumstances be generated by the
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.UpdateFillMethod">IOcrPage.UpdateFillMethod</see> method.</para>
        <para>Force the use of a particular recognition module by specifying it directly in the zone's <see cref="P:Leadtools.Forms.Ocr.OcrZone.RecognitionModule">OcrZone.RecognitionModule</see> property
            after calling <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPage~AutoZone.html">IOcrPage.AutoZone</a> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.UpdateFillMethod">IOcrPage.UpdateFillMethod</see>.</para>
        <para>When <see cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule">OcrZoneRecognitionModule.Auto</see> is set, the recognition module is chosen primarily by the fill method (either directly specified,
            taken as default or auto-detected). The choices will be as follows:
            <list type="table"><listheader><term>Fill Method</term><description>Recognition Module</description></listheader><item><term><see cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod">OcrZoneFillMethod.DotDigitt</see></term><description><see cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule">OcrZoneRecognitionModule.MatrixMatching</see></description></item><item><term><see cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod">OcrZoneFillMethod.DashDigit</see></term><description><see cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule">OcrZoneRecognitionModule.MatrixMatching</see></description></item><item><term><see cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod">OcrZoneFillMethod.Mice</see></term><description><see cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule">OcrZoneRecognitionModule.MatrixMatching</see></description></item><item><term><see cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod">OcrZoneFillMethod.OcrA</see></term><description><see cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule">OcrZoneRecognitionModule.MatrixMatching</see></description></item><item><term><see cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod">OcrZoneFillMethod.OcrB</see></term><description><see cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule">OcrZoneRecognitionModule.MatrixMatching</see></description></item><item><term><see cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod">OcrZoneFillMethod.Omr</see></term><description><see cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule">OcrZoneRecognitionModule.Omr</see></description></item><item><term><see cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod">OcrZoneFillMethod.Icr</see></term><description><see cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule">OcrZoneRecognitionModule.IcrNumeral</see> or <see cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule">OcrZoneRecognitionModule.IcrCharacter</see></description></item><item><term><see cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod">OcrZoneFillMethod.OmniFont</see></term><description><see cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule">OcrZoneRecognitionModule.OmniFontMText</see> or <see cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule">OcrZoneRecognitionModule.OmniFontMor</see></description></item><item><term><see cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod">OcrZoneFillMethod.DraftDotMatrix9</see></term><description><see cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule">OcrZoneRecognitionModule.OmniFontMText</see> or <see cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule">OcrZoneRecognitionModule.OmniFontMor</see></description></item><item><term><see cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod">OcrZoneFillMethod.DraftDotMatrix24</see></term><description><see cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule">OcrZoneRecognitionModule.OmniFontMText</see> or <see cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule">OcrZoneRecognitionModule.DotMatrix</see></description></item></list></para>
        <para>In the first nine cases, only the fill method will be used to determine the recognition module, there will be no checking whether other settings are suitable. With
            <see cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod">OcrZoneFillMethod.Icr</see>, <see cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule">OcrZoneRecognitionModule.IcrCharacter</see> will be chosen if letters or other
            characters unsupported by <see cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule">OcrZoneRecognitionModule.IcrNumeral</see> are validated for recognition. The last three will be directed to
            <see cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule">OcrZoneRecognitionModule.OmniFontMText</see>, unless the engine finds a language, filter or other setting which is not supported by this module. For further
            details see the <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.AnOverviewOfOcrRecognitionModules.html">An Overview of OCR Recognition Modules</a>.</para>
        <para>As an example, the zone's fill method is <see cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod">OcrZoneFillMethod.OmniFont</see> and
            <see cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule">OcrZoneRecognitionModule.Auto</see> has been specified.</para>
        <para>If only the characters of English and/or the main West European languages are validated for recognition, then the M/TEXT omnifont recognition module
            (<see cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule">OcrZoneRecognitionModule.OmniFontMText</see>) will be automatically selected.</para>
        <para>However, if e.g. the Polish characters are also to be recognized, the engine will select the multi-lingual MOR omnifont recognition module
            <see cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule">OcrZoneRecognitionModule.OmniFontMor</see>, since the M/TEXT recognition module does not support the Polish characters, but the MOR recognition
            module does.</para>
      </remarks>
      <keywords>OCR|OCR,Recognition Modules</keywords>
      <example> For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see>.</example>
      <docaddon>yes</docaddon>
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPage~AutoZone.html">IOcrPage.AutoZone</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.AnOverviewOfOcrRecognitionModules.html">An Overview of OCR Recognition Modules</seealso>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneRecognitionModule.Auto">
      <summary>
            The engine will try to automatically select the most suitable recognition module for the zone. This will be determined just before recognition, according to the
            zone's filling method (<see cref="P:Leadtools.Forms.Ocr.OcrZone.FillMethod">OcrZone.FillMethod</see>) and, if necessary, other settings, most typically the character set.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneRecognitionModule.OmniFontMText">
      <summary>
            M/TEXT omnifont recognition module.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneRecognitionModule.OmniFontMor">
      <summary>
            Multi-lingual MOR omnifont recognition module.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneRecognitionModule.DotMatrix">
      <summary>
            DOT 9-pin draft dot-matrix recognition module.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneRecognitionModule.Omr">
      <summary>
            OMR (Optical Mark Recognition) module.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneRecognitionModule.IcrNumeral">
      <summary>
            Handprinted numeral recognition module.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneRecognitionModule.IcrCharacter">
      <summary>
            Handprinted character recognition module.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneRecognitionModule.MatrixMatching">
      <summary>
            MAT matrix matching recognition module.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneRecognitionModule.OmniFontPlus2WayVoting">
      <summary>
            Omni Font 2-way voting module.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneRecognitionModule.OmniFontFireWorx">
      <summary>
            Omni Font FireWorx module.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneRecognitionModule.OmniFontPlus3WayVoting">
      <summary>
            Omni Font 3-way voting module.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneRecognitionModule.Asian">
      <summary>
            Asian characters recognition module.
            </summary>
    </member>
    <member name="T:Leadtools.Forms.Ocr.OcrUserDictionaryItemStyles">
      <summary>
            The user dictionary item styles.
            </summary>
      <remarks>
        <para>
          <strong>Important Note:</strong> User dictionaries are only supported in the Advantage OCR engine in this version of LEADTOOLS. Using the functionality of the <see cref="T:Leadtools.Forms.Ocr.IOcrUserDictionary" /> interface in any other engine will have no effect on the recognition results.</para>
        <para>Use the value of this enumeration when creating a new <see cref="T:Leadtools.Forms.Ocr.IOcrUserDictionaryItem" /> to add it to a user dictionary.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrUserDictionary" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrUserDictionary" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrUserDictionaryItem" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrUserDictionaryItemStyles.None">
      <summary>
            The item is a literal.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrUserDictionaryItemStyles.RegularExpression">
      <summary>
            The item is a regular expression.
            </summary>
    </member>
    <member name="T:Leadtools.Forms.Ocr.IOcrUserDictionary">
      <summary>
            The user dictionary settings currently used in the engine.
            </summary>
      <remarks>
        <para>
          <strong>Important Note:</strong> User dictionaries are only supported in the Advantage OCR engine in this version of LEADTOOLS. Using the functionality of the <see cref="T:Leadtools.Forms.Ocr.IOcrUserDictionary" /> interface in any other engine will have no effect on the recognition results.</para>
        <para>You can get the instance of the <see cref="T:Leadtools.Forms.Ocr.IOcrUserDictionary" /> interface currently used in the engine with the
            <see cref="P:Leadtools.Forms.Ocr.IOcrSpellCheckManager.UserDictionary">IOcrSpellCheckManager.UserDictionary</see> property.</para>
        <para>The functionality of the checking subsystem consists of three separate parts:
            <list type="number"><item><description>Spell checking through the language dictionaries. You can enable and disable the spell languages used through in the system with the
            <see cref="P:Leadtools.Forms.Ocr.IOcrSpellCheckManager.SpellLanguage">IOcrSpellCheckManager.SpellLanguage</see> property.</description></item><item><description>User dictionary checking. You can control the use of a user dictionary through the <see cref="T:Leadtools.Forms.Ocr.IOcrUserDictionary" /> interface methods accessed by the
            <see cref="P:Leadtools.Forms.Ocr.IOcrSpellCheckManager.UserDictionary">IOcrSpellCheckManager.UserDictionary</see> property.</description></item><item><description>User-defined checking through the use of the global <see cref="T:Leadtools.Forms.Ocr.OcrSpellCheckCallback">OcrSpellCheckCallback</see> callback which can be set by the
            <see cref="M:Leadtools.Forms.Ocr.IOcrSpellCheckManager.SetSpellCheckCallback(Leadtools.Forms.Ocr.OcrSpellCheckCallback)">IOcrSpellCheckManager.SetSpellCheckCallback</see> method.</description></item></list></para>
        <para>A user dictionary typically consists of different sections, the sections may contain one or more specified items (<see cref="T:Leadtools.Forms.Ocr.IOcrUserDictionaryItem" />). You can
            enumerate the sections in the User dictionary with the <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.GetFirstSectionName" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.GetNextSectionName" /> methods.</para>
        <para>Each zone can be linked to a section in the User dictionary using the <see cref="P:Leadtools.Forms.Ocr.OcrZone.UserDictionarySectionName">OcrZone.UserDictionarySectionName</see> property.</para>
        <para>User dictionary items are strings and they must be no longer than <see cref="P:Leadtools.Forms.Ocr.IOcrUserDictionary.MaximumItemLength" /> characters. They may contain spaces and punctuation characters.</para>
        <para>If there is no default section specified, in the methods that expects a <paramref name="defaultSectionName" /> parameter, the first section of the User dictionary will
            be the default.</para>
        <para>You can set the current user dictionary to use in the checking subsystem with the <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Use(System.String,System.String)" /> method. If no user dictionary has been set, no checking through the
            user dictionary will be performed.</para>
        <para>You can use the <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Create(System.String)" /> method to create a new user dictionary and the <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Open(System.String,System.String)" /> method to open for edit an existing dictionary. You can then iterate
            through the sections and items as well as adding new sections and items to the dictionary. When you are done, you must call <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Save(System.String)" /> to save any changes you made to the
            dictionary and finally <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Close" /> to close it.</para>
        <para>
          <strong>Note: The <see cref="P:Leadtools.Forms.Ocr.IOcrSpellCheckManager.SpellLanguage">IOcrSpellCheckManager.SpellLanguage</see> property is read only for the LEADTOOLS OCR Advantage Engine, setting this property will have no effect since the spell language will always be the same as the currently enabled language.</strong>
        </para>
        <para>
          <strong>Note: User-defined checking through the <see cref="T:Leadtools.Forms.Ocr.OcrSpellCheckCallback">OcrSpellCheckCallback</see> callback is not supported when using the LEADTOOLS OCR Advantage Engine.</strong>
        </para>
        <para>
          <strong>Note: User dictionary sections are not supported in the LEADTOOLS OCR Advantage Engine.</strong>
        </para>
      </remarks>
      <keywords>OCR,Spelling and correction|OCR,User dictionaries</keywords>
      <example>
        <para>This example will create a user dictionary and add a few sections and items to it</para>
        <code lang="VB">   Public Sub OcrUserDictionaryExample()
      ' Unlock the support needed for LEADTOOLS Plus OCR engine
      RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here")
      RasterSupport.Unlock(RasterSupportType.OcrPlus, "Replace with your own key here")
      RasterSupport.Unlock(RasterSupportType.OcrPlusPdfLeadOutput, "Replace with your own key here")
      ' Create an instance of the engine
      Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, False)
         ' Start the engine using default parameters
         ocrEngine.Startup(Nothing, Nothing, Nothing, Nothing)

         ' Get the user dictionary object used in the engine
         Dim userDictionary As IOcrUserDictionary = ocrEngine.SpellCheckManager.UserDictionary

         ' Create a new user dictionary
         Dim defaultSectionName As String = "Cities"
         userDictionary.Create(defaultSectionName)

         ' Add a few items to this user dictionary
         Dim cities() As String = {"Lagos, Amman"}
         For Each city As String In cities
            Dim item As IOcrUserDictionaryItem = userDictionary.CreateItem(city, OcrUserDictionaryItemStyles.None)
            userDictionary.AddItem(defaultSectionName, item)
         Next

         ' Save this user dictionary to disk
         Dim userDictionaryFileName As String = LeadtoolsExamples.Common.ImagesPath.Path + "Cities.ud"
         userDictionary.Save(userDictionaryFileName)
         userDictionary.Close()

         ' Now re-open this user dictionary to show how we can iterate the items
         userDictionary.Open(userDictionaryFileName, defaultSectionName)

         ' Enumerate the sections
         Dim sectionName As String = userDictionary.GetFirstSectionName()
         Do While (Not sectionName Is Nothing)
            Console.WriteLine("Section: {0}", sectionName)

            ' Find the items of this section
            ' Note, the items returned maight be a group of the items you added
            Dim item As IOcrUserDictionaryItem = userDictionary.GetFirstItem(sectionName)
            Do While (Not item Is Nothing)
               Console.WriteLine("  Item: {0}", item.Value)
               item = userDictionary.GetNextItem()
            Loop

            sectionName = userDictionary.GetNextSectionName()
         Loop

         userDictionary.Close()

         ' Now set this user dictionary as the one to use in spell checking
         userDictionary.Use(userDictionaryFileName, defaultSectionName)

         ' Show the current user dictionary and section names
         Console.WriteLine("User dictionary in use:\nFileName: {0}\nDefaultSectionName: {1}", userDictionary.FileName, userDictionary.DefaultSectionName)

         ' Shutdown the engine
         ' Note: calling Dispose will also automatically shutdown the engine if it has been started
         ocrEngine.Shutdown()
      End Using
   End Sub</code>
        <code lang="CS">      public void OcrUserDictionaryExample()
      {
         // Unlock the support needed for LEADTOOLS Plus OCR engine
         RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here");
         RasterSupport.Unlock(RasterSupportType.OcrPlus, "Replace with your own key here");
         RasterSupport.Unlock(RasterSupportType.OcrPlusPdfLeadOutput, "Replace with your own key here");
         // Create an instance of the engine
         using(IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, false))
         {
            // Start the engine using default parameters
            ocrEngine.Startup(null, null, null, null);

            // Get the user dictionary object used in the engine
            IOcrUserDictionary userDictionary = ocrEngine.SpellCheckManager.UserDictionary;

            // Create a new user dictionary
            string defaultSectionName = "Cities";
            userDictionary.Create(defaultSectionName);

            // Add a few items to this user dictionary
            string[] cities = { "Lagos, Amman" };
            foreach(string city in cities)
            {
               IOcrUserDictionaryItem item = userDictionary.CreateItem(city, OcrUserDictionaryItemStyles.None);
               userDictionary.AddItem(defaultSectionName, item);
            }

            // Save this user dictionary to disk
            string userDictionaryFileName = LeadtoolsExamples.Common.ImagesPath.Path + "Cities.ud";
            userDictionary.Save(userDictionaryFileName);
            userDictionary.Close();

            // Now re-open this user dictionary to show how we can iterate the items
            userDictionary.Open(userDictionaryFileName, defaultSectionName);

            // Enumerate the sections
            string sectionName = userDictionary.GetFirstSectionName();
            while(sectionName != null)
            {
               Console.WriteLine("Section: {0}", sectionName);

               // Find the items of this section
               // Note, the items returned maight be a group of the items you added
               IOcrUserDictionaryItem item = userDictionary.GetFirstItem(sectionName);
               while(item != null)
               {
                  Console.WriteLine("  Item: {0}", item.Value);
                  item = userDictionary.GetNextItem();
               }

               sectionName = userDictionary.GetNextSectionName();
            }

            userDictionary.Close();

            // Now set this user dictionary as the one to use in spell checking
            userDictionary.Use(userDictionaryFileName, defaultSectionName);

            // Show the current user dictionary and section names
            Console.WriteLine("User dictionary in use:\nFileName: {0}\nDefaultSectionName: {1}", userDictionary.FileName, userDictionary.DefaultSectionName);

            // Shutdown the engine
            // Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown();
         }
      }</code>
        <!--IOcrUserDictionary-->
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">IOcrEngine.Startup</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrEngine.IsStarted">IOcrEngine.IsStarted</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Shutdown">IOcrEngine.Shutdown</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrLanguageGroup" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.WorkingWithOcrUserDictionaries.html">Working With OCR User Dictionaries</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Use(System.String,System.String)">
      <summary>
            Specify a user dictionary and the default section in it for the checking subsystem.
            </summary>
      <param name="fileName">Name of the user dictionary file, must not be <strong>null</strong> (<strong>Nothing</strong> in Visual Basic).</param>
      <param name="defaultSectionName">Name of the default section in the user dictionary. If it is <strong>null</strong> (<strong>Nothing</strong> in Visual Basic),
            the default section will be the first section of the dictionary, if any.
            <para><strong>Note: This parameter is not supported in the LEADTOOLS OCR Advantage Engine and it should be null.</strong></para></param>
      <remarks>
        <para>A user dictionary typically consists of different sections, the sections may contain one or more specified items (<see cref="T:Leadtools.Forms.Ocr.IOcrUserDictionaryItem" />). You can
            enumerate the sections in the User dictionary with the <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.GetFirstSectionName" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.GetNextSectionName" /> methods.</para>
        <para>Each zone can be linked to a section in the User dictionary using the <see cref="P:Leadtools.Forms.Ocr.OcrZone.UserDictionarySectionName">OcrZone.UserDictionarySectionName</see> property.</para>
        <para>User dictionary items are strings and they must be no longer than <see cref="P:Leadtools.Forms.Ocr.IOcrUserDictionary.MaximumItemLength" /> characters. They may contain spaces and punctuation characters.</para>
        <para>If there is no default section specified, in the methods that expects a <paramref name="defaultSectionName" /> parameter, the first section of the User dictionary will
            be the default.</para>
        <para>You can set the current user dictionary to use in the checking subsystem with the <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Use(System.String,System.String)" /> method. If no user dictionary has been set, no checking through the
            user dictionary will be performed.</para>
        <para>You can use the <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Create(System.String)" /> method to create a new user dictionary and the <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Open(System.String,System.String)" /> method to open for edit an existing dictionary. You can then iterate
            through the sections and items as well as adding new sections and items to the dictionary. When you are done, you must call <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Save(System.String)" /> to save any changes you made to the
            dictionary and finally <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Close" /> to close it.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrUserDictionary" />.</example>
      <docaddon>yes</docaddon>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Create(System.String)">
      <summary>
            Creates a new user dictionary in memory.
            </summary>
      <param name="defaultSectionName">The default section name of the newly created user dictionary. If <strong>null</strong> (<strong>Nothing</strong> in Visual Basic) is specified,
            the newly created user dictionary has no default section.
            <para><strong>Note: This parameter is not supported in the LEADTOOLS OCR Advantage Engine and it should be null.</strong></para></param>
      <remarks>
        <para>A user dictionary typically consists of different sections, the sections may contain one or more specified items (<see cref="T:Leadtools.Forms.Ocr.IOcrUserDictionaryItem" />). You can
            enumerate the sections in the User dictionary with the <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.GetFirstSectionName" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.GetNextSectionName" /> methods.</para>
        <para>Each zone can be linked to a section in the User dictionary using the <see cref="P:Leadtools.Forms.Ocr.OcrZone.UserDictionarySectionName">OcrZone.UserDictionarySectionName</see> property.</para>
        <para>User dictionary items are strings and they must be no longer than <see cref="P:Leadtools.Forms.Ocr.IOcrUserDictionary.MaximumItemLength" /> characters. They may contain spaces and punctuation characters.</para>
        <para>If there is no default section specified, in the methods that expects a <paramref name="defaultSectionName" /> parameter, the first section of the User dictionary will
            be the default.</para>
        <para>You can set the current user dictionary to use in the checking subsystem with the <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Use(System.String,System.String)" /> method. If no user dictionary has been set, no checking through the
            user dictionary will be performed.</para>
        <para>You can use the <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Create(System.String)" /> method to create a new user dictionary and the <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Open(System.String,System.String)" /> method to open for edit an existing dictionary. You can then iterate
            through the sections and items as well as adding new sections and items to the dictionary. When you are done, you must call <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Save(System.String)" /> to save any changes you made to the
            dictionary and finally <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Close" /> to close it.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrUserDictionary" />.</example>
      <docaddon>yes</docaddon>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Open(System.String,System.String)">
      <summary>
            Open an existing user dictionary file for editing.
            </summary>
      <param name="fileName">Name of the user dictionary file, must not be <strong>null</strong> (<strong>Nothing</strong> in Visual Basic).</param>
      <param name="defaultSectionName">Name of the default section in the user dictionary. If it is <strong>null</strong> (<strong>Nothing</strong> in Visual Basic),
            the default section will be the first section of the dictionary, if any.
            <para><strong>Note: This parameter is not supported in the LEADTOOLS OCR Advantage Engine and it should be null.</strong></para></param>
      <remarks>
        <para>A user dictionary typically consists of different sections, the sections may contain one or more specified items (<see cref="T:Leadtools.Forms.Ocr.IOcrUserDictionaryItem" />). You can
            enumerate the sections in the User dictionary with the <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.GetFirstSectionName" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.GetNextSectionName" /> methods.</para>
        <para>Each zone can be linked to a section in the User dictionary using the <see cref="P:Leadtools.Forms.Ocr.OcrZone.UserDictionarySectionName">OcrZone.UserDictionarySectionName</see> property.</para>
        <para>User dictionary items are strings and they must be no longer than <see cref="P:Leadtools.Forms.Ocr.IOcrUserDictionary.MaximumItemLength" /> characters. They may contain spaces and punctuation characters.</para>
        <para>If there is no default section specified, in the methods that expects a <paramref name="defaultSectionName" /> parameter, the first section of the User dictionary will
            be the default.</para>
        <para>You can set the current user dictionary to use in the checking subsystem with the <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Use(System.String,System.String)" /> method. If no user dictionary has been set, no checking through the
            user dictionary will be performed.</para>
        <para>You can use the <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Create(System.String)" /> method to create a new user dictionary and the <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Open(System.String,System.String)" /> method to open for edit an existing dictionary. You can then iterate
            through the sections and items as well as adding new sections and items to the dictionary. When you are done, you must call <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Save(System.String)" /> to save any changes you made to the
            dictionary and finally <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Close" /> to close it.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrUserDictionary" />.</example>
      <docaddon>yes</docaddon>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Save(System.String)">
      <summary>
            Saves the user dictionary file.
            </summary>
      <param name="fileName">The name of the user dictionary file.</param>
      <remarks>
        <para>This property will save the user dictionary file opened with <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Open(System.String,System.String)" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Create(System.String)" />.</para>
        <para>A user dictionary typically consists of different sections, the sections may contain one or more specified items (<see cref="T:Leadtools.Forms.Ocr.IOcrUserDictionaryItem" />). You can
            enumerate the sections in the User dictionary with the <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.GetFirstSectionName" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.GetNextSectionName" /> methods.</para>
        <para>Each zone can be linked to a section in the User dictionary using the <see cref="P:Leadtools.Forms.Ocr.OcrZone.UserDictionarySectionName">OcrZone.UserDictionarySectionName</see> property.</para>
        <para>User dictionary items are strings and they must be no longer than <see cref="P:Leadtools.Forms.Ocr.IOcrUserDictionary.MaximumItemLength" /> characters. They may contain spaces and punctuation characters.</para>
        <para>If there is no default section specified, in the methods that expects a <paramref name="defaultSectionName" /> parameter, the first section of the User dictionary will
            be the default.</para>
        <para>You can set the current user dictionary to use in the checking subsystem with the <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Use(System.String,System.String)" /> method. If no user dictionary has been set, no checking through the
            user dictionary will be performed.</para>
        <para>You can use the <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Create(System.String)" /> method to create a new user dictionary and the <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Open(System.String,System.String)" /> method to open for edit an existing dictionary. You can then iterate
            through the sections and items as well as adding new sections and items to the dictionary. When you are done, you must call <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Save(System.String)" /> to save any changes you made to the
            dictionary and finally <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Close" /> to close it.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrUserDictionary" />.</example>
      <docaddon>yes</docaddon>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Close">
      <summary>
            Closes the currently open user dictionary file.
            </summary>
      <remarks>
        <para>This property will close the user dictionary file opened with <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Open(System.String,System.String)" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Create(System.String)" />.</para>
        <para>A user dictionary typically consists of different sections, the sections may contain one or more specified items (<see cref="T:Leadtools.Forms.Ocr.IOcrUserDictionaryItem" />). You can
            enumerate the sections in the User dictionary with the <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.GetFirstSectionName" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.GetNextSectionName" /> methods.</para>
        <para>Each zone can be linked to a section in the User dictionary using the <see cref="P:Leadtools.Forms.Ocr.OcrZone.UserDictionarySectionName">OcrZone.UserDictionarySectionName</see> property.</para>
        <para>User dictionary items are strings and they must be no longer than <see cref="P:Leadtools.Forms.Ocr.IOcrUserDictionary.MaximumItemLength" /> characters. They may contain spaces and punctuation characters.</para>
        <para>If there is no default section specified, in the methods that expects a <paramref name="defaultSectionName" /> parameter, the first section of the User dictionary will
            be the default.</para>
        <para>You can set the current user dictionary to use in the checking subsystem with the <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Use(System.String,System.String)" /> method. If no user dictionary has been set, no checking through the
            user dictionary will be performed.</para>
        <para>You can use the <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Create(System.String)" /> method to create a new user dictionary and the <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Open(System.String,System.String)" /> method to open for edit an existing dictionary. You can then iterate
            through the sections and items as well as adding new sections and items to the dictionary. When you are done, you must call <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Save(System.String)" /> to save any changes you made to the
            dictionary and finally <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Close" /> to close it.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrUserDictionary" />.</example>
      <docaddon>yes</docaddon>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrUserDictionary.CreateItem(System.String,Leadtools.Forms.Ocr.OcrUserDictionaryItemStyles)">
      <summary>
            Creates a new user dictionary item.
            </summary>
      <param name="value">The item value. <paramref name="value" /> must be no longer than <see cref="P:Leadtools.Forms.Ocr.IOcrUserDictionary.MaximumItemLength" /> characters and it may contain spaces and punctuation characters.</param>
      <param name="styles">The item styles.</param>
      <returns>The newly created user dictionary item.</returns>
      <remarks>
        <para>A user dictionary typically consists of different sections, the sections may contain one or more specified items (<see cref="T:Leadtools.Forms.Ocr.IOcrUserDictionaryItem" />). You can
            enumerate the sections in the User dictionary with the <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.GetFirstSectionName" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.GetNextSectionName" /> methods.</para>
        <para>Each zone can be linked to a section in the User dictionary using the <see cref="P:Leadtools.Forms.Ocr.OcrZone.UserDictionarySectionName">OcrZone.UserDictionarySectionName</see> property.</para>
        <para>User dictionary items are strings and they must be no longer than <see cref="P:Leadtools.Forms.Ocr.IOcrUserDictionary.MaximumItemLength" /> characters. They may contain spaces and punctuation characters.</para>
        <para>If there is no default section specified, in the methods that expects a <paramref name="defaultSectionName" /> parameter, the first section of the User dictionary will
            be the default.</para>
        <para>You can set the current user dictionary to use in the checking subsystem with the <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Use(System.String,System.String)" /> method. If no user dictionary has been set, no checking through the
            user dictionary will be performed.</para>
        <para>You can use the <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Create(System.String)" /> method to create a new user dictionary and the <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Open(System.String,System.String)" /> method to open for edit an existing dictionary. You can then iterate
            through the sections and items as well as adding new sections and items to the dictionary. When you are done, you must call <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Save(System.String)" /> to save any changes you made to the
            dictionary and finally <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Close" /> to close it.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrUserDictionary" />.</example>
      <docaddon>yes</docaddon>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrUserDictionary.GetFirstSectionName">
      <summary>
            Gets the name of the first section in currently opened user dictionary.
            </summary>
      <returns>The name of the first section in the currently opened user dictionary or <strong>null</strong> (<strong>Nothing</strong> in Visual Basic) if no more sections
            are found.</returns>
      <remarks>
        <para>The user dictionary must be opened with <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Open(System.String,System.String)" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Create(System.String)" /> before you can use this method.</para>
        <para>Refer to <see cref="T:Leadtools.Forms.Ocr.IOcrUserDictionary" /> example on how to use this method to iterate the user dictionary sections.</para>
        <para>A user dictionary typically consists of different sections, the sections may contain one or more specified items (<see cref="T:Leadtools.Forms.Ocr.IOcrUserDictionaryItem" />). You can
            enumerate the sections in the User dictionary with the <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.GetFirstSectionName" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.GetNextSectionName" /> methods.</para>
        <para>Each zone can be linked to a section in the User dictionary using the <see cref="P:Leadtools.Forms.Ocr.OcrZone.UserDictionarySectionName">OcrZone.UserDictionarySectionName</see> property.</para>
        <para>User dictionary items are strings and they must be no longer than <see cref="P:Leadtools.Forms.Ocr.IOcrUserDictionary.MaximumItemLength" /> characters. They may contain spaces and punctuation characters.</para>
        <para>If there is no default section specified, in the methods that expects a <paramref name="defaultSectionName" /> parameter, the first section of the User dictionary will
            be the default.</para>
        <para>You can set the current user dictionary to use in the checking subsystem with the <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Use(System.String,System.String)" /> method. If no user dictionary has been set, no checking through the
            user dictionary will be performed.</para>
        <para>You can use the <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Create(System.String)" /> method to create a new user dictionary and the <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Open(System.String,System.String)" /> method to open for edit an existing dictionary. You can then iterate
            through the sections and items as well as adding new sections and items to the dictionary. When you are done, you must call <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Save(System.String)" /> to save any changes you made to the
            dictionary and finally <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Close" /> to close it.</para>
        <para>
          <strong>Note: This property is not supported in the LEADTOOLS OCR Advantage Engine and it will always return null since sections are not supported for this engine.</strong>
        </para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrUserDictionary" />.</example>
      <docaddon>yes</docaddon>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrUserDictionary.GetNextSectionName">
      <summary>
            Gets the name of the next section in currently opened user dictionary.
            </summary>
      <returns>The name of the next section in the currently opened user dictionary or <strong>null</strong> (<strong>Nothing</strong> in Visual Basic) if no more sections
            are found.</returns>
      <remarks>
        <para>The user dictionary must be opened with <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Open(System.String,System.String)" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Create(System.String)" /> before you can use this method.</para>
        <para>Refer to <see cref="T:Leadtools.Forms.Ocr.IOcrUserDictionary" /> example on how to use this method to iterate the user dictionary sections.</para>
        <para>A user dictionary typically consists of different sections, the sections may contain one or more specified items (<see cref="T:Leadtools.Forms.Ocr.IOcrUserDictionaryItem" />). You can
            enumerate the sections in the User dictionary with the <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.GetFirstSectionName" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.GetNextSectionName" /> methods.</para>
        <para>Each zone can be linked to a section in the User dictionary using the <see cref="P:Leadtools.Forms.Ocr.OcrZone.UserDictionarySectionName">OcrZone.UserDictionarySectionName</see> property.</para>
        <para>User dictionary items are strings and they must be no longer than <see cref="P:Leadtools.Forms.Ocr.IOcrUserDictionary.MaximumItemLength" /> characters. They may contain spaces and punctuation characters.</para>
        <para>If there is no default section specified, in the methods that expects a <paramref name="defaultSectionName" /> parameter, the first section of the User dictionary will
            be the default.</para>
        <para>You can set the current user dictionary to use in the checking subsystem with the <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Use(System.String,System.String)" /> method. If no user dictionary has been set, no checking through the
            user dictionary will be performed.</para>
        <para>You can use the <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Create(System.String)" /> method to create a new user dictionary and the <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Open(System.String,System.String)" /> method to open for edit an existing dictionary. You can then iterate
            through the sections and items as well as adding new sections and items to the dictionary. When you are done, you must call <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Save(System.String)" /> to save any changes you made to the
            dictionary and finally <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Close" /> to close it.</para>
        <para>
          <strong>Note: This property is not supported in the LEADTOOLS OCR Advantage Engine and it will always return null since sections are not suuported for this engine.</strong>
        </para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrUserDictionary" />.</example>
      <docaddon>yes</docaddon>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrUserDictionary.AddItem(System.String,Leadtools.Forms.Ocr.IOcrUserDictionaryItem)">
      <summary>
            Add a new item to the currently opened user dictionary.
            </summary>
      <param name="sectionName">Name of the section where the item should be added. If the specified section does not exist, a new section will be created automatically.
            <para><strong>Note: This parameter is not supported in the LEADTOOLS OCR Advantage Engine and it should be null.</strong></para></param>
      <param name="item">The item to be added.</param>
      <remarks>
        <para>The user dictionary must be opened with <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Open(System.String,System.String)" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Create(System.String)" /> before you can use this method.</para>
        <para>Use the <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.CreateItem(System.String,Leadtools.Forms.Ocr.OcrUserDictionaryItemStyles)" /> to create the instance of <see cref="T:Leadtools.Forms.Ocr.IOcrUserDictionaryItem" /> to be added.</para>
        <para>Use the <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.RemoveItem(System.String,Leadtools.Forms.Ocr.IOcrUserDictionaryItem)" /> to delete an item from the user dictionary.</para>
        <para>A user dictionary typically consists of different sections, the sections may contain one or more specified items (<see cref="T:Leadtools.Forms.Ocr.IOcrUserDictionaryItem" />). You can
            enumerate the sections in the User dictionary with the <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.GetFirstSectionName" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.GetNextSectionName" /> methods.</para>
        <para>Each zone can be linked to a section in the User dictionary using the <see cref="P:Leadtools.Forms.Ocr.OcrZone.UserDictionarySectionName">OcrZone.UserDictionarySectionName</see> property.</para>
        <para>User dictionary items are strings and they must be no longer than <see cref="P:Leadtools.Forms.Ocr.IOcrUserDictionary.MaximumItemLength" /> characters. They may contain spaces and punctuation characters.</para>
        <para>If there is no default section specified, in the methods that expects a <paramref name="defaultSectionName" /> parameter, the first section of the User dictionary will
            be the default.</para>
        <para>You can set the current user dictionary to use in the checking subsystem with the <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Use(System.String,System.String)" /> method. If no user dictionary has been set, no checking through the
            user dictionary will be performed.</para>
        <para>You can use the <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Create(System.String)" /> method to create a new user dictionary and the <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Open(System.String,System.String)" /> method to open for edit an existing dictionary. You can then iterate
            through the sections and items as well as adding new sections and items to the dictionary. When you are done, you must call <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Save(System.String)" /> to save any changes you made to the
            dictionary and finally <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Close" /> to close it.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrUserDictionary" />.</example>
      <docaddon>yes</docaddon>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrUserDictionary.RemoveItem(System.String,Leadtools.Forms.Ocr.IOcrUserDictionaryItem)">
      <summary>
            Delete an item from the currently opened user dictionary.
            </summary>
      <param name="sectionName">Name of the section where the item should be deleted.
            <para><strong>Note: This parameter is not supported in the LEADTOOLS OCR Advantage Engine and it should be null.</strong></para></param>
      <param name="item">The item to delete.</param>
      <remarks>
        <para>Deleting the last item from a section causes the section to be removed automatically from the user dictionary.</para>
        <para>The user dictionary must be opened with <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Open(System.String,System.String)" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Create(System.String)" /> before you can use this method.</para>
        <para>Use the <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.CreateItem(System.String,Leadtools.Forms.Ocr.OcrUserDictionaryItemStyles)" /> to create the instance of <see cref="T:Leadtools.Forms.Ocr.IOcrUserDictionaryItem" /> to be added.</para>
        <para>Use the <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.AddItem(System.String,Leadtools.Forms.Ocr.IOcrUserDictionaryItem)" /> to add an item to the user dictionary.</para>
        <para>A user dictionary typically consists of different sections, the sections may contain one or more specified items (<see cref="T:Leadtools.Forms.Ocr.IOcrUserDictionaryItem" />). You can
            enumerate the sections in the User dictionary with the <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.GetFirstSectionName" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.GetNextSectionName" /> methods.</para>
        <para>Each zone can be linked to a section in the User dictionary using the <see cref="P:Leadtools.Forms.Ocr.OcrZone.UserDictionarySectionName">OcrZone.UserDictionarySectionName</see> property.</para>
        <para>User dictionary items are strings and they must be no longer than <see cref="P:Leadtools.Forms.Ocr.IOcrUserDictionary.MaximumItemLength" /> characters. They may contain spaces and punctuation characters.</para>
        <para>If there is no default section specified, in the methods that expects a <paramref name="defaultSectionName" /> parameter, the first section of the User dictionary will
            be the default.</para>
        <para>You can set the current user dictionary to use in the checking subsystem with the <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Use(System.String,System.String)" /> method. If no user dictionary has been set, no checking through the
            user dictionary will be performed.</para>
        <para>You can use the <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Create(System.String)" /> method to create a new user dictionary and the <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Open(System.String,System.String)" /> method to open for edit an existing dictionary. You can then iterate
            through the sections and items as well as adding new sections and items to the dictionary. When you are done, you must call <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Save(System.String)" /> to save any changes you made to the
            dictionary and finally <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Close" /> to close it.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrUserDictionary" />.</example>
      <docaddon>yes</docaddon>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrUserDictionary.GetFirstItem(System.String)">
      <summary>
            Gets the first section item in the currently opened user dictionary.
            </summary>
      <param name="sectionName">Name of the section where the items are retrieved.
            <para><strong>Note: This parameter is not supported in the LEADTOOLS OCR Advantage Engine and it should be null.</strong></para></param>
      <returns>The first item in the section or <strong>null</strong> (<strong>Nothing</strong> in Visual Basic) if no more items are found.</returns>
      <remarks>
        <para>The user dictionary must be opened with <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Open(System.String,System.String)" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Create(System.String)" /> before you can use this method.</para>
        <para>The method might return a group of items separated with a comma.</para>
        <para>Refer to <see cref="T:Leadtools.Forms.Ocr.IOcrUserDictionary" /> example on how to use this method to iterate the user dictionary items.</para>
        <para>A user dictionary typically consists of different sections, the sections may contain one or more specified items (<see cref="T:Leadtools.Forms.Ocr.IOcrUserDictionaryItem" />). You can
            enumerate the sections in the User dictionary with the <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.GetFirstSectionName" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.GetNextSectionName" /> methods.</para>
        <para>Each zone can be linked to a section in the User dictionary using the <see cref="P:Leadtools.Forms.Ocr.OcrZone.UserDictionarySectionName">OcrZone.UserDictionarySectionName</see> property.</para>
        <para>User dictionary items are strings and they must be no longer than <see cref="P:Leadtools.Forms.Ocr.IOcrUserDictionary.MaximumItemLength" /> characters. They may contain spaces and punctuation characters.</para>
        <para>If there is no default section specified, in the methods that expects a <paramref name="defaultSectionName" /> parameter, the first section of the User dictionary will
            be the default.</para>
        <para>You can set the current user dictionary to use in the checking subsystem with the <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Use(System.String,System.String)" /> method. If no user dictionary has been set, no checking through the
            user dictionary will be performed.</para>
        <para>You can use the <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Create(System.String)" /> method to create a new user dictionary and the <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Open(System.String,System.String)" /> method to open for edit an existing dictionary. You can then iterate
            through the sections and items as well as adding new sections and items to the dictionary. When you are done, you must call <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Save(System.String)" /> to save any changes you made to the
            dictionary and finally <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Close" /> to close it.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrUserDictionary" />.</example>
      <docaddon>yes</docaddon>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrUserDictionary.GetNextItem">
      <summary>
            Gets the next section item in currently opened user dictionary.
            </summary>
      <returns>The next item of the section in the currently opened user dictionary or <strong>null</strong> (<strong>Nothing</strong> in Visual Basic) if no more sections
            are found.</returns>
      <remarks>
        <para>The user dictionary must be opened with <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Open(System.String,System.String)" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Create(System.String)" /> before you can use this method.</para>
        <para>The method might return a group of items separated with a comma.</para>
        <para>Refer to <see cref="T:Leadtools.Forms.Ocr.IOcrUserDictionary" /> example on how to use this method to iterate the user dictionary sections.</para>
        <para>A user dictionary typically consists of different sections, the sections may contain one or more specified items (<see cref="T:Leadtools.Forms.Ocr.IOcrUserDictionaryItem" />). You can
            enumerate the sections in the User dictionary with the <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.GetFirstSectionName" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.GetNextSectionName" /> methods.</para>
        <para>Each zone can be linked to a section in the User dictionary using the <see cref="P:Leadtools.Forms.Ocr.OcrZone.UserDictionarySectionName">OcrZone.UserDictionarySectionName</see> property.</para>
        <para>User dictionary items are strings and they must be no longer than <see cref="P:Leadtools.Forms.Ocr.IOcrUserDictionary.MaximumItemLength" /> characters. They may contain spaces and punctuation characters.</para>
        <para>If there is no default section specified, in the methods that expects a <paramref name="defaultSectionName" /> parameter, the first section of the User dictionary will
            be the default.</para>
        <para>You can set the current user dictionary to use in the checking subsystem with the <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Use(System.String,System.String)" /> method. If no user dictionary has been set, no checking through the
            user dictionary will be performed.</para>
        <para>You can use the <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Create(System.String)" /> method to create a new user dictionary and the <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Open(System.String,System.String)" /> method to open for edit an existing dictionary. You can then iterate
            through the sections and items as well as adding new sections and items to the dictionary. When you are done, you must call <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Save(System.String)" /> to save any changes you made to the
            dictionary and finally <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Close" /> to close it.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrUserDictionary" />.</example>
      <docaddon>yes</docaddon>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrUserDictionary.IsSupported">
      <summary>
            Gets a value that indicates if user dictionaries are supported in this OCR engine.
            </summary>
      <value>
        <strong>true</strong> if user dictionaries are supported in this OCR engine; otherwise it is <strong>false</strong>.</value>
      <remarks>
        <para>If the engine does not support user dictionaries, all of the other methods of <see cref="T:Leadtools.Forms.Ocr.IOcrUserDictionary" /> interface will throw an exception if used.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrUserDictionary" />.</example>
      <docaddon>yes</docaddon>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrUserDictionary.MaximumSectionNameLength">
      <summary>
            Gets a value that indicates the maximum number of characters in a section name.
            </summary>
      <value>The maximum number of characters in a section name.</value>
      <remarks>
        <para>When creating new sections through the <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Create(System.String)" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.AddItem(System.String,Leadtools.Forms.Ocr.IOcrUserDictionaryItem)" /> methods, the number of characters in the section name should not exceed
            <see cref="P:Leadtools.Forms.Ocr.IOcrUserDictionary.MaximumSectionNameLength" />.</para>
        <para>
          <strong>Note: This property is not supported in the LEADTOOLS OCR Advantage Engine and it will always return 0 since sections are not supported for this engine.</strong>
        </para>
      </remarks>
      <noexample />
      <docaddon>yes</docaddon>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrUserDictionary.MaximumItemLength">
      <summary>
            Gets a value that indicates the maximum number of characters in an item.
            </summary>
      <value>The maximum number of characters in an item.</value>
      <remarks>
        <para>When creating new sections through the <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.CreateItem(System.String,Leadtools.Forms.Ocr.OcrUserDictionaryItemStyles)" /> method, the number of charcaters in the item value should not exceed
            <see cref="P:Leadtools.Forms.Ocr.IOcrUserDictionary.MaximumItemLength" />.</para>
        <para>
          <strong>Note: This property is not supported in the LEADTOOLS OCR Advantage Engine and it will always return 0 since sections are not supported for this engine.</strong>
        </para>
      </remarks>
      <noexample />
      <docaddon>yes</docaddon>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrUserDictionary.IsModified">
      <summary>
            Gets a value indicating whether the current user dictionary file has been modified.
            </summary>
      <value>
        <strong>True</strong> if the current user dictionary file has been modified; otherwise it is <strong>false</strong></value>
      <remarks>
        <para>This property will be <strong>false</strong> if no user dictionary file is currently opened.</para>
        <para>A user dictionary typically consists of different sections, the sections may contain one or more specified items (<see cref="T:Leadtools.Forms.Ocr.IOcrUserDictionaryItem" />). You can
            enumerate the sections in the User dictionary with the <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.GetFirstSectionName" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.GetNextSectionName" /> methods.</para>
        <para>Each zone can be linked to a section in the User dictionary using the <see cref="P:Leadtools.Forms.Ocr.OcrZone.UserDictionarySectionName">OcrZone.UserDictionarySectionName</see> property.</para>
        <para>User dictionary items are strings and they must be no longer than <see cref="P:Leadtools.Forms.Ocr.IOcrUserDictionary.MaximumItemLength" /> characters. They may contain spaces and punctuation characters.</para>
        <para>If there is no default section specified, in the methods that expects a <paramref name="defaultSectionName" /> parameter, the first section of the User dictionary will
            be the default.</para>
        <para>You can set the current user dictionary to use in the checking subsystem with the <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Use(System.String,System.String)" /> method. If no user dictionary has been set, no checking through the
            user dictionary will be performed.</para>
        <para>You can use the <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Create(System.String)" /> method to create a new user dictionary and the <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Open(System.String,System.String)" /> method to open for edit an existing dictionary. You can then iterate
            through the sections and items as well as adding new sections and items to the dictionary. When you are done, you must call <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Save(System.String)" /> to save any changes you made to the
            dictionary and finally <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Close" /> to close it.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrUserDictionary" />.</example>
      <docaddon>yes</docaddon>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrUserDictionary.IsOpen">
      <summary>
            Gets a value indicating whether the current user dictionary file is opened.
            </summary>
      <value>
        <strong>True</strong> if the current user dictionary file is opened; otherwise it is <strong>false</strong>.</value>
      <remarks>
        <para>You can open a user dictionary file with <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Open(System.String,System.String)" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Create(System.String)" />.</para>
        <para>A user dictionary typically consists of different sections, the sections may contain one or more specified items (<see cref="T:Leadtools.Forms.Ocr.IOcrUserDictionaryItem" />). You can
            enumerate the sections in the User dictionary with the <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.GetFirstSectionName" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.GetNextSectionName" /> methods.</para>
        <para>Each zone can be linked to a section in the User dictionary using the <see cref="P:Leadtools.Forms.Ocr.OcrZone.UserDictionarySectionName">OcrZone.UserDictionarySectionName</see> property.</para>
        <para>User dictionary items are strings and they must be no longer than <see cref="P:Leadtools.Forms.Ocr.IOcrUserDictionary.MaximumItemLength" /> characters. They may contain spaces and punctuation characters.</para>
        <para>If there is no default section specified, in the methods that expects a <paramref name="defaultSectionName" /> parameter, the first section of the User dictionary will
            be the default.</para>
        <para>You can set the current user dictionary to use in the checking subsystem with the <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Use(System.String,System.String)" /> method. If no user dictionary has been set, no checking through the
            user dictionary will be performed.</para>
        <para>You can use the <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Create(System.String)" /> method to create a new user dictionary and the <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Open(System.String,System.String)" /> method to open for edit an existing dictionary. You can then iterate
            through the sections and items as well as adding new sections and items to the dictionary. When you are done, you must call <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Save(System.String)" /> to save any changes you made to the
            dictionary and finally <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Close" /> to close it.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrUserDictionary" />.</example>
      <docaddon>yes</docaddon>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrUserDictionary.FileName">
      <summary>
            Gets the file name of the current user dictionary in use.
            </summary>
      <value>A string indicating the file name of the current user dictionary in use or <strong>null</strong> (<strong>Nothing</strong> in Visual Basic) if no user dictionary
            is currently being used.</value>
      <remarks>
        <para>You can use a user dictionary with the <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Use(System.String,System.String)" /> method.</para>
        <para>A user dictionary typically consists of different sections, the sections may contain one or more specified items (<see cref="T:Leadtools.Forms.Ocr.IOcrUserDictionaryItem" />). You can
            enumerate the sections in the User dictionary with the <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.GetFirstSectionName" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.GetNextSectionName" /> methods.</para>
        <para>Each zone can be linked to a section in the User dictionary using the <see cref="P:Leadtools.Forms.Ocr.OcrZone.UserDictionarySectionName">OcrZone.UserDictionarySectionName</see> property.</para>
        <para>User dictionary items are strings and they must be no longer than <see cref="P:Leadtools.Forms.Ocr.IOcrUserDictionary.MaximumItemLength" /> characters. They may contain spaces and punctuation characters.</para>
        <para>If there is no default section specified, in the methods that expects a <paramref name="defaultSectionName" /> parameter, the first section of the User dictionary will
            be the default.</para>
        <para>You can set the current user dictionary to use in the checking subsystem with the <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Use(System.String,System.String)" /> method. If no user dictionary has been set, no checking through the
            user dictionary will be performed.</para>
        <para>You can use the <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Create(System.String)" /> method to create a new user dictionary and the <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Open(System.String,System.String)" /> method to open for edit an existing dictionary. You can then iterate
            through the sections and items as well as adding new sections and items to the dictionary. When you are done, you must call <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Save(System.String)" /> to save any changes you made to the
            dictionary and finally <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Close" /> to close it.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrUserDictionary" />.</example>
      <docaddon>yes</docaddon>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrUserDictionary.DefaultSectionName">
      <summary>
            Gets the default section name of the current user dictionary in use.
            </summary>
      <value>A string indicating the default section name of the current user dictionary in use. Could be <strong>null</strong> (<strong>Nothing</strong> in Visual Basic) if the
            current user dictionary does not contain a default section or if no user dictionary is currently being used.</value>
      <remarks>
        <para>You can use a user dictionary with the <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Use(System.String,System.String)" /> method.</para>
        <para>A user dictionary typically consists of different sections, the sections may contain one or more specified items (<see cref="T:Leadtools.Forms.Ocr.IOcrUserDictionaryItem" />). You can
            enumerate the sections in the User dictionary with the <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.GetFirstSectionName" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.GetNextSectionName" /> methods.</para>
        <para>Each zone can be linked to a section in the User dictionary using the <see cref="P:Leadtools.Forms.Ocr.OcrZone.UserDictionarySectionName">OcrZone.UserDictionarySectionName</see> property.</para>
        <para>User dictionary items are strings and they must be no longer than <see cref="P:Leadtools.Forms.Ocr.IOcrUserDictionary.MaximumItemLength" /> characters. They may contain spaces and punctuation characters.</para>
        <para>If there is no default section specified, in the methods that expects a <paramref name="defaultSectionName" /> parameter, the first section of the User dictionary will
            be the default.</para>
        <para>You can set the current user dictionary to use in the checking subsystem with the <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Use(System.String,System.String)" /> method. If no user dictionary has been set, no checking through the
            user dictionary will be performed.</para>
        <para>You can use the <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Create(System.String)" /> method to create a new user dictionary and the <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Open(System.String,System.String)" /> method to open for edit an existing dictionary. You can then iterate
            through the sections and items as well as adding new sections and items to the dictionary. When you are done, you must call <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Save(System.String)" /> to save any changes you made to the
            dictionary and finally <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.Close" /> to close it.</para>
        <para>
          <strong>Note: This property is not supported in the LEADTOOLS OCR Advantage Engine and it will always return null since sections are not supported for this engine.</strong>
        </para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrUserDictionary" />.</example>
      <docaddon>yes</docaddon>
    </member>
    <member name="T:Leadtools.Forms.Ocr.OcrSupportLockedExceptionType">
      <summary>
            The type of support (feature) needing to be unlocked which caused the error.
            </summary>
      <remarks>
        <para>
                    Various parts of the LEADTOOLS OCR toolkit are locked by a specific key. When
                    using these features without first unlocking the specified feature, an
                    exception of type <see cref="T:Leadtools.Forms.Ocr.OcrSupportLockedException" /> will be thrown.
                    You can examine the
                    <see cref="P:Leadtools.Forms.Ocr.OcrSupportLockedException.SupportType">OcrSupportLockedException.SupportType</see>
                    property to determine which unlock support feature is required.
                </para>
        <para>
                    The following table lists the action required when an error of type
                    <see cref="T:Leadtools.Forms.Ocr.OcrSupportLockedException" /> is thrown: s 
                    <table><tbody><tr><th>Engine type</th><th><see cref="P:Leadtools.Forms.Ocr.OcrSupportLockedException.SupportType">OcrSupportLockedException.SupportType</see>
                                    value
                                </th><th>Action required</th></tr><tr><td>
                                    LEADTOOLS OCR Plus Engine
                                    (<see cref="T:Leadtools.Forms.Ocr.OcrEngineType">OcrEngineType.Plus</see>)
                                </td><td><see cref="T:Leadtools.Forms.Ocr.OcrSupportLockedExceptionType">OcrSupportLockedExceptionType.Ocr</see></td><td>
                                    Unlock
                                    <see cref="T:Leadtools.RasterSupportType">RasterSupportType.OcrPlus</see></td></tr><tr><td>
                                    LEADTOOLS OCR Plus Engine
                                    (<see cref="T:Leadtools.Forms.Ocr.OcrEngineType">OcrEngineType.Plus</see>)
                                </td><td><see cref="T:Leadtools.Forms.Ocr.OcrSupportLockedExceptionType">OcrSupportLockedExceptionType.Icr</see></td><td>
                                    Unlock
                                    <see cref="T:Leadtools.RasterSupportType">RasterSupportType.IcrPlus</see></td></tr><tr><td>
                                    LEADTOOLS OCR Plus Engine
                                    (<see cref="T:Leadtools.Forms.Ocr.OcrEngineType">OcrEngineType.Plus</see>)
                                </td><td><see cref="T:Leadtools.Forms.Ocr.OcrSupportLockedExceptionType">OcrSupportLockedExceptionType.Omr</see></td><td>
                                    Unlock
                                    <see cref="T:Leadtools.RasterSupportType">RasterSupportType.OmrPlus</see></td></tr><tr><td>
                                    LEADTOOLS OCR Plus Engine
                                    (<see cref="T:Leadtools.Forms.Ocr.OcrEngineType">OcrEngineType.Plus</see>)
                                </td><td><see cref="T:Leadtools.Forms.Ocr.OcrSupportLockedExceptionType">OcrSupportLockedExceptionType.Pdf</see></td><td>
                                    Unlock
                                    <see cref="T:Leadtools.RasterSupportType">RasterSupportType.OcrPlusPdfOutput</see></td></tr><tr><td>
                                    LEADTOOLS OCR Plus Engine
                                    (<see cref="T:Leadtools.Forms.Ocr.OcrEngineType">OcrEngineType.Plus</see>)
                                </td><td><see cref="T:Leadtools.Forms.Ocr.OcrSupportLockedExceptionType">OcrSupportLockedExceptionType.PdfA</see></td><td>
                                    Unlock
                                    <see cref="T:Leadtools.RasterSupportType">RasterSupportType.OcrPlusPdfLeadOutput</see></td></tr><tr><td>
                                    LEADTOOLS OCR Professional Engine
                                    (<see cref="T:Leadtools.Forms.Ocr.OcrEngineType">OcrEngineType.Professional</see>)
                                </td><td><see cref="T:Leadtools.Forms.Ocr.OcrSupportLockedExceptionType">OcrSupportLockedExceptionType.Ocr</see></td><td>
                                    Unlock
                                    <see cref="T:Leadtools.RasterSupportType">RasterSupportType.OcrProfessional</see></td></tr><tr><td>
                                    LEADTOOLS OCR Professional Engine
                                    (<see cref="T:Leadtools.Forms.Ocr.OcrEngineType">OcrEngineType.Professional</see>)
                                </td><td><see cref="T:Leadtools.Forms.Ocr.OcrSupportLockedExceptionType">OcrSupportLockedExceptionType.Icr</see></td><td>
                                    Unlock
                                    <see cref="T:Leadtools.RasterSupportType">RasterSupportType.IcrProfessional</see></td></tr><tr><td>
                                    LEADTOOLS OCR Professional Engine
                                    (<see cref="T:Leadtools.Forms.Ocr.OcrEngineType">OcrEngineType.Professional</see>)
                                </td><td><see cref="T:Leadtools.Forms.Ocr.OcrSupportLockedExceptionType">OcrSupportLockedExceptionType.Omr</see></td><td>
                                    Unlock
                                    <see cref="T:Leadtools.RasterSupportType">RasterSupportType.OmrProfessional</see></td></tr><tr><td>
                                    LEADTOOLS OCR Professional Engine
                                    (<see cref="T:Leadtools.Forms.Ocr.OcrEngineType">OcrEngineType.Professional</see>)
                                </td><td><see cref="T:Leadtools.Forms.Ocr.OcrSupportLockedExceptionType">OcrSupportLockedExceptionType.Pdf</see></td><td>
                                    Unlock
                                    <see cref="T:Leadtools.RasterSupportType">RasterSupportType.OcrProfessionalPdfOutput</see></td></tr><tr><td>
                                    LEADTOOLS OCR Professional Engine
                                    (<see cref="T:Leadtools.Forms.Ocr.OcrEngineType">OcrEngineType.Professional</see>)
                                </td><td><see cref="T:Leadtools.Forms.Ocr.OcrSupportLockedExceptionType">OcrSupportLockedExceptionType.PdfA</see></td><td>
                                    Unlock
                                    <see cref="T:Leadtools.RasterSupportType">RasterSupportType.OcrProfessionalPdfLeadOutput</see></td></tr><tr><td>
                                    LEADTOOLS OCR Advantage Engine
                                    (<see cref="T:Leadtools.Forms.Ocr.OcrEngineType">OcrEngineType.Advantage</see>)
                                </td><td><see cref="T:Leadtools.Forms.Ocr.OcrSupportLockedExceptionType">OcrSupportLockedExceptionType.Ocr</see></td><td>
                                    Unlock
                                    <see cref="T:Leadtools.RasterSupportType">RasterSupportType.OcrAdvantage</see></td></tr><tr><td>
                                    LEADTOOLS OCR Advantage Engine
                                    (<see cref="T:Leadtools.Forms.Ocr.OcrEngineType">OcrEngineType.Advantage</see>)
                                </td><td><see cref="T:Leadtools.Forms.Ocr.OcrSupportLockedExceptionType">OcrSupportLockedExceptionType.Pdf</see></td><td>
                                    Unlock
                                    <see cref="T:Leadtools.RasterSupportType">RasterSupportType.OcrAdvantagePdfOutput</see></td></tr><tr><td>
                                    LEADTOOLS OCR Advantage Engine
                                    (<see cref="T:Leadtools.Forms.Ocr.OcrEngineType">OcrEngineType.Advantage</see>)
                                </td><td><see cref="T:Leadtools.Forms.Ocr.OcrSupportLockedExceptionType">OcrSupportLockedExceptionType.PdfA</see></td><td>
                                    Unlock
                                    <see cref="T:Leadtools.RasterSupportType">RasterSupportType.OcrAdvantagePdfLeadOutput</see></td></tr></tbody></table></para>
        <para>
                    Note at this time, LEADTOOLS OCR Advantage Engine
                    (<see cref="T:Leadtools.Forms.Ocr.OcrEngineType">OcrEngineType.Advantage</see>) is not supported.
                </para>
        <para>
                    For more information on feature support and how to obtain the unlock keys,
                    refer to
                    <a href="ms-help://Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.UnlockingSpecialLEADFeatures.html">
                    Unlocking Special LEAD Features</a>, <see cref="T:Leadtools.RasterSupport" /> and
                    <see cref="T:Leadtools.RasterSupportType" />.
                </para>
      </remarks>
      <keywords>OCR,Support</keywords>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrException" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrSupportLockedExceptionType.Ocr">
      <summary>
            OCR support is required to use this feature.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrSupportLockedExceptionType.Icr">
      <summary>
            ICR (handprint)  support is required to use this feature.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrSupportLockedExceptionType.Omr">
      <summary>
            OMR support is required to use this feature.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrSupportLockedExceptionType.Pdf">
      <summary>
            PDF support is required to use this feature (When saving a document using the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter">LEADTOOLS Document Writers</see>, refer to <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~Save.html">IOcrDocument.Save</a>).
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrSupportLockedExceptionType.PdfA">
      <summary>
        <font color="red">(Deprecated)</font> Do not use.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrSupportLockedExceptionType.Arabic">
      <summary>
            Reserved for future use.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrSupportLockedExceptionType.EnginePdf">
      <summary>
            PDF support is required to use this feature (When saving a document using the engine native support, refer to <see cref="P:Leadtools.Forms.Ocr.IOcrDocumentManager.EngineFormat">IOcrDocumentManager.EngineFormat</see>).
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrSupportLockedExceptionType.OcrProfessionalAsian">
      <summary>
            Ocr Professional Asian support is required to use this feature.
            </summary>
    </member>
    <member name="T:Leadtools.Forms.Ocr.OcrSupportLockedException">
      <summary>
                The exception that is thrown when a support locked runtime error occurs inside the
                <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.
            </summary>
      <remarks>
        <para>
                    Various parts of the LEADTOOLS OCR toolkit are locked by a specific key. If
                    these features are used without first unlocking the specified feature, an
                    exception of type <see cref="T:Leadtools.Forms.Ocr.OcrSupportLockedException" /> will be thrown.
                    Examine the
                    <see cref="P:Leadtools.Forms.Ocr.OcrSupportLockedException.SupportType">OcrSupportLockedException.SupportType</see>
                    property to determine which unlock support feature is required.
                </para>
        <para>
                    For a description of the support types, refer to
                    <see cref="T:Leadtools.Forms.Ocr.OcrSupportLockedExceptionType" />.
                </para>
        <para>
                    For more information on feature support and how to obtain the unlock keys,
                    refer to
                    <a href="ms-help://Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics~Leadtools.Topics.UnlockingSpecialLEADFeatures.html">
                    Unlocking Special LEAD Features</a>, <see cref="T:Leadtools.RasterSupport" /> and
                    <see cref="T:Leadtools.RasterSupportType" />.
                </para>
      </remarks>
      <keywords>OCR,Support</keywords>
      <example>
        <para>This example shows how to trap various types of exceptions during OCR
            operations.</para>
        <code lang="VB">   Public Sub OcrExceptionExample()
      ' Unlock the support needed for LEADTOOLS Plus OCR engine
      RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here")
      RasterSupport.Unlock(RasterSupportType.OcrPlus, "Replace with your own key here")
      RasterSupport.Unlock(RasterSupportType.OcrPlusPdfLeadOutput, "Replace with your own key here")
      Try
         ' Create an instance of the engine
         Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, False)
            ' Start the engine using default parameters
            ocrEngine.Startup(Nothing, Nothing, Nothing, Nothing)

            Dim tifFileName As String = LeadtoolsExamples.Common.ImagesPath.Path + "Ocr1.tif"
            Dim pdfFileName As String = LeadtoolsExamples.Common.ImagesPath.Path + "Ocr1.pdf"

            ' Create an OCR document
            Using ocrDocument As IOcrDocument = ocrEngine.DocumentManager.CreateDocument()
               ' Add a page to the document
               Dim ocrPage As IOcrPage = ocrDocument.Pages.AddPage(tifFileName, Nothing)

               ' Recognize the page
               ' Note, Recognize can be called without calling AutoZone or manually adding zones. The engine will
               ' check and automatically auto-zones the page
               ocrPage.Recognize(Nothing)

               ' Save the document we have as PDF
               ocrDocument.Save(pdfFileName, DocumentFormat.Pdf, Nothing)
            End Using

            ' Shutdown the engine
            ' Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown()
         End Using
      Catch ex As OcrSupportLockedException
         Console.WriteLine("Support is locked. You need to unlock '{0}' in this engine to use this feature", ex.SupportType)
      Catch ex As OcrException
         Console.WriteLine("OCR Error\nCode: {0}\nMessage:{1}", ex.Code, ex.Message)
      Catch ex As RasterException
         Console.WriteLine("LEADTOOLS Error\nCode: {0}\nMessage:{1}", ex.Code, ex.Message)
      Catch ex As Exception
         Console.WriteLine("System Error\nMessage:{0}", ex.Message)
      End Try
   End Sub</code>
        <code lang="CS">      public void OcrExceptionExample()
      {
         // Unlock the support needed for LEADTOOLS Plus OCR engine
         RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here");
         RasterSupport.Unlock(RasterSupportType.OcrPlus, "Replace with your own key here");
         RasterSupport.Unlock(RasterSupportType.OcrPlusPdfLeadOutput, "Replace with your own key here");
         try
         {
            // Create an instance of the engine
            using(IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, false))
            {
               // Start the engine using default parameters
               ocrEngine.Startup(null, null, null, null);

               string tifFileName = LeadtoolsExamples.Common.ImagesPath.Path + "Ocr1.tif";
               string pdfFileName = LeadtoolsExamples.Common.ImagesPath.Path + "Ocr1.pdf";

               // Create an OCR document
               using(IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument())
               {
                  // Add a page to the document
                  IOcrPage ocrPage = ocrDocument.Pages.AddPage(tifFileName, null);

                  // Recognize the page
                  // Note, Recognize can be called without calling AutoZone or manually adding zones. The engine will
                  // check and automatically auto-zones the page
                  ocrPage.Recognize(null);

                  // Save the document we have as PDF
                  ocrDocument.Save(pdfFileName, DocumentFormat.Pdf, null);
               }

               // Shutdown the engine
               // Note: calling Dispose will also automatically shutdown the engine if it has been started
               ocrEngine.Shutdown();
            }
         }
         catch(OcrSupportLockedException ex)
         {
            Console.WriteLine("Support is locked. You need to unlock '{0}' in this engine to use this feature", ex.SupportType);
         }
         catch(OcrException ex)
         {
            Console.WriteLine("OCR Error\nCode: {0}\nMessage:{1}", ex.Code, ex.Message);
         }
         catch(RasterException ex)
         {
            Console.WriteLine("LEADTOOLS Error\nCode: {0}\nMessage:{1}", ex.Code, ex.Message);
         }
         catch(Exception ex)
         {
            Console.WriteLine("System Error\nMessage:{0}", ex.Message);
         }
      }</code>
        <!--OcrException-->
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrSupportLockedExceptionType" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">IOcrEngine.Startup</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrEngine.IsStarted">IOcrEngine.IsStarted</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Shutdown">IOcrEngine.Shutdown</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.OcrSupportLockedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Forms.Ocr.OcrSupportLockedException" /> class with serialized data.
            </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
      <remarks>
        <para>This constructor is called during deserialization to reconstitute the exception object transmitted over a stream. For more information, refer to the topic
            "XML and SOAP Serialization" in the MSDN documentation.</para>
      </remarks>
      <noexample />
      <docaddon>yes</docaddon>
    </member>
    <member name="M:Leadtools.Forms.Ocr.OcrSupportLockedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <remarks>
        <para>
          <see cref="M:Leadtools.Forms.Ocr.OcrSupportLockedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" /> sets a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with all the exception object data targeted for serialization. During deserialization, the exception is
            reconstituted from the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> transmitted over the stream. For more information, refer to the topic "XML and SOAP Serialization" in the MSDN
            documentation.</para>
      </remarks>
      <noexample />
      <docaddon>yes</docaddon>
    </member>
    <member name="M:Leadtools.Forms.Ocr.OcrSupportLockedException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Forms.Ocr.OcrSupportLockedException" /> class.
            </summary>
      <noremarks />
      <noexample />
      <docaddon>yes</docaddon>
    </member>
    <member name="M:Leadtools.Forms.Ocr.OcrSupportLockedException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Forms.Ocr.OcrSupportLockedException" /> class with a specified error message.
            </summary>
      <param name="message">The message that describes the error.</param>
      <noremarks />
      <noexample />
      <docaddon>yes</docaddon>
    </member>
    <member name="M:Leadtools.Forms.Ocr.OcrSupportLockedException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Forms.Ocr.OcrSupportLockedException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a <strong>null</strong> reference
            (<strong>Nothing</strong> in Visual Basic), the current exception is raised in a catch block that handles the inner exception.</param>
      <noremarks />
      <noexample />
      <docaddon>yes</docaddon>
    </member>
    <member name="M:Leadtools.Forms.Ocr.OcrSupportLockedException.#ctor(System.String,Leadtools.Forms.Ocr.OcrSupportLockedExceptionType)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Forms.Ocr.OcrSupportLockedException" /> class with a specified error message and the support type required that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="supportType">The support type required that is the cause of this exception.</param>
      <noremarks />
      <noexample />
      <docaddon>yes</docaddon>
    </member>
    <member name="M:Leadtools.Forms.Ocr.OcrSupportLockedException.#ctor(Leadtools.Forms.Ocr.OcrSupportLockedExceptionType)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Forms.Ocr.OcrSupportLockedException" /> class containing a support type enumeration value, the lack of which caused the exception.
            </summary>
      <param name="supportType">The support type, lack of which that caused the exception.</param>
      <noremarks />
      <noexample />
      <docaddon>yes</docaddon>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrSupportLockedException.SupportType">
      <summary>
            Gets or sets the support type that is needed, the lack of which causes the exception.
            </summary>
      <value>A <see cref="T:Leadtools.Forms.Ocr.OcrSupportLockedExceptionType" /> enumeration type that represents the support type required that is the cause of this exception.</value>
      <remarks>
        <para>Various parts of the LEADTOOLS OCR toolkit are locked by a specific key. If these features are used without first unlocking the specified feature, an exception of
            type <see cref="T:Leadtools.Forms.Ocr.OcrSupportLockedException" /> will be thrown. Examine the <see cref="P:Leadtools.Forms.Ocr.OcrSupportLockedException.SupportType" />
            property to determine which unlock support feature is required.</para>
        <para>For a description of the support types, refer to <see cref="T:Leadtools.Forms.Ocr.OcrSupportLockedExceptionType" />.</para>
        <para>For more information on feature support and how to obtain the unlock keys, refer to <see cref="T:Leadtools.RasterSupport" /> and <see cref="T:Leadtools.RasterSupportType" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrSupportLockedException" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrSupportLockedExceptionType" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">IOcrEngine.Startup</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrEngine.IsStarted">IOcrEngine.IsStarted</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Shutdown">IOcrEngine.Shutdown</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="T:Leadtools.Forms.Ocr.OcrEngineType">
      <summary>
            Specifies available OCR engine types.
            </summary>
      <remarks>
        <para>The <see cref="T:Leadtools.Forms.Ocr.OcrEngineType">Advantage</see>. engine type is currently not available. Using this engine type will result in an exception of type <see cref="T:System.ArgumentException" /> to be thrown.</para>
      </remarks>
      <keywords>OCR,Engines</keywords>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> and <see cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrEngineType.Plus">
      <summary>
            Specifies the <strong>LEADTOOLS OCR Plus engine</strong>. Internally, the OCR library inside <strong>Leadtools.Forms.Ocr.Plus.dll</strong> is used
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrEngineType.Professional">
      <summary>
            Specifies the <strong>LEADTOOLS OCR Professional</strong> engine. Internally, the OCR library inside <strong>Leadtools.Forms.Ocr.Professional.dll</strong> is used
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrEngineType.Advantage">
      <summary>
            Specifies the <strong>LEADTOOLS OCR Advantage</strong> engine. Internally, the OCR library inside <strong>Leadtools.Forms.Ocr.Advantage.dll</strong> is used
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrEngineType.Arabic">
      <summary>
            Reserved for future use. Trying to start an <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> with <strong>Arabic</strong> will throw an exception
            </summary>
    </member>
    <member name="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager">
      <summary>
            Provides support for the one shot "fire and forget" approach to OCR.
            </summary>
      <keywords>Recognition</keywords>
      <remarks>
        <para>You can access the instance of the <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager" /> used by an <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> through the
            <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.AutoRecognizeManager">IOcrEngine.AutoRecognizeManager</see> property.</para>
        <para>The methods of this interface will let you create a document from an image file on disk with optional progress and status monitors.</para>
        <para>You can use the <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.Run(System.String,System.String,System.Collections.Generic.IList{System.String},Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">Run</see> method to convert in one line of code
            an image on disk to a final document with any of the document formats supported by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.</para>
      </remarks>
      <example>
        <para>This example will convert TIF files in a source folder to PDF in a destination folder</para>
        <code lang="VB">   Public Sub AutoRecognizeExample()
      ' Unlock the support needed for LEADTOOLS Plus OCR engine
      RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here")
      RasterSupport.Unlock(RasterSupportType.OcrPlus, "Replace with your own key here")
      RasterSupport.Unlock(RasterSupportType.OcrPlusPdfLeadOutput, "Replace with your own key here")
      Console.WriteLine("Preparing the source and destination directories...")

      Dim sourceDirectory As String = LeadtoolsExamples.Common.ImagesPath.Path
      Dim destinationDirectory As String = LeadtoolsExamples.Common.ImagesPath.Path + "Destination"

      ' Prepare the directories
      If (Directory.Exists(sourceDirectory)) Then
         Directory.Delete(sourceDirectory, True)
      End If
      Directory.CreateDirectory(sourceDirectory)

      If (Directory.Exists(destinationDirectory)) Then
         Directory.Delete(destinationDirectory, True)
      End If
      Directory.CreateDirectory(destinationDirectory)

      ' Copy some files to the source directory
      Dim imagesDirectory As String = LeadtoolsExamples.Common.ImagesPath.Path

      For i As Integer = 0 To 3
         Dim fileName As String = String.Format("Ocr{0}.tif", i + 1)
         Dim sourceFileName As String = Path.Combine(imagesDirectory, fileName)
         Dim destinationFileName As String = Path.Combine(sourceDirectory, fileName)
         File.Copy(sourceFileName, destinationFileName, True)
      Next

      Console.WriteLine("Creating an instance of the engine...")

      ' Create an instance of the engine
      Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, False)
         ' Start the engine using default parameters
         Console.WriteLine("Starting up the engine...")
         ocrEngine.Startup(Nothing, Nothing, Nothing, Nothing)

         Dim ocrAutoRecognizeManager As IOcrAutoRecognizeManager = ocrEngine.AutoRecognizeManager

         ' Loop through all the TIF files in the source directory, convert to PDF in the destination directory
         Dim tifFileNames() As String = Directory.GetFiles(sourceDirectory, "*.tif")
         For Each tifFileName As String In tifFileNames
            ' Construct the name of the document file
            Dim documentFileName As String = Path.Combine(destinationDirectory, Path.GetFileNameWithoutExtension(tifFileName))
            documentFileName = Path.ChangeExtension(documentFileName, "pdf")

            ' OCR the file
            Console.WriteLine("Processing {0}", tifFileName)
            ocrAutoRecognizeManager.Run(tifFileName, documentFileName, Nothing, DocumentFormat.Pdf, Nothing)
            Console.WriteLine("Saved: {0}", documentFileName)
         Next

         ' Note: calling Dispose will also automatically shutdown the engine if it has been started
         Console.WriteLine("Shutting down...")
         ocrEngine.Shutdown()
      End Using
   End Sub</code>
        <code lang="CS">      public void AutoRecognizeExample()
      {
         // Unlock the support needed for LEADTOOLS Plus OCR engine
         RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here");
         RasterSupport.Unlock(RasterSupportType.OcrPlus, "Replace with your own key here");
         RasterSupport.Unlock(RasterSupportType.OcrPlusPdfLeadOutput, "Replace with your own key here");
         Console.WriteLine("Preparing the source and destination directories...");

         string sourceDirectory = LeadtoolsExamples.Common.ImagesPath.Path;
         string destinationDirectory = LeadtoolsExamples.Common.ImagesPath.Path + "Destination";

         // Prepare the directories
         if(Directory.Exists(sourceDirectory))
            Directory.Delete(sourceDirectory, true);
         Directory.CreateDirectory(sourceDirectory);

         if(Directory.Exists(destinationDirectory))
            Directory.Delete(destinationDirectory, true);
         Directory.CreateDirectory(destinationDirectory);

         // Copy some files to the source directory
         string imagesDirectory = LeadtoolsExamples.Common.ImagesPath.Path;

         for(int i = 0; i &lt; 4; i++)
         {
            string fileName = string.Format("Ocr{0}.tif", i + 1);
            string sourceFileName = Path.Combine(imagesDirectory, fileName);
            string destinationFileName = Path.Combine(sourceDirectory, fileName);
            File.Copy(sourceFileName, destinationFileName, true);
         }

         Console.WriteLine("Creating an instance of the engine...");

         // Create an instance of the engine
         using(IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, false))
         {
            // Start the engine using default parameters
            Console.WriteLine("Starting up the engine...");
            ocrEngine.Startup(null, null, null, null);

            IOcrAutoRecognizeManager ocrAutoRecognizeManager = ocrEngine.AutoRecognizeManager;

            // Loop through all the TIF files in the source directory, convert to PDF in the destination directory
            string[] tifFileNames = Directory.GetFiles(sourceDirectory, "*.tif");
            foreach(string tifFileName in tifFileNames)
            {
               // Construct the name of the document file
               string documentFileName = Path.Combine(destinationDirectory, Path.GetFileNameWithoutExtension(tifFileName));
               documentFileName = Path.ChangeExtension(documentFileName, "pdf");

               // OCR the file
               Console.WriteLine("Processing {0}", tifFileName);
               ocrAutoRecognizeManager.Run(tifFileName, documentFileName, null, DocumentFormat.Pdf, null);
               Console.WriteLine("Saved: {0}", documentFileName);
            }

            // Note: calling Dispose will also automatically shutdown the engine if it has been started
            Console.WriteLine("Shutting down...");
            ocrEngine.Shutdown();
         }
      }</code>
        <!--IOcrAutoRecognizeManager-->
      </example>
      <docaddon>yes</docaddon>
      <keywords>OCR|OCR,Engines|OCR,Zoning|OCR,Recognition|OCR,PDF|OCR,Word</keywords>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.WorkingWithOcrPages.html">Working with OCR Pages</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.Run(System.String,System.String,System.Collections.Generic.IList{System.String},Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">
      <summary>
            Converts an image file on disk to a document file in the specified document format.
            </summary>
      <param name="imageFileName">The name of the file containing the image.</param>
      <param name="documentFileName">The name of the result document file.</param>
      <param name="zoneFileNames">Optional list of file names for prepared zone files for the pages. This parameter can be a <strong>null</strong> (<strong>Nothing</strong>
            in Visual Basic) reference.</param>
      <param name="format">The output document format. If this parameter is <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.User</see>, then the document saved using the native engine format
            set in <see cref="P:Leadtools.Forms.Ocr.IOcrDocumentManager.EngineFormat">IOcrDocumentManager.EngineFormat</see> if the engine used supports native formats, otherwise an exception will be thrown.
            Note that saving the OCR results using the native engine formats may produce more accurate results in table and cell positions since the
            engine has access to extra data that is saved internally.</param>
      <param name="callback">Optional callback to show operation progress.</param>
      <remarks>
        <para>This method will perform the following operations:
            <list type="number"><item><description>
            Create an <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object to store the pages into.
              </description></item><item><description>
            Load the raster image pages from <paramref name="imageFileName" /> add them the <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.Pages">IOcrDocument.Pages</see> collection using
            <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPageCollection~AddPage.html">IOcrPageCollection.AddPage</a>.
              </description></item><item><description>
            If <paramref name="zoneFileNames" /> contains a valid zone file name for the current page (the index in this array matches the index of the page being loaded), the zones
            are loaded with <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String)">IOcrPage.LoadZones</see> and applied to the page. If <paramref name="zoneFileNames" /> is a <strong>null</strong>
            (<strong>Nothing</strong> in Visual Basic) reference or its entry for the current page is a null reference, auto-decomposing of the page is performed instead with
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see>.
              </description></item><item><description>
            Calls <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see> on each <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> to get the OCR data of the page .
              </description></item><item><description>
            Saves the <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object to the result file name specified in <paramref name="documentFileName" /> using the format specified in <paramref name="format" />.
              </description></item><item><description>
            Finally, deletes the <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object by calling <see cref="M:System.IDisposable.Dispose">IOcrDocument.Dispose</see>.
              </description></item></list></para>
        <para>You can use the <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see> to show the operation progress or to abort it. For more information and an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager" />.</example>
      <isnew>5/8/2009</isnew>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrDocument.Pages">IOcrDocument.Pages</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPage" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones">IOcrPage.Zones</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String)">IOcrPage.LoadZones</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrDocument" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrDocumentManager" />
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrEngine.DocumentManager">IOcrEngine.DocumentManager</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="T:Leadtools.Forms.Ocr.OcrOmrZoneState">
      <summary>
            The zone OMR recognition state.
            </summary>
      <remarks>
        <para>OMR stands for Optical Mark Recognition. For more information refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.UsingOmrInLeadtoolsDotNetOcr.html">Using OMR in LEADTOOLS .NET OCR</a>.</para>
        <para>After you call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see>, all the OMR zones in the page will have the OMR properties updated as follows:
            <list type="table"><listheader><term>Property</term><description>Description</description></listheader><item><term><see cref="P:Leadtools.Forms.Ocr.OcrZone.OmrState">OcrZone.OmrState</see></term><description>Either <see cref="T:Leadtools.Forms.Ocr.OcrOmrZoneState">OcrOmrZoneState.Filled</see> if the mark is recognized to be filled or checked, or <see cref="T:Leadtools.Forms.Ocr.OcrOmrZoneState">OcrOmrZoneState.Unfilled</see> if the mark
            is recognized to be unfilled or unchecked.</description></item><item><term><see cref="P:Leadtools.Forms.Ocr.OcrZone.OmrConfidence">OcrZone.OmrConfidence</see></term><description>A number between 0 and 100 (where 100 is maximum confidence) that specifies the OCR engine confidence in the recognition status in <see cref="P:Leadtools.Forms.Ocr.OcrZone.OmrState">OcrZone.OmrState</see>.</description></item></list></para>
        <para>The OMR zones of a page are zones with the following properties:
            <list type="table"><listheader><term>Property</term><description>Value</description></listheader><item><term><see cref="P:Leadtools.Forms.Ocr.OcrZone.FillMethod">OcrZone.FillMethod</see></term><description>Set to <see cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod">OcrZoneFillMethod.Omr</see></description></item><item><term><see cref="P:Leadtools.Forms.Ocr.OcrZone.RecognitionModule">OcrZone.RecognitionModule</see></term><description>Set to <see cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule">OcrZoneRecognitionModule.Omr</see></description></item></list></para>
        <para>All LEADTOOLS OCR engines support OMR. However, there is no current support for auto-detecting OMR zones in a page, you have to add the OMR zones manually to the page
            by setting their boundary (through <see cref="P:Leadtools.Forms.Ocr.OcrZone.Bounds">OcrZone.Bounds</see>, the fill method and recognition module as described above and adding the zone to the page using
            the <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones">IOcrPage.Zones</see> collection before calling <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see>.</para>
        <para>To use OMR in LEADTOOLS, you need a special key to unlock the OMR capabilities. For more information, refer to <see cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrOmrOptions" />.</example>
      <isnew>5/8/2009</isnew>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrOmrOptions" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.UsingOmrInLeadtoolsDotNetOcr.html">Using OMR in LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrOmrZoneState.Unfilled">
      <summary>
            The mark is unfilled (or unchecked).
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrOmrZoneState.Filled">
      <summary>
            The mark is filled (or checked).
            </summary>
    </member>
    <member name="T:Leadtools.Forms.Ocr.IOcrSettingManager">
      <summary>
            Manages the underlying engine-specific settings of this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.
            </summary>
      <keywords>Loading settings|Saving settings|OCR settings|Settings</keywords>
      <remarks>
        <para>Access the instance of the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> used by an <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> through the
            <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.SettingManager">IOcrEngine.SettingManager</see> property.</para>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> allows you to do the following:
            <list type="bullet"><item><description>Get and set the underlying engine-specific settings. <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> is a wrapper for different OCR engines. These engines contain additional specific 
            features and functionalities that can be queried and updated using the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface.</description></item><item><description>Load and save the engine settings. Once you set up the OCR engine, re-use these settings by saving the engine state into memory or to
            an XML file on disk. You can later reload these settings and use them in the same or a different instance of <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.</description></item></list></para>
        <para>Use the different methods of the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface to get and set the engine-specific settings. Each setting has a unique name
            (a string value). Get all of the settings available to the current OCR engine through the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> method. The <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" /> method returns
            a description of the setting (its type, friendly name and value range). You can then use the various get and set methods to query and change the values of specific settings.
            For example, if the setting type is <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Integer</see>, you can use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetIntegerValue(System.String)" /> to get the current value of the
            setting and the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetIntegerValue(System.String,System.Int32)" /> to change its value. Refer to the example below for a complete demo.</para>
        <para>This interface also contains methods to load and save the engine state to a .NET stream or an XML file on disk. The following table lists all the states saved:
              <list type="table"><listheader><term>Part</term><description>Members</description></listheader><item><term><see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> (accessed through <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.SettingManager">IOcrEngine.SettingManager</see></term><description>All the settings as obtained through <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames">IOcrSettingManager.GetSettingNames</see></description></item><item><term><see cref="T:Leadtools.Forms.Ocr.IOcrLanguageManager" /> (accessed through <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.LanguageManager">IOcrEngine.LanguageManager</see></term><description>The value of <see cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.GetEnabledLanguages">IOcrLanguageManager.GetEnabledLanguages</see></description></item><item><term><see cref="T:Leadtools.Forms.Ocr.IOcrSpellCheckManager" /> (accessed through <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.SpellCheckManager">IOcrEngine.SpellCheckManager</see></term><description>The values of <see cref="P:Leadtools.Forms.Ocr.IOcrSpellCheckManager.Enabled">IOcrSpellCheckManager.Enabled</see>, 
            <see cref="P:Leadtools.Forms.Ocr.IOcrSpellCheckManager.SpellLanguage">IOcrSpellCheckManager.SpellLanguage</see> and <see cref="P:Leadtools.Forms.Ocr.IOcrSpellCheckManager.UserDictionary">IOcrSpellCheckManager.UserDictionary</see>.</description></item><item><term><see cref="T:Leadtools.Forms.Ocr.IOcrDocumentManager" /> (accessed through <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.DocumentManager">IOcrEngine.DocumentManager</see></term><description>The values of <see cref="P:Leadtools.Forms.Ocr.IOcrDocumentManager.EngineFormat">IOcrDocumentManager.EngineFormat</see>, <see cref="P:Leadtools.Forms.Ocr.IOcrDocumentManager.RejectionSymbol">IOcrDocumentManager.RejectionSymbol</see> and
            <see cref="P:Leadtools.Forms.Ocr.IOcrDocumentManager.MissingSymbol">IOcrDocumentManager.MissingSymbol</see>.</description></item><item><term><see cref="T:Leadtools.Forms.Ocr.IOcrZoneManager" /> (accessed through <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.ZoneManager">IOcrEngine.ZoneManager</see></term><description>The values of <see cref="P:Leadtools.Forms.Ocr.IOcrOmrOptions.FrameDetectionMethod">IOcrZoneManager.OmrOptions.FrameDetectionMethod</see>,
            <see cref="P:Leadtools.Forms.Ocr.IOcrOmrOptions.Sensitivity">IOcrZoneManager.OmrOptions.Sensitivity</see> and the state characters of
            <see cref="M:Leadtools.Forms.Ocr.IOcrOmrOptions.GetStateRecognitionCharacter(Leadtools.Forms.Ocr.OcrOmrZoneState)">IOcrZoneManager.OmrOptions.GetStateRecognitionCharacter</see>.</description></item></list></para>
        <para>You must call the <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">IOcrEngine.Startup</see> method before you can use the <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.SettingManager">IOcrEngine.SettingManager</see> property.</para>
        <para>Note: The <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.LanguageManager">IOcrEngine.LanguageManager</see> and <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.SpellCheckManager">IOcrEngine.SpellCheckManager</see> state is also
            saved when the engine settings are saved. For more information, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.Save(System.String)">IOcrSettingManager.Save</see>.</para>
        <para>For a list of supported engine-specific settings and their meanings, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettings.html">OCR engine-specific Settings</a>.</para>
      </remarks>
      <keywords>OCR,Settings</keywords>
      <example>
        <para>This example will start the LEADTOOLS OCR Plus engine. Shows the values of all the settings and change a few of them.</para>
        <code lang="VB">   Public Sub OcrSettingManagerExample()
      ' Unlock the support needed for LEADTOOLS Plus OCR engine
      RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here")
      RasterSupport.Unlock(RasterSupportType.OcrPlus, "Replace with your own key here")
      RasterSupport.Unlock(RasterSupportType.OcrPlusPdfLeadOutput, "Replace with your own key here")
      ' Create an instance of the engine
      Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, False)
         ' Start the engine using default parameters
         ocrEngine.Startup(Nothing, Nothing, Nothing, Nothing)

         Dim settingManager As IOcrSettingManager = ocrEngine.SettingManager

         ' Dump all the settings supported by this engine to a text file on disk
         DumpAllSettings(settingManager)

         ' Change the format level to drop
         Dim settingName As String = "SaveDocument.FormatLevel"
         settingManager.SetEnumValue(settingName, "Drop")

         ' Now use the new settings, notice that the result PDF file should not contain images
         Dim tifFileName As String = LeadtoolsExamples.Common.ImagesPath.Path + "Ocr1.tif"
         Dim pdfFileName As String = LeadtoolsExamples.Common.ImagesPath.Path + "Ocr1.pdf"

         ' Create an OCR document
         Using ocrDocument As IOcrDocument = ocrEngine.DocumentManager.CreateDocument()
            ' Add a page to the document
            Dim ocrPage As IOcrPage = ocrDocument.Pages.AddPage(tifFileName, Nothing)

            ' Recognize the page
            ' Note, Recognize can be called without calling AutoZone or manually adding zones. The engine will
            ' check and automatically auto-zones the page
            ocrPage.Recognize(Nothing)

            ' Save the document we have as PDF
            ocrDocument.Save(pdfFileName, DocumentFormat.Pdf, Nothing)
         End Using

         ' Shutdown the engine
         ' Note: calling Dispose will also automatically shutdown the engine if it has been started
         ocrEngine.Shutdown()
      End Using
   End Sub

   Private Sub DumpAllSettings(ByVal settingManager As IOcrSettingManager)
      ' Write all the settings into a disk file
      Dim settingsFileName As String = LeadtoolsExamples.Common.ImagesPath.Path + "Settings.txt"
      Using writer As StreamWriter = File.CreateText(settingsFileName)
         writer.WriteLine("Settings")
         Dim settingNames() As String = settingManager.GetSettingNames()

         For Each settingName As String In settingNames
            Dim sd As IOcrSettingDescriptor = settingManager.GetSettingDescriptor(settingName)

            writer.WriteLine("  Name:           {0}", sd.Name)
            writer.WriteLine("  ValueType:      {0}", sd.ValueType)
            writer.WriteLine("  FriendlyName:   {0}", sd.FriendlyName)

            Select Case (sd.ValueType)
               Case OcrSettingValueType.BeginCategory
                  writer.WriteLine("-------------------------------------")

               Case OcrSettingValueType.Integer
                  writer.WriteLine("    Units: {0}", sd.Units)
                  writer.WriteLine("    IntegerMinimumValue: {0}", sd.IntegerMinimumValue)
                  writer.WriteLine("    IntegerMaximumValue: {0}", sd.IntegerMaximumValue)

               Case OcrSettingValueType.Enum
                  writer.WriteLine("    EnumIsFlags: {0}", sd.EnumIsFlags)
                  writer.WriteLine("    EnumMemberFriendlyNames")
                  Dim values() As Integer = sd.GetEnumMemberValues()
                  Dim names() As String = sd.GetEnumMemberFriendlyNames()
                  For i As Integer = 0 To values.Length - 1
                     writer.WriteLine("      {0} : {1}", names(i), values(i))
                  Next

               Case OcrSettingValueType.Double
                  writer.WriteLine("    Units: {0}", sd.Units)
                  writer.WriteLine("    DoubleMinimumValue: {0}", sd.DoubleMinimumValue)
                  writer.WriteLine("    DoubleMaximumValue: {0}", sd.DoubleMaximumValue)

               Case OcrSettingValueType.Boolean

               Case OcrSettingValueType.Character

               Case OcrSettingValueType.String
                  writer.WriteLine("    StringMaximumLength:   {0}", sd.StringMaximumLength)
                  writer.WriteLine("    StringNullAllowed:     {0}", sd.StringNullAllowed)

               Case OcrSettingValueType.Rectangle

               Case OcrSettingValueType.EndCategory

            End Select
         Next
      End Using
   End Sub</code>
        <code lang="CS">      public void OcrSettingManagerExample()
      {
         // Unlock the support needed for LEADTOOLS Plus OCR engine
         RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here");
         RasterSupport.Unlock(RasterSupportType.OcrPlus, "Replace with your own key here");
         RasterSupport.Unlock(RasterSupportType.OcrPlusPdfLeadOutput, "Replace with your own key here");
         // Create an instance of the engine
         using(IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, false))
         {
            // Start the engine using default parameters
            ocrEngine.Startup(null, null, null, null);

            IOcrSettingManager settingManager = ocrEngine.SettingManager;

            // Dump all the settings supported by this engine to a text file on disk
            DumpAllSettings(settingManager);

            // Change the format level to drop
            string settingName = "SaveDocument.FormatLevel";
            settingManager.SetEnumValue(settingName, "Drop");

            // Now use the new settings, notice that the result PDF file should not contain images
            string tifFileName = LeadtoolsExamples.Common.ImagesPath.Path + "Ocr1.tif";
            string pdfFileName = LeadtoolsExamples.Common.ImagesPath.Path + "Ocr1.pdf";

            // Create an OCR document
            using(IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument())
            {
               // Add a page to the document
               IOcrPage ocrPage = ocrDocument.Pages.AddPage(tifFileName, null);

               // Recognize the page
               // Note, Recognize can be called without calling AutoZone or manually adding zones. The engine will
               // check and automatically auto-zones the page
               ocrPage.Recognize(null);

               // Save the document we have as PDF
               ocrDocument.Save(pdfFileName, DocumentFormat.Pdf, null);
            }

            // Shutdown the engine
            // Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown();
         }
      }

      private void DumpAllSettings(IOcrSettingManager settingManager)
      {
         // Write all the settings into a disk file
         string settingsFileName = LeadtoolsExamples.Common.ImagesPath.Path + "Settings.txt";
         using(StreamWriter writer = File.CreateText(settingsFileName))
         {
            writer.WriteLine("Settings");
            string[] settingNames = settingManager.GetSettingNames();

            foreach(string settingName in settingNames)
            {
               IOcrSettingDescriptor sd = settingManager.GetSettingDescriptor(settingName);

               writer.WriteLine("  Name:           {0}", sd.Name);
               writer.WriteLine("  ValueType:      {0}", sd.ValueType);
               writer.WriteLine("  FriendlyName:   {0}", sd.FriendlyName);

               switch(sd.ValueType)
               {
                  case OcrSettingValueType.BeginCategory:
                     writer.WriteLine("-------------------------------------");
                     break;

                  case OcrSettingValueType.Integer:
                     writer.WriteLine("    Units: {0}", sd.Units);
                     writer.WriteLine("    IntegerMinimumValue: {0}", sd.IntegerMinimumValue);
                     writer.WriteLine("    IntegerMaximumValue: {0}", sd.IntegerMaximumValue);
                     break;

                  case OcrSettingValueType.Enum:
                     writer.WriteLine("    EnumIsFlags: {0}", sd.EnumIsFlags);
                     writer.WriteLine("    EnumMemberFriendlyNames");
                     {
                        int[] values = sd.GetEnumMemberValues();
                        string[] names = sd.GetEnumMemberFriendlyNames();
                        for(int i = 0; i &lt; values.Length; i++)
                        {
                           writer.WriteLine("      {0} : {1}", names[i], values[i]);
                        }
                     }
                     break;

                  case OcrSettingValueType.Double:
                     writer.WriteLine("    Units: {0}", sd.Units);
                     writer.WriteLine("    DoubleMinimumValue: {0}", sd.DoubleMinimumValue);
                     writer.WriteLine("    DoubleMaximumValue: {0}", sd.DoubleMaximumValue);
                     break;

                  case OcrSettingValueType.Boolean:
                     break;

                  case OcrSettingValueType.Character:
                     break;

                  case OcrSettingValueType.String:
                     writer.WriteLine("    StringMaximumLength:   {0}", sd.StringMaximumLength);
                     writer.WriteLine("    StringNullAllowed:     {0}", sd.StringNullAllowed);
                     break;

                  case OcrSettingValueType.Rectangle:
                     break;

                  case OcrSettingValueType.EndCategory:
                     break;

                  default:
                     break;
               }
            }
         }
      }</code>
        <!--IOcrSettingManager-->
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrSettingValueType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">IOcrEngine.Startup</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrEngine.IsStarted">IOcrEngine.IsStarted</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Shutdown">IOcrEngine.Shutdown</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrLanguageManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSpellCheckManager" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettings.html">OCR engine-specific Settings</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames">
      <summary>
            Gets all the names of the supported engine-specific settings.
            </summary>
      <returns>An array of <see cref="T:System.String" /> that contains the names of the supported engine-specific settings.</returns>
      <remarks>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> is a wrapper for different OCR engines. These engines contain specific additional features and functionalities that can be queried and updated using
            the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface.</para>
        <para>You can use the different methods of the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface to get and set the engine-specific settings. Each setting has a unique name
            (a string value). You can get all the settings available to the current OCR engine through the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> method. The <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" />
            method returns a description of the setting (its type, friendly name and value range), you can then use the various setting get and set methods to query and change the value of
            a certain setting. For example, if the setting type is <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Integer</see>, you can use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetIntegerValue(System.String)" /> to get the
            current value of the setting and the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetIntegerValue(System.String,System.Int32)" /> to change its value. Refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> for a complete example.</para>
        <para>For a list of supported engine-specific settings and their meanings, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettings.html">OCR engine-specific Settings</a>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.IsSettingNameSupported(System.String)" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettings.html">OCR engine-specific Settings</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrSettingManager.IsSettingNameSupported(System.String)">
      <summary>
            Gets a value indicating whether the given setting name is supported by the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.
            </summary>
      <param name="settingName">Unique setting name.</param>
      <returns>
        <strong>True</strong> if the setting name given by <paramref name="settingName" /> is supported by the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />; otherwise it is <strong>false</strong>.</returns>
      <remarks>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> is a wrapper for different OCR engines. These engines contain specific additional features and functionalities that can be queried and updated using
            the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface.</para>
        <para>You can use the different methods of the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface to get and set the engine-specific settings. Each setting has a unique name
            (a string value). You can get all the settings available to the current OCR engine through the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> method. The <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" />
            method returns a description of the setting (its type, friendly name and value range), you can then use the various setting get and set methods to query and change the value of
            a certain setting. For example, if the setting type is <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Integer</see>, you can use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetIntegerValue(System.String)" /> to get the
            current value of the setting and the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetIntegerValue(System.String,System.Int32)" /> to change its value. Refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> for a complete example.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettings.html">OCR engine-specific Settings</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingValueType(System.String)">
      <summary>
            Gets a value indicating the type of the given setting.
            </summary>
      <param name="settingName">Unique setting name. If the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> does not support the setting with the unique name <paramref name="settingName" />, an exception
            will be thrown. You can check which settings the engine supports by using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.IsSettingNameSupported(System.String)" /></param>
      <returns>A <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType" /> enumeration value indicating the type of the setting with the unique name <paramref name="settingName" />.</returns>
      <remarks>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> is a wrapper for different OCR engines. These engines contain specific additional features and functionalities that can be queried and updated using
            the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface.</para>
        <para>You can use the different methods of the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface to get and set the engine-specific settings. Each setting has a unique name
            (a string value). You can get all the settings available to the current OCR engine through the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> method. The <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" />
            method returns a description of the setting (its type, friendly name and value range), you can then use the various setting get and set methods to query and change the value of
            a certain setting. For example, if the setting type is <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Integer</see>, you can use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetIntegerValue(System.String)" /> to get the
            current value of the setting and the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetIntegerValue(System.String,System.Int32)" /> to change its value. Refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> for a complete example.</para>
        <para>For a list of supported engine-specific settings and their meanings, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettings.html">OCR engine-specific Settings</a>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettings.html">OCR engine-specific Settings</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)">
      <summary>
            Gets the descriptor of the given setting.
            </summary>
      <param name="settingName">Unique setting name. If the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> does not support the setting with the unique name <paramref name="settingName" />, an exception
            will be thrown. You can check which settings the engine supports by using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.IsSettingNameSupported(System.String)" />.</param>
      <returns>An instance of <see cref="T:Leadtools.Forms.Ocr.IOcrSettingDescriptor" /> that describe the type of the setting with the unique name <paramref name="settingName" />.</returns>
      <remarks>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> is a wrapper for different OCR engines. These engines contain specific additional features and functionalities that can be queried and updated using
            the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface.</para>
        <para>You can use the different methods of the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface to get and set the engine-specific settings. Each setting has a unique name
            (a string value). You can get all the settings available to the current OCR engine through the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> method. The <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" />
            method returns a description of the setting (its type, friendly name and value range), you can then use the various setting get and set methods to query and change the value of
            a certain setting. For example, if the setting type is <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Integer</see>, you can use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetIntegerValue(System.String)" /> to get the
            current value of the setting and the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetIntegerValue(System.String,System.Int32)" /> to change its value. Refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> for a complete example.</para>
        <para>For a list of supported engine-specific settings and their meanings, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettings.html">OCR engine-specific Settings</a>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSettingDescriptor" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettings.html">OCR engine-specific Settings</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetIntegerValue(System.String)">
      <summary>
            Gets the current value of an integer setting.
            </summary>
      <param name="settingName">Unique setting name. If the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> does not support the setting with the unique name <paramref name="settingName" />, an exception
            will be thrown. You can check which settings the engine supports by using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.IsSettingNameSupported(System.String)" />.</param>
      <returns>The current integer value of the setting with the unique name <paramref name="settingName" />.</returns>
      <remarks>
        <para>The <paramref name="uniqueName" /> setting must be an "integer" type setting, otherwise; this method will throw an exception. To get the type of a setting along with other
            information such as its friendly name and range use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" /> method.</para>
        <para>To set the value of an integer setting, use <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetIntegerValue(System.String,System.Int32)" />.</para>
        <para>You can also set the value of any setting from a string (where the string will be converted to a compatible type) using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetValue(System.String,System.String)" />. To get the value of any
            setting as a string, use <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetValue(System.String)" /> Note that settings of type <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.BeginCategory</see> and
            <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.EndCategory</see> have no values and will throw an exception if you try to get or set their values.</para>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> is a wrapper for different OCR engines. These engines contain specific additional features and functionalities that can be queried and updated using
            the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface.</para>
        <para>You can use the different methods of the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface to get and set the engine-specific settings. Each setting has a unique name
            (a string value). You can get all the settings available to the current OCR engine through the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> method. The <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" />
            method returns a description of the setting (its type, friendly name and value range), you can then use the various setting get and set methods to query and change the value of
            a certain setting. For example, if the setting type is <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Integer</see>, you can use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetIntegerValue(System.String)" /> to get the
            current value of the setting and the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetIntegerValue(System.String,System.Int32)" /> to change its value. Refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> for a complete example.</para>
        <para>For a list of supported engine-specific settings and their meanings, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettings.html">OCR engine-specific Settings</a>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSettingDescriptor" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettings.html">OCR engine-specific Settings</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetIntegerValue(System.String,System.Int32)">
      <summary>
            Sets the value of an integer setting.
            </summary>
      <param name="settingName">Unique setting name. If the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> does not support the setting with the unique name <paramref name="settingName" />, an exception
            will be thrown. You can check which settings the engine supports by using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.IsSettingNameSupported(System.String)" /></param>
      <param name="value">New setting value.</param>
      <remarks>
        <para>The <paramref name="uniqueName" /> setting must be an "integer" type setting, otherwise; this method will throw an exception. To get the type of a setting along with other
            information such as its friendly name and range use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" /> method.</para>
        <para>To get the value of an integer setting, use <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetIntegerValue(System.String)" />.</para>
        <para>You can also set the value of any setting from a string (where the string will be converted to a compatible type) using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetValue(System.String,System.String)" />. To get the value of any
            setting as a string, use <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetValue(System.String)" /> Note that settings of type <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.BeginCategory</see> and
            <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.EndCategory</see> have no values and will throw an exception if you try to get or set their values.</para>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> is a wrapper for different OCR engines. These engines contain specific additional features and functionalities that can be queried and updated using
            the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface.</para>
        <para>You can use the different methods of the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface to get and set the engine-specific settings. Each setting has a unique name
            (a string value). You can get all the settings available to the current OCR engine through the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> method. The <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" />
            method returns a description of the setting (its type, friendly name and value range), you can then use the various setting get and set methods to query and change the value of
            a certain setting. For example, if the setting type is <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Integer</see>, you can use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetIntegerValue(System.String)" /> to get the
            current value of the setting and the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetIntegerValue(System.String,System.Int32)" /> to change its value. Refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> for a complete example.</para>
        <para>For a list of supported engine-specific settings and their meanings, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettings.html">OCR engine-specific Settings</a>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSettingDescriptor" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettings.html">OCR engine-specific Settings</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetEnumValue(System.String)">
      <summary>
            Gets the current value of an enum setting as an integer.
            </summary>
      <param name="settingName">Unique setting name. If the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> does not support the setting with the unique name <paramref name="settingName" />, an exception
            will be thrown. You can check which settings the engine supports by using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.IsSettingNameSupported(System.String)" />.</param>
      <returns>The current enum value of the setting with the unique name <paramref name="settingName" /> as an integer.</returns>
      <remarks>
        <para>The <paramref name="uniqueName" /> setting must be an "enum" type setting, otherwise; this method will throw an exception. To get the type of a setting along with other
            information such as its friendly name and range use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" /> method.</para>
        <para>This method returns the value as an integer, if the enum is not a flag enum type (the value of <see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.EnumIsFlags">IOcrSettingDescriptor.EnumIsFlags</see>
            of the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingDescriptor" /> for this setting is <strong>false</strong>, then the integer value of the setting is the integer value of the enum member (The enum
            member values and their friendly names can be obtained with <see cref="M:Leadtools.Forms.Ocr.IOcrSettingDescriptor.GetEnumMemberValues">IOcrSettingDescriptor.GetEnumMemberValues</see> and 
            <see cref="M:Leadtools.Forms.Ocr.IOcrSettingDescriptor.GetEnumMemberFriendlyNames">IOcrSettingDescriptor.GetEnumMemberFriendlyNames</see>).</para>
        <para>If the enum is a flag enum type (the value of <see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.EnumIsFlags">IOcrSettingDescriptor.EnumIsFlags</see> of the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingDescriptor" />
            for this setting is <strong>true</strong>, then the integer value of the setting is the sum of the OR'ed flagged set.</para>
        <para>To set the value of an enum setting as integer, use <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetEnumValue(System.String,System.Int32)" />.</para>
        <para>To get or set the enum value from a string value, use <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetEnumValueAsString(System.String)" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetEnumValue(System.String,System.String)" />.</para>
        <para>You can also set the value of any setting from a string (where the string will be converted to a compatible type) using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetValue(System.String,System.String)" />. To get the value of any
            setting as a string, use <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetValue(System.String)" /> Note that settings of type <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.BeginCategory</see> and
            <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.EndCategory</see> have no values and will throw an exception if you try to get or set their values.</para>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> is a wrapper for different OCR engines. These engines contain specific additional features and functionalities that can be queried and updated using
            the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface.</para>
        <para>You can use the different methods of the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface to get and set the engine-specific settings. Each setting has a unique name
            (a string value). You can get all the settings available to the current OCR engine through the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> method. The <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" />
            method returns a description of the setting (its type, friendly name and value range), you can then use the various setting get and set methods to query and change the value of
            a certain setting. For example, if the setting type is <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Integer</see>, you can use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetIntegerValue(System.String)" /> to get the
            current value of the setting and the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetIntegerValue(System.String,System.Int32)" /> to change its value. Refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> for a complete example.</para>
        <para>For a list of supported engine-specific settings and their meanings, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettings.html">OCR engine-specific Settings</a>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSettingDescriptor" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettings.html">OCR engine-specific Settings</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetEnumValue(System.String,System.Int32)">
      <summary>
            Sets the value of an enum setting from an integer.
            </summary>
      <param name="settingName">Unique setting name. If the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> does not support the setting with the unique name <paramref name="settingName" />, an exception
            will be thrown. You can check which settings the engine supports by using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.IsSettingNameSupported(System.String)" />.</param>
      <param name="value">The new setting value as an integer.</param>
      <remarks>
        <para>The <paramref name="uniqueName" /> setting must be an "enum" type setting, otherwise; this method will throw an exception. To get the type of a setting along with other
            information such as its friendly name and range use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" /> method.</para>
        <para>This method sets the value as an integer, if the enum is not a flag enum type (the value of <see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.EnumIsFlags">IOcrSettingDescriptor.EnumIsFlags</see>
            of the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingDescriptor" /> for this setting is <strong>false</strong>), then the integer value of the setting is the integer value of the enum member.</para>
        <para>If the enum is a flag enum type (the value of <see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.EnumIsFlags">IOcrSettingDescriptor.EnumIsFlags</see> of the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingDescriptor" />
            for this setting is <strong>true</strong>), then the integer value of the setting is the sum of the OR'ed flagged set.</para>
        <para>The enum member values and their friendly names can be obtained with <see cref="M:Leadtools.Forms.Ocr.IOcrSettingDescriptor.GetEnumMemberValues">IOcrSettingDescriptor.GetEnumMemberValues</see> and 
            <see cref="M:Leadtools.Forms.Ocr.IOcrSettingDescriptor.GetEnumMemberFriendlyNames">IOcrSettingDescriptor.GetEnumMemberFriendlyNames</see>.</para>
        <para>To get the value of an enum setting as integer, use <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetEnumValue(System.String)" />.</para>
        <para>To get or set the enum value from a string value, use <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetEnumValueAsString(System.String)" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetEnumValue(System.String,System.String)" />.</para>
        <para>You can also set the value of any setting from a string (where the string will be converted to a compatible type) using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetValue(System.String,System.String)" />. To get the value of any
            setting as a string, use <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetValue(System.String)" /> Note that settings of type <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.BeginCategory</see> and
            <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.EndCategory</see> have no values and will throw an exception if you try to get or set their values.</para>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> is a wrapper for different OCR engines. These engines contain specific additional features and functionalities that can be queried and updated using
            the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface.</para>
        <para>You can use the different methods of the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface to get and set the engine-specific settings. Each setting has a unique name
            (a string value). You can get all the settings available to the current OCR engine through the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> method. The <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" />
            method returns a description of the setting (its type, friendly name and value range), you can then use the various setting get and set methods to query and change the value of
            a certain setting. For example, if the setting type is <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Integer</see>, you can use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetIntegerValue(System.String)" /> to get the
            current value of the setting and the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetIntegerValue(System.String,System.Int32)" /> to change its value. Refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> for a complete example.</para>
        <para>For a list of supported engine-specific settings and their meanings, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettings.html">OCR engine-specific Settings</a>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSettingDescriptor" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettings.html">OCR engine-specific Settings</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetEnumValueAsString(System.String)">
      <summary>
            Gets the current value of an enum setting as string.
            </summary>
      <param name="settingName">Unique setting name. If the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> does not support the setting with the unique name <paramref name="settingName" />, an exception
            will be thrown. You can check which settings the engine supports by using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.IsSettingNameSupported(System.String)" />.</param>
      <returns>The current enum value of the setting with the unique name <paramref name="settingName" /> as a string.</returns>
      <remarks>
        <para>The <paramref name="uniqueName" /> setting must be an "enum" type setting; otherwise, this method will throw an exception. To get the type of a setting along with other
            information such as its friendly name and range use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" /> method.</para>
        <para>This method returns the value as a string, if the enum is not a flag enum type (the value of <see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.EnumIsFlags">IOcrSettingDescriptor.EnumIsFlags</see>
            of the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingDescriptor" /> for this setting is <strong>false</strong>, then the string value of the setting is the friendly name value of the enum member (The enum
            member values and their friendly names can be obtained with <see cref="M:Leadtools.Forms.Ocr.IOcrSettingDescriptor.GetEnumMemberValues">IOcrSettingDescriptor.GetEnumMemberValues</see> and 
            <see cref="M:Leadtools.Forms.Ocr.IOcrSettingDescriptor.GetEnumMemberFriendlyNames">IOcrSettingDescriptor.GetEnumMemberFriendlyNames</see>)</para>
        <para>If the enum is a flag enum type (the value of <see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.EnumIsFlags">IOcrSettingDescriptor.EnumIsFlags</see> of the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingDescriptor" />
            for this setting is <strong>true</strong>, then the string value of the setting is the friendly names of the flagged set separated by a comma.</para>
        <para>The string enum values are case-sensitive.</para>
        <para>To get the enum value as a string value, use <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetEnumValueAsString(System.String)" />.</para>
        <para>To get or set the value of an enum setting as integer, use <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetEnumValue(System.String)" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetEnumValue(System.String,System.Int32)" />.</para>
        <para>You can also set the value of any setting from a string (where the string will be converted to a compatible type) using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetValue(System.String,System.String)" />. To get the value of any
            setting as a string, use <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetValue(System.String)" /> Note that settings of type <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.BeginCategory</see> and
            <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.EndCategory</see> have no values and will throw an exception if you try to get or set their values.</para>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> is a wrapper for different OCR engines. These engines contain specific additional features and functionalities that can be queried and updated using
            the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface.</para>
        <para>You can use the different methods of the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface to get and set the engine-specific settings. Each setting has a unique name
            (a string value). You can get all the settings available to the current OCR engine through the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> method. The <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" />
            method returns a description of the setting (its type, friendly name and value range), you can then use the various setting get and set methods to query and change the value of
            a certain setting. For example, if the setting type is <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Integer</see>, you can use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetIntegerValue(System.String)" /> to get the
            current value of the setting and the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetIntegerValue(System.String,System.Int32)" /> to change its value. Refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> for a complete example.</para>
        <para>For a list of supported engine-specific settings and their meanings, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettings.html">OCR engine-specific Settings</a>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSettingDescriptor" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettings.html">OCR engine-specific Settings</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetEnumValue(System.String,System.String)">
      <summary>
            Sets the value of an enum setting from string.
            </summary>
      <param name="settingName">Unique setting name. If the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> does not support the setting with the unique name <paramref name="settingName" />, an exception
            will be thrown. You can check which settings the engine supports by using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.IsSettingNameSupported(System.String)" /></param>
      <param name="value">The new setting value as a string</param>
      <remarks>
        <para>The <paramref name="uniqueName" /> setting must be an "enum" type setting, otherwise; this method will throw an exception. To get the type of a setting along with other
            information such as its friendly name and range use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" /> method.</para>
        <para>If the enum is not a flag enum type (the value of <see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.EnumIsFlags">IOcrSettingDescriptor.EnumIsFlags</see>
            of the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingDescriptor" /> for this setting is <strong>false</strong>, then the string value of the setting is the friendly name value of the enum member (The enum
            member values and their friendly names can be obtained with <see cref="M:Leadtools.Forms.Ocr.IOcrSettingDescriptor.GetEnumMemberValues">IOcrSettingDescriptor.GetEnumMemberValues</see> and 
            <see cref="M:Leadtools.Forms.Ocr.IOcrSettingDescriptor.GetEnumMemberFriendlyNames">IOcrSettingDescriptor.GetEnumMemberFriendlyNames</see>)</para>
        <para>If the enum is a flag enum type (the value of <see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.EnumIsFlags">IOcrSettingDescriptor.EnumIsFlags</see> of the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingDescriptor" />
            for this setting is <strong>true</strong>, then the string value of the setting is the friendly names of the flagged set separated by a comma.</para>
        <para>The string enum values are case-sensitive.</para>
        <para>To set the enum value as a string value, use <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetEnumValue(System.String,System.String)" />.</para>
        <para>To get or set the value of an enum setting as integer, use <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetEnumValue(System.String)" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetEnumValue(System.String,System.Int32)" />.</para>
        <para>You can also set the value of any setting from a string (where the string will be converted to a compatible type) using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetValue(System.String,System.String)" />. To get the value of any
            setting as a string, use <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetValue(System.String)" /> Note that settings of type <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.BeginCategory</see> and
            <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.EndCategory</see> have no values and will throw an exception if you try to get or set their values.</para>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> is a wrapper for different OCR engines. These engines contain specific additional features and functionalities that can be queried and updated using
            the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface.</para>
        <para>You can use the different methods of the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface to get and set the engine-specific settings. Each setting has a unique name
            (a string value). You can get all the settings available to the current OCR engine through the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> method. The <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" />
            method returns a description of the setting (its type, friendly name and value range), you can then use the various setting get and set methods to query and change the value of
            a certain setting. For example, if the setting type is <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Integer</see>, you can use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetIntegerValue(System.String)" /> to get the
            current value of the setting and the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetIntegerValue(System.String,System.Int32)" /> to change its value. Refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> for a complete example.</para>
        <para>For a list of supported engine-specific settings and their meanings, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettings.html">OCR engine-specific Settings</a>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSettingDescriptor" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettings.html">OCR engine-specific Settings</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetDoubleValue(System.String)">
      <summary>
            Gets the current value of a double setting.
            </summary>
      <param name="settingName">Unique setting name. If the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> does not support the setting with the unique name <paramref name="settingName" />, an exception
            will be thrown. You can check which settings the engine supports by using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.IsSettingNameSupported(System.String)" />.</param>
      <returns>The current double value of the setting with the unique name <paramref name="settingName" />.</returns>
      <remarks>
        <para>The <paramref name="uniqueName" /> setting must be a "double" type setting, otherwise; this method will throw an exception. To get the type of a setting along with other
            information such as its friendly name and range use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" /> method.</para>
        <para>To set the value of a double setting, use <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetDoubleValue(System.String,System.Double)" />.</para>
        <para>You can also set the value of any setting from a string (where the string will be converted to a compatible type) using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetValue(System.String,System.String)" />. To get the value of any
            setting as a string, use <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetValue(System.String)" /> Note that settings of type <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.BeginCategory</see> and
            <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.EndCategory</see> have no values and will throw an exception if you try to get or set their values.</para>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> is a wrapper for different OCR engines. These engines contain specific additional features and functionalities that can be queried and updated using
            the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface.</para>
        <para>You can use the different methods of the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface to get and set the engine-specific settings. Each setting has a unique name
            (a string value). You can get all the settings available to the current OCR engine through the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> method. The <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" />
            method returns a description of the setting (its type, friendly name and value range), you can then use the various setting get and set methods to query and change the value of
            a certain setting. For example, if the setting type is <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Integer</see>, you can use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetIntegerValue(System.String)" /> to get the
            current value of the setting and the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetIntegerValue(System.String,System.Int32)" /> to change its value. Refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> for a complete example.</para>
        <para>For a list of supported engine-specific settings and their meanings, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettings.html">OCR engine-specific Settings</a>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSettingDescriptor" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettings.html">OCR engine-specific Settings</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetDoubleValue(System.String,System.Double)">
      <summary>
            Sets the value of a double setting.
            </summary>
      <param name="settingName">Unique setting name. If the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> does not support the setting with the unique name <paramref name="settingName" />, an exception
            will be thrown. You can check which settings the engine supports by using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.IsSettingNameSupported(System.String)" />.</param>
      <param name="value">New setting value.</param>
      <remarks>
        <para>The <paramref name="uniqueName" /> setting must be a "double" type setting, otherwise; this method will throw an exception. To get the type of a setting along with other
            information such as its friendly name and range use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" /> method.</para>
        <para>To get the value of a double setting, use <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetDoubleValue(System.String)" />.</para>
        <para>You can also set the value of any setting from a string (where the string will be converted to a compatible type) using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetValue(System.String,System.String)" />. To get the value of any
            setting as a string, use <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetValue(System.String)" /> Note that settings of type <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.BeginCategory</see> and
            <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.EndCategory</see> have no values and will throw an exception if you try to get or set their values.</para>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> is a wrapper for different OCR engines. These engines contain specific additional features and functionalities that can be queried and updated using
            the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface.</para>
        <para>You can use the different methods of the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface to get and set the engine-specific settings. Each setting has a unique name
            (a string value). You can get all the settings available to the current OCR engine through the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> method. The <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" />
            method returns a description of the setting (its type, friendly name and value range), you can then use the various setting get and set methods to query and change the value of
            a certain setting. For example, if the setting type is <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Integer</see>, you can use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetIntegerValue(System.String)" /> to get the
            current value of the setting and the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetIntegerValue(System.String,System.Int32)" /> to change its value. Refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> for a complete example.</para>
        <para>For a list of supported engine-specific settings and their meanings, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettings.html">OCR engine-specific Settings</a>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSettingDescriptor" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettings.html">OCR engine-specific Settings</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetBooleanValue(System.String)">
      <summary>
            Gets the current value of a boolean setting.
            </summary>
      <param name="settingName">Unique setting name. If the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> does not support the setting with the unique name <paramref name="settingName" />, an exception
            will be thrown. You can check which settings the engine supports by using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.IsSettingNameSupported(System.String)" />.</param>
      <returns>The current boolean value of the setting with the unique name <paramref name="settingName" />.</returns>
      <remarks>
        <para>The <paramref name="uniqueName" /> setting must be a "boolean" type setting, otherwise; this method will throw an exception. To get the type of a setting along with other
            information such as its friendly name and range use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" /> method.</para>
        <para>To set the value of a boolean setting, use <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetBooleanValue(System.String,System.Boolean)" />.</para>
        <para>You can also set the value of any setting from a string (where the string will be converted to a compatible type) using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetValue(System.String,System.String)" />. To get the value of any
            setting as a string, use <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetValue(System.String)" /> Note that settings of type <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.BeginCategory</see> and
            <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.EndCategory</see> have no values and will throw an exception if you try to get or set their values.</para>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> is a wrapper for different OCR engines. These engines contain specific additional features and functionalities that can be queried and updated using
            the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface.</para>
        <para>You can use the different methods of the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface to get and set the engine-specific settings. Each setting has a unique name
            (a string value). You can get all the settings available to the current OCR engine through the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> method. The <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" />
            method returns a description of the setting (its type, friendly name and value range), you can then use the various setting get and set methods to query and change the value of
            a certain setting. For example, if the setting type is <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Integer</see>, you can use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetIntegerValue(System.String)" /> to get the
            current value of the setting and the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetIntegerValue(System.String,System.Int32)" /> to change its value. Refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> for a complete example.</para>
        <para>For a list of supported engine-specific settings and their meanings, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettings.html">OCR engine-specific Settings</a>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSettingDescriptor" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettings.html">OCR engine-specific Settings</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetBooleanValue(System.String,System.Boolean)">
      <summary>
            Sets the value of a boolean setting.
            </summary>
      <param name="settingName">Unique setting name. If the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> does not support the setting with the unique name <paramref name="settingName" />, an exception
            will be thrown. You can check which settings the engine supports by using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.IsSettingNameSupported(System.String)" />.</param>
      <param name="value">New setting value.</param>
      <remarks>
        <para>The <paramref name="uniqueName" /> setting must be a "boolean" type setting, otherwise; this method will throw an exception. To get the type of a setting along with other
            information such as its friendly name and range use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" /> method.</para>
        <para>To get the value of a boolean setting, use <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetBooleanValue(System.String)" />.</para>
        <para>You can also set the value of any setting from a string (where the string will be converted to a compatible type) using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetValue(System.String,System.String)" />. To get the value of any
            setting as a string, use <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetValue(System.String)" /> Note that settings of type <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.BeginCategory</see> and
            <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.EndCategory</see> have no values and will throw an exception if you try to get or set their values.</para>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> is a wrapper for different OCR engines. These engines contain specific additional features and functionalities that can be queried and updated using
            the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface.</para>
        <para>You can use the different methods of the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface to get and set the engine-specific settings. Each setting has a unique name
            (a string value). You can get all the settings available to the current OCR engine through the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> method. The <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" />
            method returns a description of the setting (its type, friendly name and value range), you can then use the various setting get and set methods to query and change the value of
            a certain setting. For example, if the setting type is <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Integer</see>, you can use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetIntegerValue(System.String)" /> to get the
            current value of the setting and the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetIntegerValue(System.String,System.Int32)" /> to change its value. Refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> for a complete example.</para>
        <para>For a list of supported engine-specific settings and their meanings, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettings.html">OCR engine-specific Settings</a>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSettingDescriptor" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettings.html">OCR engine-specific Settings</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetCharacterValue(System.String)">
      <summary>
            Gets the current value of a character setting.
            </summary>
      <param name="settingName">Unique setting name. If the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> does not support the setting with the unique name <paramref name="settingName" />, an exception
            will be thrown. Check which settings the engine supports by using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.IsSettingNameSupported(System.String)" />.</param>
      <returns>The current character value of the setting with the unique name <paramref name="settingName" />.</returns>
      <remarks>
        <para>The <paramref name="uniqueName" /> setting must be a "character" type setting, otherwise; this method will throw an exception. To get the type of a setting along with other
            information such as its friendly name and range use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" /> method.</para>
        <para>To set the value of a character setting, use <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetCharacterValue(System.String,System.Char)" />.</para>
        <para>You can also set the value of any setting from a string (where the string will be converted to a compatible type) using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetValue(System.String,System.String)" />. To get the value of any
            setting as a string, use <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetValue(System.String)" />. Note that settings of type <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.BeginCategory</see> and
            <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.EndCategory</see> have no values and will throw an exception if you try to get or set their values.</para>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> is a wrapper for different OCR engines. These engines contain specific additional features and functionalities that can be queried and updated using
            the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface.</para>
        <para>You can use the different methods of the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface to get and set the engine-specific settings. Each setting has a unique name
            (a string value). You can get all the settings available to the current OCR engine through the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> method. The <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" />
            method returns a description of the setting (its type, friendly name and value range), you can then use the various setting get and set methods to query and change the value of
            a certain setting. For example, if the setting type is <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Integer</see>, you can use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetIntegerValue(System.String)" /> to get the
            current value of the setting and the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetIntegerValue(System.String,System.Int32)" /> to change its value. Refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> for a complete example.</para>
        <para>For a list of supported engine-specific settings and their meanings, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettings.html">OCR engine-specific Settings</a>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSettingDescriptor" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettings.html">OCR engine-specific Settings</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetCharacterValue(System.String,System.Char)">
      <summary>
            Sets the value of a character setting.
            </summary>
      <param name="settingName">Unique setting name. If the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> does not support the setting with the unique name <paramref name="settingName" />, an exception
            will be thrown. You can check which settings the engine supports by using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.IsSettingNameSupported(System.String)" />.</param>
      <param name="value">New setting value.</param>
      <remarks>
        <para>The <paramref name="uniqueName" /> setting must be a "character" type setting, otherwise; this method will throw an exception. To get the type of a setting along with other
            information such as its friendly name and range use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" /> method.</para>
        <para>To get the value of a character setting, use <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetCharacterValue(System.String)" />.</para>
        <para>You can also set the value of any setting from a string (where the string will be converted to a compatible type) using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetValue(System.String,System.String)" />. To get the value of any
            setting as a string, use <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetValue(System.String)" /> Note that settings of type <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.BeginCategory</see> and
            <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.EndCategory</see> have no values and will throw an exception if you try to get or set their values.</para>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> is a wrapper for different OCR engines. These engines contain specific additional features and functionalities that can be queried and updated using
            the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface.</para>
        <para>You can use the different methods of the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface to get and set the engine-specific settings. Each setting has a unique name
            (a string value). You can get all the settings available to the current OCR engine through the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> method. The <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" />
            method returns a description of the setting (its type, friendly name and value range), you can then use the various setting get and set methods to query and change the value of
            a certain setting. For example, if the setting type is <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Integer</see>, you can use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetIntegerValue(System.String)" /> to get the
            current value of the setting and the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetIntegerValue(System.String,System.Int32)" /> to change its value. Refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> for a complete example.</para>
        <para>For a list of supported engine-specific settings and their meanings, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettings.html">OCR engine-specific Settings</a>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSettingDescriptor" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettings.html">OCR engine-specific Settings</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetStringValue(System.String)">
      <summary>
            Gets the current value of a string setting.
            </summary>
      <param name="settingName">Unique setting name. If the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> does not support the setting with the unique name <paramref name="settingName" />, an exception
            will be thrown. You can check which settings the engine supports by using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.IsSettingNameSupported(System.String)" />.</param>
      <returns>The current string value of the setting with the unique name <paramref name="settingName" />.</returns>
      <remarks>
        <para>The <paramref name="uniqueName" /> setting must be a "string" type setting, otherwise; this method will throw an exception. To get the type of a setting along with other
            information such as its friendly name and range use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" /> method.</para>
        <para>To set the value of a string setting, use <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetStringValue(System.String,System.String)" />.</para>
        <para>You can also set the value of any setting from a string (where the string will be converted to a compatible type) using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetValue(System.String,System.String)" />. To get the value of any
            setting as a string, use <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetValue(System.String)" /> Note that settings of type <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.BeginCategory</see> and
            <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.EndCategory</see> have no values and will throw an exception if you try to get or set their values.</para>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> is a wrapper for different OCR engines. These engines contain specific additional features and functionalities that can be queried and updated using
            the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface.</para>
        <para>You can use the different methods of the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface to get and set the engine-specific settings. Each setting has a unique name
            (a string value). You can get all the settings available to the current OCR engine through the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> method. The <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" />
            method returns a description of the setting (its type, friendly name and value range), you can then use the various setting get and set methods to query and change the value of
            a certain setting. For example, if the setting type is <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Integer</see>, you can use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetIntegerValue(System.String)" /> to get the
            current value of the setting and the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetIntegerValue(System.String,System.Int32)" /> to change its value. Refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> for a complete example.</para>
        <para>For a list of supported engine-specific settings and their meanings, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettings.html">OCR engine-specific Settings</a>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSettingDescriptor" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettings.html">OCR engine-specific Settings</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetStringValue(System.String,System.String)">
      <summary>
            Sets the value of a string setting.
            </summary>
      <param name="settingName">Unique setting name. If the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> does not support the setting with the unique name <paramref name="settingName" />, an exception
            will be thrown. You can check which settings the engine supports by using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.IsSettingNameSupported(System.String)" /></param>
      <param name="value">New setting value.</param>
      <remarks>
        <para>The <paramref name="uniqueName" /> setting must be a "string" type setting, otherwise; this method will throw an exception. To get the type of a setting along with other
            information such as its friendly name and range use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" /> method.</para>
        <para>To get the value of a string setting, use <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetStringValue(System.String)" />.</para>
        <para>You can also set the value of any setting from a string (where the string will be converted to a compatible type) using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetValue(System.String,System.String)" />. To get the value of any
            setting as a string, use <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetValue(System.String)" /> Note that settings of type <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.BeginCategory</see> and
            <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.EndCategory</see> have no values and will throw an exception if you try to get or set their values.</para>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> is a wrapper for different OCR engines. These engines contain specific additional features and functionalities that can be queried and updated using
            the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface.</para>
        <para>You can use the different methods of the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface to get and set the engine-specific settings. Each setting has a unique name
            (a string value). You can get all the settings available to the current OCR engine through the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> method. The <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" />
            method returns a description of the setting (its type, friendly name and value range), you can then use the various setting get and set methods to query and change the value of
            a certain setting. For example, if the setting type is <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Integer</see>, you can use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetIntegerValue(System.String)" /> to get the
            current value of the setting and the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetIntegerValue(System.String,System.Int32)" /> to change its value. Refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> for a complete example.</para>
        <para>For a list of supported engine-specific settings and their meanings, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettings.html">OCR engine-specific Settings</a>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSettingDescriptor" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettings.html">OCR engine-specific Settings</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetRectangleValue(System.String)">
      <summary>
            Gets the current value of a logical rectangle setting.
            </summary>
      <param name="settingName">Unique setting name. If the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> does not support the setting with the unique name <paramref name="settingName" />, an exception
            will be thrown. You can check which settings the engine supports by using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.IsSettingNameSupported(System.String)" />.</param>
      <returns>The current logical rectangle value of the setting with the unique name <paramref name="settingName" />.</returns>
      <remarks>
        <para>The <paramref name="uniqueName" /> setting must be a "logical rectangle" type setting, otherwise; this method will throw an exception. To get the type of a setting along with other
            information such as its friendly name and range use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" /> method.</para>
        <para>To set the value of a logical rectangle setting, use <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetRectangleValue(System.String,Leadtools.Forms.LogicalRectangle)" />.</para>
        <para>You can also set the value of any setting from a string (where the string will be converted to a compatible type) using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetValue(System.String,System.String)" />. To get the value of any
            setting as a string, use <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetValue(System.String)" /> Note that settings of type <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.BeginCategory</see> and
            <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.EndCategory</see> have no values and will throw an exception if you try to get or set their values.</para>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> is a wrapper for different OCR engines. These engines contain specific additional features and functionalities that can be queried and updated using
            the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface.</para>
        <para>You can use the different methods of the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface to get and set the engine-specific settings. Each setting has a unique name
            (a string value). You can get all the settings available to the current OCR engine through the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> method. The <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" />
            method returns a description of the setting (its type, friendly name and value range), you can then use the various setting get and set methods to query and change the value of
            a certain setting. For example, if the setting type is <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Integer</see>, you can use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetIntegerValue(System.String)" /> to get the
            current value of the setting and the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetIntegerValue(System.String,System.Int32)" /> to change its value. Refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> for a complete example.</para>
        <para>For a list of supported engine-specific settings and their meanings, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettings.html">OCR engine-specific Settings</a>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSettingDescriptor" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettings.html">OCR engine-specific Settings</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetRectangleValue(System.String,Leadtools.Forms.LogicalRectangle)">
      <summary>
            Sets the value of a logical rectangle setting.
            </summary>
      <param name="settingName">Unique setting name. If the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> does not support the setting with the unique name <paramref name="settingName" />, an exception
            will be thrown. You can check which settings the engine supports by using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.IsSettingNameSupported(System.String)" />.</param>
      <param name="value">New setting value.</param>
      <remarks>
        <para>The <paramref name="uniqueName" /> setting must be a "logical rectangle" type setting, otherwise; this method will throw an exception. To get the type of a setting along with other
            information such as its friendly name and range use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" /> method.</para>
        <para>To get the value of a logical rectangle setting, use <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetRectangleValue(System.String)" />.</para>
        <para>You can also set the value of any setting from a string (where the string will be converted to a compatible type) using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetValue(System.String,System.String)" />. To get the value of any
            setting as a string, use <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetValue(System.String)" /> Note that settings of type <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.BeginCategory</see> and
            <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.EndCategory</see> have no values and will throw an exception if you try to get or set their values.</para>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> is a wrapper for different OCR engines. These engines contain specific additional features and functionalities that can be queried and updated using
            the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface.</para>
        <para>You can use the different methods of the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface to get and set the engine-specific settings. Each setting has a unique name
            (a string value). You can get all the settings available to the current OCR engine through the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> method. The <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" />
            method returns a description of the setting (its type, friendly name and value range), you can then use the various setting get and set methods to query and change the value of
            a certain setting. For example, if the setting type is <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Integer</see>, you can use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetIntegerValue(System.String)" /> to get the
            current value of the setting and the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetIntegerValue(System.String,System.Int32)" /> to change its value. Refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> for a complete example.</para>
        <para>For a list of supported engine-specific settings and their meanings, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettings.html">OCR engine-specific Settings</a>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSettingDescriptor" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettings.html">OCR engine-specific Settings</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetValue(System.String,System.String)">
      <summary>
            Sets the value of a setting from a string.
            </summary>
      <param name="settingName">Unique setting name. If the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> does not support the setting with the unique name <paramref name="settingName" />, an exception
            will be thrown. You can check which settings the engine supports by using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.IsSettingNameSupported(System.String)" />.</param>
      <param name="value">New setting value as a string.</param>
      <remarks>
        <para>To get the type of a setting along with other information such as its friendly name and range use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" /> method.</para>
        <para>To get the value of a setting as a string, use <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetValue(System.String)" />.</para>
        <para> Note that settings of type <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.BeginCategory</see> and <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.EndCategory</see>
            have no values and will throw an exception if you try to get or set their values.</para>
        <para>
          <paramref name="value" /> must be convertible to the correct setting type. For example, if the setting is a <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Integer</see>
            value, <paramref name="value" /> can be "1" or "193". If the value cannot be converted, an exception will be thrown.</para>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> is a wrapper for different OCR engines. These engines contain specific additional features and functionalities that can be queried and updated using
            the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface.</para>
        <para>You can use the different methods of the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface to get and set the engine-specific settings. Each setting has a unique name
            (a string value). You can get all the settings available to the current OCR engine through the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> method. The <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" />
            method returns a description of the setting (its type, friendly name and value range), you can then use the various setting get and set methods to query and change the value of
            a certain setting. For example, if the setting type is <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Integer</see>, you can use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetIntegerValue(System.String)" /> to get the
            current value of the setting and the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetIntegerValue(System.String,System.Int32)" /> to change its value. Refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> for a complete example.</para>
        <para>For a list of supported engine-specific settings and their meanings, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettings.html">OCR engine-specific Settings</a>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSettingDescriptor" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettings.html">OCR engine-specific Settings</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetValue(System.String)">
      <summary>
            Gets the current value of a setting as a string.
            </summary>
      <param name="settingName">Unique setting name. If the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> does not support the setting with the unique name <paramref name="settingName" />, an exception
            will be thrown. You can check which settings the engine supports by using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.IsSettingNameSupported(System.String)" />.</param>
      <returns>The current value of the setting with the unique name <paramref name="settingName" /> as a string.</returns>
      <remarks>
        <para>To get the type of a setting along with other information such as its friendly name and range use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" /> method.</para>
        <para>To set the value of a setting as a string, use <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetValue(System.String,System.String)" />.</para>
        <para> Note that settings of type <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.BeginCategory</see> and <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.EndCategory</see>
            have no values and will throw an exception if you try to get or set their values.</para>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> is a wrapper for different OCR engines. These engines contain specific additional features and functionalities that can be queried and updated using
            the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface.</para>
        <para>You can use the different methods of the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface to get and set the engine-specific settings. Each setting has a unique name
            (a string value). You can get all the settings available to the current OCR engine through the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" /> method. The <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)" />
            method returns a description of the setting (its type, friendly name and value range), you can then use the various setting get and set methods to query and change the value of
            a certain setting. For example, if the setting type is <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Integer</see>, you can use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetIntegerValue(System.String)" /> to get the
            current value of the setting and the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetIntegerValue(System.String,System.Int32)" /> to change its value. Refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> for a complete example.</para>
        <para>For a list of supported engine-specific settings and their meanings, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettings.html">OCR engine-specific Settings</a>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSettingDescriptor" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettings.html">OCR engine-specific Settings</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrSettingManager.Load(System.String)">
      <summary>
            Loads the OCR engine settings from a disk file.
            </summary>
      <param name="fileName">The name of the file containing the settings.</param>
      <remarks>
        <para>Once you set up the OCR engine, you can re-use these settings by saving the engine state into memory or to an XML file on disk. You can later reload these
            settings and use them in the same or different instance of <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.</para>
        <para>The following table lists all of the states loaded from the XML file. After the load operation completes, some or all of the settings below will be changed.
              <list type="table"><listheader><term>Part</term><description>Members</description></listheader><item><term><see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> (accessed through <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.SettingManager">IOcrEngine.SettingManager</see></term><description>All the settings as obtained through <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames">IOcrSettingManager.GetSettingNames</see></description></item><item><term><see cref="T:Leadtools.Forms.Ocr.IOcrLanguageManager" /> (accessed through <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.LanguageManager">IOcrEngine.LanguageManager</see></term><description>The value of <see cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.GetEnabledLanguages">IOcrLanguageManager.GetEnabledLanguages</see></description></item><item><term><see cref="T:Leadtools.Forms.Ocr.IOcrSpellCheckManager" /> (accessed through <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.SpellCheckManager">IOcrEngine.SpellCheckManager</see></term><description>The values of <see cref="P:Leadtools.Forms.Ocr.IOcrSpellCheckManager.Enabled">IOcrSpellCheckManager.Enabled</see>, 
            <see cref="P:Leadtools.Forms.Ocr.IOcrSpellCheckManager.SpellLanguage">IOcrSpellCheckManager.SpellLanguage</see> and <see cref="P:Leadtools.Forms.Ocr.IOcrSpellCheckManager.UserDictionary">IOcrSpellCheckManager.UserDictionary</see>.</description></item><item><term><see cref="T:Leadtools.Forms.Ocr.IOcrDocumentManager" /> (accessed through <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.DocumentManager">IOcrEngine.DocumentManager</see></term><description>The values of the <see cref="P:Leadtools.Forms.Ocr.IOcrDocumentManager.RejectionSymbol">IOcrDocumentManager.RejectionSymbol</see> and
            <see cref="P:Leadtools.Forms.Ocr.IOcrDocumentManager.MissingSymbol">IOcrDocumentManager.MissingSymbol</see>.</description></item></list></para>
        <para>You can save the settings to a disk file using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.Save(System.String)" />, you can load and save the settings into any .NET stream using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.Load(System.IO.Stream)" /> and
            <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.Save(System.IO.Stream)" />.</para>
      </remarks>
      <keywords>OCR,Settings</keywords>
      <example>
        <para>This example will change some of the settings of the OCR engine and save then to a file. The it shuts down the engine, restarts it and reloads the last settings used.</para>
        <code lang="VB">   Public Sub LoadSettingsExample1()
      ' Unlock the support needed for LEADTOOLS Plus OCR engine
      RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here")
      RasterSupport.Unlock(RasterSupportType.OcrPlus, "Replace with your own key here")
      RasterSupport.Unlock(RasterSupportType.OcrPlusPdfLeadOutput, "Replace with your own key here")
      Dim settingsFileName As String = LeadtoolsExamples.Common.ImagesPath.Path + "PlusSettings.xml"
      Dim userDictionaryFileName As String = LeadtoolsExamples.Common.ImagesPath.Path + "MyDictionary.ud"

      ' Create an instance of the engine
      Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, False)
         ' Start the engine using default parameters
         ocrEngine.Startup(Nothing, Nothing, Nothing, Nothing)

         Dim settingManager As IOcrSettingManager = ocrEngine.SettingManager

         ' Enable English and German character sets
         ocrEngine.LanguageManager.EnableLanguages(New String() {"en", "de"})

         ' Set the spell checking options
         ocrEngine.SpellCheckManager.Enabled = True
         ocrEngine.SpellCheckManager.SpellLanguage = "en"
         ocrEngine.SpellCheckManager.UserDictionary.Use(userDictionaryFileName, Nothing)

         ' Change some settings
         settingManager.SetValue("SaveDocument.FormatLevel", "Part")
         settingManager.SetBooleanValue("SaveDocument.Document.TextInBoxes", False)
         settingManager.SetIntegerValue("SaveDocument.Document.Margin.Left", 2400)
         settingManager.SetStringValue("SaveDocument.Character.ProportionalSansSerifFontName", "MyFont")
         settingManager.SetStringValue("SaveDocument.Mark.BeforeMissingCharacterSeparator", "MyMark")
         settingManager.SetValue("SaveDocument.Mark.BeginOfLineSeparator", Nothing)
         ' Change an enum using an integer
         settingManager.SetEnumValue("SaveDocument.Mark.SuspectedCharacterColor", 7)
         ' Change an enum using strings
         settingManager.SetEnumValue("SaveDocument.Mark.RejectionCharacterColor", "Blue, Green, Red")

         ' Save the settings
         settingManager.Save(settingsFileName)

         ' Note: calling Dispose will also automatically shutdown the engine if it has been started
         ocrEngine.Shutdown()
      End Using

      ' Now create another instance of the engine, load the settings and make sure they are the same
      Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, False)
         ' Start the engine using default parameters
         ocrEngine.Startup(Nothing, Nothing, Nothing, Nothing)

         Dim settingManager As IOcrSettingManager = ocrEngine.SettingManager

         ' Load the settings
         settingManager.Load(settingsFileName)

         ' Check the character set
         Dim languages() As String = ocrEngine.LanguageManager.GetEnabledLanguages()
         Debug.Assert(languages(0) = "en" AndAlso languages(1) = "de")

         ' Check the spell checking options
         Debug.Assert(ocrEngine.SpellCheckManager.Enabled)
         Debug.Assert(ocrEngine.SpellCheckManager.SpellLanguage = "en")
         Debug.Assert(ocrEngine.SpellCheckManager.UserDictionary.FileName = userDictionaryFileName)

         ' Check the settings
         Debug.Assert(settingManager.GetValue("SaveDocument.FormatLevel") = "Part")
         Debug.Assert(settingManager.GetBooleanValue("SaveDocument.Document.TextInBoxes") = False)
         Debug.Assert(settingManager.GetIntegerValue("SaveDocument.Document.Margin.Left") = 2400)
         Debug.Assert(settingManager.GetStringValue("SaveDocument.Character.ProportionalSansSerifFontName") = "MyFont")
         Debug.Assert(settingManager.GetStringValue("SaveDocument.Mark.BeforeMissingCharacterSeparator") = "MyMark")
         Debug.Assert(settingManager.GetValue("SaveDocument.Mark.BeginOfLineSeparator") = Nothing)
         Debug.Assert(settingManager.GetEnumValue("SaveDocument.Mark.SuspectedCharacterColor") = 7)
         Debug.Assert(settingManager.GetEnumValueAsString("SaveDocument.Mark.RejectionCharacterColor") = "Blue, Green, Red")

         ' Note: calling Dispose will also automatically shutdown the engine if it has been started
         ocrEngine.Shutdown()
      End Using
   End Sub</code>
        <code lang="CS">      public void LoadSettingsExample1()
      {
         // Unlock the support needed for LEADTOOLS Plus OCR engine
         RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here");
         RasterSupport.Unlock(RasterSupportType.OcrPlus, "Replace with your own key here");
         RasterSupport.Unlock(RasterSupportType.OcrPlusPdfLeadOutput, "Replace with your own key here");
         string settingsFileName = LeadtoolsExamples.Common.ImagesPath.Path + "PlusSettings.xml";
         string userDictionaryFileName = LeadtoolsExamples.Common.ImagesPath.Path + "MyDictionary.ud";

         // Create an instance of the engine
         using(IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, false))
         {
            // Start the engine using default parameters
            ocrEngine.Startup(null, null, null, null);

            IOcrSettingManager settingManager = ocrEngine.SettingManager;

            // Enable English and German character sets
            ocrEngine.LanguageManager.EnableLanguages(new string[] { "en", "de" });

            // Set the spell checking options
            ocrEngine.SpellCheckManager.Enabled = true;
            ocrEngine.SpellCheckManager.SpellLanguage = "en";
            ocrEngine.SpellCheckManager.UserDictionary.Use(userDictionaryFileName, null);

            // Change some settings
            settingManager.SetValue("SaveDocument.FormatLevel", "Part");
            settingManager.SetBooleanValue("SaveDocument.Document.TextInBoxes", false);
            settingManager.SetIntegerValue("SaveDocument.Document.Margin.Left", 2400);
            settingManager.SetStringValue("SaveDocument.Character.ProportionalSansSerifFontName", "MyFont");
            settingManager.SetStringValue("SaveDocument.Mark.BeforeMissingCharacterSeparator", "MyMark");
            settingManager.SetValue("SaveDocument.Mark.BeginOfLineSeparator", null);
            // Change an enum using an integer
            settingManager.SetEnumValue("SaveDocument.Mark.SuspectedCharacterColor", 7);
            // Change an enum using strings
            settingManager.SetEnumValue("SaveDocument.Mark.RejectionCharacterColor", "Blue, Green, Red");

            // Save the settings
            settingManager.Save(settingsFileName);

            // Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown();
         }

         // Now create another instance of the engine, load the settings and make sure they are the same
         using(IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, false))
         {
            // Start the engine using default parameters
            ocrEngine.Startup(null, null, null, null);

            IOcrSettingManager settingManager = ocrEngine.SettingManager;

            // Load the settings
            settingManager.Load(settingsFileName);

            // Check the character set
            string[] languages = ocrEngine.LanguageManager.GetEnabledLanguages();
            Debug.Assert(languages[0] == "en" &amp;&amp; languages[1] == "de");

            // Check the spell checking options
            Debug.Assert(ocrEngine.SpellCheckManager.Enabled);
            Debug.Assert(ocrEngine.SpellCheckManager.SpellLanguage == "en");
            Debug.Assert(ocrEngine.SpellCheckManager.UserDictionary.FileName == userDictionaryFileName);

            // Check the settings
            Debug.Assert(settingManager.GetValue("SaveDocument.FormatLevel") == "Part");
            Debug.Assert(settingManager.GetBooleanValue("SaveDocument.Document.TextInBoxes") == false);
            Debug.Assert(settingManager.GetIntegerValue("SaveDocument.Document.Margin.Left") == 2400);
            Debug.Assert(settingManager.GetStringValue("SaveDocument.Character.ProportionalSansSerifFontName") == "MyFont");
            Debug.Assert(settingManager.GetStringValue("SaveDocument.Mark.BeforeMissingCharacterSeparator") == "MyMark");
            Debug.Assert(settingManager.GetValue("SaveDocument.Mark.BeginOfLineSeparator") == null);
            Debug.Assert(settingManager.GetEnumValue("SaveDocument.Mark.SuspectedCharacterColor") == 7);
            Debug.Assert(settingManager.GetEnumValueAsString("SaveDocument.Mark.RejectionCharacterColor") == "Blue, Green, Red");

            // Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown();
         }
      }</code>
        <!--IOcrSettingManager.Load(string)-->
      </example>
      <docaddon>yes</docaddon>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettings.html">OCR engine-specific Settings</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrSettingManager.Load(System.IO.Stream)">
      <summary>
            Loads the OCR engine settings from a .NET stream.
            </summary>
      <param name="stream">The stream to read the settings from.</param>
      <remarks>
        <para>Once you set up the OCR engine, you can re-use these settings by saving the engine state into memory or to an XML file on disk. Later, reload these
            settings and use them in the same or a different instance of <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.</para>
        <para>The following table lists all the states loaded from the XML file. After the load operation completes, some or all of the settings below will be changed.
              <list type="table"><listheader><term>Part</term><description>Members</description></listheader><item><term><see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> (accessed through <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.SettingManager">IOcrEngine.SettingManager</see></term><description>All the settings as obtained through <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames">IOcrSettingManager.GetSettingNames</see></description></item><item><term><see cref="T:Leadtools.Forms.Ocr.IOcrLanguageManager" /> (accessed through <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.LanguageManager">IOcrEngine.LanguageManager</see></term><description>The value of <see cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.GetEnabledLanguages">IOcrLanguageManager.GetEnabledLanguages</see></description></item><item><term><see cref="T:Leadtools.Forms.Ocr.IOcrSpellCheckManager" /> (accessed through <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.SpellCheckManager">IOcrEngine.SpellCheckManager</see></term><description>The values of <see cref="P:Leadtools.Forms.Ocr.IOcrSpellCheckManager.Enabled">IOcrSpellCheckManager.Enabled</see>, 
            <see cref="P:Leadtools.Forms.Ocr.IOcrSpellCheckManager.SpellLanguage">IOcrSpellCheckManager.SpellLanguage</see> and <see cref="P:Leadtools.Forms.Ocr.IOcrSpellCheckManager.UserDictionary">IOcrSpellCheckManager.UserDictionary</see>.</description></item><item><term><see cref="T:Leadtools.Forms.Ocr.IOcrDocumentManager" /> (accessed through <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.DocumentManager">IOcrEngine.DocumentManager</see></term><description>The values of the <see cref="P:Leadtools.Forms.Ocr.IOcrDocumentManager.RejectionSymbol">IOcrDocumentManager.RejectionSymbol</see> and
            <see cref="P:Leadtools.Forms.Ocr.IOcrDocumentManager.MissingSymbol">IOcrDocumentManager.MissingSymbol</see>.</description></item></list></para>
        <para>You can save the settings to a .NET stream using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.Save(System.IO.Stream)" />, you can load and save the settings to a disk file using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.Load(System.String)" /> and
            <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.Save(System.String)" />.</para>
      </remarks>
      <keywords>OCR,Settings</keywords>
      <example>
        <para>This example will change some of the settings of the OCR engine and saves into a memory stream. Shutsdown the engine, restarts it and reload the last settings used.</para>
        <code lang="VB">   Public Sub LoadSettingsExample2()
      ' Unlock the support needed for LEADTOOLS Plus OCR engine
      RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here")
      RasterSupport.Unlock(RasterSupportType.OcrPlus, "Replace with your own key here")
      RasterSupport.Unlock(RasterSupportType.OcrPlusPdfLeadOutput, "Replace with your own key here")
      Dim userDictionaryFileName As String = LeadtoolsExamples.Common.ImagesPath.Path + "MyDictionary.ud"

      ' Stream to save the settings to
      Dim ms As New MemoryStream()

      ' Create an instance of the engine
      Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, False)
         ' Start the engine using default parameters
         ocrEngine.Startup(Nothing, Nothing, Nothing, Nothing)

         Dim settingManager As IOcrSettingManager = ocrEngine.SettingManager

         ' Enable English and German character sets
         ocrEngine.LanguageManager.EnableLanguages(New String() {"en", "de"})

         ' Set the spell checking options
         ocrEngine.SpellCheckManager.Enabled = False
         ocrEngine.SpellCheckManager.SpellLanguage = "en"
         ocrEngine.SpellCheckManager.UserDictionary.Use(userDictionaryFileName, Nothing)

         ' Change some settings
         settingManager.SetValue("SaveDocument.FormatLevel", "Part")
         settingManager.SetBooleanValue("SaveDocument.Document.TextInBoxes", False)
         settingManager.SetIntegerValue("SaveDocument.Document.Margin.Left", 2400)
         settingManager.SetStringValue("SaveDocument.Character.ProportionalSansSerifFontName", "MyFont")
         settingManager.SetStringValue("SaveDocument.Mark.BeforeMissingCharacterSeparator", "MyMark")
         settingManager.SetValue("SaveDocument.Mark.BeginOfLineSeparator", Nothing)
         ' Change an enum using an integer
         settingManager.SetEnumValue("SaveDocument.Mark.SuspectedCharacterColor", 7)
         ' Change an enum using strings
         settingManager.SetEnumValue("SaveDocument.Mark.RejectionCharacterColor", "Blue, Green, Red")

         ' Save the settings
         settingManager.Save(ms)

         ' Note: calling Dispose will also automatically shutdown the engine if it has been started
         ocrEngine.Shutdown()
      End Using

      ' Reset the stream position to the beginning
      ms.Position = 0

      ' Now create another instance of the engine, load the settings and make sure they are the same
      Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, False)
         ' Start the engine using default parameters
         ocrEngine.Startup(Nothing, Nothing, Nothing, Nothing)

         Dim settingManager As IOcrSettingManager = ocrEngine.SettingManager

         ' Load the settings
         settingManager.Load(ms)

         ' Check the character set
         Dim languages() As String = ocrEngine.LanguageManager.GetEnabledLanguages()
         Debug.Assert(languages(0) = "en" AndAlso languages(1) = "de")

         ' Check the spell checking options
         Debug.Assert(ocrEngine.SpellCheckManager.Enabled)
         Debug.Assert(ocrEngine.SpellCheckManager.SpellLanguage = "en")
         Debug.Assert(ocrEngine.SpellCheckManager.UserDictionary.FileName = userDictionaryFileName)

         ' Check the settings
         Debug.Assert(settingManager.GetValue("SaveDocument.FormatLevel") = "Part")
         Debug.Assert(settingManager.GetBooleanValue("SaveDocument.Document.TextInBoxes") = False)
         Debug.Assert(settingManager.GetIntegerValue("SaveDocument.Document.Margin.Left") = 2400)
         Debug.Assert(settingManager.GetStringValue("SaveDocument.Character.ProportionalSansSerifFontName") = "MyFont")
         Debug.Assert(settingManager.GetStringValue("SaveDocument.Mark.BeforeMissingCharacterSeparator") = "MyMark")
         Debug.Assert(settingManager.GetValue("SaveDocument.Mark.BeginOfLineSeparator") = Nothing)
         Debug.Assert(settingManager.GetEnumValue("SaveDocument.Mark.SuspectedCharacterColor") = 7)
         Debug.Assert(settingManager.GetEnumValueAsString("SaveDocument.Mark.RejectionCharacterColor") = "Blue, Green, Red")

         ' Note: calling Dispose will also automatically shutdown the engine if it has been started
         ocrEngine.Shutdown()
      End Using
   End Sub</code>
        <code lang="CS">      public void LoadSettingsExample2()
      {
         // Unlock the support needed for LEADTOOLS Plus OCR engine
         RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here");
         RasterSupport.Unlock(RasterSupportType.OcrPlus, "Replace with your own key here");
         RasterSupport.Unlock(RasterSupportType.OcrPlusPdfLeadOutput, "Replace with your own key here");
         string userDictionaryFileName = LeadtoolsExamples.Common.ImagesPath.Path + "MyDictionary.ud";

         // Stream to save the settings to
         MemoryStream ms = new MemoryStream();

         // Create an instance of the engine
         using(IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, false))
         {
            // Start the engine using default parameters
            ocrEngine.Startup(null, null, null, null);

            IOcrSettingManager settingManager = ocrEngine.SettingManager;

            // Enable English and German character sets
            ocrEngine.LanguageManager.EnableLanguages(new string[] { "en", "de" });

            // Set the spell checking options
            ocrEngine.SpellCheckManager.Enabled = false;
            ocrEngine.SpellCheckManager.SpellLanguage = "en";
            ocrEngine.SpellCheckManager.UserDictionary.Use(userDictionaryFileName, null);

            // Change some settings
            settingManager.SetValue("SaveDocument.FormatLevel", "Part");
            settingManager.SetBooleanValue("SaveDocument.Document.TextInBoxes", false);
            settingManager.SetIntegerValue("SaveDocument.Document.Margin.Left", 2400);
            settingManager.SetStringValue("SaveDocument.Character.ProportionalSansSerifFontName", "MyFont");
            settingManager.SetStringValue("SaveDocument.Mark.BeforeMissingCharacterSeparator", "MyMark");
            settingManager.SetValue("SaveDocument.Mark.BeginOfLineSeparator", null);
            // Change an enum using an integer
            settingManager.SetEnumValue("SaveDocument.Mark.SuspectedCharacterColor", 7);
            // Change an enum using strings
            settingManager.SetEnumValue("SaveDocument.Mark.RejectionCharacterColor", "Blue, Green, Red");

            // Save the settings
            settingManager.Save(ms);

            // Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown();
         }

         // Reset the stream position to the beginning
         ms.Position = 0;

         // Now create another instance of the engine, load the settings and make sure they are the same
         using(IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, false))
         {
            // Start the engine using default parameters
            ocrEngine.Startup(null, null, null, null);

            IOcrSettingManager settingManager = ocrEngine.SettingManager;

            // Load the settings
            settingManager.Load(ms);

            // Check the character set
            string[] languages = ocrEngine.LanguageManager.GetEnabledLanguages();
            Debug.Assert(languages[0] == "en" &amp;&amp; languages[1] == "de");

            // Check the spell checking options
            Debug.Assert(ocrEngine.SpellCheckManager.Enabled);
            Debug.Assert(ocrEngine.SpellCheckManager.SpellLanguage == "en");
            Debug.Assert(ocrEngine.SpellCheckManager.UserDictionary.FileName == userDictionaryFileName);

            // Check the settings
            Debug.Assert(settingManager.GetValue("SaveDocument.FormatLevel") == "Part");
            Debug.Assert(settingManager.GetBooleanValue("SaveDocument.Document.TextInBoxes") == false);
            Debug.Assert(settingManager.GetIntegerValue("SaveDocument.Document.Margin.Left") == 2400);
            Debug.Assert(settingManager.GetStringValue("SaveDocument.Character.ProportionalSansSerifFontName") == "MyFont");
            Debug.Assert(settingManager.GetStringValue("SaveDocument.Mark.BeforeMissingCharacterSeparator") == "MyMark");
            Debug.Assert(settingManager.GetValue("SaveDocument.Mark.BeginOfLineSeparator") == null);
            Debug.Assert(settingManager.GetEnumValue("SaveDocument.Mark.SuspectedCharacterColor") == 7);
            Debug.Assert(settingManager.GetEnumValueAsString("SaveDocument.Mark.RejectionCharacterColor") == "Blue, Green, Red");

            // Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown();
         }
      }</code>
        <!--IOcrSettingManager.Load(Stream)-->
      </example>
      <docaddon>yes</docaddon>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrSettingManager.Save(System.String)">
      <summary>
            Saves the OCR engine current settings to a disk file.
            </summary>
      <param name="fileName">The name of the file containing the settings to read.</param>
      <remarks>
        <para>Once you set up the OCR engine, you can re-use these settings by saving the engine state into memory or to an XML file on disk. Later, reload these
            settings and use them in the same or different instance of <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.</para>
        <para>The following table lists all the states loaded from the XML file. After the load operation completes, some or all of the settings below will be changed.
              <list type="table"><listheader><term>Part</term><description>Members</description></listheader><item><term><see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> (accessed through <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.SettingManager">IOcrEngine.SettingManager</see></term><description>All the settings as obtained through <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames">IOcrSettingManager.GetSettingNames</see></description></item><item><term><see cref="T:Leadtools.Forms.Ocr.IOcrLanguageManager" /> (accessed through <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.LanguageManager">IOcrEngine.LanguageManager</see></term><description>The value of <see cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.GetEnabledLanguages">IOcrLanguageManager.GetEnabledLanguages</see></description></item><item><term><see cref="T:Leadtools.Forms.Ocr.IOcrSpellCheckManager" /> (accessed through <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.SpellCheckManager">IOcrEngine.SpellCheckManager</see></term><description>The values of <see cref="P:Leadtools.Forms.Ocr.IOcrSpellCheckManager.Enabled">IOcrSpellCheckManager.Enabled</see>, 
            <see cref="P:Leadtools.Forms.Ocr.IOcrSpellCheckManager.SpellLanguage">IOcrSpellCheckManager.SpellLanguage</see> and <see cref="P:Leadtools.Forms.Ocr.IOcrSpellCheckManager.UserDictionary">IOcrSpellCheckManager.UserDictionary</see>.</description></item><item><term><see cref="T:Leadtools.Forms.Ocr.IOcrDocumentManager" /> (accessed through <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.DocumentManager">IOcrEngine.DocumentManager</see></term><description>The values of the <see cref="P:Leadtools.Forms.Ocr.IOcrDocumentManager.RejectionSymbol">IOcrDocumentManager.RejectionSymbol</see> and
            <see cref="P:Leadtools.Forms.Ocr.IOcrDocumentManager.MissingSymbol">IOcrDocumentManager.MissingSymbol</see>.</description></item></list></para>
      </remarks>
      <para>You can load the settings from a disk file using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.Load(System.String)" />, you can load and save the settings into any .NET stream using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.Load(System.IO.Stream)" /> and
            <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.Save(System.IO.Stream)" />.</para>
      <keywords>OCR,Settings</keywords>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.Load(System.String)" /></example>
      <docaddon>yes</docaddon>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrSettingManager.Save(System.IO.Stream)">
      <summary>
            Saves the OCR engine current settings to a .NET stream.
            </summary>
      <param name="stream">The stream to write the settings to.</param>
      <remarks>
        <para>Once you set up the OCR engine, you can re-use these settings by saving the engine state into memory or to an XML file on disk. Later, reload these
            settings and use them in the same or different instance of <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.</para>
        <para>The following table lists all the states loaded from the XML file. After the load operation completes, some or all of the settings below will be changed.
              <list type="table"><listheader><term>Part</term><description>Members</description></listheader><item><term><see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> (accessed through <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.SettingManager">IOcrEngine.SettingManager</see></term><description>All the settings as obtained through <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames">IOcrSettingManager.GetSettingNames</see></description></item><item><term><see cref="T:Leadtools.Forms.Ocr.IOcrLanguageManager" /> (accessed through <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.LanguageManager">IOcrEngine.LanguageManager</see></term><description>The value of <see cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.GetEnabledLanguages">IOcrLanguageManager.GetEnabledLanguages</see></description></item><item><term><see cref="T:Leadtools.Forms.Ocr.IOcrSpellCheckManager" /> (accessed through <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.SpellCheckManager">IOcrEngine.SpellCheckManager</see></term><description>The values of <see cref="P:Leadtools.Forms.Ocr.IOcrSpellCheckManager.Enabled">IOcrSpellCheckManager.Enabled</see>, 
            <see cref="P:Leadtools.Forms.Ocr.IOcrSpellCheckManager.SpellLanguage">IOcrSpellCheckManager.SpellLanguage</see> and <see cref="P:Leadtools.Forms.Ocr.IOcrSpellCheckManager.UserDictionary">IOcrSpellCheckManager.UserDictionary</see>.</description></item><item><term><see cref="T:Leadtools.Forms.Ocr.IOcrDocumentManager" /> (accessed through <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.DocumentManager">IOcrEngine.DocumentManager</see></term><description>The values of the <see cref="P:Leadtools.Forms.Ocr.IOcrDocumentManager.RejectionSymbol">IOcrDocumentManager.RejectionSymbol</see> and
            <see cref="P:Leadtools.Forms.Ocr.IOcrDocumentManager.MissingSymbol">IOcrDocumentManager.MissingSymbol</see>.</description></item></list></para>
      </remarks>
      <para>You can load the settings from a .NET stream <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.Load(System.IO.Stream)" />, you can load and save the settings to a disk file using <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.Load(System.String)" /> and
            <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.Save(System.String)" />.</para>
      <keywords>OCR,Settings</keywords>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.Load(System.IO.Stream)" /></example>
      <docaddon>yes</docaddon>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="T:Leadtools.Forms.Ocr.IOcrDocumentManager">
      <summary>
            Manages the OCR documents of this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.
            </summary>
      <keywords>Documents|Creating documents|Document formats</keywords>
      <remarks>
        <para>You can access the instance of the <see cref="T:Leadtools.Forms.Ocr.IOcrDocumentManager" /> used by an <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> through the
            <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.DocumentManager">IOcrEngine.DocumentManager</see> property.</para>
        <para>The <see cref="T:Leadtools.Forms.Ocr.IOcrDocumentManager" /> interface allows you to create <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> objects that encapsulate an OCR'ed document. Each OCR document contains
            a collection of <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> that you can use to add and remove pages from the document. After you add the pages to the document and optionally manage the zones
            on the pages, you can call the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see> method on each page to obtain the recognition data and store them internally in
            the pages. Once you are done, you can use the save methods of the <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object to save the document into its final format.</para>
        <para>LEADTOOLS supports saving to various standard document formats such as PDF, Microsoft Word, HTML and several others through the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter">LEADTOOLS Document Writers</see>
            engine. For more information, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> and <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />.</para>
        <para>Typical OCR operation using the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> involves starting up the engine, create an <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object using the
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.CreateDocument">IOcrDocumentManager.CreateDocument</see> method and adding the pages into it and perform either automatic or manual zoning.
            Once this is done, After the recognition data is collected using <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see>, you use the various
            <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~Save.html">IOcrDocument.Save</a> methods to save the document to its final
            format such as PDF, DOC or HTML.</para>
        <para>In addition to the above, you can use <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~SaveXml.html">IOcrDocument.SaveXml</a> to
            save the document as XML.</para>
      </remarks>
      <keywords>OCR,PDF|OCR,PDF/A|OCR,Text|OCR,Doc|OCR,Word|OCR,Recognition</keywords>
      <example>
        <para>This example save a page to all the formats supported by the LEADTOOLS OCR Plus engine</para>
        <code lang="VB">   Public Sub OcrDocumentManagerExample()
      ' Unlock the support needed for LEADTOOLS Plus OCR engine
      RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here")
      RasterSupport.Unlock(RasterSupportType.OcrPlus, "Replace with your own key here")
      RasterSupport.Unlock(RasterSupportType.OcrPlusPdfLeadOutput, "Replace with your own key here")
      ' We will use engine native PDF, so unlock it
      RasterSupport.Unlock(RasterSupportType.OcrPlusPdfOutput, "Replace with your own key here")
      Dim tifFileName1 As String = LeadtoolsExamples.Common.ImagesPath.Path + "Ocr1.tif"
      Dim tifFileName2 As String = LeadtoolsExamples.Common.ImagesPath.Path + "Ocr2.tif"
      Dim outputDirectory As String = LeadtoolsExamples.Common.ImagesPath.Path

      ' Create the output directory
      If (Directory.Exists(outputDirectory)) Then
         Directory.Delete(outputDirectory, True)
      End If
      Directory.CreateDirectory(outputDirectory)

      ' Create an instance of the engine
      Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, False)
         ' Start the engine using default parameters
         Console.WriteLine("Starting up the engine...")
         ocrEngine.Startup(Nothing, Nothing, Nothing, Nothing)

         ' Create the OCR document
         Console.WriteLine("Creating the OCR document...")
         Dim ocrDocumentManager As IOcrDocumentManager = ocrEngine.DocumentManager
         Using ocrDocument As IOcrDocument = ocrDocumentManager.CreateDocument()

            ' Add the pages to the document
            Console.WriteLine("Adding the pages...")
            ocrDocument.Pages.AddPage(tifFileName1, Nothing)
            ocrDocument.Pages.AddPage(tifFileName2, Nothing)

            ' Recognize the pages to this document. Note, we did not call AutoZone, it will explicitly be called by Recognize
            Console.WriteLine("Recognizing all the pages...")
            ocrDocument.Pages.Recognize(Nothing)

            ' Save to all the formats supported by this OCR engine
            Dim formats As Array = System.Enum.GetValues(GetType(DocumentFormat))
            For Each format As DocumentFormat In formats
               Dim friendlyName As String = DocumentWriter.GetFormatFriendlyName(format)
               Console.WriteLine("Saving (using default options) to {0}...", friendlyName)

               ' Construct the output file name (output_directory + document_format_name + . + extension)
               Dim extension As String = DocumentWriter.GetFormatFileExtension(format)
               Dim outputFileName As String = Path.Combine(outputDirectory, format.ToString() + "." + extension)

               ' Save the document
               ocrDocument.Save(outputFileName, format, Nothing)

               ' If this is the LTD format, convert it to PDF
               If format = DocumentFormat.Ltd Then
                  Console.WriteLine("Converting the LTD file to PDF...")
                  Dim pdfFileName As String = Path.Combine(outputDirectory, format.ToString() + "_pdf.pdf")

                  Dim docWriter As DocumentWriter = ocrEngine.DocumentWriterInstance
                  docWriter.Convert(outputFileName, pdfFileName, DocumentFormat.Pdf)
               End If
            Next

            ' Now save to all the engine native formats (if any) supported by the engine
            Dim engineFormats() As String = ocrDocumentManager.GetEngineSupportedFormats()
            For Each engineFormat As String In engineFormats
               Dim friendlyName As String = ocrDocumentManager.GetEngineFormatFriendlyName(engineFormat)
               Console.WriteLine("Saving to engine native format {0}...", friendlyName)

               ' Construct the output file name (output_directory + "engine" + engine_format_name + . + extension)
               Dim extension As String = ocrDocumentManager.GetEngineFormatFileExtension(engineFormat)
               Dim outputFileName As String = Path.Combine(outputDirectory, "engine_" + engineFormat + "." + extension)

               ' To use this format, set it in the IOcrDocumentManager.EngineFormat and do a normal save using DocumentFormat.User

               ' Save the document
               ocrDocumentManager.EngineFormat = engineFormat
               ocrDocument.Save(outputFileName, DocumentFormat.User, Nothing)
            Next
         End Using

         ' Shutdown the engine
         ' Note: calling Dispose will also automatically shutdown the engine if it has been started
         Console.WriteLine("Shutting down...")
         ocrEngine.Shutdown()
      End Using
   End Sub</code>
        <code lang="CS">      public void OcrDocumentManagerExample()
      {
         // Unlock the support needed for LEADTOOLS Plus OCR engine
         RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here");
         RasterSupport.Unlock(RasterSupportType.OcrPlus, "Replace with your own key here");
         RasterSupport.Unlock(RasterSupportType.OcrPlusPdfLeadOutput, "Replace with your own key here");
         // We will use engine native PDF, so unlock it
         RasterSupport.Unlock(RasterSupportType.OcrPlusPdfOutput, "Replace with your own key here");
         string tifFileName1 = LeadtoolsExamples.Common.ImagesPath.Path + "Ocr1.tif";
         string tifFileName2 = LeadtoolsExamples.Common.ImagesPath.Path + "Ocr2.tif";
         string outputDirectory = LeadtoolsExamples.Common.ImagesPath.Path;

         // Create the output directory
         if(Directory.Exists(outputDirectory))
            Directory.Delete(outputDirectory, true);
         Directory.CreateDirectory(outputDirectory);

         // Create an instance of the engine
         using(IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, false))
         {
            // Start the engine using default parameters
            Console.WriteLine("Starting up the engine...");
            ocrEngine.Startup(null, null, null, null);

            // Create the OCR document
            Console.WriteLine("Creating the OCR document...");
            IOcrDocumentManager ocrDocumentManager = ocrEngine.DocumentManager;
            using(IOcrDocument ocrDocument = ocrDocumentManager.CreateDocument())
            {
               // Add the pages to the document
               Console.WriteLine("Adding the pages...");
               ocrDocument.Pages.AddPage(tifFileName1, null);
               ocrDocument.Pages.AddPage(tifFileName2, null);

               // Recognize the pages to this document. Note, we did not call AutoZone, it will explicitly be called by Recognize
               Console.WriteLine("Recognizing all the pages...");
               ocrDocument.Pages.Recognize(null);

               // Save to all the formats supported by this OCR engine
               Array formats = Enum.GetValues(typeof(DocumentFormat));
               foreach(DocumentFormat format in formats)
               {
                  string friendlyName = DocumentWriter.GetFormatFriendlyName(format);
                  Console.WriteLine("Saving (using default options) to {0}...", friendlyName);

                  // Construct the output file name (output_directory + document_format_name + . + extension)
                  string extension = DocumentWriter.GetFormatFileExtension(format);
                  string outputFileName = Path.Combine(outputDirectory, format.ToString() + "." + extension);

                  // Save the document
                  ocrDocument.Save(outputFileName, format, null);

                  // If this is the LTD format, convert it to PDF
                  if(format == DocumentFormat.Ltd)
                  {
                     Console.WriteLine("Converting the LTD file to PDF...");
                     string pdfFileName = Path.Combine(outputDirectory, format.ToString() + "_pdf.pdf");

                     DocumentWriter docWriter = ocrEngine.DocumentWriterInstance;
                     docWriter.Convert(outputFileName, pdfFileName, DocumentFormat.Pdf);
                  }
               }

               // Now save to all the engine native formats (if any) supported by the engine
               string[] engineFormats = ocrDocumentManager.GetEngineSupportedFormats();
               foreach(string engineFormat in engineFormats)
               {
                  string friendlyName = ocrDocumentManager.GetEngineFormatFriendlyName(engineFormat);
                  Console.WriteLine("Saving to engine native format {0}...", friendlyName);

                  // Construct the output file name (output_directory + "engine" + engine_format_name + . + extension)
                  string extension = ocrDocumentManager.GetEngineFormatFileExtension(engineFormat);
                  string outputFileName = Path.Combine(outputDirectory, "engine_" + engineFormat + "." + extension);

                  // To use this format, set it in the IOcrDocumentManager.EngineFormat and do a normal save using DocumentFormat.User

                  // Save the document
                  ocrDocumentManager.EngineFormat = engineFormat;
                  ocrDocument.Save(outputFileName, DocumentFormat.User, null);
               }
            }

            // Shutdown the engine
            // Note: calling Dispose will also automatically shutdown the engine if it has been started
            Console.WriteLine("Shutting down...");
            ocrEngine.Shutdown();
         }
      }</code>
        <!--IOcrDocumentManager-->
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrDocument" />
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~Save.html">IOcrDocument.Save</seealso>
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~SaveXml.html">IOcrDocument.SaveXml</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.RecognizingOcrPages.html">Recognizing OCR Pages</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrDocumentManager.GetEngineSupportedFormats">
      <summary>
            Gets a list of the engine native formats supported by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.
            </summary>
      <value>An array of <see cref="T:System.String" /> that contains the name of the engine native formats supported by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />. If this engine does not support
            native formats, an empty array is returned instead.</value>
      <remarks>
        <para>Some of the OCR engines supported by LEADTOOLS (for example, the <see cref="T:Leadtools.Forms.Ocr.OcrEngineType">OcrEngineType.Plus</see> and <see cref="T:Leadtools.Forms.Ocr.OcrEngineType">OcrEngineType.Professional</see>
            supports saving the recognition result using the engine native save mechanism instead of the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter">LEADTOOLS Document Writers</see>. Use the
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.GetEngineSupportedFormats" /> method to get a list of the names of the native formats and the <see cref="P:Leadtools.Forms.Ocr.IOcrDocumentManager.EngineFormat" /> property to set the format to use when
            saving the results.</para>
        <para>It is recommended that you use the LEADTOOLS Document Writers supported formats always when saving OCR recognition data. For more information refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />.
            Support for native engine formats may be deprecated in later versions of LEADTOOLS.</para>
        <para>To save the recognition results using the engine native format:
            <list type="bullet"><item><description>Obtain the engine native format name using the <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.GetEngineSupportedFormats" />.</description></item><item><description>Set the engine format name with the <see cref="P:Leadtools.Forms.Ocr.IOcrDocumentManager.EngineFormat" /> property</description></item><item><description>Call the various save methods (<see href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~Save.html">IOcrDocument.Save</see>
            or <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.Run(System.String,System.String,System.Collections.Generic.IList{System.String},Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IAutoRecognizeManager.Run</see>) using
            <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.User</see> for the <paramref name="format" /> parameter.</description></item></list></para>
        <para>For more information about the various document formats supported by LEADTOOLS refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />.</para>
        <para>To determine whether a particular engine native format is supported by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />, use <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.IsEngineFormatSupported(System.String)" />.</para>
        <para>To get the file extension for a particular engine native format, use <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.GetEngineFormatFileExtension(System.String)" />.</para>
        <para>To get the friendly name for a particular engine native format, use <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.GetEngineFormatFriendlyName(System.String)">GetEngineFormatFriendlyName</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrDocumentManager" />.</example>
      <isnew>5/8/2009</isnew>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrDocument" />
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~Save.html">IOcrDocument.Save</seealso>
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~SaveXml.html">IOcrDocument.SaveXml</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrDocumentManager.IsEngineFormatSupported(System.String)">
      <summary>
            Gets a value indicating whether the specified engine native format is supported by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.
            </summary>
      <param name="formatName">The name of the engine native format to check.</param>
      <returns>
        <strong>true</strong> if <paramref name="formatName" /> is supported by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />, otherwise it is <strong>false</strong>.</returns>
      <remarks>
        <para>Some of the OCR engines supported by LEADTOOLS (for example, the <see cref="T:Leadtools.Forms.Ocr.OcrEngineType">OcrEngineType.Plus</see> and <see cref="T:Leadtools.Forms.Ocr.OcrEngineType">OcrEngineType.Professional</see>
            supports saving the recognition result using the engine native save mechanism instead of the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter">LEADTOOLS Document Writers</see>. Use the
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.GetEngineSupportedFormats" /> method to get a list of the names of the native formats and the <see cref="P:Leadtools.Forms.Ocr.IOcrDocumentManager.EngineFormat" /> property to set the format to use when
            saving the results.</para>
        <para>For more information on the various document formats supported by LEADTOOLS refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />.</para>
        <para>To get a list of all the engine native formats supported by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />, use <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.GetEngineSupportedFormats" />.</para>
        <para>To get the file extension for a particular engine native format, use <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.GetEngineFormatFileExtension(System.String)" />.</para>
        <para>To get a friendly name for a particular engine native format, use <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.GetEngineFormatFriendlyName(System.String)">GetEngineFormatFriendlyName</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrDocumentManager" />.</example>
      <isnew>5/8/2009</isnew>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrDocument" />
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~Save.html">IOcrDocument.Save</seealso>
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~SaveXml.html">IOcrDocument.SaveXml</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrDocumentManager.GetEngineFormatFileExtension(System.String)">
      <summary>
            Gets the default file extension for the specified engine native format.
            </summary>
      <param name="formatName">The name of the engine native format requested.</param>
      <returns>A <see cref="T:System.String" /> containing the file extension for the specified format (without the ".").</returns>
      <remarks>
        <para>Some of the OCR engines supported by LEADTOOLS (for example, the <see cref="T:Leadtools.Forms.Ocr.OcrEngineType">OcrEngineType.Plus</see> and <see cref="T:Leadtools.Forms.Ocr.OcrEngineType">OcrEngineType.Professional</see>
            supports saving the recognition result using the engine native save mechanism instead of the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter">LEADTOOLS Document Writers</see>. Use the
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.GetEngineSupportedFormats" /> method to get a list of the names of the native formats and the <see cref="P:Leadtools.Forms.Ocr.IOcrDocumentManager.EngineFormat" /> property to set the format to use when
            saving the results.</para>
        <para>This method will return the default file extension commonly used with file of types <paramref name="formatName" />. For example, Adobe PDF files commonly have "pdf" extensions,
            Microsoft Word documents commonly have "doc" extensions and so forth.</para>
        <para>For more information on the various document formats supported by LEADTOOLS refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />.</para>
        <para>To get a list of all the engine native formats supported by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />, use <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.GetEngineSupportedFormats" />.</para>
        <para>To check if a particular engine native format is supported by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />, use <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.IsEngineFormatSupported(System.String)" />.</para>
        <para>To get a friendly name for a particular engine native format, use <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.GetEngineFormatFriendlyName(System.String)">GetEngineFormatFriendlyName</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrDocumentManager" />.</example>
      <isnew>5/8/2009</isnew>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrDocument" />
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~Save.html">IOcrDocument.Save</seealso>
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~SaveXml.html">IOcrDocument.SaveXml</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrDocumentManager.GetEngineFormatFriendlyName(System.String)">
      <summary>
            Gets the friendly name of the specified engine native format.
            </summary>
      <param name="formatName">The engine native format name requested.</param>
      <returns>A <see cref="T:System.String" /> containing the friendly name for the specified format.</returns>
      <remarks>
        <para>Some of the OCR engines supported by LEADTOOLS (for example, the <see cref="T:Leadtools.Forms.Ocr.OcrEngineType">OcrEngineType.Plus</see> and <see cref="T:Leadtools.Forms.Ocr.OcrEngineType">OcrEngineType.Professional</see>
            supports saving the recognition result using the engine native save mechanism instead of the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter">LEADTOOLS Document Writers</see>. Use the
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.GetEngineSupportedFormats" /> method to get a list of the names of the native formats and the <see cref="P:Leadtools.Forms.Ocr.IOcrDocumentManager.EngineFormat" /> property to set the format to use when
            saving the results.</para>
        <para>This method will return a friendly name used for <paramref name="formatName" />. For example, Adobe PDF files will return something similar to "Adobe PDF" and 
            Microsoft Word documents will return "Microsoft Word" and so forth. You can use this value in your application when presenting the user with a list to select a format to save
            the recognized OCR documents.</para>
        <para>For more information on the various document formats supported by LEADTOOLS refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />.</para>
        <para>To get a list of all the engine native formats supported by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />, use <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.GetEngineSupportedFormats" />.</para>
        <para>To check if a particular engine native format is supported by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />, use <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.IsEngineFormatSupported(System.String)" />.</para>
        <para>To get the file extension for a particular engine native format, use <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.GetEngineFormatFileExtension(System.String)" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrDocumentManager" />.</example>
      <isnew>5/8/2009</isnew>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrDocument" />
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~Save.html">IOcrDocument.Save</seealso>
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~SaveXml.html">IOcrDocument.SaveXml</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrDocumentManager.CreateDocument">
      <summary>
            Creates a new OCR document object.
            </summary>
      <returns>An object implementing <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> that can paricipate in recognition and saving operations.</returns>
      <remarks>
        <para>Typical OCR operation using the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> involves starting up and then creating an OCR document using the <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.CreateDocument" /> method then
            adding the pages into it and perform either automatic or manual zoning. Once this is done, <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see> is called on each
            page to collect the recognition data and have it stored internally in the page. After the recognition data is collected, you use the various
            <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~Save.html">IOcrDocument.Save</a> or
            <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~SaveXml.html">IOcrDocument.SaveXml</a> methods to save the document to its final format.</para>
        <para>When you are done using the <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object created by this method, you should dispose it as soon as possible to free its resources. Disposing
            an <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object will free all the pages stored inside its <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.Pages">IOcrDocument.Pages</see> collection.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrDocumentManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrDocument" />
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~Save.html">IOcrDocument.Save</seealso>
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~SaveXml.html">IOcrDocument.SaveXml</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrDocumentManager.GetFontNames(System.String)">
      <summary>
            Gets the font names used in the final document.
            </summary>
      <param name="languageName">The language name. See remarks for more information.</param>
      <returns>An array of six string values that contains the font names used in the final document.</returns>
      <remarks>
        <para>Use <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.GetFontNames(System.String)" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.SetFontNames(System.String,System.String[])" /> to get/set the fonts used in the final recognized document (PDF, DOC, HTML, etc). The fonts
            will not be used when the final document format is text.</para>
        <para>The OCR engine uses six different fonts when creating the final output document as follows. The following table shows the array index and the font
            description:
            <list type="table"><listheader><term>Index</term><description>Description</description></listheader><item><term>0</term><description>The font used with proportional serif characters</description></item><item><term>1</term><description>The font used with proportional sans-serif characters</description></item><item><term>2</term><description>The font used with monospaced serif characters</description></item><item><term>3</term><description>The font used with monospaced sans-serif characters</description></item><item><term>4</term><description>The font used with ICR (hand-written) characters</description></item><item><term>5</term><description>The font used with MICR (check font) characters</description></item></list></para>
        <para>The <see cref="P:Leadtools.Forms.Ocr.OcrCharacter.FontStyle">OcrCharacter.FontStyle</see> member of each character returned in
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see> determines which font to use with the character. If the zone
            is ICR or MICR (the <see cref="P:Leadtools.Forms.Ocr.OcrZone.RecognitionModule">OcrZone.RecognitionModule</see> member is <see cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule">OcrZoneRecognitionModule.Micr</see>,
            <see cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule">OcrZoneRecognitionModule.IcrNumeral</see> or <see cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule">OcrZoneRecognitionModule.IcrCharacter</see>), then
            the character will use the ICR or MICR fonts accordingly.</para>
        <para>The OCR engine keeps a list of fonts for some languages, for example all the Latin languages currently use the same font. So passing <paramref name="languageName" /> equals to
            "en" for English or "de" for German will change the default Latin fonts used in the final document. This is the equivalant of passing null (Nothing in Visual Basic).</para>
        <para>If the OCR engine supports Asian languages, then each language will have its own font sets and you can get/set these fonts individually. Currently, the LEADTOOLS
            OCR toolkits supports individual fonts for Latin (null), Japanese (ja), Korean (ko), Chinese (zh-Hans and zh-Hant) and Korean (ko). The following table
            lists the default fonts used for each language:</para>
        <list type="table">
          <listheader>
            <term>Language</term>
            <description>Fonts</description>
          </listheader>
          <item>
            <term>Latin (all other languages) including <paramref name="languageName" /> equals to null</term>
            <description>
              <list type="table">
                <listheader>
                  <term>Font</term>
                  <value>Value</value>
                </listheader>
                <item>
                  <term>Proportional Serif</term>
                  <description>Times New Roman</description>
                </item>
                <item>
                  <term>Proportional Sans-Serif</term>
                  <description>Arial</description>
                </item>
                <item>
                  <term>Monospace Serif</term>
                  <description>Courier New</description>
                </item>
                <item>
                  <term>Monospace Sans-Serif</term>
                  <description>Arial</description>
                </item>
                <item>
                  <term>ICR</term>
                  <description>Bookman Old Style</description>
                </item>
                <item>
                  <term>MICR</term>
                  <description>Arial Unicode MS</description>
                </item>
              </list>
            </description>
          </item>
          <item>
            <term>Japanese (<paramref name="languageName" /> equals to "ja")</term>
            <description>
              <list type="table">
                <listheader>
                  <term>Font</term>
                  <value>Value</value>
                </listheader>
                <item>
                  <term>Proportional Serif</term>
                  <description>MS PMincho</description>
                </item>
                <item>
                  <term>Proportional Sans-Serif</term>
                  <description>MS PGothic</description>
                </item>
                <item>
                  <term>Monospace Serif</term>
                  <description>MS Gothic</description>
                </item>
                <item>
                  <term>Monospace Sans-Serif</term>
                  <description>SimSun</description>
                </item>
                <item>
                  <term>ICR</term>
                  <description>MS Gothic</description>
                </item>
                <item>
                  <term>MICR</term>
                  <description>SimSun</description>
                </item>
              </list>
            </description>
          </item>
          <item>
            <term>Chinese (<paramref name="languageName" /> equals to "zh-Hans" or "zh-Hant")</term>
            <description>
              <list type="table">
                <listheader>
                  <term>Font</term>
                  <value>Value</value>
                </listheader>
                <item>
                  <term>Proportional Serif</term>
                  <description>SimSun</description>
                </item>
                <item>
                  <term>Proportional Sans-Serif</term>
                  <description>SimHei</description>
                </item>
                <item>
                  <term>Monospace Serif</term>
                  <description>Hei Simplified</description>
                </item>
                <item>
                  <term>Monospace Sans-Serif</term>
                  <description>SimSun</description>
                </item>
                <item>
                  <term>ICR</term>
                  <description>Hei Simplified</description>
                </item>
                <item>
                  <term>MICR</term>
                  <description>SimSun</description>
                </item>
              </list>
            </description>
          </item>
          <item>
            <term>Korean (<paramref name="languageName" /> equals to "ko")</term>
            <description>
              <list type="table">
                <listheader>
                  <term>Font</term>
                  <value>Value</value>
                </listheader>
                <item>
                  <term>Proportional Serif</term>
                  <description>Gungsuh</description>
                </item>
                <item>
                  <term>Proportional Sans-Serif</term>
                  <description>Gulim</description>
                </item>
                <item>
                  <term>Monospace Serif</term>
                  <description>Dotum</description>
                </item>
                <item>
                  <term>Monospace Sans-Serif</term>
                  <description>Gungsuh</description>
                </item>
                <item>
                  <term>ICR</term>
                  <description>Dotum</description>
                </item>
                <item>
                  <term>MICR</term>
                  <description>Gungsuh</description>
                </item>
              </list>
            </description>
          </item>
        </list>
        <para>Note that changing the fonts is not recommended in most cases, the charcater position and size is calculated based on the default fonts
            even if the user changes the fonts before the recognition process. After the changing the fonts, it might be required to use
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see> and <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.SetRecognizedCharacters</see>
            to further change the character position and font size to create the final output document.</para>
      </remarks>
      <example>
        <para />
        <code lang="VB">   Private Shared Sub DocumentFontsTest()
      RasterCodecs.Startup()
      Using codecs As New RasterCodecs()
         Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Professional, False)
            ocrEngine.Startup(codecs, Nothing, Nothing, Nothing)
            Dim ocrDocumentManager As IOcrDocumentManager = ocrEngine.DocumentManager

            Using ocrDocument As IOcrDocument = ocrEngine.DocumentManager.CreateDocument()
               ' Add a page to OCR
               Dim ocrPage As IOcrPage = ocrDocument.Pages.AddPage("C:\Users\Public\Documents\LEADTOOLS Images\Ocr1.tif", Nothing)

               ocrPage.AutoZone(Nothing)
               ocrPage.Recognize(Nothing)

               ' Show the current fonts used to save default documents
               Console.WriteLine("Saving use the following fonts:")
               ShowFonts(ocrDocumentManager)
               ocrDocument.Save("C:\Users\Public\Documents\LEADTOOLS Images\Ocr1_DefaultFonts.pdf", DocumentFormat.Pdf, Nothing)

               ' Now change the fonts to something else
               Dim newFonts() As String = ocrDocumentManager.GetFontNames(Nothing)

               ' Use Cambira for Proportional Serif font - instead of Times New Roman
               newFonts(0) = "Cambria"
               ' Use Calibri for Proportional Sans-serif font - instead of Arial
               newFonts(1) = "Calibri"
               ' Use Lucida Console for Monospace fonts (both Serif and Sans-serif)
               newFonts(2) = "Lucida Console"
               newFonts(3) = "Lucida Console"
               ' Leave the ICR and MICR fonts the same

               ocrDocumentManager.SetFontNames(Nothing, newFonts)

               ' Show the new fonts used to save default documents
               Console.WriteLine("Saving use the following fonts:")
               ShowFonts(ocrDocumentManager)
               ocrDocument.Save("C:\Users\Public\Documents\LEADTOOLS Images\Ocr1_CustomFonts.pdf", DocumentFormat.Pdf, Nothing)
            End Using
         End Using
      End Using
      RasterCodecs.Shutdown()
   End Sub

   Private Shared Sub ShowFonts(ByVal ocrDocumentManager As IOcrDocumentManager)
      ' Get the default fonts
      ' The default fonts will be used for all Latin languages
      Dim fonts() As String = ocrDocumentManager.GetFontNames(Nothing)

      ' This should return an array of 6 items, as follows:
      Console.WriteLine("Proportional Serif font:        " + fonts(0))
      Console.WriteLine("Proportional Sans-serif font:   " + fonts(1))
      Console.WriteLine("Monospace Serif font:           " + fonts(2))
      Console.WriteLine("Monospace Sans-serif font:      " + fonts(3))
      Console.WriteLine("ICR (hand-written) font:        " + fonts(4))
      Console.WriteLine("MICR (Check) font:              " + fonts(5))
   End Sub</code>
        <code lang="CS">      private static void DocumentFontsTest()
      {
         RasterCodecs.Startup();
         using(RasterCodecs codecs = new RasterCodecs())
         {
            using(IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Professional, false))
            {
               ocrEngine.Startup(codecs, null, null, null);
               IOcrDocumentManager ocrDocumentManager = ocrEngine.DocumentManager;

               using(IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument())
               {
                  // Add a page to OCR
                  IOcrPage ocrPage = ocrDocument.Pages.AddPage(@"C:\Users\Public\Documents\LEADTOOLS Images\Ocr1.tif", null);

                  ocrPage.AutoZone(null);
                  ocrPage.Recognize(null);

                  // Show the current fonts used to save default documents
                  Console.WriteLine("Saving use the following fonts:");
                  ShowFonts(ocrDocumentManager);
                  ocrDocument.Save(@"C:\Users\Public\Documents\LEADTOOLS Images\Ocr1_DefaultFonts.pdf", DocumentFormat.Pdf, null);

                  // Now change the fonts to something else
                  string[] newFonts = ocrDocumentManager.GetFontNames(null);

                  // Use Cambira for Proportional Serif font - instead of Times New Roman
                  newFonts[0] = "Cambria";
                  // Use Calibri for Proportional Sans-serif font - instead of Arial
                  newFonts[1] = "Calibri";
                  // Use Lucida Console for Monospace fonts (both Serif and Sans-serif)
                  newFonts[2] = "Lucida Console";
                  newFonts[3] = "Lucida Console";
                  // Leave the ICR and MICR fonts the same

                  ocrDocumentManager.SetFontNames(null, newFonts);

                  // Show the new fonts used to save default documents
                  Console.WriteLine("Saving use the following fonts:");
                  ShowFonts(ocrDocumentManager);
                  ocrDocument.Save(@"C:\Users\Public\Documents\LEADTOOLS Images\Ocr1_CustomFonts.pdf", DocumentFormat.Pdf, null);
               }
            }
         }

         RasterCodecs.Shutdown();
      }

      private static void ShowFonts(IOcrDocumentManager ocrDocumentManager)
      {
         // Get the default fonts
         // The default fonts will be used for all Latin languages
         string[] fonts = ocrDocumentManager.GetFontNames(null);

         // This should return an array of 6 items, as follows:
         Console.WriteLine("Proportional Serif font:        " + fonts[0]);
         Console.WriteLine("Proportional Sans-serif font:   " + fonts[1]);
         Console.WriteLine("Monospace Serif font:           " + fonts[2]);
         Console.WriteLine("Monospace Sans-serif font:      " + fonts[3]);
         Console.WriteLine("ICR (hand-written) font:        " + fonts[4]);
         Console.WriteLine("MICR (Check) font:              " + fonts[5]);
      }</code>
        <!--IOcrDocumentManager.GetFontNames-->
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrDocument" />
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~Save.html">IOcrDocument.Save</seealso>
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~SaveXml.html">IOcrDocument.SaveXml</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrDocumentManager.SetFontNames(System.String,System.String[])">
      <summary>
            Sets the font names used in the final document.
            </summary>
      <param name="languageName">The language name. See remarks for more information.</param>
      <param name="fontNames">An array of six string values that contains the font names used in the final document.</param>
      <remarks>
        <para>Use <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.GetFontNames(System.String)" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.SetFontNames(System.String,System.String[])" /> to get/set the fonts used in the final recognized document (PDF, DOC, HTML, etc). The fonts
            will not be used when the final document format is text.</para>
        <para>The OCR engine uses six different fonts when creating the final output document as follows. The following table shows the array index and the font
            description:
            <list type="table"><listheader><term>Index</term><description>Description</description></listheader><item><term>0</term><description>The font used with proportional serif characters</description></item><item><term>1</term><description>The font used with proportional sans-serif characters</description></item><item><term>2</term><description>The font used with monospaced serif characters</description></item><item><term>3</term><description>The font used with monospaced sans-serif characters</description></item><item><term>4</term><description>The font used with ICR (hand-written) characters</description></item><item><term>5</term><description>The font used with MICR (check font) characters</description></item></list></para>
        <para>The <see cref="P:Leadtools.Forms.Ocr.OcrCharacter.FontStyle">OcrCharacter.FontStyle</see> member of each character returned in
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see> determines which font to use with the character. If the zone
            is ICR or MICR (the <see cref="P:Leadtools.Forms.Ocr.OcrZone.RecognitionModule">OcrZone.RecognitionModule</see> member is <see cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule">OcrZoneRecognitionModule.Micr</see>,
            <see cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule">OcrZoneRecognitionModule.IcrNumeral</see> or <see cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule">OcrZoneRecognitionModule.IcrCharacter</see>), then
            the character will use the ICR or MICR fonts accordingly.</para>
        <para>The OCR engine keeps a list of fonts for some languages, for example all the Latin languages currently use the same font. So passing <paramref name="languageName" /> equals to
            "en" for English or "de" for German will change the default Latin fonts used in the final document. This is the equivalant of passing null (Nothing in Visual Basic).</para>
        <para>If the OCR engine supports Asian languages, then each language will have its own font sets and you can get/set these fonts individually. Currently, the LEADTOOLS
            OCR toolkits supports individual fonts for Latin (null), Japanese (ja), Korean (ko), Chinese (zh-Hans and zh-Hant) and Korean (ko). The following table
            lists the default fonts used for each language:</para>
        <list type="table">
          <listheader>
            <term>Language</term>
            <description>Fonts</description>
          </listheader>
          <item>
            <term>Latin (all other languages) including <paramref name="languageName" /> equals to null</term>
            <description>
              <list type="table">
                <listheader>
                  <term>Font</term>
                  <value>Value</value>
                </listheader>
                <item>
                  <term>Proportional Serif</term>
                  <description>Times New Roman</description>
                </item>
                <item>
                  <term>Proportional Sans-Serif</term>
                  <description>Arial</description>
                </item>
                <item>
                  <term>Monospace Serif</term>
                  <description>Courier New</description>
                </item>
                <item>
                  <term>Monospace Sans-Serif</term>
                  <description>Arial</description>
                </item>
                <item>
                  <term>ICR</term>
                  <description>Bookman Old Style</description>
                </item>
                <item>
                  <term>MICR</term>
                  <description>Arial Unicode MS</description>
                </item>
              </list>
            </description>
          </item>
          <item>
            <term>Japanese (<paramref name="languageName" /> equals to "ja")</term>
            <description>
              <list type="table">
                <listheader>
                  <term>Font</term>
                  <value>Value</value>
                </listheader>
                <item>
                  <term>Proportional Serif</term>
                  <description>MS PMincho</description>
                </item>
                <item>
                  <term>Proportional Sans-Serif</term>
                  <description>MS PGothic</description>
                </item>
                <item>
                  <term>Monospace Serif</term>
                  <description>MS Gothic</description>
                </item>
                <item>
                  <term>Monospace Sans-Serif</term>
                  <description>SimSun</description>
                </item>
                <item>
                  <term>ICR</term>
                  <description>MS Gothic</description>
                </item>
                <item>
                  <term>MICR</term>
                  <description>SimSun</description>
                </item>
              </list>
            </description>
          </item>
          <item>
            <term>Chinese (<paramref name="languageName" /> equals to "zh-Hans" or "zh-Hant")</term>
            <description>
              <list type="table">
                <listheader>
                  <term>Font</term>
                  <value>Value</value>
                </listheader>
                <item>
                  <term>Proportional Serif</term>
                  <description>SimSun</description>
                </item>
                <item>
                  <term>Proportional Sans-Serif</term>
                  <description>SimHei</description>
                </item>
                <item>
                  <term>Monospace Serif</term>
                  <description>Hei Simplified</description>
                </item>
                <item>
                  <term>Monospace Sans-Serif</term>
                  <description>SimSun</description>
                </item>
                <item>
                  <term>ICR</term>
                  <description>Hei Simplified</description>
                </item>
                <item>
                  <term>MICR</term>
                  <description>SimSun</description>
                </item>
              </list>
            </description>
          </item>
          <item>
            <term>Korean (<paramref name="languageName" /> equals to "ko")</term>
            <description>
              <list type="table">
                <listheader>
                  <term>Font</term>
                  <value>Value</value>
                </listheader>
                <item>
                  <term>Proportional Serif</term>
                  <description>Gungsuh</description>
                </item>
                <item>
                  <term>Proportional Sans-Serif</term>
                  <description>Gulim</description>
                </item>
                <item>
                  <term>Monospace Serif</term>
                  <description>Dotum</description>
                </item>
                <item>
                  <term>Monospace Sans-Serif</term>
                  <description>Gungsuh</description>
                </item>
                <item>
                  <term>ICR</term>
                  <description>Dotum</description>
                </item>
                <item>
                  <term>MICR</term>
                  <description>Gungsuh</description>
                </item>
              </list>
            </description>
          </item>
        </list>
        <para>Note that changing the fonts is not recommended in most cases, the charcater position and size is calculated based on the default fonts
            even if the user changes the fonts before the recognition process. After the changing the fonts, it might be required to use
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see> and <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.SetRecognizedCharacters</see>
            to further change the character position and font size to create the final output document.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.GetFontNames(System.String)" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrDocument" />
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~Save.html">IOcrDocument.Save</seealso>
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~SaveXml.html">IOcrDocument.SaveXml</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrDocumentManager.EngineFormat">
      <summary>
            Gets or sets the name of the engine native format to use when saving OCR documents.
            </summary>
      <value>A <see cref="T:System.String" /> that indicates the name of the engine native format to use when saving OCR documents.</value>
      <remarks>
        <para>Some of the OCR engines supported by LEADTOOLS (for example, the <see cref="T:Leadtools.Forms.Ocr.OcrEngineType">OcrEngineType.Plus</see> and <see cref="T:Leadtools.Forms.Ocr.OcrEngineType">OcrEngineType.Professional</see>
            supports saving the recognition result using the engine native save mechanism instead of the <see cref="T:Leadtools.Forms.DocumentWriters.DocumentWriter">LEADTOOLS Document Writers</see>. Use the
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.GetEngineSupportedFormats" /> method to get a list of the names of the native formats and the <see cref="P:Leadtools.Forms.Ocr.IOcrDocumentManager.EngineFormat" /> property to set the format to use when
            saving the results.</para>
        <para>It is recommended that you use the LEADTOOLS Document Writers supported formats always when saving OCR recognition data. For more information refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />.
            Support for native engine formats may be deprecated in later versions of LEADTOOLS.</para>
        <para>To save the recognition results using the engine native format:
            <list type="bullet"><item><description>Obtain the engine native format name through the <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.GetEngineSupportedFormats" />.</description></item><item><description>Set the engine format name in the <see cref="P:Leadtools.Forms.Ocr.IOcrDocumentManager.EngineFormat" /> property</description></item><item><description>Call the various save methods (<see href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~Save.html">IOcrDocument.Save</see>
            or <see cref="M:Leadtools.Forms.Ocr.IOcrAutoRecognizeManager.Run(System.String,System.String,System.Collections.Generic.IList{System.String},Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IAutoRecognizeManager.Run</see>) using
            <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.User</see> for the <paramref name="format" /> parameter.</description></item></list></para>
        <para>For more information on the various document formats supported by LEADTOOLS refer to <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />.</para>
        <para>To get a list of all the engine native formats supported by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />, use <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.GetEngineSupportedFormats" />.</para>
        <para>To check if a particular engine native format is supported by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />, use <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.IsEngineFormatSupported(System.String)" />.</para>
        <para>To get the file extension for a particular engine native format, use <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.GetEngineFormatFileExtension(System.String)" />.</para>
        <para>To get a friendly name for a particular engine native format, use <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.GetEngineFormatFriendlyName(System.String)">GetEngineFormatFriendlyName</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrDocumentManager" />.</example>
      <isnew>5/8/2009</isnew>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrDocument" />
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~Save.html">IOcrDocument.Save</seealso>
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~SaveXml.html">IOcrDocument.SaveXml</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrDocumentManager.RejectionSymbol">
      <summary>
            Gets or sets the character used as a symbol for the rejected characters in the final output document.
            </summary>
      <value>The character used as a symbol for the rejected (i.e. unrecognized the recognition module used in the zone) characters in the final output document.</value>
      <remarks>
        <para>In <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> there is a special internal code for marking the unrecognized characters (called rejected characters). However, when exporting to the final output
            document, the recognition result must contain this information, as well. The character which will be used as a placeholder for rejected characters is the rejection symbol.</para>
        <para>The default rejection symbol is "~" (the tilde character)</para>
        <para>For more information on recognition and rejected and missing symbols, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see>.</para>
        <para>
          <strong>Note: This property is read only for the LEADTOOLS OCR Advantage Engine, setting this property will have no effect.</strong>
        </para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrDocumentManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrDocument" />
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~Save.html">IOcrDocument.Save</seealso>
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~SaveXml.html">IOcrDocument.SaveXml</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrDocumentManager.MissingSymbol">
      <summary>
            Gets or sets the character used as a symbol for the missing characters in the final output document.
            </summary>
      <value>The character used as a symbol for the missing characters in the final output document.</value>
      <remarks>
        <para> The missing symbol is a special character that replaces another character that was recognized by the engine but could not be represented in the final output document,
            since the character does not exist in the current code page.</para>
        <para>During the conversion to the final output document the <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~Save.html">IOcrDocument.Save</a> or
            <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~SaveXml.html">IOcrDocument.SaveXml</a> methods will try to find a replacement character
            with a similar shape for one not supported by the current code page. Only if this attempt was not successful the missing symbol will be sent into the final output document.</para>
        <para>The default missing symbol is "^" (the circumflex character)</para>
        <para>For more information on recognition and rejected and missing symbols, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see>.</para>
        <para>
          <strong>Note: This property is not supported in the LEADTOOLS OCR Advantage Engine</strong>
        </para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrDocumentManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrDocument" />
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~Save.html">IOcrDocument.Save</seealso>
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~SaveXml.html">IOcrDocument.SaveXml</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="T:Leadtools.Forms.Ocr.OcrOmrSensitivity">
      <summary>
            The OMR sensitivity mode.
            </summary>
      <remarks>
        <para>OMR stands for Optical Mark Recognition. For more information refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.UsingOmrInLeadtoolsDotNetOcr.html">Using OMR in LEADTOOLS .NET OCR</a>.</para>
        <para>You can set the LEADTOOLS OCR engine OMR recognition sensitivity to be as high or low as desired. High sensitivity results in higher confidence in the recognized mark, but could
            prove to be slower.</para>
        <para>To change the sensitivity of OMR recognition, use <see cref="P:Leadtools.Forms.Ocr.IOcrOmrOptions.Sensitivity" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrOmrOptions" />.</example>
      <isnew>5/8/2009</isnew>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrOmrOptions" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.UsingOmrInLeadtoolsDotNetOcr.html">Using OMR in LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrOmrSensitivity.Highest">
      <summary>
            Use the highest check mark recognition sensitivity. This may also be the slowest.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrOmrSensitivity.High">
      <summary>
            Use high check mark recognition sensitivity.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrOmrSensitivity.Low">
      <summary>
            Use low check mark recognition sensitivity. May be faster than <strong>High</strong>.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrOmrSensitivity.Lowest">
      <summary>
            Use the lowest check mark recognition sensitivity. This may also be the fastest.
            </summary>
    </member>
    <member name="T:Leadtools.Forms.Ocr.OcrZone">
      <summary>
            Rectangular area on a page containing a feature of interest to the user.
            </summary>
      <remarks>
        <para>
                    The <see cref="T:Leadtools.Forms.Ocr.OcrZone" /> structure contains all the necessary information
                    for describing a zone. A zone is a rectangular area on an image containing a
                    feature of interest to the user. The image data covered by each zone is handled
                    and processed (typically recognized) separately.
                </para>
        <para>
                    Access the zones of an <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> object with the
                    <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones">IOcrPage.Zones</see> property. This is a
                    <see cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" /> allowing the user to examine and modify the
                    various zones on the page.
                </para>
        <para>Zones can be divided into two basic categories: whether a zone is to be
                recognized or whether it should be treated as graphic. Zones containing
                text information can be considered to be either of the flowing type or of a table
                type. This basic classification of zones helps the OCR engine handle text
                information correctly.</para>
        <para>
                    Zones are always associated with a filling method
                    (<see cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod" />) and one of the available recognition
                    modules (<see cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule" />). These determine which
                    recognition algorithm will be applied to the zone during its processing.
                </para>
        <para>
                    Use the <see cref="P:Leadtools.Forms.Ocr.OcrZone.CharacterFilters" /> property to modify the set of valid
                    characters for recognition of the zone. Specifying the character set correctly
                    is a recognition accuracy issue.
                </para>
        <para>Other members of the zone structure specify how the checking subsystem will
                function for the particular zone.</para>
        <para>
                    Construct the zones of a page automatically using
                    <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPage~AutoZone.html">
                    IOcrPage.AutoZone</a>. You must call this method and finish any modification
                    you might have to the zones before calling
                    <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see>.
                </para>
        <para>
                    To modify a zone, use <see cref="P:System.Collections.Generic.IList`1.Item(System.Int32)">IOcrZoneCollection.Item</see> to
                    get the <see cref="T:Leadtools.Forms.Ocr.OcrZone" /> object of interest, modify the
                    zone then set it back through
                    <see cref="P:System.Collections.Generic.IList`1.Item(System.Int32)">IOcrZoneCollection.Item</see>. Note that since
                    <see cref="T:Leadtools.Forms.Ocr.OcrZone" /> is a structure (value type), use the
                    setter. The following code snippet illustrates how to change the zone type of
                    the 4th zone in an ocrPage:
                </para>
        <para>
          <pre>
            <code>
            // Remember, the index is zero-based, so 4th zone has an index of 3
            OcrZone zone = ocrPage.Zones[3];
            // Prevent this zone from being recognized
            zone.ZoneType = OcrZoneType.Graphic;
            ocrPage.Zones[3] = zone;
            </code>
          </pre>
          <para>
                        When adding or updating a zone directly initialize the
                        <see cref="P:Leadtools.Forms.Ocr.OcrZone.Bounds">OcrZone.Bounds</see>,
                        <see cref="P:Leadtools.Forms.Ocr.OcrZone.FillMethod">OcrZone.FillMethod</see>,
                        <see cref="P:Leadtools.Forms.Ocr.OcrZone.RecognitionModule">OcrZone.RecognitionModule</see>,
                        <see cref="P:Leadtools.Forms.Ocr.OcrZone.CharacterFilters">OcrZone.CharacterFilters</see> and the
                        <see cref="P:Leadtools.Forms.Ocr.OcrZone.ZoneType">OcrZone.ZoneType</see> properties of the zone,
                        since they will not take on their default values.
                    </para>
          <para>
                        Don't modify the <see cref="P:Leadtools.Forms.Ocr.OcrZone.Id">OcrZone.Id</see> property.
                        When adding zones, leave this value to the default of 0.
                    </para>
          <para>
                        The <see cref="P:Leadtools.Forms.Ocr.OcrZone.ZoneType">OcrZone.ZoneType</see> property of the
                        updating zone should be one of the following:
                        <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Text</see>,
                        <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Table</see> or
                        <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Graphics</see>.
                    </para>
          <para>The preferred method of updating a zone is as illustrated in the code
                    snippet above, first get the zone of interest, update it and set it
                    back into the collection.</para>
          <para>
                        It is the developers responsibility to specify a valid recognition module-filling
                        method pair. Otherwise any incorrectly set zone will have no recognition
                        result. For more information, refer to
                        <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.AnOverviewOfOcrRecognitionModules.html">An Overview of OCR
                        Recognition Modules</a>.
                    </para>
          <para>
                        LEADTOOLS OCR .NET also supports OMR (Optical Mark Recognition) in all the
                        engines. For more information, refer to
                        <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.UsingOmrInLeadtoolsDotNetOcr.html">Using OMR in
                        LEADTOOLS .NET OCR</a>.
                    </para>
        </para>
      </remarks>
      <example> For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see>.</example>
      <docaddon>yes</docaddon>
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPage~AutoZone.html">IOcrPage.AutoZone</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneType" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.AnOverviewOfOcrRecognitionModules.html">An Overview of OCR Recognition Modules</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.WorkingWithOcrZones.html">Working with OCR Zones</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.UsingOmrInLeadtoolsDotNetOcr.html">Using OMR in LEADTOOLS .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrZone.Id">
      <summary>Gets the zone ID.</summary>
      <value>An integer value specifying the zone ID.</value>
      <remarks>
        <para>The zone ID is managed by the engine and so the application is not allowed to change its value.</para>
      </remarks>
      <example> For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see>.</example>
      <docaddon>yes</docaddon>
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPage~AutoZone.html">IOcrPage.AutoZone</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneType" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.AnOverviewOfOcrRecognitionModules.html">An Overview of OCR Recognition Modules</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrZone.Name">
      <summary>
            Gets or sets the optional zone name.
            </summary>
      <value>A <see cref="T:System.String" /> value that specifies the optional zone name.</value>
      <remarks>
        <para>The name is a user-defined value and is not used by the OCR engine. Calling <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPage~AutoZone.html">IOcrPage.AutoZone</a> will always fill the page with
            zones whose <see cref="P:Leadtools.Forms.Ocr.OcrZone.Name" /> is set to <strong>null</strong> (<strong>Nothing</strong> in Visual Basic).</para>
      </remarks>
      <example> For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see>.</example>
      <docaddon>yes</docaddon>
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPage~AutoZone.html">IOcrPage.AutoZone</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneType" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrZone.Selected">
      <summary>
            Gets or sets a value indicating whether this zone is selected.
            </summary>
      <value>True if the zone is selected; otherwise it is false.</value>
      <remarks>
        <para>
          <see cref="P:Leadtools.Forms.Ocr.OcrZone.Selected" /> is a user-defined value and is not used by the OCR engine. Calling <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPage~AutoZone.html">IOcrPage.AutoZone</a> will always fill
            the page with zones whose <see cref="P:Leadtools.Forms.Ocr.OcrZone.Selected" /> value is set to <strong>false</strong>.</para>
        <para>You can use <see cref="P:Leadtools.Forms.Ocr.OcrZone.Selected" /> if the application uses the zones in its user interface, refer to the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.HitTestZone(Leadtools.Forms.LogicalPoint)">IOcrPage.HitTestZone</see> example
            for more information.</para>
      </remarks>
      <example> For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.HitTestZone(Leadtools.Forms.LogicalPoint)">IOcrPage.HitTestZone</see>.</example>
      <docaddon>yes</docaddon>
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPage~AutoZone.html">IOcrPage.AutoZone</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneType" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrZone.Bounds">
      <summary>
            Gets or sets the coordinates of the zone in logical units.
            </summary>
      <value>A <see cref="T:Leadtools.Forms.LogicalRectangle" /> that contain the coordinates of the zone in logical units.</value>
      <remarks>
        <para>Calling <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPage~AutoZone.html">IOcrPage.AutoZone</a> will return zones with <see cref="P:Leadtools.Forms.Ocr.OcrZone.Bounds" /> coordinates that do not overlap with each other. It
            is the developers responsibility when modifying the zones of the page to make sure the coordinates of those zones follow the same rule.</para>
        <para>The coordinates of the zone is in logical (page) coordinates. If the <see cref="T:Leadtools.Forms.LogicalUnit" /> value of the <see cref="P:Leadtools.Forms.Ocr.OcrZone.Bounds" /> property is not
            <see cref="T:Leadtools.Forms.LogicalUnit">LogicalUnit.Pixels</see>, then use the page resolution stored in <see cref="P:Leadtools.Forms.Ocr.IOcrPage.DpiX">IOcrPage.DpiX</see> and
            <see cref="P:Leadtools.Forms.Ocr.IOcrPage.DpiY">IOcrPage.DpiY</see> if conversion to pixels is required.</para>
        <para>Also the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetZoneBoundsInPixels(System.Int32)">IOcrPage.GetZoneBoundsInPixels</see> method can get the coordinates of any zone in pixels.</para>
      </remarks>
      <example> For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.HitTestZone(Leadtools.Forms.LogicalPoint)">IOcrPage.HitTestZone</see>.</example>
      <docaddon>yes</docaddon>
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPage~AutoZone.html">IOcrPage.AutoZone</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneType" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrZone.ZoneType">
      <summary>Gets or sets the zone type.</summary>
      <value>An <see cref="T:Leadtools.Forms.Ocr.OcrZoneType" /> enumeration member that specifies the zone type.</value>
      <remarks>
        <para>The <see cref="P:Leadtools.Forms.Ocr.OcrZone.ZoneType" /> property is used to classify the zone into one of the three basic zone-categories: flowed text, table or graphics. To set this, use
            <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Text</see>, <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Table</see><see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Graphic</see>, respectively.</para>
        <para>For flowed text, any of the following text types can appear instead of <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Text</see>:
            		<list type="bullet"><item><description><see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Column</see></description></item><item><description><see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Header</see></description></item><item><description><see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Footer</see></description></item><item><description><see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Caption</see></description></item><item><description><see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Title</see></description></item><item><description><see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.VerticalText</see></description></item><item><description><see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.LeftRotatedText</see></description></item><item><description><see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.RightRotatedText</see></description></item><item><description><see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Other</see></description></item></list></para>
        <para>One of these values is typically created by the page-layout decomposition (auto-zoning) process, however they have the same meaning for the recognition algorithms:
            the zone contains flowed text.</para>
        <para>The <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Table</see> type is for table-type zones. In the case of this type of zone, the OCR engine will try to reconstruct
            the original table text layout of the zone in the final output document.</para>
        <para>For graphic zones use the <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Graphic</see> type. If <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Graphic</see> is specified, no recognition will run
            on the zone and all other recognition related settings will be ignored.</para>
        <para>For horizontal text recognition you can set the <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType</see> to <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Text</see>.</para>
        <para>The related <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.AutoGraphic</see> type can appear as the result of the page-layout decomposition (auto-zoning) process,
            and also signifies a graphic zone.</para>
      </remarks>
      <example> For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see>.</example>
      <docaddon>yes</docaddon>
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPage~AutoZone.html">IOcrPage.AutoZone</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneType" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrZone.FillMethod">
      <summary>
            Gets or sets the zone filling method.
            </summary>
      <value>An <see cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod" /> enumeration member that indicate the zone fill method.</value>
      <remarks>
        <para>The <see cref="P:Leadtools.Forms.Ocr.OcrZone.FillMethod" /> property is used to define what kind of zone filling method has been used originally on the document to fill the zone's area. (i.e. whether it
            contains a barcode, machine print, handprint, graphic, etc.).</para>
        <para>The <see cref="P:Leadtools.Forms.Ocr.OcrZone.RecognitionModule" /> property specifies the recognition module to be used for this zone.</para>
        <para>Since any recognition module supports only a limited set of the zone filling methods, the module specified in <see cref="P:Leadtools.Forms.Ocr.OcrZone.RecognitionModule" /> should be able to deal with
            the specified <see cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod" />. It is your responsibility to specify a valid recognition module-filling method pair. Otherwise any incorrectly set zone will have
            no recognition result. For more information, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.AnOverviewOfOcrRecognitionModules.html">An Overview of OCR Recognition Modules</a>.
            </para>
      </remarks>
      <example> For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see>.</example>
      <docaddon>yes</docaddon>
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPage~AutoZone.html">IOcrPage.AutoZone</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneType" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrZone.RecognitionModule">
      <summary>
            Gets or sets the zone recognition module.
            </summary>
      <value>An <see cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule" /> enumeration member that indicate the zone recognition module.</value>
      <remarks>
        <para>The <see cref="P:Leadtools.Forms.Ocr.OcrZone.FillMethod" /> property is used to define what kind of zone filling method has been used originally on the document to fill the zone's area. (i.e. whether it
            contains a barcode, machine print, handprint, graphic, etc.).</para>
        <para>The <see cref="P:Leadtools.Forms.Ocr.OcrZone.RecognitionModule" /> property specifies the recognition module to be used for this zone.</para>
        <para>Since any recognition module supports only a limited set of the zone filling methods, the module specified in <see cref="P:Leadtools.Forms.Ocr.OcrZone.RecognitionModule" /> should be able to deal with
            the specified <see cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod" />. It is your responsibility to specify a valid recognition module-filling method pair. Otherwise any incorrectly set zone will have
            no recognition result. For more information, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.AnOverviewOfOcrRecognitionModules.html">An Overview of OCR Recognition Modules</a>.
            </para>
        <para>
          <strong>Note: This property is not supported in the LEADTOOLS OCR Advantage Engine and it will always contain <see cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule">OcrZoneRecognitionModule.Auto</see>.</strong>
        </para>
      </remarks>
      <example> For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see>.</example>
      <docaddon>yes</docaddon>
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPage~AutoZone.html">IOcrPage.AutoZone</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneType" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrZone.CharacterFilters">
      <summary>Gets or sets the character set filter for the zone.</summary>
      <value>One or more <see cref="T:Leadtools.Forms.Ocr.OcrZoneCharacterFilters" /> enumeration members that specify the character set filter for the zone.</value>
      <remarks>
        <para>
          <see cref="P:Leadtools.Forms.Ocr.OcrZone.CharacterFilters" /> can be used to the Language environment for this zone by by specifying character set filters. For more information, refer to
            <see cref="T:Leadtools.Forms.Ocr.OcrZoneCharacterFilters" />.</para>
        <para>
          <strong>Note: This property is not supported in the LEADTOOLS OCR Advantage Engine and it will always contain <see cref="T:Leadtools.Forms.Ocr.OcrZoneCharacterFilters">OcrZoneCharacterFilters.None</see>.</strong>
        </para>
      </remarks>
      <example> For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see>.</example>
      <docaddon>yes</docaddon>
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPage~AutoZone.html">IOcrPage.AutoZone</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneCharacterFilters">IOcrPage.AutoZone</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettingsPlus.html">LEADTOOLS OCR Plus Engine Settings</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrZone.UserDictionarySectionName">
      <summary>
            Gets or sets the section name in the user dictionary assigned to this zone.
            </summary>
      <value>A <see cref="T:System.String" /> that contains the section name in the user dictionary assigned to this zone. Use a <strong>null</strong> (<strong>Nothing</strong> in Visual Basic)
            reference to use the default section name.</value>
      <remarks>
        <para>When the zones are generated with <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPage~AutoZone.html">IOcrPage.AutoZone</a>, the value of <see cref="P:Leadtools.Forms.Ocr.OcrZone.UserDictionarySectionName" /> will always
            be set to a a <strong>null</strong> (<strong>Nothing</strong> in Visual Basic) reference to denote the use of the default section name.</para>
        <para>
          <strong>Note: This property is not supported for the LEADTOOLS OCR Advantage Engine.</strong>
        </para>
      </remarks>
      <example> For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see>.</example>
      <docaddon>yes</docaddon>
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPage~AutoZone.html">IOcrPage.AutoZone</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrUserDictionary" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettingsPlus.html">LEADTOOLS OCR Plus Engine Settings</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrZone.RecognitionOptions">
      <summary>
            Gets or sets the extra recognition options for this zone.
            </summary>
      <value>One or more <see cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionOptions" /> enumeration member that indicate the extra recognition options for this zone.</value>
      <remarks>
        <para>The <see cref="P:Leadtools.Forms.Ocr.OcrZone.RecognitionOptions">OcrZone.RecognitionOptions</see> property can be used to control how the checking subsystem will check the recognized result for
            the zone. For more information, refer to <see cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionOptions" />.</para>
        <para>
          <strong>Note: This property is not supported for the LEADTOOLS OCR Advantage Engine.</strong>
        </para>
      </remarks>
      <example> For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see>.</example>
      <docaddon>yes</docaddon>
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPage~AutoZone.html">IOcrPage.AutoZone</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionOptions" />
      <seealso cref="P:Leadtools.Forms.Ocr.OcrZone.AfterRecognitionNotes" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrUserDictionary" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSpellCheckManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettingsPlus.html">LEADTOOLS OCR Plus Engine Settings</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrZone.AfterRecognitionNotes">
      <summary>
            Gets or sets the after recognition notes for this zone.
            </summary>
      <value>One or more <see cref="T:Leadtools.Forms.Ocr.OcrZoneAfterRecognitionNotes" /> enumeration member that indicate the after recognition notes for this zone.</value>
      <remarks>
        <para>The value of the <see cref="P:Leadtools.Forms.Ocr.OcrZone.AfterRecognitionNotes" /> will be updated if any of the <see cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionOptions" /> values set in
            <see cref="P:Leadtools.Forms.Ocr.OcrZone.RecognitionOptions" /> is used during the recognition process.</para>
        <para>
          <strong>Note: This property is not supported for the LEADTOOLS OCR Advantage Engine.</strong>
        </para>
      </remarks>
      <example> For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see>.</example>
      <docaddon>yes</docaddon>
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPage~AutoZone.html">IOcrPage.AutoZone</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneAfterRecognitionNotes" />
      <seealso cref="P:Leadtools.Forms.Ocr.OcrZone.RecognitionOptions" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrUserDictionary" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSpellCheckManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettingsPlus.html">LEADTOOLS OCR Plus Engine Settings</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrZone.OmrState">
      <summary>
            Gets or sets the after-recognition state of the OMR mark if this is an OMR zone.
            </summary>
      <value>One or more <see cref="T:Leadtools.Forms.Ocr.OcrOmrZoneState" /> enumeration member that indicate the after-recognition state (filled or unfilled) of the mark of this zone.</value>
      <remarks>
        <para>OMR stands for Optical Mark Recognition. For more information refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.UsingOmrInLeadtoolsDotNetOcr.html">Using OMR in LEADTOOLS .NET OCR</a>.</para>
        <para>After <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see> is called, all the OMR zones in the page will have the OMR properties updated as follows:
            <list type="table"><listheader><term>Property</term><description>Description</description></listheader><item><term><see cref="P:Leadtools.Forms.Ocr.OcrZone.OmrState">OcrZone.OmrState</see></term><description>Either <see cref="T:Leadtools.Forms.Ocr.OcrOmrZoneState">OcrOmrZoneState.Filled</see> if the mark is recognized to be filled or checked, or <see cref="T:Leadtools.Forms.Ocr.OcrOmrZoneState">OcrOmrZoneState.Unfilled</see> if the mark
            is recognized to be unfilled or unchecked.</description></item><item><term><see cref="P:Leadtools.Forms.Ocr.OcrZone.OmrConfidence">OcrZone.OmrConfidence</see></term><description>A number between 0 and 100 (where 100 is maximum confidence) that specifies the OCR engine confidence in the recognition status in <see cref="P:Leadtools.Forms.Ocr.OcrZone.OmrState">OcrZone.OmrState</see>.</description></item></list></para>
        <para>The OMR zones of a page are zones with the following properties:
            <list type="table"><listheader><term>Property</term><description>Value</description></listheader><item><term><see cref="P:Leadtools.Forms.Ocr.OcrZone.FillMethod">OcrZone.FillMethod</see></term><description>Set to <see cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod">OcrZoneFillMethod.Omr</see>.</description></item><item><term><see cref="P:Leadtools.Forms.Ocr.OcrZone.RecognitionModule">OcrZone.RecognitionModule</see></term><description>Set to <see cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule">OcrZoneRecognitionModule.Omr</see>.</description></item></list></para>
        <para>All LEADTOOLS OCR engines support OMR. However, there isn't any current support for auto-detecting OMR zones in a page. To do that, add the OMR zones manually to the page
            by setting their boundary (through <see cref="P:Leadtools.Forms.Ocr.OcrZone.Bounds">OcrZone.Bounds</see>, the fill method and recognition module as described above and adding the zone to the page using
            the <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones">IOcrPage.Zones</see> collection before calling <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see>.</para>
        <para>To use OMR in LEADTOOLS, you need a special key to unlock the OMR capabilities. For more information, refer to <see cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrOmrOptions" />.</example>
      <isnew>5/8/2009</isnew>
      <docaddon>yes</docaddon>
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPage~AutoZone.html">IOcrPage.AutoZone</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.UsingOmrInLeadtoolsDotNetOcr.html">Using OMR in LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrZone.OmrConfidence">
      <summary>
            Gets or sets the confidence value of the after-recognition state of the OMR mark if this is an OMR zone.
            </summary>
      <value>A number between 0 and 100 (where 100 is maximum confidence) that indicate the after-recognition confidence this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> has in the <see cref="P:Leadtools.Forms.Ocr.OcrZone.OmrState" /> value of this zone.</value>
      <remarks>
        <para>OMR stands for Optical Mark Recognition. For more information refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.UsingOmrInLeadtoolsDotNetOcr.html">Using OMR in LEADTOOLS .NET OCR</a>.</para>
        <para>After you call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see>, all the OMR zones in the page will have the OMR properties updated as follows:
            <list type="table"><listheader><term>Property</term><description>Description</description></listheader><item><term><see cref="P:Leadtools.Forms.Ocr.OcrZone.OmrState">OcrZone.OmrState</see></term><description>Either <see cref="T:Leadtools.Forms.Ocr.OcrOmrZoneState">OcrOmrZoneState.Filled</see> if the mark is recognized to be filled or checked, or <see cref="T:Leadtools.Forms.Ocr.OcrOmrZoneState">OcrOmrZoneState.Unfilled</see> if the mark
            is recognized to be unfilled or unchecked.</description></item><item><term><see cref="P:Leadtools.Forms.Ocr.OcrZone.OmrConfidence">OcrZone.OmrConfidence</see></term><description>A number between 0 and 100 (where 100 is maximum confidence) that specifies the OCR engine confidence in the recognition status in <see cref="P:Leadtools.Forms.Ocr.OcrZone.OmrState">OcrZone.OmrState</see>.</description></item></list></para>
        <para>The OMR zones of a page are zones with the following properties:
            <list type="table"><listheader><term>Property</term><description>Value</description></listheader><item><term><see cref="P:Leadtools.Forms.Ocr.OcrZone.FillMethod">OcrZone.FillMethod</see></term><description>Set to <see cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod">OcrZoneFillMethod.Omr</see>.</description></item><item><term><see cref="P:Leadtools.Forms.Ocr.OcrZone.RecognitionModule">OcrZone.RecognitionModule</see></term><description>Set to <see cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule">OcrZoneRecognitionModule.Omr</see>.</description></item></list></para>
        <para>All LEADTOOLS OCR engines support OMR. However, there isn't any current support for auto-detecting OMR zones in a page, you have to add the OMR zones manually to the page
            by setting their boundary (through <see cref="P:Leadtools.Forms.Ocr.OcrZone.Bounds">OcrZone.Bounds</see>, the fill method and recognition module as described above and adding the zone to the page using
            the <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones">IOcrPage.Zones</see> collection before calling <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see>.</para>
        <para>To use OMR in LEADTOOLS, you need a special key to unlock the OMR capabilities. For more information, refer to <see cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrOmrOptions" />.</example>
      <isnew>5/8/2009</isnew>
      <docaddon>yes</docaddon>
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPage~AutoZone.html">IOcrPage.AutoZone</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.UsingOmrInLeadtoolsDotNetOcr.html">Using OMR in LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="T:Leadtools.Forms.Ocr.OcrStatistic">
      <summary>
            Processing statistic data.
            </summary>
      <remarks>
        <para>This structure contains the accuracy and timing data of the latest successful recognition process.</para>
        <para>To obtain the statistic, use <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.GetLastStatistic" />.</para>
        <para>Note that the time spent for the text post-processing can be calculated as follows: <c>PostProcessingTime = statistic.ReadingTime - statistic.RecognitionTime.</c></para>
        <para>
          <strong>Note: Only the following members are available for the LEADTOOLS OCR Advantage Engine
              <list type="bullet"><item><description><see cref="P:Leadtools.Forms.Ocr.OcrStatistic.RecognizedCharacters" /></description></item><item><description><see cref="P:Leadtools.Forms.Ocr.OcrStatistic.RecognizedWords" /></description></item><item><description><see cref="P:Leadtools.Forms.Ocr.OcrStatistic.RejectedCharacters" /></description></item></list></strong>
        </para>
      </remarks>
      <example>
        <para>This example will show the statistics of the last recognition operation on a page.</para>
        <code lang="VB">   Public Sub OcrStatisticExample()
      ' Unlock the support needed for LEADTOOLS Plus OCR engine
      RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here")
      RasterSupport.Unlock(RasterSupportType.OcrPlus, "Replace with your own key here")
      RasterSupport.Unlock(RasterSupportType.OcrPlusPdfLeadOutput, "Replace with your own key here")
      ' Create an instance of the engine
      Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, False)
         ' Start the engine using default parameters
         ocrEngine.Startup(Nothing, Nothing, Nothing, Nothing)

         Dim tifFileName As String = LeadtoolsExamples.Common.ImagesPath.Path + "Ocr1.tif"
         Dim pdfFileName As String = LeadtoolsExamples.Common.ImagesPath.Path + "Ocr1.pdf"

         ' Create an OCR document
         Using ocrDocument As IOcrDocument = ocrEngine.DocumentManager.CreateDocument()
            ' Add a page to the document
            Dim ocrPage As IOcrPage = ocrDocument.Pages.AddPage(tifFileName, Nothing)

            ' Process the page
            ocrPage.AutoPreprocess(OcrAutoPreprocessPageCommand.Deskew, Nothing)

            ' Recognize the page
            ' Note, Recognize can be called without calling AutoZone or manually adding zones. The engine will
            ' check and automatically auto-zones the page
            ocrPage.Recognize(Nothing)

            ' Save the document we have as PDF
            ocrDocument.Save(pdfFileName, DocumentFormat.Pdf, Nothing)

            ' Show the statistic about the last recognize operation
            Dim statistic As OcrStatistic = ocrEngine.GetLastStatistic()
            Console.WriteLine("Recognized characters: {0}", statistic.RecognizedCharacters)
            Console.WriteLine("Recognized words: {0}", statistic.RecognizedWords)
            Console.WriteLine("Rejected characters: {0}", statistic.RejectedCharacters)
            Console.WriteLine("Corrected words: {0}", statistic.CorrectedWords)
            Console.WriteLine("Recognition time: {0} ms", statistic.RecognitionTime)
            Console.WriteLine("Reading time: {0} ms", statistic.ReadingTime)
            Console.WriteLine("Image Preprocessing time: {0} ms", statistic.ImagePreprocessingTime)
            Console.WriteLine("Decomposition time: {0} ms", statistic.DecompositionTime)
            Console.WriteLine("Post processing time: {0} ms", statistic.ReadingTime - statistic.RecognitionTime)
         End Using

         ' Shutdown the engine
         ' Note: calling Dispose will also automatically shutdown the engine if it has been started
         ocrEngine.Shutdown()
      End Using
   End Sub</code>
        <code lang="CS">      public void OcrStatisticExample()
      {
         // Unlock the support needed for LEADTOOLS Plus OCR engine
         RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here");
         RasterSupport.Unlock(RasterSupportType.OcrPlus, "Replace with your own key here");
         RasterSupport.Unlock(RasterSupportType.OcrPlusPdfLeadOutput, "Replace with your own key here");
         // Create an instance of the engine
         using(IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, false))
         {
            // Start the engine using default parameters
            ocrEngine.Startup(null, null, null, null);

            string tifFileName = LeadtoolsExamples.Common.ImagesPath.Path + "Ocr1.tif";
            string pdfFileName = LeadtoolsExamples.Common.ImagesPath.Path + "Ocr1.pdf";

            // Create an OCR document
            using(IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument())
            {
               // Add a page to the document
               IOcrPage ocrPage = ocrDocument.Pages.AddPage(tifFileName, null);

               // Process the page
               ocrPage.AutoPreprocess(OcrAutoPreprocessPageCommand.Deskew, null);

               // Recognize the page
               // Note, Recognize can be called without calling AutoZone or manually adding zones. The engine will
               // check and automatically auto-zones the page
               ocrPage.Recognize(null);

               // Save the document we have as PDF
               ocrDocument.Save(pdfFileName, DocumentFormat.Pdf, null);

               // Show the statistic about the last recognize operation
               OcrStatistic statistic = ocrEngine.GetLastStatistic();
               Console.WriteLine("Recognized characters: {0}", statistic.RecognizedCharacters);
               Console.WriteLine("Recognized words: {0}", statistic.RecognizedWords);
               Console.WriteLine("Rejected characters: {0}", statistic.RejectedCharacters);
               Console.WriteLine("Corrected words: {0}", statistic.CorrectedWords);
               Console.WriteLine("Recognition time: {0} ms", statistic.RecognitionTime);
               Console.WriteLine("Reading time: {0} ms", statistic.ReadingTime);
               Console.WriteLine("Image Preprocessing time: {0} ms", statistic.ImagePreprocessingTime);
               Console.WriteLine("Decomposition time: {0} ms", statistic.DecompositionTime);
               Console.WriteLine("Post processing time: {0} ms", statistic.ReadingTime - statistic.RecognitionTime);
            }

            // Shutdown the engine
            // Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown();
         }
      }</code>
        <!--OcrStatistic-->
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.GetLastStatistic">IOcrEngine.GetLastStatistic</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">IOcrEngine.Startup</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrEngine.IsStarted">IOcrEngine.IsStarted</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Shutdown">IOcrEngine.Shutdown</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPage" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoPreprocess(Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoPreprocess</seealso>
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPage~AutoZone.html">IOcrPage.AutoZone</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~Save.html">IOcrDocument.Save</seealso>
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~SaveXml.html">IOcrDocument.SaveXml</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrStatistic.RecognizedCharacters">
      <summary>
            Gets or sets the number of recognized characters on the last page.
            </summary>
      <value>The number of recognized characters on the last page.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrStatistic" />.</example>
      <docaddon>yes</docaddon>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrStatistic.RecognizedWords">
      <summary>
            Gets or sets the number of recognized words on the last page.
            </summary>
      <value>The number of recognized words on the last page.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrStatistic" />.</example>
      <docaddon>yes</docaddon>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrStatistic.RejectedCharacters">
      <summary>
            Gets or sets the number of rejected characters on the last page.
            </summary>
      <value>The number of rejected characters on the last page.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrStatistic" />.</example>
      <docaddon>yes</docaddon>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrStatistic.CorrectedWords">
      <summary>
            Gets or sets the number of words corrected by the checking subsystem.
            </summary>
      <value>The number of words corrected by the checking subsystem.</value>
      <remarks>
        <para>Note: This property is not supported in the LEADTOOLS OCR Professional or Advantage Engines.</para>
        <para>
          <strong>Note: This property is not supported in the LEADTOOLS OCR Advantage Engine</strong>
        </para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrStatistic" />.</example>
      <docaddon>yes</docaddon>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrStatistic.RecognitionTime">
      <summary>
            Gets or sets the recognition time in milliseconds.
            </summary>
      <value>The recognition time in milliseconds.</value>
      <remarks>
        <para>
          <strong>Note: This property is not supported in the LEADTOOLS OCR Advantage Engine.</strong>
        </para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrStatistic" />.</example>
      <docaddon>yes</docaddon>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrStatistic.ReadingTime">
      <summary>
            Gets or sets the reading time in milliseconds.
            </summary>
      <value>The reading time in milliseconds.</value>
      <remarks>
        <para>
          <strong>Note: This property is not supported in the LEADTOOLS OCR Advantage Engine.</strong>
        </para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrStatistic" />.</example>
      <docaddon>yes</docaddon>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrStatistic.ImagePreprocessingTime">
      <summary>
            Gets or sets the image preprocessing time in milliseconds.
            </summary>
      <value>The image preprocessing time in milliseconds.</value>
      <remarks>
        <para>
          <strong>Note: This property is not supported in the LEADTOOLS OCR Advantage Engine</strong>
        </para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrStatistic" />.</example>
      <docaddon>yes</docaddon>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrStatistic.DecompositionTime">
      <summary>
            Gets or sets the page-layout decomposition time in milliseconds.
            </summary>
      <value>The page-layout decomposition time in milliseconds.</value>
      <remarks>
        <para>
          <strong>Note: This property is not supported in the LEADTOOLS OCR Advantage Engine</strong>
        </para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrStatistic" />.</example>
      <docaddon>yes</docaddon>
    </member>
    <member name="T:Leadtools.Forms.Ocr.IOcrZoneCharacters">
      <summary>
            The recognized characters collection of a zone inside a page.
            </summary>
      <remarks>
        <para>To get the recognized characters of a page, call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see> after
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.RecognizeText(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.RecognizeText</see>.</para>
        <para>To update the recognized characters of a page, call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.GetRecognizedCharacters</see> before calling
            <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~Save.html">IOcrDocument.Save</a> or
            <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~SaveXml.html">IOcrDocument.SaveXml</a>.</para>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" /> implements the standard <see cref="T:System.Collections.Generic.IList`1" />, <see cref="T:System.Collections.Generic.ICollection`1" /> and <see cref="T:System.Collections.Generic.IEnumerable`1" /> interfaces with items
            of type <see cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />. Each item in the <see cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" /> contains a collection of the character collections of the zones.</para>
        <para>The <see cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" /> interface contains a collection of the characters of a particular zones.</para>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" /> also implements <see cref="T:System.Collections.Generic.IList`1" />, <see cref="T:System.Collections.Generic.ICollection`1" /> and <see cref="T:System.Collections.Generic.IEnumerable`1" /> interfaces but with items
            of type <see cref="T:Leadtools.Forms.Ocr.OcrCharacter" />. Each item in the <see cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" /> contains a collection of the characters of the zone.</para>
        <para>For example, if you are interested in iterating through the characters of the 2nd zone in the page, you can do the following:</para>
        <para>
          <code>
            // Get the page characters
            IOcrPageCharacters pageCharacters = ocrPage.GetRecognizedCharacters();
            // Get the 2nd zone characters. Note, the index is zero-based so the 2nd zone is at index 1
            // You can also iterate through the pageCharacters collection and fine the IOcrZoneCharacters item with ZoneIndex = 1
            IOcrZoneCharacters zoneCharacters = pageCharacters.FindZoneCharacters(1);
            // Loop through the characters
            foreach(OcrCharacter ocrCharacter in zoneCharacters)
            {
               // Do something with ocrCharacter
            }
            </code>
        </para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.SetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized">IOcrPage.IsRecognized</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrCharacter" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrZoneCharacters.GetWords(System.Int32,System.Int32,Leadtools.Forms.LogicalUnit)">
      <summary>
            Gets a collection of recognized the words for this zone.
            </summary>
      <param name="dpiX">Horizontal resolution to use when calculating <see cref="P:Leadtools.Forms.Ocr.OcrWord.Bounds" /> if <paramref name="unit" /> is <see cref="T:Leadtools.Forms.LogicalUnit">LogicalUnit.Pixels</see>.</param>
      <param name="dpiY">Vertical resolution to use when calculating <see cref="P:Leadtools.Forms.Ocr.OcrWord.Bounds" /> if <paramref name="unit" /> is <see cref="T:Leadtools.Forms.LogicalUnit">LogicalUnit.Pixels</see>.</param>
      <param name="unit">Desired unit to use when calculating <see cref="P:Leadtools.Forms.Ocr.OcrWord.Bounds" />.</param>
      <returns>A collection of <see cref="T:Leadtools.Forms.Ocr.OcrWord" /> structures that contain the recognized words of this zone.</returns>
      <remarks>
        <para>This is a helper method that iterate through the <see cref="T:Leadtools.Forms.Ocr.OcrCharacter" /> collection of the zone and constructs the words based on the
            <see cref="P:Leadtools.Forms.Ocr.OcrCharacter.Position">OcrCharacter.Position</see> flags.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.SetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized">IOcrPage.IsRecognized</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrCharacter" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrZoneCharacters.ZoneIndex">
      <summary>
            Gets the index of the zone associated with this <see cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />.
            </summary>
      <value>The zero-based index of the zone associated with this <see cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />.</value>
      <remarks>
        <para>This is the index of the zone in <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.SetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized">IOcrPage.IsRecognized</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrCharacter" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="T:Leadtools.Forms.Ocr.OcrEngineManager">
      <summary>
            Provides methods to create OCR engine instances.
            </summary>
      <remarks>
        <para>
                    The <see cref="T:Leadtools.Forms.Ocr.OcrEngineManager" /> and its methods are your entry to using
                    the Leadtools.Forms.Ocr class library.
                </para>
        <para>
                    This class provides the methods you need to create an object of the
                    <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> interface. Afterwards, you can use the properties
                    and methods of this interface to perform your OCR tasks.
                </para>
        <para>
                    Based on the engine type passed to the "CreateEngine" methods, the
                    <see cref="T:Leadtools.Forms.Ocr.OcrEngineManager" /> will load the OCR engine defined in one of
                    the supporting assemblies and return an interface to
                    <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />. Use this interface and its included types to
                    start using the Leadtools.Forms.Ocr class library. For more information about
                    the engine types, refer to <see cref="T:Leadtools.Forms.Ocr.OcrEngineType" /></para>
        <para>
                    The <see cref="M:Leadtools.Forms.Ocr.OcrEngineManager.CreateEngine(Leadtools.Forms.Ocr.OcrEngineType,System.Boolean)" /> method lets you create an instance of
                    <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />, loading the corresponding
                    <strong>Leadtools.Forms.Ocr.[EngineName].dll</strong> assembly in a specific
                    manner as follows:
                </para>
        <list type="bullet">
          <item>
            <description>
                            The <see cref="M:Leadtools.Forms.Ocr.OcrEngineManager.CreateEngine(Leadtools.Forms.Ocr.OcrEngineType,System.Boolean)" /> method uses the .NET 2.0
                            <see cref="M:System.Reflection.Assembly.Load(System.String)">Assembly.Load</see> method to load an
                            assembly. You cannot unload this assembly once it has been successfully
                            loaded.
                        </description>
          </item>
          <item>
            <description>
                             If the <strong>useThunkServer</strong> parameter to
                            <see cref="M:Leadtools.Forms.Ocr.OcrEngineManager.CreateEngine(Leadtools.Forms.Ocr.OcrEngineType,System.Boolean)" /> is set to <strong>true</strong>, the
                            internal engine DLL's are loaded using the LEADTOOLS Thunk Server. For
                            more information, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrThunkServer.html">LEADTOOLS OCR
                            Thunk Server</a>.
                        </description>
          </item>
        </list>
        <para>Your application requirements determine how to call "CreateEngine", as
                follows:</para>
        <list type="bullet">
          <item>
            <description>
                            If your application is going to use a single instance of
                            <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />; pass <strong>false</strong> to
                            <strong>useThunkServer</strong>. This is the most common behavior.
                        </description>
          </item>
          <item>
            <description>
                            If your application is going to use multiple threads for OCR, pass
                            <strong>true</strong> to <strong>useThunkServer</strong>. The various
                            OCR engines provided by LEADTOOLS are not thread safe. Passing true
                            causes the LEADTOOLS Thunk Server to load the internal OCR engine in a
                            separate process and unload it when the thread procedure terminates,
                            ensuring thread safety and cleanup.
                        </description>
          </item>
          <item>
            <description>
                            If your application is server-based, pass <strong>true</strong> to
                            <strong>useThunkServer</strong>. Server-based applications usually
                            use a separate thread for each "connection". Creating the OCR engine in
                            a separate process ensures proper thread/process safety and cleanup.
                        </description>
          </item>
          <item>
            <description>
              <strong>IMPORTANT:</strong> The above discussion is for the
                        LEADTOOLS Plus and Professional engines only (the LEADTOOLS Advantage
                        engine supports multi-threading). To ensure thread safety and cleanup, use
                        the LEADTOOLS Thunk Server to load the internal OCR engine in a separate
                        process and unload it when the thread procedure terminates.</description>
          </item>
          <item>
            <description>
                            If your application is server-based, pass <strong>true</strong> to
                            <strong>useThunkServer</strong>. Server-based applications usuallly
                            use a separate thread for each "connection". Creating the OCR engine in
                            a separate process ensures proper thread/process safety and cleanup.
                        </description>
          </item>
          <item>
            <description>
              <strong>IMPORTANT:</strong> The above discussion is for the
                        LEADTOOLS Plus and Professional engines only. The LEADTOOLS Advantage
                        engine supports multi-threading and x64 platform natively and does not
                        require the use of a "thunk server".</description>
          </item>
        </list>
        <para>Either way, you use the LEADTOOLS OCR class library various interfaces,
                classes and structures in the same manner. Your application code should not be
                affected by the way you created the engine.</para>
      </remarks>
      <keywords>OCR|OCR,Engines</keywords>
      <example>
        <para>
          <para>
                    This example will show how to use the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> in a
                    multi-threaded application. It will simultaneously convert four TIF files into
                    PDF.
                </para>
          <para>
                    For an example on how to use the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> in a
                    single-threaded application, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> example.
                </para>
        </para>
        <code lang="VB">   Private Structure MyThraedData
      Public ImageFileName As String
      Public WaitHandle As AutoResetEvent
   End Structure
   Public Sub CreateEngineInAppDomainExample()
      ' Unlock the support needed for LEADTOOLS Plus OCR engine
      RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here")
      RasterSupport.Unlock(RasterSupportType.OcrPlus, "Replace with your own key here")
      RasterSupport.Unlock(RasterSupportType.OcrPlusPdfLeadOutput, "Replace with your own key here")

      ' The image file names we are going to OCR and convert to PDF
      Dim tifFileNames() As String = _
      { _
         LeadtoolsExamples.Common.ImagesPath.Path + "Ocr1.tif", _
         LeadtoolsExamples.Common.ImagesPath.Path + "Ocr2.tif", _
         LeadtoolsExamples.Common.ImagesPath.Path + "Ocr3.tif", _
         LeadtoolsExamples.Common.ImagesPath.Path + "Ocr4.tif" _
      }

      Dim threadCount As Integer = tifFileNames.Length

      ' Create the thread
      Dim threads(threadCount - 1) As Thread
      Dim waitHandles(threadCount - 1) As AutoResetEvent
      For i As Integer = 0 To threadCount - 1
         threads(i) = New Thread(AddressOf MyThreadProc)
         threads(i).Name = "OCR thread + " + i.ToString()

         waitHandles(i) = New AutoResetEvent(False)
      Next

      Console.WriteLine("Starting the threads and waiting...")

      ' Start the threads
      For i As Integer = 0 To threadCount - 1
         Dim threadData As New MyThraedData()
         threadData.ImageFileName = tifFileNames(i)
         threadData.WaitHandle = waitHandles(i)
         threads(i).Start(threadData)
      Next

      ' Wait till all threads are done
      WaitHandle.WaitAll(waitHandles)
      Console.WriteLine("All threads finished")
   End Sub

   Private Sub MyThreadProc(ByVal data As Object)
      ' Grab the data
      Dim threadData As MyThraedData = CType(data, MyThraedData)
      Dim imageFileName As String = threadData.ImageFileName

      ' Show a status message
      Console.WriteLine("Begin: {0}", imageFileName)

      ' Create an instance of the OCR engine using the LEADTOOLS Thunk Server
      Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, True)
         ' Start the engine using default parameters
         ocrEngine.Startup(Nothing, Nothing, Nothing, Nothing)

         ' Get the PDf file name
         Dim pdfFileName As String = Path.ChangeExtension(imageFileName, "pdf")

         ' Create an OCR document
         Using ocrDocument As IOcrDocument = ocrEngine.DocumentManager.CreateDocument()
            ' Add a page to the document
            Dim ocrPage As IOcrPage = ocrDocument.Pages.AddPage(imageFileName, Nothing)

            ' Recognize the page
            ' Note, Recognize can be called without calling AutoZone or manually adding zones. The engine will
            ' check and automatically auto-zones the page
            ocrPage.Recognize(Nothing)

            ' Save the document we have as PDF
            ocrDocument.Save(pdfFileName, DocumentFormat.Pdf, Nothing)
         End Using

         ' Shutdown the engine
         ' Note: calling Dispose will also automatically shutdown the engine if it has been started
         ocrEngine.Shutdown()
      End Using

      Console.WriteLine("End: {0}", imageFileName)

      ' Singal the main thread
      threadData.WaitHandle.Set()
   End Sub</code>
        <code lang="CS">      private struct MyThraedData
      {
         public string ImageFileName;
         public AutoResetEvent WaitHandle;
      }
      public void CreateEngineInAppDomainExample()
      {
         // Unlock the support needed for LEADTOOLS Plus OCR engine
         RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here");
         RasterSupport.Unlock(RasterSupportType.OcrPlus, "Replace with your own key here");
         RasterSupport.Unlock(RasterSupportType.OcrPlusPdfLeadOutput, "Replace with your own key here");

         // The image file names we are going to OCR and convert to PDF
         string[] tifFileNames =
         {
            LeadtoolsExamples.Common.ImagesPath.Path + "Ocr1.tif",
            LeadtoolsExamples.Common.ImagesPath.Path + "Ocr2.tif",
            LeadtoolsExamples.Common.ImagesPath.Path + "Ocr3.tif",
            LeadtoolsExamples.Common.ImagesPath.Path + "Ocr4.tif"
         };

         int threadCount = tifFileNames.Length;

         // Create the thread
         Thread[] threads = new Thread[threadCount];
         AutoResetEvent[] waitHandles = new AutoResetEvent[threadCount];
         for(int i = 0; i &lt; threadCount; i++)
         {
            threads[i] = new Thread(new ParameterizedThreadStart(MyThreadProc));
            threads[i].Name = "OCR thread + " + i.ToString();

            waitHandles[i] = new AutoResetEvent(false);
         }

         Console.WriteLine("Starting the threads and waiting...");

         // Start the threads
         for(int i = 0; i &lt; threadCount; i++)
         {
            MyThraedData threadData = new MyThraedData();
            threadData.ImageFileName = tifFileNames[i];
            threadData.WaitHandle = waitHandles[i];
            threads[i].Start(threadData);
         }

         // Wait till all threads are done
         WaitHandle.WaitAll(waitHandles);
         Console.WriteLine("All threads finished");
      }

      private void MyThreadProc(object data)
      {
         // Grab the data
         MyThraedData threadData = (MyThraedData)data;
         string imageFileName = threadData.ImageFileName;

         // Show a status message
         Console.WriteLine("Begin: {0}", imageFileName);

         // Create an instance of the OCR engine using the LEADTOOLS Thunk Server
         using(IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, true))
         {
            // Start the engine using default parameters
            ocrEngine.Startup(null, null, null, null);

            // Get the PDf file name
            string pdfFileName = Path.ChangeExtension(imageFileName, "pdf");

            // Create an OCR document
            using(IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument())
            {

               // Add a page to the document
               IOcrPage ocrPage = ocrDocument.Pages.AddPage(imageFileName, null);

               // Recognize the page
               // Note, Recognize can be called without calling AutoZone or manually adding zones. The engine will
               // check and automatically auto-zones the page
               ocrPage.Recognize(null);

               // Save the document we have as PDF
               ocrDocument.Save(pdfFileName, DocumentFormat.Pdf, null);
            }

            // Shutdown the engine
            // Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown();
         }

         Console.WriteLine("End: {0}", imageFileName);

         // Singal the main thread
         threadData.WaitHandle.Set();
      }</code>
        <!--OcrEngineManager-->
      </example>
      <docaddon>yes</docaddon>
      <keywords>OCR|OCR,Engines</keywords>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.CreatingAnOcrEngineInstance.html">Creating an OCR Engine Instance</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.StartingAndShuttingDownTheOcrEngine.html">Starting and Shutting Down the OCR Engine</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrThunkServer.html">LEADTOOLS OCR Thunk Server</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.OcrEngineManager.CreateEngine(Leadtools.Forms.Ocr.OcrEngineType,System.Boolean)">
      <summary>
            Creates an instance of <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.
            </summary>
      <returns>The instance of <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> that this method creates.</returns>
      <remarks>
        <para>
          <see cref="M:Leadtools.Forms.Ocr.OcrEngineManager.CreateEngine(Leadtools.Forms.Ocr.OcrEngineType,System.Boolean)" /> should be the first method your application
                    calls into the Leadtools.Forms.Ocr assembly.
                </para>
        <para>
                    The <see cref="M:Leadtools.Forms.Ocr.OcrEngineManager.CreateEngine(Leadtools.Forms.Ocr.OcrEngineType,System.Boolean)" /> method uses the .NET 2.0
                    <see cref="M:System.Reflection.Assembly.Load(System.String)">Assembly.Load</see> method to load the
                    LEADTOOLS OCR assembly for the engine type. You cannot unload this assembly
                    once it has been successfully loaded.
                </para>
        <para>
                    The various OCR engines provided by LEADTOOLS (except for the LEADTOOLS
                    Advantage engine) are not thread safe. If your application requires multiple
                    instances of <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> in separate threads or your
                    application is server-based, then set the
                    <paramref name="useThunkServer" /> to <strong>true</strong>. The
                    LEADTOOLS thunk server will be used in the background to ensure proper
                    thread/process safety and cleanup. For more information, refer to
                    <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrThunkServer.html">LEADTOOLS OCR Thunk Server</a>.
                </para>
        <para>
          <strong>IMPORTANT:</strong> The above discussion is for the LEADTOOLS Plus
                and Professional engines only. The LEADTOOLS Advantage engine supports
                multi-threading and x64 platform natively and does not require the use of a "thunk
                server".</para>
        <para>
                    The <paramref name="engineType" /> parameter determines which assembly
                    will be loaded. For more information, refer to
                    <see cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your
                    Application</see>.
                </para>
        <para>
                    The <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> interface also implements
                    <see cref="T:System.IDisposable" />. Dispose of the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
                    instance when you are done using it.
                </para>
      </remarks>
      <keywords>OCR,Engines</keywords>
      <example>
        <para>This example will use the LEADTOOLS OCR Plus engine to OCR an image and save it as a PDF file.</para>
        <code lang="VB">   Public Sub CreateEngineExample()
      ' Unlock the support needed for LEADTOOLS Plus OCR engine
      RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here")
      RasterSupport.Unlock(RasterSupportType.OcrPlus, "Replace with your own key here")
      RasterSupport.Unlock(RasterSupportType.OcrPlusPdfLeadOutput, "Replace with your own key here")
      ' Create an instance of the engine
      Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, False)
         ' Start the engine using default parameters
         ocrEngine.Startup(Nothing, Nothing, Nothing, Nothing)

         Dim tifFileName As String = LeadtoolsExamples.Common.ImagesPath.Path + "Ocr1.tif"
         Dim pdfFileName As String = LeadtoolsExamples.Common.ImagesPath.Path + "Ocr1.pdf"

         ' Create an OCR document
         Using ocrDocument As IOcrDocument = ocrEngine.DocumentManager.CreateDocument()
            ' Add a page to the document
            Dim ocrPage As IOcrPage = ocrDocument.Pages.AddPage(tifFileName, Nothing)

            ' Recognize the page
            ' Note, Recognize can be called without calling AutoZone or manually adding zones. The engine will
            ' check and automatically auto-zones the page
            ocrPage.Recognize(Nothing)

            ' Save the document we have as PDF
            ocrDocument.Save(pdfFileName, DocumentFormat.Pdf, Nothing)
         End Using

         ' Shutdown the engine
         ' Note: calling Dispose will also automatically shutdown the engine if it has been started
         ocrEngine.Shutdown()
      End Using
   End Sub</code>
        <code lang="CS">      public void CreateEngineExample()
      {
         // Unlock the support needed for LEADTOOLS Plus OCR engine
         RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here");
         RasterSupport.Unlock(RasterSupportType.OcrPlus, "Replace with your own key here");
         RasterSupport.Unlock(RasterSupportType.OcrPlusPdfLeadOutput, "Replace with your own key here");
         // Create an instance of the engine
         using(IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, false))
         {
            // Start the engine using default parameters
            ocrEngine.Startup(null, null, null, null);

            string tifFileName = LeadtoolsExamples.Common.ImagesPath.Path + "Ocr1.tif";
            string pdfFileName = LeadtoolsExamples.Common.ImagesPath.Path + "Ocr1.pdf";

            // Create an OCR document
            using(IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument())
            {
               // Add a page to the document
               IOcrPage ocrPage = ocrDocument.Pages.AddPage(tifFileName, null);

               // Recognize the page
               // Note, Recognize can be called without calling AutoZone or manually adding zones. The engine will
               // check and automatically auto-zones the page
               ocrPage.Recognize(null);

               // Save the document we have as PDF
               ocrDocument.Save(pdfFileName, DocumentFormat.Pdf, null);
            }

            // Shutdown the engine
            // Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown();
         }
      }</code>
        <!--OcrEngineManager.CreateEngine-->
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.CreatingAnOcrEngineInstance.html">Creating an OCR Engine Instance</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.StartingAndShuttingDownTheOcrEngine.html">Starting and Shutting Down the OCR Engine</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrThunkServer.html">LEADTOOLS OCR Thunk Server</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <param name="engineType">The engine type to use.</param>
      <param name="useThunkServer">
        <strong>true</strong> to use the LEADTOOLS thunk server when loading the internal engine, otherwise, <strong>false</strong>.</param>
    </member>
    <member name="T:Leadtools.Forms.Ocr.OcrWord">
      <summary>
            Recognized word data.
            </summary>
      <keywords>Recognized words</keywords>
      <remarks>
        <para>You can get the recognized words of a zone with the <see cref="M:Leadtools.Forms.Ocr.IOcrZoneCharacters.GetWords(System.Int32,System.Int32,Leadtools.Forms.LogicalUnit)">IOcrZoneCharacters.GetWords</see> method. This is a helper method that iterate
            through the <see cref="T:Leadtools.Forms.Ocr.OcrCharacter" /> collection of the zone and constructs the words based on the <see cref="P:Leadtools.Forms.Ocr.OcrCharacter.Position">OcrCharacter.Position</see> flags.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.SetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrZoneCharacters.GetWords(System.Int32,System.Int32,Leadtools.Forms.LogicalUnit)">IOcrZoneCharacters.GetWords</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized">IOcrPage.IsRecognized</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrCharacter" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrWord.Value">
      <summary>
            Gets or sets the word value.
            </summary>
      <value>A <see cref="T:System.String" /> that indicate the word value.</value>
      <remarks>
        <para>You can get the recognized words of a zone with the <see cref="M:Leadtools.Forms.Ocr.IOcrZoneCharacters.GetWords(System.Int32,System.Int32,Leadtools.Forms.LogicalUnit)">IOcrZoneCharacters.GetWords</see> method. This is a helper method that iterates
            through the <see cref="T:Leadtools.Forms.Ocr.OcrCharacter" /> collection of the zone and constructs the words based on the <see cref="P:Leadtools.Forms.Ocr.OcrCharacter.Position">OcrCharacter.Position</see> flags.</para>
        <para>The word value is the collection of characters (<see cref="P:Leadtools.Forms.Ocr.OcrCharacter.Code">OcrCharacter.Code</see>) from <see cref="P:Leadtools.Forms.Ocr.OcrWord.FirstCharacterIndex" /> to
            <see cref="P:Leadtools.Forms.Ocr.OcrWord.LastCharacterIndex" /> into the <see cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" /> collection.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.SetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrZoneCharacters.GetWords(System.Int32,System.Int32,Leadtools.Forms.LogicalUnit)">IOcrZoneCharacters.GetWords</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized">IOcrPage.IsRecognized</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrCharacter" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrWord.Bounds">
      <summary>
            Gets or sets the word coordinates in logical units.
            </summary>
      <value>A <see cref="T:Leadtools.Forms.LogicalRectangle" /> containing the word coordinates in logical units.</value>
      <remarks>
        <para>You can get the recognized words of a zone with the <see cref="M:Leadtools.Forms.Ocr.IOcrZoneCharacters.GetWords(System.Int32,System.Int32,Leadtools.Forms.LogicalUnit)">IOcrZoneCharacters.GetWords</see> method. This is a helper method that iterate
            through the <see cref="T:Leadtools.Forms.Ocr.OcrCharacter" /> collection of the zone and constructs the words based on the <see cref="P:Leadtools.Forms.Ocr.OcrCharacter.Position">OcrCharacter.Position</see> flags.</para>
        <para>The word coordinates is the sum of the coordinates of the characters (<see cref="P:Leadtools.Forms.Ocr.OcrCharacter.Bounds">OcrCharacter.Bounds</see>) from <see cref="P:Leadtools.Forms.Ocr.OcrWord.FirstCharacterIndex" /> to
            <see cref="P:Leadtools.Forms.Ocr.OcrWord.LastCharacterIndex" /> into the <see cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" /> collection.</para>
        <para>The unit of this logical rectangle is the same as <paramref name="unit" /> passed to <see cref="M:Leadtools.Forms.Ocr.IOcrZoneCharacters.GetWords(System.Int32,System.Int32,Leadtools.Forms.LogicalUnit)">IOcrZoneCharacters.GetWords</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.SetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrZoneCharacters.GetWords(System.Int32,System.Int32,Leadtools.Forms.LogicalUnit)">IOcrZoneCharacters.GetWords</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized">IOcrPage.IsRecognized</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrCharacter" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrWord.FirstCharacterIndex">
      <summary>
            Gets or sets the first index of word value in the <see cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />.
            </summary>
      <value>The zero-based index of the first character that forms this word in the <see cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" /> used to create this <see cref="T:Leadtools.Forms.Ocr.OcrWord" />.</value>
      <remarks>
        <para>You can get the recognized words of a zone with the <see cref="M:Leadtools.Forms.Ocr.IOcrZoneCharacters.GetWords(System.Int32,System.Int32,Leadtools.Forms.LogicalUnit)">IOcrZoneCharacters.GetWords</see> method. This is a helper method that iterate
            through the <see cref="T:Leadtools.Forms.Ocr.OcrCharacter" /> collection of the zone and constructs the words based on the <see cref="P:Leadtools.Forms.Ocr.OcrCharacter.Position">OcrCharacter.Position</see> flags.</para>
        <para>You can get extra information about the characters in this word by iterating through the <see cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" /> collection with starting index of
            <see cref="P:Leadtools.Forms.Ocr.OcrWord.FirstCharacterIndex" /> and ending index of <see cref="P:Leadtools.Forms.Ocr.OcrWord.LastCharacterIndex" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.SetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrZoneCharacters.GetWords(System.Int32,System.Int32,Leadtools.Forms.LogicalUnit)">IOcrZoneCharacters.GetWords</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized">IOcrPage.IsRecognized</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrCharacter" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrWord.LastCharacterIndex">
      <summary>
            Gets or sets the last index of word value in the <see cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />.
            </summary>
      <value>The zero-based index of the last character that forms this word in the <see cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" /> used to create this <see cref="T:Leadtools.Forms.Ocr.OcrWord" />.</value>
      <remarks>
        <para>You can get the recognized words of a zone with the <see cref="M:Leadtools.Forms.Ocr.IOcrZoneCharacters.GetWords(System.Int32,System.Int32,Leadtools.Forms.LogicalUnit)">IOcrZoneCharacters.GetWords</see> method. This is a helper method that iterate
            through the <see cref="T:Leadtools.Forms.Ocr.OcrCharacter" /> collection of the zone and constructs the words based on the <see cref="P:Leadtools.Forms.Ocr.OcrCharacter.Position">OcrCharacter.Position</see> flags.</para>
        <para>You can get extra information about the characters in this word by iterating through the <see cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" /> collection with starting index of
            <see cref="P:Leadtools.Forms.Ocr.OcrWord.FirstCharacterIndex" /> and ending index of <see cref="P:Leadtools.Forms.Ocr.OcrWord.LastCharacterIndex" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.SetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrZoneCharacters.GetWords(System.Int32,System.Int32,Leadtools.Forms.LogicalUnit)">IOcrZoneCharacters.GetWords</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized">IOcrPage.IsRecognized</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrCharacter" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="T:Leadtools.Forms.Ocr.OcrProgressCallback">
      <summary>
            Monitors progress of OCR operations.
            </summary>
      <keywords>OCR Progress</keywords>
      <param name="data">An instance of the <see cref="T:Leadtools.Forms.Ocr.IOcrProgressData" /> interface containing the progress callback data.</param>
      <remarks>
        <para>The OCR engine will continuously invoke the callback procedure during the different OCR operations with an instance of <see cref="T:Leadtools.Forms.Ocr.IOcrProgressData" /> providing
            the current processing stage and a percentage indicator value. Use this function to indicate progress of application operations.</para>
        <para>The callback can set the <see cref="P:Leadtools.Forms.Ocr.IOcrProgressData.Status">IOcrProgressData.Status</see> property at any time to <see cref="T:Leadtools.Forms.Ocr.OcrProgressStatus">OcrProgressStatus.Abort</see>
            to abort the OCR process and cancel all pending operations.</para>
      </remarks>
      <example>
        <para>This example will display a simple "Processing" Windows Forms dialog that can be used to show OCR operation progress as well as allow the user to abort the current operation. You
            can plug this dialog into your application and call it in response to user-interface commands that correspond to OCR operations.</para>
        <code lang="VB">   ' Text writer to save the log to
   Private _log As StreamWriter
   Public Sub OcrProgressCallbackExample()
      ' Unlock the support needed for LEADTOOLS Plus OCR engine
      RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here")
      RasterSupport.Unlock(RasterSupportType.OcrPlus, "Replace with your own key here")
      RasterSupport.Unlock(RasterSupportType.OcrPlusPdfLeadOutput, "Replace with your own key here")

      Dim logFileName As String = LeadtoolsExamples.Common.ImagesPath.Path + "log.txt"
      Dim multiPageTifFileName As String = LeadtoolsExamples.Common.ImagesPath.Path + "Ocr.tif"
      Dim pdfFileName As String = LeadtoolsExamples.Common.ImagesPath.Path + "Ocr1.pdf"

      ' Create the log text writer
      _log = File.CreateText(logFileName)

      ' Create an instance of the engine
      Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, False)
         ' Start the engine using default parameters
         ocrEngine.Startup(Nothing, Nothing, Nothing, Nothing)

         ' Create an OCR document
         Using ocrDocument As IOcrDocument = ocrEngine.DocumentManager.CreateDocument()
            ' Add this image to the document
            _log.WriteLine("Adding the pages")
            _log.WriteLine("********************************")
            ocrDocument.Pages.AddPages(multiPageTifFileName, 1, -1, AddressOf MyOcrProgressCallback)

            ' Auto-recognize the zones in all the pages
            _log.WriteLine("Auto-zoning")
            _log.WriteLine("********************************")
            ocrDocument.Pages.AutoZone(AddressOf MyOcrProgressCallback)

            ' Recognize it and save it as PDF
            _log.WriteLine("Recognizing")
            _log.WriteLine("********************************")
            ocrDocument.Pages.Recognize(AddressOf MyOcrProgressCallback)
            _log.WriteLine("Saving to PDF")
            _log.WriteLine("********************************")
            ocrDocument.Save(pdfFileName, DocumentFormat.Pdf, AddressOf MyOcrProgressCallback)
         End Using

         ' Shutdown the engine
         ' Note: calling Dispose will also automatically shutdown the engine if it has been started
         ocrEngine.Shutdown()
      End Using

      _log.WriteLine("********************************")
      _log.WriteLine("Complete")
      _log.Flush()
      _log.Close()
   End Sub

   Private Sub MyOcrProgressCallback(ByVal data As IOcrProgressData)
      If (Data.Percentage = 0) Then
         _log.WriteLine("--------------------------")
      End If

      _log.WriteLine("Page:{0}({1}:{2}) {3}% Operation:{4}", _
         data.CurrentPageIndex.ToString("00"), _
         data.FirstPageIndex.ToString("00"), _
         data.LastPageIndex.ToString("00"), _
         data.Percentage.ToString("000"), _
         data.Operation)
   End Sub</code>
        <code lang="CS">      // Text writer to save the log to
      private StreamWriter _log;
      public void OcrProgressCallbackExample()
      {
         // Unlock the support needed for LEADTOOLS Plus OCR engine
         RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here");
         RasterSupport.Unlock(RasterSupportType.OcrPlus, "Replace with your own key here");
         RasterSupport.Unlock(RasterSupportType.OcrPlusPdfLeadOutput, "Replace with your own key here");

         string logFileName = LeadtoolsExamples.Common.ImagesPath.Path + "log.txt";
         string multiPageTifFileName = LeadtoolsExamples.Common.ImagesPath.Path + "Ocr.tif";
         string pdfFileName = LeadtoolsExamples.Common.ImagesPath.Path + "Ocr1.pdf";

         // Create the log text writer
         _log = File.CreateText(logFileName);

         // Create an instance of the engine
         using(IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, false))
         {
            // Start the engine using default parameters
            ocrEngine.Startup(null, null, null, null);

            // Create an OCR document
            using(IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument())
            {
               // Add this image to the document
               _log.WriteLine("Adding the pages");
               _log.WriteLine("********************************");
               ocrDocument.Pages.AddPages(multiPageTifFileName, 1, -1, new OcrProgressCallback(MyOcrProgressCallback));

               // Auto-recognize the zones in all the pages
               _log.WriteLine("Auto-zoning");
               _log.WriteLine("********************************");
               ocrDocument.Pages.AutoZone(new OcrProgressCallback(MyOcrProgressCallback));

               // Recognize it and save it as PDF
               _log.WriteLine("Recognizing");
               _log.WriteLine("********************************");
               ocrDocument.Pages.Recognize(new OcrProgressCallback(MyOcrProgressCallback));
               _log.WriteLine("Saving to PDF");
               _log.WriteLine("********************************");
               ocrDocument.Save(pdfFileName, DocumentFormat.Pdf, new OcrProgressCallback(MyOcrProgressCallback));
            }

            // Shutdown the engine
            // Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown();
         }

         _log.WriteLine("********************************");
         _log.WriteLine("Complete");
         _log.Flush();
         _log.Close();
      }

      private void MyOcrProgressCallback(IOcrProgressData data)
      {
         if(data.Percentage == 0)
            _log.WriteLine("--------------------------");

         _log.WriteLine("Page:{0}({1}:{2}) {3}% Operation:{4}",
            data.CurrentPageIndex.ToString("00"),
            data.FirstPageIndex.ToString("00"),
            data.LastPageIndex.ToString("00"),
            data.Percentage.ToString("000"),
            data.Operation);
      }</code>
        <!--OcrProgressCallback-->
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrProgressData" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrProgressOperation" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrProgressStatus" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="T:Leadtools.Forms.Ocr.OcrOmrFrameDetectionMethod">
      <summary>
            The OMR frame detection mode.
            </summary>
      <remarks>
        <para>OMR stands for Optical Mark Recognition. For more information refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.UsingOmrInLeadtoolsDotNetOcr.html">Using OMR in LEADTOOLS .NET OCR</a>.</para>
        <para>Frames stand for the check boxes that may exist around OMR fields. You can set the LEADTOOLS OCR engine to automatically detect these frames and take them into consideration
            when recognizing OMR fields. If you know whether the OMR fields contain frames, set the <see cref="P:Leadtools.Forms.Ocr.IOcrOmrOptions.FrameDetectionMethod">IOcrOmrOptions.FrameDetectionMethod</see>
            accordingly to increase recognition performance and accuracy.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrOmrOptions" />.</example>
      <isnew>5/8/2009</isnew>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrOmrOptions" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.UsingOmrInLeadtoolsDotNetOcr.html">Using OMR in LEADTOOLS .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.UnlockingSpecialLEADFeatures">Unlocking Special LEAD Features</seealso>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrOmrFrameDetectionMethod.Auto">
      <summary>
            Automatically detect whether there is a printed frame (e.g. check box).
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrOmrFrameDetectionMethod.WithoutFrame">
      <summary>
            The OMR zone is inside the printed frame, so the printed frame is not visible.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrOmrFrameDetectionMethod.WithFrame">
      <summary>
            The OMR zone is outside the printed frame, so the printed frame is visible.
            </summary>
    </member>
    <member name="T:Leadtools.Forms.Ocr.OcrZoneFillMethod">
      <summary>
            Possible content types of the zones
            </summary>
      <remarks>
        <para>A fill method must have been assigned to all zones in their <see cref="P:Leadtools.Forms.Ocr.OcrZone.FillMethod">OcrZone.FillMethod</see> properties before processing.</para>
        <para>Not all fill methods ara available to all engines. To determine which fill methods are available use
            <see cref="M:Leadtools.Forms.Ocr.IOcrZoneManager.GetSupportedFillMethods">IOcrZoneManager.GetSupportedFillMethods</see>. Trying to set a fill method not available to the engine will cause an error.</para>
        <para>Each zone needs to be associated with a <see cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule" /> and <see cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod" />. This is needed because some recognition modules support more
            than one fill method, and some fill methods are accepted by more than one recognition module.</para>
        <para>It is important to ensure that the recognition module/fill method pair is suitable. For more information on permitted recognition module/fill method pairs refer to
            <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.AnOverviewOfOcrRecognitionModules.html">An Overview of OCR Recognition Modules</a>.</para>
        <para>Note that the auto-zoning <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPage~AutoZone.html">IOcrPage.AutoZone</a> will create the zones with the value
            <see cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod">OcrZoneFillMethod.Default</see> in their <see cref="P:Leadtools.Forms.Ocr.OcrZone.FillMethod">OcrZone.FillMethod</see> properties.</para>
      </remarks>
      <example> For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see>.</example>
      <docaddon>yes</docaddon>
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPage~AutoZone.html">IOcrPage.AutoZone</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.AnOverviewOfOcrRecognitionModules.html">An Overview of OCR Recognition Modules</seealso>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneFillMethod.Default">
      <summary>
            Default zone filling method. The <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone(OcrProgressCallback callback)</see> method will set all the fill method of the
            zones found to this value. You can set the zone filling method to another type by using
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrZoneParser,Leadtools.Forms.Ocr.OcrZoneFillMethod,Leadtools.Forms.LogicalUnit,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone(OcrZoneParser zoneParser, OcrZoneFillMethod fillMethod, LogicalUnit zonesUnit, OcrProgressCallback callback)</see>
            with <paramref name="fillMethod" /> set the zone type desired.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneFillMethod.OmniFont">
      <summary>
            Omnifont zone filling method. It denotes a machine printed text with any typeface which is not too stylized.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneFillMethod.Omr">
      <summary>
            Optical mark zone filling method. It denotes a possible marking within the zone.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneFillMethod.Icr">
      <summary>
            Handprinted zone filling method.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneFillMethod.DraftDotMatrix9">
      <summary>
            9-pin draft dot-matrix zone filling method. It denotes a 9-pin draft dot-matrix printout.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneFillMethod.DraftDotMatrix24">
      <summary>
            24-pin draft dot-matrix zone filling method. It denotes a 24-pin draft dot-matrix printout.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneFillMethod.OcrA">
      <summary>
            OCR-A zone filling method.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneFillMethod.OcrB">
      <summary>
            OCR-B zone filling method.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneFillMethod.Micr">
      <summary>
            Magnetic ink character filling method. Mostly used in bank checks.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneFillMethod.DotDigit">
      <summary>
            Dot-digit zone filling method.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneFillMethod.DashDigit">
      <summary>
            Dash-digit zone filling method.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneFillMethod.NoRecognition">
      <summary>
            No recognition will be attempted.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneFillMethod.Asian">
      <summary>
            The zone contains Asian characters.
            </summary>
    </member>
    <member name="T:Leadtools.Forms.Ocr.OcrZoneParser">
      <summary>
            The zone parser used when automatically performing page-layout decomposition (auto-zoning).
            </summary>
      <remarks>
        <para>The zone parser is used when automatically performing page-layout decomposition (auto-zoning) with the
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrZoneParser,Leadtools.Forms.Ocr.OcrZoneFillMethod,Leadtools.Forms.LogicalUnit,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone(OcrZoneParser zoneParser, OcrZoneFillMethod fillMethod, LogicalUnit zonesUnit, OcrProgressCallback callback)</see>
            method.</para>
        <para>Note: <see cref="T:Leadtools.Forms.Ocr.OcrZoneParser">OcrZoneParser.Leadtools</see> is not supported in this version of LEADTOOLS.</para>
      </remarks>
      <example> For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see>.</example>
      <docaddon>yes</docaddon>
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPage~AutoZone.html">IOcrPage.AutoZone</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneParser.Default">
      <summary>
            The OCR engine will determine at runtime which algorithm will be applied. It depends from trade-off and language setting.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneParser.Legacy">
      <summary>
            Simple page decomposition. It is faster but less accurate than <see cref="T:Leadtools.Forms.Ocr.OcrZoneParser">OcrZoneParser.Standard</see>.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneParser.Standard">
      <summary>
            The most accurate page parsing algorithm.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneParser.Fast">
      <summary>
            This algorithm can be treated as a simplified variant of <see cref="T:Leadtools.Forms.Ocr.OcrZoneParser">OcrZoneParser.Legacy</see>. This algorithm does not try to find tables on the page.
            It is the fastest (but least accurate) parsing algorithm available. Use it only for simple page parsing tasks.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneParser.Leadtools">
      <summary>
            Use LEADTOOLS MRC zoning. This option is not supported in this version of LEADTOOLS.
            </summary>
    </member>
    <member name="T:Leadtools.Forms.Ocr.IOcrPage">
      <summary>
            Defines an image page in an OCR document.
            </summary>
      <remarks>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> defines a page currently added in the OCR engine.
                    Each page contains the raster image used to create it (the image used when the
                    page is loaded or added) and a group of OCR zones for the page either added
                    manually or through auto-zoning.
                </para>
        <para>
                    You can access the pages inside the OCR document
                    (<see cref="T:Leadtools.Forms.Ocr.IOcrDocument" />) through the
                    <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.Pages">IOcrDocument.Pages</see> property. The value of
                    this property is a <see cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" /> interface. This
                    interface implements standard .NET <see cref="T:System.Collections.Generic.ICollection`1" />,
                    <see cref="T:System.Collections.Generic.IList`1" />, and <see cref="T:System.Collections.Generic.IEnumerable`1" /> interfaces and
                    hence, you can use the member of these interfaces to add, remove, get, set and
                    iterate through the different pages of the document.
                </para>
        <para>
                    You cannot create <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> objects directly. Instead, add
                    pages to the engine through the various
                    <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPageCollection~AddPage.html">
                    AddPage</a>,
                    <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPageCollection~AddPages.html">
                    AddPages</a>,
                    <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPageCollection~InsertPage.html">
                    InsertPage</a> and
                    <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPageCollection~InsertPages.html">
                    InsertPages</a> methods of the <see cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" /> interface.
                    Once a page is added, access it by index to get the <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />
                    object associated with it.
                </para>
        <para>
                    Each page contains a collection of OCR zones. This collection can be accessed
                    with the <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones" /> member. This member implements the
                    <see cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" /> interface which also implements the same
                    standard .NET collections interfaces as <see cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />.
                    Hence you can use <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones" /> to add, remove, get, set and iterate
                    through the various zones in the page.
                </para>
        <para>
                    After adding a page to an OCR document and optionally manipulating the zones
                    inside it, call the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" /> or
                    <see cref="M:Leadtools.Forms.Ocr.IOcrPage.RecognizeText(Leadtools.Forms.Ocr.OcrProgressCallback)" /> methods to collect the recognition data of the
                    page. This data is stored internally in the page and can later be saved to one
                    of the many document file formats supported by the engine such as PDF or
                    Microsoft Word.
                </para>
        <para>
                    After a page is recognized, examine and modify the recognition data (characters
                    and words) through the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters" /> and
                    <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)" /> methods.
                </para>
        <para>
                    Once an <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> object is obtained on a page, you can do
                    the following:
                </para>
        <list type="bullet">
          <item>
            <description>
                            Get information regarding the page image, such its
                            <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Width" />, <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Height" />,
                            <see cref="P:Leadtools.Forms.Ocr.IOcrPage.BitsPerPixel" /> and the DPI (<see cref="P:Leadtools.Forms.Ocr.IOcrPage.DpiX" />
                            and <see cref="P:Leadtools.Forms.Ocr.IOcrPage.DpiY" />) values.
                        </description>
          </item>
          <item>
            <description>
                            Get a <see cref="T:Leadtools.RasterImage" /> object with the
                            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRasterImage" /> method that represents the page
                            raster image data. Manipulate this image with other parts of LEADTOOLS
                            such as the various image processing commands or show it in the Windows
                            Forms viewer. You can also use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRasterImage(Leadtools.RasterImage)" /> to
                            update the page raster image data.
                        </description>
          </item>
        </list>
        <para>Note, the LEADTOOLS Plus OCR engine does not support image sizes greater than
                A3 paper size (11.7 by 16.5 inches at 300 dpi). Attempting to add an image that has
                a size greater than A3 will result in an error. For larger documents, you must
                first resize the image before adding it to the LEADTOOLS Plus OCR engine. The
                Professional and Advantage engines do not have a restriction on the image
                size.</para>
      </remarks>
      <keywords>OCR,Pages|OCR,Recognition|OCR,Zoning|Pages</keywords>
      <example>
        <para>This example creates an OCR document and adds a page to it, displays various
            information about the page and then saves it as PDF file.</para>
        <code lang="VB">   Public Sub OcrPageExample()
      ' Unlock the support needed for LEADTOOLS Plus OCR engine
      RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here")
      RasterSupport.Unlock(RasterSupportType.OcrPlus, "Replace with your own key here")
      RasterSupport.Unlock(RasterSupportType.OcrPlusPdfLeadOutput, "Replace with your own key here")
      Dim tifFileName As String = LeadtoolsExamples.Common.ImagesPath.Path + "Ocr1.tif"
      Dim pdfFileName As String = LeadtoolsExamples.Common.ImagesPath.Path + "Ocr1.pdf"

      ' Create an instance of the engine
      Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, False)
         ' Start the engine using default parameters
         ocrEngine.Startup(Nothing, Nothing, Nothing, Nothing)

         ' Create an OCR document
         Using ocrDocument As IOcrDocument = ocrEngine.DocumentManager.CreateDocument()
            ' Add this image to the document
            Dim ocrPage As IOcrPage = ocrDocument.Pages.AddPage(tifFileName, Nothing)

            ' Auto-recognize the zones in the page
            ocrPage.AutoZone(Nothing)

            ' Show its information
            Console.WriteLine("Size: {0} by {1} pixels", ocrPage.Width, ocrPage.Height)
            Console.WriteLine("Resolution: {0} by {1} dots/inch", ocrPage.DpiX, ocrPage.DpiX)
            Console.WriteLine("Bits/Pixel: {0}, Bytes/Line: {1}", ocrPage.BitsPerPixel, ocrPage.BytesPerLine)

            Dim palette() As Byte = ocrPage.GetPalette()
            Dim paletteEntries As Integer
            If (Not palette Is Nothing) Then
               paletteEntries = palette.Length \ 3
            Else
               paletteEntries = 0
            End If

            Console.WriteLine("Number of entries in the palette: {0}", paletteEntries)
            Console.WriteLine("Original format of this page: {0}", ocrPage.OriginalFormat)
            Console.WriteLine("Has this page been recognized? : {0}", ocrPage.IsRecognized)
            ShowZonesInfo(ocrPage)

            ' Recognize it and save it as PDF
            ocrPage.Recognize(Nothing)
            ocrDocument.Save(pdfFileName, DocumentFormat.Pdf, Nothing)
         End Using

         ' Shutdown the engine
         ' Note: calling Dispose will also automatically shutdown the engine if it has been started
         ocrEngine.Shutdown()
      End Using
   End Sub

   Private Sub ShowZonesInfo(ByVal ocrPage As IOcrPage)
      Console.WriteLine("Zones:")
      For Each ocrZone As OcrZone In ocrPage.Zones
         Dim index As Integer = ocrPage.Zones.IndexOf(ocrZone)
         Console.WriteLine("Zone index: {0}", index)
         Console.WriteLine("  Id                  {0}", ocrZone.Id)
         Console.WriteLine("  Bounds              {0}", ocrZone.Bounds)
         Console.WriteLine("  ZoneType            {0}", ocrZone.ZoneType)
         Console.WriteLine("  FillMethod:         {0}", ocrZone.FillMethod)
         Console.WriteLine("  RecognitionModule:  {0}", ocrZone.RecognitionModule)
         Console.WriteLine("  CharacterFilters:   {0}", ocrZone.CharacterFilters)
         Console.WriteLine("----------------------------------")
      Next
   End Sub</code>
        <code lang="CS">      public void OcrPageExample()
      {
         // Unlock the support needed for LEADTOOLS Plus OCR engine
         RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here");
         RasterSupport.Unlock(RasterSupportType.OcrPlus, "Replace with your own key here");
         RasterSupport.Unlock(RasterSupportType.OcrPlusPdfLeadOutput, "Replace with your own key here");
         string tifFileName = LeadtoolsExamples.Common.ImagesPath.Path + "Ocr1.tif";
         string pdfFileName = LeadtoolsExamples.Common.ImagesPath.Path + "Ocr1.pdf";

         // Create an instance of the engine
         using(IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, false))
         {
            // Start the engine using default parameters
            ocrEngine.Startup(null, null, null, null);

            // Create an OCR document
            using(IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument())
            {
               // Add this image to the document
               IOcrPage ocrPage = ocrDocument.Pages.AddPage(tifFileName, null);

               // Auto-recognize the zones in the page
               ocrPage.AutoZone(null);

               // Show its information
               Console.WriteLine("Size: {0} by {1} pixels", ocrPage.Width, ocrPage.Height);
               Console.WriteLine("Resolution: {0} by {1} dots/inch", ocrPage.DpiX, ocrPage.DpiX);
               Console.WriteLine("Bits/Pixel: {0}, Bytes/Line: {1}", ocrPage.BitsPerPixel, ocrPage.BytesPerLine);

               byte[] palette = ocrPage.GetPalette();
               int paletteEntries;
               if(palette != null)
                  paletteEntries = palette.Length / 3;
               else
                  paletteEntries = 0;

               Console.WriteLine("Number of entries in the palette: {0}", paletteEntries);
               Console.WriteLine("Original format of this page: {0}", ocrPage.OriginalFormat);
               Console.WriteLine("Has this page been recognized? : {0}", ocrPage.IsRecognized);
               ShowZonesInfo(ocrPage);

               // Recognize it and save it as PDF
               ocrPage.Recognize(null);
               ocrDocument.Save(pdfFileName, DocumentFormat.Pdf, null);
            }

            // Shutdown the engine
            // Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown();
         }
      }

      private void ShowZonesInfo(IOcrPage ocrPage)
      {
         Console.WriteLine("Zones:");
         foreach(OcrZone ocrZone in ocrPage.Zones)
         {
            int index = ocrPage.Zones.IndexOf(ocrZone);
            Console.WriteLine("Zone index: {0}", index);
            Console.WriteLine("  Id                  {0}", ocrZone.Id);
            Console.WriteLine("  Bounds              {0}", ocrZone.Bounds);
            Console.WriteLine("  ZoneType            {0}", ocrZone.ZoneType);
            Console.WriteLine("  FillMethod:         {0}", ocrZone.FillMethod);
            Console.WriteLine("  RecognitionModule:  {0}", ocrZone.RecognitionModule);
            Console.WriteLine("  CharacterFilters:   {0}", ocrZone.CharacterFilters);
            Console.WriteLine("----------------------------------");
         }
      }</code>
        <!--IOcrPage-->
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.WorkingWithOcrPages.html">Working with OCR Pages</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPage.GetPalette">
      <summary>
            Gets the palette used by this page.
            </summary>
      <returns>An array of bytes that contain the palette used by this page or a <strong>null</strong> (<strong>Nothing</strong> in Visual Basic) if the page does not contain a palette.</returns>
      <remarks>
        <para>The page contains a palette if the value of <see cref="P:Leadtools.Forms.Ocr.IOcrPage.BitsPerPixel" /> is less than or equal to 8.</para>
        <para>The palette returned from this method is an array of bytes in the following format: <c>Red0, Green0, Blue0, Red1, Green1, Blue1 ... RedN, GreenN, BlueN</c>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPage.GetRasterImage">
      <summary>
            Gets the image data of this page as a raster image.
            </summary>
      <returns>A <see cref="T:Leadtools.RasterImage" /> object that represent the image data of this page.</returns>
      <remarks>
        <para>Once you add a page to an OCR document, the image data used to create the page is copied and stored inside the OCR engine even if the original object used to create the page
            was a <see cref="T:Leadtools.RasterImage" /> object. To get a <see cref="T:Leadtools.RasterImage" /> that represents this page, use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRasterImage" />.</para>
        <para>The <see cref="T:Leadtools.RasterImage" /> object that this method returns contains a copy of the page image data. Any modifications you make to the <see cref="T:Leadtools.RasterImage" /> object
            will not affect the page. To update the page image data, you must call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRasterImage(Leadtools.RasterImage)" />. Since the <see cref="T:Leadtools.RasterImage" /> object is a copy, you must dispose it by
            calling its <see cref="M:Leadtools.RasterImage.Dispose">RasterImage.Dispose</see> method once you are done using it.</para>
        <para>Once you obtain a <see cref="T:Leadtools.RasterImage" /> object for this page, you can use it with other parts of LEADTOOLS, for example, you can set it in the <see cref="T:Leadtools.WinForms.RasterImageViewer" /> or
            <see cref="T:Leadtools.WinForms.RasterPictureBox" /> controls for viewing inside your Windows Forms-based application. You can also perform your own image processing on the page as follows:</para>
        <para>
          <code>
            // Flip the 2nd page added to the OCR document
            // Get the page (index is zero-based)
            IOcrPage page = ocrDocument.Pages[1];
            // Get a RasterImage object that represents this page
            Leadtools.RasterImage image = page.GetRasterImage();
            // Flip it vertically
            Leadtools.ImageProcessing.FlipCommand flip = new Leadtools.ImageProcessing.FlipCommand();
            flip.Horizontal = false;
            flip.Run(image);
            // Set it back into the page
            page.SetRasterImage(image);
            // Dispose the image
            image.Dispose();
            </code>
        </para>
        <para>You can also get a <see cref="T:Leadtools.RasterImage" /> object representation of a page with the <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPageCollection~ExportPage.html">IOcrPageCollection.ExportPage</a> methods.</para>
        <para>The <see cref="T:Leadtools.RasterImage" /> object returned from this method will contain one page only. To get a multi-page <see cref="T:Leadtools.RasterImage" /> object containing the image data
            of all or a specific range of the pages added to the OCR document, you can either create a <see cref="T:Leadtools.RasterImage" /> from the first then loop through the pages of the document and
            add the returned <see cref="T:Leadtools.RasterImage" /> objects to the first object with the <see cref="M:Leadtools.RasterImage.AddPage(Leadtools.RasterImage)">RasterImage.AddPage</see> method. Or you can use the
            <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPageCollection~ExportPages.html">IOcrPageCollection.ExportPages</a> methods.</para>
      </remarks>
      <keywords>OCR,RasterImage</keywords>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRasterImage(Leadtools.RasterImage)" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPage.SetRasterImage(Leadtools.RasterImage)">
      <summary>
            Updates the page image data from a <see cref="T:Leadtools.RasterImage" /> object.
            </summary>
      <param name="image">A <see cref="T:Leadtools.RasterImage" /> object that contains the image data that will be copied into this <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />.</param>
      <remarks>
        <para>Once you add a page to an OCR document, the image data used to create the page is copied and stored inside the engine even if the original object used to create the page
            was a <see cref="T:Leadtools.RasterImage" /> object. To get a <see cref="T:Leadtools.RasterImage" /> that represents this page, use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRasterImage" />.</para>
        <para>The <see cref="T:Leadtools.RasterImage" /> object that the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRasterImage" /> method returns contains a copy of the page image data. Any modifications you make to the
            <see cref="T:Leadtools.RasterImage" /> object will not affect the page. To update the page image data, you must call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRasterImage(Leadtools.RasterImage)" />. Since the <see cref="T:Leadtools.RasterImage" /> object
            is a copy, you must dispose it by calling its <see cref="M:Leadtools.RasterImage.Dispose">RasterImage.Dispose</see> method once you are done using it.</para>
        <para>Once you obtain a <see cref="T:Leadtools.RasterImage" /> object for this page, you can use it with other parts of LEADTOOLS, for example, you can set it in the <see cref="T:Leadtools.WinForms.RasterImageViewer" /> or
            <see cref="T:Leadtools.WinForms.RasterPictureBox" /> controls for viewing inside your Windows Forms-based application. You can also perform your own image processing on the page as follows:</para>
        <para>
          <code>
            // Flip the 2nd page added to the OCR document
            // Get the page (index is zero-based)
            IOcrPage page = ocrDocument.Pages[1];
            // Get a RasterImage object that represents this page
            Leadtools.RasterImage image = page.GetRasterImage();
            // Flip it vertically
            Leadtools.ImageProcessing.FlipCommand flip = new Leadtools.ImageProcessing.FlipCommand();
            flip.Horizontal = false;
            flip.Run(image);
            // Set it back into the page
            page.SetRasterImage(image);
            // Dispose the image
            image.Dispose();
            </code>
        </para>
        <para>You can also get a <see cref="T:Leadtools.RasterImage" /> object representation of a page with the <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPageCollection~ExportPage.html">IOcrPageCollection.ExportPage</a> method.</para>
        <para>The <see cref="T:Leadtools.RasterImage" /> object returned from the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRasterImage" /> method will contain one page only. To get a multi-page <see cref="T:Leadtools.RasterImage" /> object containing the image data
            of all or a specific range of the pages added to the OCR document, you can either create a <see cref="T:Leadtools.RasterImage" /> from the first then loop through the pages of the document and
            add the returned <see cref="T:Leadtools.RasterImage" /> objects to the first object with the <see cref="M:Leadtools.RasterImage.AddPage(Leadtools.RasterImage)">RasterImage.AddPage</see> method. Or you can use the
            <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPageCollection~ExportPages.html">IOcrPageCollection.ExportPages</a> methods.</para>
      </remarks>
      <keywords>OCR,RasterImage</keywords>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRasterImage" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPage.CreateThumbnail(System.Int32,System.Int32)">
      <summary>
            Creates a thumbnail image of this <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />.
            </summary>
      <param name="thumbnailWidth">The desired maximum width of the thumbnail image in pixels.</param>
      <param name="thumbnailHeight">The desired maximum height of the thumbnail image in pixels.</param>
      <returns>A <see cref="T:Leadtools.RasterImage" /> object that contains a thumbnail of this <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />.</returns>
      <remarks>
        <para>The thumbnail image returned from this image always contain the correct aspect ratio. The width and height of the thumbnail is guaranteed to be at least
            <paramref name="thumbnailWidth" /> by <paramref name="thumbnailHeight" /> in size but never exceeding that. The only time you get a thumbnail that is exactly
            <paramref name="thumbnailWidth" /> by <paramref name="thumbnailHeight" /> pixels is when this <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> is a perfect square.</para>
        <para>The thumbnail image returned from this method will always contain 24 bits per pixel for best possible quality.</para>
        <para>One use of the thumbnail image of a page is if your application is a Windows Forms-based application containing the <see cref="T:Leadtools.WinForms.RasterImageList" /> control. You can use
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.CreateThumbnail(System.Int32,System.Int32)" /> to obtain thumbnails of the pages in the engine and use them as items to the <see cref="T:Leadtools.WinForms.RasterImageList" />. For an example, refer to
            the C# or VB.NET Main OCR Demo that ships with LEADTOOLS.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRasterImage(Leadtools.RasterImage)" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRasterImage" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPage.AutoPreprocess(Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand,Leadtools.Forms.Ocr.OcrProgressCallback)">
      <summary>
            Performs automatic image processing clean up on the image to enhance the quality of the page before beginning recognition.
            </summary>
      <param name="command">The preprocessing command to perform.</param>
      <param name="callback">Optional callback to show operation progress.</param>
      <remarks>
        <para>Use this method to deskew, rotate or invert the image according to <paramref name="command" />. By performing auto pre-processing on a page, you can improve the image
            quality of draft mode faxes.</para>
        <para>Use the <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see> to show the operation progress or to abort it. For more information and an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see>.</para>
        <para>Call this method prior to calling <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.RecognizeText(Leadtools.Forms.Ocr.OcrProgressCallback)" />.</para>
      </remarks>
      <keywords>OCR,Preprocess</keywords>
      <example>
        <para />
        <code lang="VB">   Public Sub AutoPreprocessExample()
      ' Unlock the support needed for LEADTOOLS Plus OCR engine
      RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here")
      RasterSupport.Unlock(RasterSupportType.OcrPlus, "Replace with your own key here")
      RasterSupport.Unlock(RasterSupportType.OcrPlusPdfLeadOutput, "Replace with your own key here")
      Dim tifFileName As String = LeadtoolsExamples.Common.ImagesPath.Path + "Clean.tif"
      Dim pdfFileName As String = LeadtoolsExamples.Common.ImagesPath.Path + "Clean.pdf"

      ' Create an instance of the engine
      Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, False)
         ' Start the engine using default parameters
         ocrEngine.Startup(Nothing, Nothing, Nothing, Nothing)

         ' Create an OCR document
         Using ocrDocument As IOcrDocument = ocrEngine.DocumentManager.CreateDocument()
            ' Add this image to the document
            Dim ocrPage As IOcrPage = ocrDocument.Pages.AddPage(tifFileName, Nothing)

            ' Auto-preprocess it
            ocrPage.AutoPreprocess(OcrAutoPreprocessPageCommand.Deskew, Nothing)
            ocrPage.AutoPreprocess(OcrAutoPreprocessPageCommand.Invert, Nothing)
            ocrPage.AutoPreprocess(OcrAutoPreprocessPageCommand.Rotate, Nothing)

            ' Recognize it and save it as PDF
            ocrPage.Recognize(Nothing)
            ocrDocument.Save(pdfFileName, DocumentFormat.Pdf, Nothing)
         End Using

         ' Shutdown the engine
         ' Note: calling Dispose will also automatically shutdown the engine if it has been started
         ocrEngine.Shutdown()
      End Using
   End Sub</code>
        <code lang="CS">      public void AutoPreprocessExample()
      {
         // Unlock the support needed for LEADTOOLS Plus OCR engine
         RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here");
         RasterSupport.Unlock(RasterSupportType.OcrPlus, "Replace with your own key here");
         RasterSupport.Unlock(RasterSupportType.OcrPlusPdfLeadOutput, "Replace with your own key here");
         string tifFileName = LeadtoolsExamples.Common.ImagesPath.Path + "Clean.tif";
         string pdfFileName = LeadtoolsExamples.Common.ImagesPath.Path + "Clean.pdf";

         // Create an instance of the engine
         using(IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, false))
         {
            // Start the engine using default parameters
            ocrEngine.Startup(null, null, null, null);

            // Create an OCR document
            using(IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument())
            {
               // Add this image to the document
               IOcrPage ocrPage = ocrDocument.Pages.AddPage(tifFileName, null);

               // Auto-preprocess it
               ocrPage.AutoPreprocess(OcrAutoPreprocessPageCommand.Deskew, null);
               ocrPage.AutoPreprocess(OcrAutoPreprocessPageCommand.Invert, null);
               ocrPage.AutoPreprocess(OcrAutoPreprocessPageCommand.Rotate, null);

               // Recognize it and save it as PDF
               ocrPage.Recognize(null);
               ocrDocument.Save(pdfFileName, DocumentFormat.Pdf, null);
            }

            // Shutdown the engine
            // Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown();
         }
      }</code>
        <!--IOcrPage.AutoPreprocess-->
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetDeskewAngle" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRotateAngle" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPage.GetDeskewAngle">
      <summary>
            Gets the angle of the skew of this <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />.
            </summary>
      <returns>The angle of the skew of this image in degrees.</returns>
      <remarks>
        <para>If the page is not skewed, this method will return 0</para>
        <para>Use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoPreprocess(Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand,Leadtools.Forms.Ocr.OcrProgressCallback)" /> with <see cref="T:Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand">OcrAutoPreprocessPageCommand.Deskew</see> to automatically deskew the page image prior to
            calling <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.RecognizeText(Leadtools.Forms.Ocr.OcrProgressCallback)" />. This could enhance the quality of the image before starting its recognition</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoPreprocess(Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand,Leadtools.Forms.Ocr.OcrProgressCallback)" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoPreprocess(Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand,Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRotateAngle" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPage.GetRotateAngle">
      <summary>
            Gets the angle of the rotation of this <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />.
            </summary>
      <returns>The angle of the rotation of this image in degrees.</returns>
      <remarks>
        <para>This method will return one of the following values:</para>
        <list type="table">
          <listheader>
            <term>Value</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>0</term>
            <description>The image is not rotated.</description>
          </item>
          <item>
            <term>90</term>
            <description>The image is rotated 90 degrees.</description>
          </item>
          <item>
            <term>180</term>
            <description>The image is rotated 180 degrees (upside down).</description>
          </item>
          <item>
            <term>270</term>
            <description>The image is rotated 270 degrees.</description>
          </item>
        </list>
        <para>Use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoPreprocess(Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand,Leadtools.Forms.Ocr.OcrProgressCallback)" /> with <see cref="T:Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand">OcrAutoPreprocessPageCommand.Rotate</see> to automatically rotate the page image
            prior to calling <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.RecognizeText(Leadtools.Forms.Ocr.OcrProgressCallback)" />. This could enhance the quality of the image before starting its recognition</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoPreprocess(Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand,Leadtools.Forms.Ocr.OcrProgressCallback)" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoPreprocess(Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand,Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetDeskewAngle" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPage.GetZoneBoundsInPixels(System.Int32)">
      <summary>
            Gets the bounding rectangle of a zone in pixels
            </summary>
      <param name="zoneIndex">The zero-based index of the zone.</param>
      <returns>A <see cref="T:Leadtools.LeadRect" /> object that contains the zone bounding rectangle in pixels.</returns>
      <remarks>
        <value>This method returns the zone bounding rectangle in pixels based on the zone's <see cref="P:Leadtools.Forms.Ocr.OcrZone.Bounds">OcrZone.Bounds</see> value and this image DPI (<see cref="P:Leadtools.Forms.Ocr.IOcrPage.DpiX" /> and
            <see cref="P:Leadtools.Forms.Ocr.IOcrPage.DpiY" />). The rectangle value returned is always in top-left coordinates.</value>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.HitTestZone(Leadtools.Forms.LogicalPoint)" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrDocument" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPage.HitTestZone(Leadtools.Forms.LogicalPoint)">
      <summary>
            Gets the zero-based index of the zone under a certain point.
            </summary>
      <param name="point">The test point in logical coordinates.</param>
      <returns>The zero-based index of the zone under <paramref name="point" />, if no zone is under the test point, this method will return -1.</returns>
      <remarks>
        <para>You can use this method to check whether a zone (either added manually or automatically) is under a given test point. For example, if you have a Windows Forms based application
            with the current <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> in a <see cref="T:Leadtools.WinForms.RasterImageViewer" /> control. You might want to draw the zones on the surface of the viewer. For this, you can use the
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetZoneBoundsInPixels(System.Int32)" /> methods. If you want to allow the user to click with the mouse on the viewer to select and de-select zones, you can use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.HitTestZone(Leadtools.Forms.LogicalPoint)" />.</para>
      </remarks>
      <example>
        <para>This example will view the OCR Page and its zones in a <see cref="T:Leadtools.WinForms.RasterImageViewer" /> control. It will then allow the user to select/deselect zones with the mouse.</para>
        <code lang="VB">      ' Assume Form1 is a Windwos.Forms form in your application
      ' The OCR engine we are using
      Private _ocrEngine As IOcrEngine
      Private _ocrDocument As IOcrDocument

      ' Our raster image viewer instance
      Private _viewer As RasterImageViewer

      Public Sub New()
         InitializeComponent()

         ' Unlock the support needed for LEADTOOLS Plus OCR engine
         RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here")
         RasterSupport.Unlock(RasterSupportType.OcrPlus, "Replace with your own key here")
         RasterSupport.Unlock(RasterSupportType.OcrPlusPdfLeadOutput, "Replace with your own key here")

         ' Initialize the raster image viewer
         ' Turn on use DPI, center the image, add border padding and frame shadow to show that our calculations will be
         ' independent on all of those extra options
         _viewer = New RasterImageViewer()
         _viewer.Dock = DockStyle.Fill
         _viewer.BackColor = SystemColors.AppWorkspace
         _viewer.UseDpi = True
         _viewer.BorderPadding.All = 8
         _viewer.FrameSize = New SizeF(1, 1)
         _viewer.FrameShadowSize = New SizeF(2, 2)
         _viewer.SizeMode = RasterPaintSizeMode.Normal
         _viewer.HorizontalAlignMode = RasterPaintAlignMode.Center
         _viewer.VerticalAlignMode = RasterPaintAlignMode.Center
         _viewer.AutoDisposeImages = True
         _viewer.InteractiveMode = RasterViewerInteractiveMode.None

         ' Turn on scale to gray painting in the viewer
         Dim props As RasterPaintProperties = _viewer.PaintProperties
         props.PaintDisplayMode = props.PaintDisplayMode Or RasterPaintDisplayModeFlags.ScaleToGray
         _viewer.PaintProperties = props

         ' Subscribe to the viewer events we need
         AddHandler _viewer.KeyDown, AddressOf _viewer_KeyDown
         AddHandler _viewer.MouseDown, AddressOf _viewer_MouseDown
         AddHandler _viewer.PostImagePaint, AddressOf _viewer_PostImagePaint

         Controls.Add(_viewer)
         _viewer.BringToFront()

         ' Create and startup the OCR engine
         _ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, False)
         _ocrEngine.Startup(Nothing, Nothing, Nothing, Nothing)

         ' Create the OCR document
         _ocrDocument = _ocrEngine.DocumentManager.CreateDocument()

         ' Load an image into the document
         Dim tifFileName As String = LeadtoolsExamples.Common.ImagesPath.Path + "Ocr1.tif"
         Dim ocrPage As IOcrPage = _ocrDocument.Pages.AddPage(tifFileName, Nothing)

         ' Do auto zone
         ocrPage.AutoZone(Nothing)

         ' AutoZone does not specify a name for the zones, so loop through all the zones and set their names
         ' to a unique value. We will use the name in the paint code later
         Dim ocrZones As IOcrZoneCollection = ocrPage.Zones
         For i As Integer = 0 To ocrZones.Count - 1
            Dim ocrZone As OcrZone = ocrZones(i)

            ' Construct the name from the ID
            ocrZone.Name = String.Format("Zone {0}", ocrZone.Id)

            ocrZones(i) = ocrZone
         Next

         ' Show the same image in the viewer
         _viewer.Image = ocrPage.GetRasterImage()

         ' Note, the image we got from GetRasterImage is a copy of the image in the engine
         ' Since we set teh AutoDisposeImages of the viewer to "true", the image will be disposed
         ' when the viewer is disposed at application termination

         Text = "+ to zoom in, - to zoom out, enter to return to 100%. Select the zones with the mouse"
      End Sub

      Protected Overrides Sub OnFormClosed(ByVal e As FormClosedEventArgs)
         ' Destroy the document
         _ocrDocument.Dispose()

         ' Shutdown the OCR engine
         _ocrEngine.Shutdown()
         _ocrEngine.Dispose()

         MyBase.OnFormClosed(e)
      End Sub

      Private Sub _viewer_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs)
         Const zoomRatio As Double = 1.2
         Dim scaleFactor As Double = _viewer.ScaleFactor

         Select Case (e.KeyCode)
            Case Keys.Add, Keys.Oemplus
               ' Zoon in
               scaleFactor *= zoomRatio
               e.Handled = True

            Case Keys.Subtract, Keys.OemMinus
               ' Zone out
               scaleFactor /= zoomRatio
               e.Handled = True

            Case Keys.Enter
               scaleFactor = 1
               e.Handled = True
         End Select

         Const minimumScaleFactor As Double = 0.05
         Const maximumScaleFactor As Double = 11

         scaleFactor = Math.Max(minimumScaleFactor, Math.Min(maximumScaleFactor, scaleFactor))

         ' Check if scale factor has changed
         If (scaleFactor &lt;&gt; _viewer.ScaleFactor) Then
            _viewer.BeginUpdate()

            ' Yes, zoom keeping the center of the image

            ' Get what you see in physical coordinates
            Dim rc As Rectangle = Rectangle.Intersect(_viewer.PhysicalViewRectangle, _viewer.ClientRectangle)
            ' Get the center of what you see in physical coordinates
            Dim center As New PointF(rc.Left + rc.Width \ 2, rc.Top + rc.Height \ 2)
            Dim t As New Transformer(_viewer.Transform)
            ' Get the center of what you see in logical coordinates
            center = t.PointToLogical(center)

            _viewer.ScaleFactor = scaleFactor

            ' Bring the original center into the view center
            t = New Transformer(_viewer.Transform)
            ' Get the center of what you saw before the zoom in physical coordinates
            center = t.PointToPhysical(center)
            ' Bring the old center into the center of the view
            _viewer.CenterAtPoint(Point.Round(center))

            _viewer.EndUpdate()
         End If
      End Sub

      Private Sub _viewer_MouseDown(ByVal sender As Object, ByVal e As MouseEventArgs)
         ' Perform hit-testing on the zones
         If (Not _ocrEngine Is Nothing) AndAlso (_ocrEngine.IsStarted) AndAlso (_ocrDocument.Pages.Count &gt; 0) AndAlso e.Button = Windows.Forms.MouseButtons.Left Then
            ' Get the transform of the viewer
            ' Use the transform that takes the DPI into consideration since we turned that on
            Using matrix As Matrix = _viewer.GetTransformWithDpi()
               Dim t As New Transformer(matrix)

               ' Convert the mouse click coordinates from physical (viewer) to logical (image)
               Dim point As New PointF(e.X, e.Y)
               point = t.PointToLogical(point)

               ' Hit test the zones
               ' An alternitave to calling HitTestZone is to loop through all the zones
               ' and get the value of .Bounds in pixels, then check if the point is inside
               ' the boundaries.
               Dim ocrPage As IOcrPage = _ocrDocument.Pages(0)
               Dim lPoint As LeadPoint = New LeadPoint(CType(point.X, Integer), CType(point.Y, Integer))
               Dim zoneIndex As Integer = ocrPage.HitTestZone(New LogicalPoint(lPoint))

               If (zoneIndex &lt;&gt; -1) Then
                  ' We hit a zone, loop through all the zones, unselect all but the hit tested zone
                  For index As Integer = 0 To ocrPage.Zones.Count - 1
                     ' Since OcrZone is a structure, we cannot simply do
                     ' ocrZone.Zones[index].Selected = value
                     ' We have to get a copy of the structure, modify it and set it back

                     Dim ocrZone As OcrZone = ocrPage.Zones(index)

                     If (index &lt;&gt; zoneIndex) Then
                        ocrZone.Selected = False
                     Else
                        ocrZone.Selected = True
                     End If

                     ocrPage.Zones(index) = ocrZone
                  Next

                  ' Re-paint the viewer to show the new zones
                  _viewer.Invalidate()
               End If
            End Using
         End If
      End Sub

      Private Sub _viewer_PostImagePaint(ByVal sender As Object, ByVal e As PaintEventArgs)
         ' Draw the zones on the viewer in their correct location
         If (Not _ocrEngine Is Nothing) AndAlso (_ocrEngine.IsStarted) AndAlso (_ocrDocument.Pages.Count &gt; 0) Then
            ' Get the transform of the viewer
            ' Use the transform that takes the DPI into consideration since we turned that on
            Using matrix As Matrix = _viewer.GetTransformWithDpi()
               Dim t As New Transformer(matrix)

               Dim ocrPage As IOcrPage = _ocrDocument.Pages(0)

               Dim normalPen As New Pen(Color.Blue, 1)
               Dim selectedPen As New Pen(Color.Red, 2)
               selectedPen.DashStyle = DashStyle.Dash

               For Each ocrZone As OcrZone In ocrPage.Zones
                  ' Get the zone bounds in pixels
                  ' You can also use ocrPage.GetZoneBoundsInPixels here

                  Dim ltzoneBounds As LeadRect = ocrZone.Bounds.ToRectangle(ocrPage.DpiX, ocrPage.DpiY)
                  Dim zoneBounds As RectangleF = New RectangleF(ltzoneBounds.Left, ltzoneBounds.Top, ltzoneBounds.Width, ltzoneBounds.Height)

                  ' This rectangle is in image (logical) coordinates with top-left view perspective
                  ' Convert to the physical coordinates of the viewer
                  zoneBounds = t.RectangleToPhysical(zoneBounds)

                  ' Now draw this zone on the viewer surface
                  If (ocrZone.Selected) Then
                     e.Graphics.DrawRectangle(selectedPen, zoneBounds.X, zoneBounds.Y, zoneBounds.Width - 1, zoneBounds.Height - 1)
                  Else
                     e.Graphics.DrawRectangle(normalPen, zoneBounds.X, zoneBounds.Y, zoneBounds.Width - 1, zoneBounds.Height - 1)
                  End If

                  ' Draw the zone name on the left hand corner of the zone
                  ' Note, in a real application you might want to have an option to show/hide the zone names (labels)
                  Dim labelSize As SizeF = e.Graphics.MeasureString(ocrZone.Name, Font)
                  Dim labelRectangle As New RectangleF(zoneBounds.X, zoneBounds.Y - labelSize.Height, labelSize.Width, labelSize.Height)
                  e.Graphics.FillRectangle(Brushes.Yellow, labelRectangle)
                  e.Graphics.DrawString(ocrZone.Name, Font, Brushes.Black, labelRectangle.X, labelRectangle.Y)
               Next
            End Using
         End If
      End Sub</code>
        <code lang="CS">         // Assume Form1 is a Windwos.Forms form in your application
         // The OCR engine we are using
         private IOcrEngine _ocrEngine;
         // The document we are using
         private IOcrDocument _ocrDocument;

         // Our raster image viewer instance
         private RasterImageViewer _viewer;

         public Form1()
         {
            InitializeComponent();

            // Unlock the support needed for LEADTOOLS Plus OCR engine
            RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here");
            RasterSupport.Unlock(RasterSupportType.OcrPlus, "Replace with your own key here");
            RasterSupport.Unlock(RasterSupportType.OcrPlusPdfLeadOutput, "Replace with your own key here");

            // Initialize the raster image viewer
            // Turn on use DPI, center the image, add border padding and frame shadow to show that our calculations will be
            // independent on all of those extra options
            _viewer = new RasterImageViewer();
            _viewer.Dock = DockStyle.Fill;
            _viewer.BackColor = SystemColors.AppWorkspace;
            _viewer.UseDpi = true;
            _viewer.BorderPadding.All = 8;
            _viewer.FrameSize = new SizeF(1, 1);
            _viewer.FrameShadowSize = new SizeF(2, 2);
            _viewer.SizeMode = RasterPaintSizeMode.Normal;
            _viewer.HorizontalAlignMode = RasterPaintAlignMode.Center;
            _viewer.VerticalAlignMode = RasterPaintAlignMode.Center;
            _viewer.AutoDisposeImages = true;
            _viewer.InteractiveMode = RasterViewerInteractiveMode.None;

            // Turn on scale to gray painting in the viewer
            RasterPaintProperties props = _viewer.PaintProperties;
            props.PaintDisplayMode |= RasterPaintDisplayModeFlags.ScaleToGray;
            _viewer.PaintProperties = props;

            // Subscribe to the viewer events we need
            _viewer.KeyDown += new KeyEventHandler(_viewer_KeyDown);
            _viewer.MouseDown += new MouseEventHandler(_viewer_MouseDown);
            _viewer.PostImagePaint += new PaintEventHandler(_viewer_PostImagePaint);

            Controls.Add(_viewer);
            _viewer.BringToFront();

            // Create and startup the OCR engine
            _ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, false);
            _ocrEngine.Startup(null, null, null, null);

            // Create the OCR document
            _ocrDocument = _ocrEngine.DocumentManager.CreateDocument();

            // Load an image into the OCR document
            string tifFileName = LeadtoolsExamples.Common.ImagesPath.Path + "Ocr1.tif";
            IOcrPage ocrPage = _ocrDocument.Pages.AddPage(tifFileName, null);

            // Do auto zone
            ocrPage.AutoZone(null);

            // AutoZone does not specify a name for the zones, so loop through all the zones and set their names
            // to a unique value. We will use the name in the paint code later
            IOcrZoneCollection ocrZones = ocrPage.Zones;
            for(int i = 0; i &lt; ocrZones.Count; i++)
            {
               OcrZone ocrZone = ocrZones[i];

               // Construct the name from the ID
               ocrZone.Name = string.Format("Zone {0}", ocrZone.Id);

               ocrZones[i] = ocrZone;
            }

            // Show the same image in the viewer
            _viewer.Image = ocrPage.GetRasterImage();

            // Note, the image we got from GetRasterImage is a copy of the image in the engine
            // Since we set teh AutoDisposeImages of the viewer to "true", the image will be disposed
            // when the viewer is disposed at application termination

            Text = "+ to zoom in, - to zoom out, enter to return to 100%. Select the zones with the mouse";
         }

         protected override void OnFormClosed(FormClosedEventArgs e)
         {
            // Dispose the document
            _ocrDocument.Dispose();

            // Shutdown the OCR engine
            _ocrEngine.Shutdown();
            _ocrEngine.Dispose();

            base.OnFormClosed(e);
         }

         private void _viewer_KeyDown(object sender, KeyEventArgs e)
         {
            const double zoomRatio = 1.2;
            double scaleFactor = _viewer.ScaleFactor;

            switch(e.KeyCode)
            {
               case Keys.Add:
               case Keys.Oemplus:
                  // Zoon in
                  scaleFactor *= zoomRatio;
                  e.Handled = true;
                  break;

               case Keys.Subtract:
               case Keys.OemMinus:
                  // Zone out
                  scaleFactor /= zoomRatio;
                  e.Handled = true;
                  break;

               case Keys.Enter:
                  scaleFactor = 1;
                  e.Handled = true;
                  break;
            }

            const double minimumScaleFactor = 0.05;
            const double maximumScaleFactor = 11;

            scaleFactor = Math.Max(minimumScaleFactor, Math.Min(maximumScaleFactor, scaleFactor));

            // Check if scale factor has changed
            if(scaleFactor != _viewer.ScaleFactor)
            {
               _viewer.BeginUpdate();

               // Yes, zoom keeping the center of the image

               // Get what you see in physical coordinates
               Rectangle rc = Rectangle.Intersect(_viewer.PhysicalViewRectangle, _viewer.ClientRectangle);
               // Get the center of what you see in physical coordinates
               PointF center = new PointF(rc.Left + rc.Width / 2, rc.Top + rc.Height / 2);
               Transformer t = new Transformer(_viewer.Transform);
               // Get the center of what you see in logical coordinates
               center = t.PointToLogical(center);

               _viewer.ScaleFactor = scaleFactor;

               // Bring the original center into the view center
               t = new Transformer(_viewer.Transform);
               // Get the center of what you saw before the zoom in physical coordinates
               center = t.PointToPhysical(center);
               // Bring the old center into the center of the view
               _viewer.CenterAtPoint(Point.Round(center));

               _viewer.EndUpdate();
            }
         }

         private void _viewer_MouseDown(object sender, MouseEventArgs e)
         {
            // Perform hit-testing on the zones
            if(_ocrEngine != null &amp;&amp; _ocrEngine.IsStarted &amp;&amp; _ocrDocument != null &amp;&amp; _ocrDocument.Pages.Count &gt; 0 &amp;&amp; e.Button == MouseButtons.Left)
            {
               // Get the transform of the viewer
               // Use the transform that takes the DPI into consideration since we turned that on
               using(Matrix matrix = _viewer.GetTransformWithDpi())
               {
                  Transformer t = new Transformer(matrix);

                  // Convert the mouse click coordinates from physical (viewer) to logical (image)
                  PointF point = new PointF(e.X, e.Y);
                  point = t.PointToLogical(point);

                  // Hit test the zones
                  // An alternitave to calling HitTestZone is to loop through all the zones
                  // and get the value of .Bounds in pixels, then check if the point is inside
                  // the boundaries.
                  IOcrPage ocrPage = _ocrDocument.Pages[0];

                  LeadPoint lPoint = new LeadPoint((int)point.X, (int)point.Y);
                  int zoneIndex = ocrPage.HitTestZone(new LogicalPoint(lPoint));
                  if(zoneIndex != -1)
                  {
                     // We hit a zone, loop through all the zones, unselect all but the hit tested zone
                     for(int index = 0; index &lt; ocrPage.Zones.Count; index++)
                     {
                        // Since OcrZone is a structure, we cannot simply do
                        // ocrZone.Zones[index].Selected = value
                        // We have to get a copy of the structure, modify it and set it back

                        OcrZone ocrZone = ocrPage.Zones[index];

                        if(index != zoneIndex)
                           ocrZone.Selected = false;
                        else
                           ocrZone.Selected = true;

                        ocrPage.Zones[index] = ocrZone;
                     }

                     // Re-paint the viewer to show the new zones
                     _viewer.Invalidate();
                  }
               }
            }
         }

         private void _viewer_PostImagePaint(object sender, PaintEventArgs e)
         {
            // Draw the zones on the viewer in their correct location
            if(_ocrEngine != null &amp;&amp; _ocrEngine.IsStarted &amp;&amp; _ocrDocument != null &amp;&amp; _ocrDocument.Pages.Count &gt; 0)
            {
               // Get the transform of the viewer
               // Use the transform that takes the DPI into consideration since we turned that on
               using(Matrix matrix = _viewer.GetTransformWithDpi())
               {
                  Transformer t = new Transformer(matrix);

                  IOcrPage ocrPage = _ocrDocument.Pages[0];

                  Pen normalPen = new Pen(Color.Blue, 1);
                  Pen selectedPen = new Pen(Color.Red, 2);
                  selectedPen.DashStyle = DashStyle.Dash;

                  foreach(OcrZone ocrZone in ocrPage.Zones)
                  {
                     // Get the zone bounds in pixels
                     // You can also use ocrPage.GetZoneBoundsInPixels here
                     LeadRect ltzoneBounds = ocrZone.Bounds.ToRectangle(ocrPage.DpiX, ocrPage.DpiY);
                     RectangleF zoneBounds = new RectangleF(ltzoneBounds.Left, ltzoneBounds.Top, ltzoneBounds.Width, ltzoneBounds.Height);

                     // This rectangle is in image (logical) coordinates with top-left view perspective
                     // Convert to the physical coordinates of the viewer
                     zoneBounds = t.RectangleToPhysical(zoneBounds);

                     // Now draw this zone on the viewer surface
                     if(ocrZone.Selected)
                        e.Graphics.DrawRectangle(selectedPen, zoneBounds.X, zoneBounds.Y, zoneBounds.Width - 1, zoneBounds.Height - 1);
                     else
                        e.Graphics.DrawRectangle(normalPen, zoneBounds.X, zoneBounds.Y, zoneBounds.Width - 1, zoneBounds.Height - 1);

                     // Draw the zone name on the left hand corner of the zone
                     // Note, in a real application you might want to have an option to show/hide the zone names (labels)
                     SizeF labelSize = e.Graphics.MeasureString(ocrZone.Name, Font);
                     RectangleF labelRectangle = new RectangleF(zoneBounds.X, zoneBounds.Y - labelSize.Height, labelSize.Width, labelSize.Height);
                     e.Graphics.FillRectangle(Brushes.Yellow, labelRectangle);
                     e.Graphics.DrawString(ocrZone.Name, Font, Brushes.Black, labelRectangle.X, labelRectangle.Y);
                  }
               }
            }
         }</code>
        <!--IOcrPage.HitTestZone-->
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">
      <summary>
            Performs auto decomposition of the page to find the text and graphics zones using predefined parameters
            </summary>
      <param name="callback">Optional callback to show operation progress.</param>
      <remarks>
        <para>You can use the <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see> to show the operation progress or to abort it. For more information and an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see>.</para>
        <para>The zones found by this method are added to the <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones" /> collection of this page. Any previously added zones will be removed from <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones" /> first.</para>
        <para>This method finds the zone coordinates (<see cref="P:Leadtools.Forms.Ocr.OcrZone.Bounds">OcrZone.Bounds</see> which will always have units of <see cref="T:Leadtools.Forms.LogicalUnit">LogicalUnit.Pixels</see>) and
            type (<see cref="P:Leadtools.Forms.Ocr.OcrZone.ZoneType">OcrZone.ZoneType</see>). The type of the zone determines its role in the page layout and can be classified into three different groups:
            <list type="number"><item><description>
            The flowed text zone types: <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Text</see>, <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Column</see>, 
            <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Header</see>, <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Footer</see>, <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Caption</see>,
            <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Title</see>, <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.VerticalText</see>,
            <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.LeftRotatedText</see>, <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.RightRotatedText</see> and
            <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Other</see>. These types mean that the zone contains textual information without
            a table type structure inside (it is flowed text). These types listed above are considered the same, they will not be differentiated from each other during the later processing
            stages.
            <para><strong>Note: Only <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Text</see> is currently supported for the LEADTOOLS OCR Advantage Engine.</strong></para></description></item><item><description>
            The <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Table</see> type. A zone having this type means that the zone is detected as containing a table,
            i.e. with columns, with or without a grid. Such zones will be handled differently from those of flowed text type zones.
              </description></item><item><description>
            The <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Graphic</see> type means a zone contains graphics, i.e. this zone will not be recognized at all. The only reason to have such a zone is to
            save or export the image inside the zone area.
              </description></item></list></para>
        <para>The new zones found by this method will always have the <see cref="P:Leadtools.Forms.Ocr.OcrZone.FillMethod">OcrZone.FillMethod</see> and <see cref="P:Leadtools.Forms.Ocr.OcrZone.RecognitionModule">OcrZone.RecognitionModule</see>
            set to <see cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod">OcrZoneFillMethod.Default</see> and <see cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule">OcrZoneRecognitionModule.Auto</see> respectively. In order to override 
            this automatic fill method and recognition module, you must update each zone in <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones" /> by getting the zone with the <see cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" /> getter, update and
            set it back with the setter. You can get the number of zones found by this method with the <see cref="P:System.Collections.Generic.ICollection`1.Count">Zones.Count</see> property.</para>
        <para>New zones created by this method will always have an empty string in its <see cref="P:Leadtools.Forms.Ocr.OcrZone.UserDictionarySectionName">OcrZone.UserDictionarySectionName</see> property which
            means the use of the default section of the User dictionary. For more information, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrUserDictionary" />.</para>
        <para>The <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrZoneParser,Leadtools.Forms.Ocr.OcrZoneFillMethod,Leadtools.Forms.LogicalUnit,Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone(OcrZoneParser zoneParser, OcrZoneFillMethod fillMethod, LogicalUnit zonesUnit, OcrProgressCallback callback)</see>
            override of this method lets you control the zone parser, default fill method and the units of the zones found.</para>
        <para>To update the zones of a page with fill method set to <see cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod">OcrZoneFillMethod.Default</see>, use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.UpdateFillMethod" />.</para>
        <para>To detect the global fill method of a page, use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.DetectFillMethod" />.</para>
        <para>Note: If this <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> is an empty page, in other words, when the OCR engine performs automatic page decomposing with the
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</see> method and could not find any zones in it, the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.RecognizeText(Leadtools.Forms.Ocr.OcrProgressCallback)" /> methods will fail with
            an exception. It is recommended you call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</see> and then check if there is at least one zone found by the engine (using
            <see cref="P:System.Collections.Generic.ICollection`1.Count">Zones.Count</see>). If the count is zero, do not call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" /> or or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.RecognizeText(Leadtools.Forms.Ocr.OcrProgressCallback)" />.</para>
        <para>If a recognition module is not able to recognize an object (i.e. character, or checkmark etc.), this object will be marked as a rejected one. It will become marked by a
            rejection symbol during conversion to the final output document. Note that <see cref="P:Leadtools.Forms.Ocr.IOcrDocumentManager.RejectionSymbol">IOcrDocumentManager.RejectionSymbol</see> can be set
            to specify the rejection symbol used in the final document.</para>
      </remarks>
      <example>
        <para>This example will perform auto-zoning on an OCR page then displays information about the zones found.</para>
        <code lang="VB">   Public Sub OcrAutoZoneExample()
      ' Unlock the support needed for LEADTOOLS Plus OCR engine
      RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here")
      RasterSupport.Unlock(RasterSupportType.OcrPlus, "Replace with your own key here")
      RasterSupport.Unlock(RasterSupportType.OcrPlusPdfLeadOutput, "Replace with your own key here")
      ' Create an image with some text in it
      Dim image As New RasterImage(RasterMemoryFlags.Conventional, 320, 200, 24, RasterByteOrder.Bgr, RasterViewPerspective.TopLeft, Nothing, IntPtr.Zero, 0)
      Dim imageRect As New Rectangle(0, 0, image.ImageWidth, image.ImageHeight)

      Dim hdc As IntPtr = RasterImagePainter.CreateLeadDC(image)
      Using g As Graphics = Graphics.FromHdc(hdc)
         g.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.HighQuality
         g.FillRectangle(Brushes.White, imageRect)

         Using f As New Font("Arial", 20, FontStyle.Regular)
            g.DrawString("Normal line", f, Brushes.Black, 0, 0)
         End Using

         Using f As New Font("Courier New", 20, FontStyle.Regular)
            g.DrawString("Monospaced line", f, Brushes.Black, 0, 80)
         End Using
      End Using

      RasterImagePainter.DeleteLeadDC(hdc)

      Dim zonesFileName As String = LeadtoolsExamples.Common.ImagesPath.Path + "MyZones.xml"

      ' Create an instance of the engine
      Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, False)
         ' Start the engine using default parameters
         ocrEngine.Startup(Nothing, Nothing, Nothing, Nothing)

         ' Create an OCR document
         Using ocrDocument As IOcrDocument = ocrEngine.DocumentManager.CreateDocument()

            ' Add this image to the document
            Dim ocrPage As IOcrPage = ocrDocument.Pages.AddPage(image, Nothing)
            image.Dispose()

            ' Show the zones, there should be no zones yet
            ShowZones("Right after the page was created", ocrPage)

            ' Perform default AutoZoning on the page
            ocrPage.AutoZone(Nothing)

            ' Show the zones, there should be two zones, one for each line
            ShowZones("AutoZone with default parameters", ocrPage)

            ' Upda the fill methods of the zones
            ocrPage.UpdateFillMethod()

            ' Show the zones after the fill method has been updated
            ShowZones("After updating the fill methods", ocrPage)

            ' Update the first zone manually
            Dim ocrZone As OcrZone = ocrPage.Zones(0)
            ocrZone.ZoneType = OcrZoneType.Text
            ocrPage.Zones(0) = ocrZone

            ' Show the zones
            ShowZones("After updating the type of the first zone", ocrPage)

            ' Save the zones to a file and then clear them
            ocrPage.SaveZones(zonesFileName)
            ocrPage.Zones.Clear()

            ' Show the zones, there should be no zones since we just cleared them
            ShowZones("After calling save and clear", ocrPage)

            ' Re-load the zones
            ocrPage.LoadZones(zonesFileName)
            ShowZones("After re-loading the zones", ocrPage)

            ' To do manual auto zoning, it is helpful to first get the fill method of the page
            Dim fillMethod As OcrZoneFillMethod = ocrPage.DetectFillMethod()
            Console.WriteLine("Fill method detected: {0}", fillMethod)

            ' Clear the zones and do auto zone with specific options
            ocrPage.AutoZone(OcrZoneParser.Default, fillMethod, LogicalUnit.Inch, Nothing)
            ShowZones("After AutoZone with specific options, units should be in inches", ocrPage)
         End Using

         ' Shutdown the engine
         ' Note: calling Dispose will also automatically shutdown the engine if it has been started
         ocrEngine.Shutdown()
      End Using
   End Sub

   Private Sub ShowZones(ByVal message As String, ByVal ocrPage As IOcrPage)
      Console.WriteLine("Zones after {0}:", message)
      For Each ocrZone As OcrZone In ocrPage.Zones
         Dim index As Integer = ocrPage.Zones.IndexOf(ocrZone)
         Console.WriteLine("Zone index: {0}", index)
         Console.WriteLine("  Id                  {0}", ocrZone.Id)
         Console.WriteLine("  Bounds              {0}", ocrZone.Bounds)
         Console.WriteLine("  ZoneType            {0}", ocrZone.ZoneType)
         Console.WriteLine("  FillMethod:         {0}", ocrZone.FillMethod)
         Console.WriteLine("  RecognitionModule:  {0}", ocrZone.RecognitionModule)
         Console.WriteLine("  CharacterFilters:   {0}", ocrZone.CharacterFilters)
         Console.WriteLine("----------------------------------")
      Next

      Console.WriteLine("Hit enter to continue")
      Console.ReadLine()
   End Sub</code>
        <code lang="CS">      public void OcrAutoZoneExample()
      {
         // Unlock the support needed for LEADTOOLS Plus OCR engine
         RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here");
         RasterSupport.Unlock(RasterSupportType.OcrPlus, "Replace with your own key here");
         RasterSupport.Unlock(RasterSupportType.OcrPlusPdfLeadOutput, "Replace with your own key here");
         // Create an image with some text in it
         RasterImage image = new RasterImage(RasterMemoryFlags.Conventional, 320, 200, 24, RasterByteOrder.Bgr, RasterViewPerspective.TopLeft, null, IntPtr.Zero, 0);
         Rectangle imageRect = new Rectangle(0, 0, image.ImageWidth, image.ImageHeight);

         IntPtr hdc = RasterImagePainter.CreateLeadDC(image);
         using(Graphics g = Graphics.FromHdc(hdc))
         {
            g.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.HighQuality;
            g.FillRectangle(Brushes.White, imageRect);

            using(Font f = new Font("Arial", 20, FontStyle.Regular))
               g.DrawString("Normal line", f, Brushes.Black, 0, 0);

            using(Font f = new Font("Courier New", 20, FontStyle.Regular))
               g.DrawString("Monospaced line", f, Brushes.Black, 0, 80);
         }

         RasterImagePainter.DeleteLeadDC(hdc);

         string zonesFileName = LeadtoolsExamples.Common.ImagesPath.Path + "MyZones.xml";

         // Create an instance of the engine
         using(IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, false))
         {
            // Start the engine using default parameters
            ocrEngine.Startup(null, null, null, null);

            // Create an OCR document
            using(IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument())
            {
               // Add this image to the document
               IOcrPage ocrPage = ocrDocument.Pages.AddPage(image, null);
               image.Dispose();

               // Show the zones, there should be no zones yet
               ShowZones("Right after the page was created", ocrPage);

               // Perform default AutoZoning on the page
               ocrPage.AutoZone(null);

               // Show the zones, there should be two zones, one for each line
               ShowZones("AutoZone with default parameters", ocrPage);

               // Upda the fill methods of the zones
               ocrPage.UpdateFillMethod();

               // Show the zones after the fill method has been updated
               ShowZones("After updating the fill methods", ocrPage);

               // Update the first zone manually
               OcrZone ocrZone = ocrPage.Zones[0];
               ocrZone.ZoneType = OcrZoneType.Text;
               ocrPage.Zones[0] = ocrZone;

               // Show the zones
               ShowZones("After updating the type of the first zone", ocrPage);

               // Save the zones to a file and then clear them
               ocrPage.SaveZones(zonesFileName);
               ocrPage.Zones.Clear();

               // Show the zones, there should be no zones since we just cleared them
               ShowZones("After calling save and clear", ocrPage);

               // Re-load the zones
               ocrPage.LoadZones(zonesFileName);
               ShowZones("After re-loading the zones", ocrPage);

               // To do manual auto zoning, it is helpful to first get the fill method of the page
               OcrZoneFillMethod fillMethod = ocrPage.DetectFillMethod();
               Console.WriteLine("Fill method detected: {0}", fillMethod);

               // Clear the zones and do auto zone with specific options
               ocrPage.AutoZone(OcrZoneParser.Default, fillMethod, LogicalUnit.Inch, null);
               ShowZones("After AutoZone with specific options, units should be in inches", ocrPage);
            }

            // Shutdown the engine
            // Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown();
         }
      }

      private void ShowZones(string message, IOcrPage ocrPage)
      {
         Console.WriteLine("Zones after {0}:", message);
         foreach(OcrZone ocrZone in ocrPage.Zones)
         {
            int index = ocrPage.Zones.IndexOf(ocrZone);
            Console.WriteLine("Zone index: {0}", index);
            Console.WriteLine("  Id                  {0}", ocrZone.Id);
            Console.WriteLine("  Bounds              {0}", ocrZone.Bounds);
            Console.WriteLine("  ZoneType            {0}", ocrZone.ZoneType);
            Console.WriteLine("  FillMethod:         {0}", ocrZone.FillMethod);
            Console.WriteLine("  RecognitionModule:  {0}", ocrZone.RecognitionModule);
            Console.WriteLine("  CharacterFilters:   {0}", ocrZone.CharacterFilters);
            Console.WriteLine("----------------------------------");
         }

         Console.WriteLine("Hit enter to continue");
         Console.ReadLine();
      }</code>
        <!--IOcrPage.AutoZone-->
      </example>
      <docaddon>yes</docaddon>
      <keywords>OCR,Zoning</keywords>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrZoneParser,Leadtools.Forms.Ocr.OcrZoneFillMethod,Leadtools.Forms.LogicalUnit,Leadtools.Forms.Ocr.OcrProgressCallback)">
      <summary>
            Performs auto decomposition of the page to find the text and graphics zones using specified parameters.
            </summary>
      <param name="zoneParser">The parser used for auto zoning.
            <para><strong>Note: This parameter will always contain <see cref="T:Leadtools.Forms.Ocr.OcrZoneParser">OcrZoneParser.Default</see> when using the LEADTOOLS OCR Advantage Engine.</strong></para></param>
      <param name="fillMethod">The fill method used in the zones found.</param>
      <param name="zonesUnit">The units for the bounding rectangle of the new zones.</param>
      <param name="callback">Optional callback to show operation progress.</param>
      <remarks>
        <para>This method differs from <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPage~AutoZone.html">AutoZone</a> as follows:
            <list type="number"><item><description>
            The new zones found by this method will always have the <see cref="P:Leadtools.Forms.Ocr.OcrZone.FillMethod">OcrZone.FillMethod</see> value set to <paramref name="fillMethod" />
            instead of <see cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod">OcrZoneFillMethod.Default</see>.
              </description></item><item><description>
            The new zones found will have their bounding rectangle (the value of the <see cref="P:Leadtools.Forms.Ocr.OcrZone.Bounds">OcrZone.Bounds</see> in the units specified by <paramref name="zonesUnit" />
            instead of <see cref="T:Leadtools.Forms.LogicalUnit">LogicalUnit.Pixels</see>. For example, you can specify <see cref="T:Leadtools.Forms.LogicalUnit">LogicalUnit.Inch</see> and the zones coordinates will be in inches using the page
            DPI value (<see cref="P:Leadtools.Forms.Ocr.IOcrPage.DpiX" /> and <see cref="P:Leadtools.Forms.Ocr.IOcrPage.DpiY" />) to calculate the values.
              </description></item></list></para>
        <para>You can use the <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see> to show the operation progress or to abort it. For more information and an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see>.</para>
        <para>The zones found by this method are added to the <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones" /> collection of this page. Any previously added zones will be removed from <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones" /> first.</para>
        <para>This method finds the zone coordinates (<see cref="P:Leadtools.Forms.Ocr.OcrZone.Bounds">OcrZone.Bounds</see>) and type (<see cref="P:Leadtools.Forms.Ocr.OcrZone.ZoneType">OcrZone.ZoneType</see>). The type of the zone
            determines the role of the zone in the page layout and can be classified into three different groups:
            <list type="number"><item><description>
            The flowed text zone types: <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Text</see>, <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Column</see>, 
            <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Header</see>, <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Footer</see>, <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Caption</see>,
            <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Title</see>, <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.VerticalText</see>,
            <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.LeftRotatedText</see>, <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.RightRotatedText</see> and
            <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Other</see>. These types mean that the zone contains textual information without
            a table type structure inside (it is flowed text). These types listed above are considered the same, they will not be differentiated from each other during the later processing
            stages.
            <para><strong>Note: Only <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Text</see> is currently supported for the LEADTOOLS OCR Advantage Engine.</strong></para></description></item><item><description>
            The <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Table</see> type. A zone having this type means that the zone is detected as containing a table,
            i.e. with columns, with or without a grid. Such zones will be handled differently from those of flowed text type zones.
              </description></item><item><description>
            The <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Graphic</see> type means a zone contains graphics, i.e. this zone will not be recognized at all. The only reason to have such a zone is to
            save or export the image inside the zone area.
              </description></item></list></para>
        <para>The new zones found by this method will always have the <see cref="P:Leadtools.Forms.Ocr.OcrZone.FillMethod">OcrZone.FillMethod</see> and <see cref="P:Leadtools.Forms.Ocr.OcrZone.RecognitionModule">OcrZone.RecognitionModule</see>
            set to <paramref name="fillMethod" /> and <see cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule">OcrZoneRecognitionModule.Auto</see> respectively. In order to override
            this automatic fill method and recognition module, you must update each zone in <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones" /> by getting the zone with the <see cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" /> getter, update and
            set it back with the setter. You can get the number of zones found by this method with the <see cref="P:System.Collections.Generic.ICollection`1.Count">Zones.Count</see> property.</para>
        <para>New zones created by this method will always have an empty string in its <see cref="P:Leadtools.Forms.Ocr.OcrZone.UserDictionarySectionName">OcrZone.UserDictionarySectionName</see> property which
            means the use of the default section of the User dictionary. For more information, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrUserDictionary" />.</para>
        <para>To update the zones of a page with fill method set to <see cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod">OcrZoneFillMethod.Default</see>, use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.UpdateFillMethod" />.</para>
        <para>To detect the global fill method of a page, use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.DetectFillMethod" />.</para>
        <para>Note: If this <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> is an empty page, in other words, when the OCR engine performs automatic page decomposing with the
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</see> method and could not find any zones in it, the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" /> or or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.RecognizeText(Leadtools.Forms.Ocr.OcrProgressCallback)" /> methods will fail with
            an exception. It is recommended you call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</see> and then check if there is at least one zone found by the engine (using
            <see cref="P:System.Collections.Generic.ICollection`1.Count">Zones.Count</see>). If the count is zero, do not call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" /> or or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.RecognizeText(Leadtools.Forms.Ocr.OcrProgressCallback)" />.</para>
        <para>If a recognition module is not able to recognize an object (i.e. character, or checkmark etc.), this object will be marked as a rejected one. It will become marked by a
            rejection symbol during conversion to the final output document. Note that <see cref="P:Leadtools.Forms.Ocr.IOcrDocumentManager.RejectionSymbol">IOcrDocumentManager.RejectionSymbol</see> can be set
            to specify the rejection symbol used in the final document.</para>
      </remarks>
      <example> For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</see>. </example>
      <docaddon>yes</docaddon>
      <keywords>OCR,Zoning</keywords>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPage.UpdateFillMethod">
      <summary>
            Update the type of text in the zones of this <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />.
            </summary>
      <remarks>
        <para>This method tries to determine the type of the text in the zones of this <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> (e.g. handprinted, machine printed or dot-matrix printed text). This
            method only looks into zones having the <see cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod">OcrZoneFillMethod.Default</see> value in their <see cref="P:Leadtools.Forms.Ocr.OcrZone.FillMethod">OcrZone.FillMethod</see>
            property. When a zone with this qualification is found, this method will update the following:
            <list type="bullet"><item><description><see cref="P:Leadtools.Forms.Ocr.OcrZone.FillMethod">OcrZone.FillMethod</see> will be updated to the detected value.</description></item><item><description><see cref="P:Leadtools.Forms.Ocr.OcrZone.RecognitionModule">OcrZone.RecognitionModule</see> will be updated to <see cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionModule">OcrZoneRecognitionModule.Default</see>.</description></item></list></para>
        <para>If the detection was unsuccessful, both properties of the zone remain intact.</para>
        <para>The types of zones that can be detected with this method are:
            <list type="number"><item><description><see cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod">OcrZoneFillMethod.OmniFont</see></description></item><item><description><see cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod">OcrZoneFillMethod.DraftDotMatrix9</see></description></item><item><description><see cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod">OcrZoneFillMethod.DraftDotMatrix24</see></description></item><item><description><see cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod">OcrZoneFillMethod.Icr</see></description></item><item><description><see cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod">OcrZoneFillMethod.NoRecognition</see></description></item></list></para>
        <para>To detect the global fill method of a page, use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.DetectFillMethod" /></para>
        <para>
          <strong>Note: This method is not supported in the LEADTOOLS OCR Advantage Engine, any call to this method will have no effect.</strong>
        </para>
      </remarks>
      <example> For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</see>. </example>
      <docaddon>yes</docaddon>
      <keywords>OCR,Zoning</keywords>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPage.DetectFillMethod">
      <summary>
            Detects the type of text in this <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />.
            </summary>
      <returns>An <see cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod" /> enumeration member that specifies the type of text in this <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />.</returns>
      <remarks>
        <para>This method tries to determine the type of the text in the <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> globally (e.g. handprinted, machine printed or dot-matrix printed text).</para>
        <para>This method is useful when this is a page with an unknown or uncertain type of text. (This case quite often occurs when you work with filled forms.) The types of zones
            that can be detected with this method are:
            <list type="number"><item><description><see cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod">OcrZoneFillMethod.OmniFont</see></description></item><item><description><see cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod">OcrZoneFillMethod.DraftDotMatrix9</see></description></item><item><description><see cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod">OcrZoneFillMethod.DraftDotMatrix24</see></description></item><item><description><see cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod">OcrZoneFillMethod.Icr</see></description></item><item><description><see cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod">OcrZoneFillMethod.NoRecognition</see></description></item></list></para>
        <para>Note, you must either add zones manually or automatically to this page (with <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPage~AutoZone.html">AutoZone</a>) before you can call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.DetectFillMethod" />.</para>
        <para>To update the zones of this <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> with the detected fill method, use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.UpdateFillMethod" /></para>
        <para>
          <strong>Note: This method will always return <see cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod">OcrZoneFillMethod.Default</see>for the LEADTOOLS OCR Advantage Engine since this engine doesn't support fill methods.</strong>
        </para>
      </remarks>
      <example> For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</see>. </example>
      <docaddon>yes</docaddon>
      <keywords>OCR,Zoning</keywords>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String)">
      <summary>
            Loads the zones previously saved into a disk file.
            </summary>
      <param name="fileName">The name of the file containing the zones to load.</param>
      <remarks>
        <para>Use this method to load the zones previously saved into a disk file with the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String)">SaveZones</see> method.</para>
        <para>The zones of this page will first be cleared prior to loading the new items.</para>
        <para>After this method finishes, you can access the loaded zones in the <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones" /> property.</para>
        <para>To load and save the zones to a .NET stream, use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream)">LoadZones</see> and <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.IO.Stream)">SaveZones</see>.</para>
        <para>Saving zones to an external file or a stream could be useful when you are processing forms. For example, you can load one of the forms and automatically find the zones
            inside it using <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPage~AutoZone.html">AutoZone</a>, if the automatic zone detection was not 100 percent satisfactory, you can update the zones in the
            <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones" /> collection manually and then save the result with <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String)">SaveZones</see>. Once the zones are saved. You can now process all similar 
            forms in the following manner:
            <list type="bullet"><item><description>Add the form page or pages to an OCR document using the <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.Pages">Pages</see> collection of <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" />.</description></item><item><description>Load the zones previously saved for each page using <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String)">LoadZones</see>.</description></item><item><description>Skip calling <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPage~AutoZone.html">AutoZone</a> and directly call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.RecognizeText(Leadtools.Forms.Ocr.OcrProgressCallback)" />. This will also speed up the recognition
            process considerably.</description></item></list></para>
      </remarks>
      <example> For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</see>. </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream)">
      <summary>
            Loads the zones previously saved into a .NET stream.
            </summary>
      <param name="stream">The .NET stream containing the zones to load.</param>
      <remarks>
        <para>Use this method to load the zones previously saved into a .NET stream with the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.IO.Stream)">SaveZones</see> method.</para>
        <para>The zones of this page will first be cleared prior to loading the new items.</para>
        <para>After this method finishes, you can access the loaded zones in the <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones" /> property.</para>
        <para>To load and save the zones to a disk file, use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String)">LoadZones</see> and <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String)">SaveZones</see>.</para>
        <para>Saving zones to an external file or a stream could be useful when you are processing forms. For example, you can load one of the forms and automatically find the zones
            inside it using <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPage~AutoZone.html">AutoZone</a>, if the automatic zone detection was not 100 percent satisfactory, you can update the zones in the
            <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones" /> collection manually and then save the result with <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.IO.Stream)">SaveZones</see>. Once the zones are saved. You can now process all similar 
            forms in the following manner:
            <list type="bullet"><item><description>Add the form page or pages to an OCR document using the <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.Pages">Pages</see> collection of <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" />.</description></item><item><description>Load the zones previously saved for each page using <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream)">LoadZones</see>.</description></item><item><description>Skip calling <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPage~AutoZone.html">AutoZone</a> and directly call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.RecognizeText(Leadtools.Forms.Ocr.OcrProgressCallback)" />. This will also speed up the recognition
            process considerably.</description></item></list></para>
      </remarks>
      <example> For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</see>. </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String)">
      <summary>
            Saves the zones of this <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> to a disk file.
            </summary>
      <param name="fileName">The name of the file to save the zones to.</param>
      <remarks>
        <para>Use the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String)">LoadZones</see> method to load the zones saved to a disk file.</para>
        <para>To load and save the zones to a .NET stream, use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream)">LoadZones</see> and <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.IO.Stream)">SaveZones</see>.</para>
        <para>Saving zones to an external file or a stream could be useful when you are processing forms. For example, you can load one of the forms and automatically find the zones
            inside it using <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPage~AutoZone.html">AutoZone</a>, if the automatic zone detection was not 100 percent satisfactory, you can update the zones in the
            <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones" /> collection manually and then save the result with <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String)">SaveZones</see>. Once the zones are saved. You can now process all similar 
            forms in the following manner:
            <list type="bullet"><item><description>Add the form page or pages to an OCR document using the <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.Pages">Pages</see> collection of <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" />.</description></item><item><description>Load the zones previously saved for each page using <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String)">LoadZones</see>.</description></item><item><description>Skip calling <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPage~AutoZone.html">AutoZone</a> and directly call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.RecognizeText(Leadtools.Forms.Ocr.OcrProgressCallback)" />. This will also speed up the recognition
            process considerably.</description></item></list></para>
      </remarks>
      <example> For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</see>. </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.IO.Stream)">
      <summary>
            Saves the zones of this <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> to a .NET stream.
            </summary>
      <param name="stream">The .NET stream to save the zones to.</param>
      <remarks>
        <para>Use the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.IO.Stream)">LoadZones</see> method to load the zones saved to a .NET stream.</para>
        <para>To load and save the zones to a disk file, use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String)">LoadZones</see> and <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String)">SaveZones</see>.</para>
        <para>Saving zones to an external file or a stream could be useful when you are processing forms. For example, you can load one of the forms and automatically find the zones
            inside it using <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPage~AutoZone.html">AutoZone</a>, if the automatic zone detection was not 100 percent satisfactory, you can update the zones in the
            <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones" /> collection manually and then save the result with <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SaveZones(System.String)">SaveZones</see>. Once the zones are saved. You can now process all similar 
            forms in the following manner:
            <list type="bullet"><item><description>Add the form page or pages to an OCR document using the <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.Pages">Pages</see> collection of <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" />.</description></item><item><description>Load the zones previously saved for each page using <see cref="M:Leadtools.Forms.Ocr.IOcrPage.LoadZones(System.String)">LoadZones</see>.</description></item><item><description>Skip calling <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPage~AutoZone.html">AutoZone</a> and directly call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.RecognizeText(Leadtools.Forms.Ocr.OcrProgressCallback)" />. This will also speed up the recognition
            process considerably.</description></item></list></para>
      </remarks>
      <example> For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</see>. </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">
      <summary>
            Recognizes the OCR data found on this <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />.
            </summary>
      <remarks>
        <para>
                    Perform image pre-processing by calling the
                    <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoPreprocess(Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoPreprocess</see> method prior
                    to calling <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" /> or
                    <see cref="M:Leadtools.Forms.Ocr.IOcrPage.RecognizeText(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.RecognizeText</see>.
                </para>
        <para>If this page is not a black/white one (i.e. it contains a gray-scale or a
                24-bit color image), then an implicit secondary image conversion step will be
                performed automatically to convert the image to a B/W one.</para>
        <para>
          <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" /> utilizes the zone information to activate the
                    appropriate recognition module on every zone <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones" /> property.
                    Each recognition module recognizes the page parts assigned to it in the zones.
                </para>
        <para>
                    If the zone collection <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones" /> of this
                    <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> is empty (i.e. there are no zones defined), then
                    the page-layout decomposition process will be activated automatically in order
                    to create a zone list for the image, before recognition. Hence,
                    <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPage~AutoZone.html">
                    AutoZone</a> will be implicitly called.
                </para>
        <para>
                    Note: If this <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> is an empty page, in other words,
                    when the OCR engine performs automatic page decomposing with the
                    <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</see> method and could not
                    find any zones in it, the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" /> method will fail with an
                    exception. It is recommended you call
                    <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</see> and then check if
                    there is at least one zone found by the engine (using
                    <see cref="P:System.Collections.Generic.ICollection`1.Count">Zones.Count</see>). If the count is zero, do
                    not call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" />.
                </para>
        <para>
                    If a recognition module is not able to recognize an object (i.e. character, or
                    checkmark etc.), this object will be marked as a rejected one. It will become
                    marked by a rejection symbol during conversion to the final output document.
                    Note that
                    <see cref="P:Leadtools.Forms.Ocr.IOcrDocumentManager.RejectionSymbol">IOcrDocumentManager.RejectionSymbol</see>
                    can be set to specify the rejection symbol used in the final document.
                </para>
        <para>
                    This method uses the checking subsystem
                    (<see cref="T:Leadtools.Forms.Ocr.IOcrSpellCheckManager" />) to either flag suspicious characters
                    or words, or to allow auto-correction during the recognition process.
                </para>
        <para>
                    After having recognized all the zones on the page, <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" />
                    stores the necessary information about the recognized characters internally.
                    You can later use the <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> that owns this page to
                    save the data to a file or memory using the many formats supported by this
                    <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> such as Text, PDF or Microsoft Word.
                </para>
        <para>
                    To recognize a multi-page document you can iterate through the pages of the
                    <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object and call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" /> on
                    each page. You can The
                    <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPageCollection~Recognize.html">
                    IOcrPageCollection.Recognize</a> method will also loop through the pages in the
                    <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> in the order they are stored in the engine and call
                    <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" /> once for each page. If you save the result
                    <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> to a disk file, you will get a document file
                    containing as many pages as the number of items in the
                    <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.Pages">IOcrDocument.Pages</see> collection.
                </para>
        <para>
                    You can use the <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see> to
                    show the operation progress or to abort it. For more information and an
                    example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see>.
                </para>
        <para>
                    Since the format of the recognized data file is not documented, you can use
                    <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters" /> and
                    <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)" /> to examine or modify the data. Any
                    changes you make to the recognition data will be saved in the result document
                    when you save <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" />.
                </para>
        <para>
                    After the page is successfully recognized, the value of the
                    <see cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized" /> property should be <strong>true</strong>.
                </para>
        <para>
                    Use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Unrecognize" /> to clear the recognition data stored in a
                    page.
                </para>
        <para>
                    If you are only interested in the recognition data as text (in other words, you
                    are not planning to save the result document to disk), then you can use the
                    <see cref="M:Leadtools.Forms.Ocr.IOcrPage.RecognizeText(Leadtools.Forms.Ocr.OcrProgressCallback)" /> method and obtain the result data as a string.
                    A common technique in OCR is to perform form processing by adding a zone
                    manually around the required "field" and calling
                    <see cref="M:Leadtools.Forms.Ocr.IOcrPage.RecognizeText(Leadtools.Forms.Ocr.OcrProgressCallback)" /> to get the string value of the field.
                </para>
        <para>
                    Since the recognition algorithm may use the checking subsystem, you must
                    set up the <see cref="T:Leadtools.Forms.Ocr.IOcrSpellCheckManager" /> prior to calling
                    <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" />. Checking recognized zone contents may consist of
                    any combination of the following:
                </para>
        <list type="bullet">
          <item>
            <description>
                            The supplied Language dictionary set through
                            <see cref="P:Leadtools.Forms.Ocr.IOcrSpellCheckManager.SpellLanguage">IOcrSpellCheckManager.SpellLanguage</see></description>
          </item>
          <item>
            <description>
                            User dictionary containing literals and/or regular expressions set
                            through
                            <see cref="P:Leadtools.Forms.Ocr.IOcrSpellCheckManager.UserDictionary">IOcrSpellCheckManager.UserDictionary</see></description>
          </item>
          <item>
            <description>
                            The user-written global checking callback set through
                            <see cref="M:Leadtools.Forms.Ocr.IOcrSpellCheckManager.SetSpellCheckCallback(Leadtools.Forms.Ocr.OcrSpellCheckCallback)">IOcrSpellCheckManager.SetSpellCheckCallback</see></description>
          </item>
        </list>
        <para>
                    To get the accuracy and timing data of the latest successful recognition
                    process use <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.GetLastStatistic" /> after calling
                    <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" />.
                </para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />.</example>
      <docaddon>yes</docaddon>
      <keywords>OCR,Recognition</keywords>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.RecognizeText(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Unrecognize" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPage~AutoZone.html">AutoZone</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrCharacter" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.RecognizingOcrPages.html">Recognizing OCR Pages</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrConfidenceReporting.html">OCR Confidence Reporting</seealso>
      <param name="callback">Optional callback to show operation progress.</param>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPage.RecognizeText(Leadtools.Forms.Ocr.OcrProgressCallback)">
      <summary>
            Recognizes the OCR data found on this <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> and returns the result as a string.
            </summary>
      <returns>A <see cref="T:System.String" /> containing the recognized characters found (or an empty string if zones on the page contains no recognition data).</returns>
      <remarks>
        <para>
                    Before calling this method call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoPreprocess(Leadtools.Forms.Ocr.OcrAutoPreprocessPageCommand,Leadtools.Forms.Ocr.OcrProgressCallback)">AutoPreprocess
                    Method</see> to perform automatic pre-processing to improve image quality. 
                    <para>
                        Use this method to get the document result in a simple
                        <see cref="T:System.String" /> object. Getting the result as text is helpful in
                        situations when adding zones manually for form processing. For example,
                        suppose the form you are processing has two areas of interests, a name
                        field at coordinates 100, 100, 400, 120 and a social security number at
                        coordinates 100, 200, 400, 220. You can structure your application as
                        follows:
                    </para><list type="number"><item><description>
                                Create a new <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object
                                D:\LEAD15\Help\DotNet\Projects\Leadtools.Forms.Ocr\Exceptions\OcrException.cs
                            </description></item><item><description>
                                Add the page to the OCR document using
                                <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.Pages">IOcrDocument.Pages</see></description></item><item><description>
                                Add the name zone manually: 
                                <para><pre><code>
            OcrZone nameZone = new OcrZone();
            nameZone.ZoneType = OcrZoneType.Text;
            nameZone.Bounds = new LogicalRectangle(100, 100, 400, 120);
            ocrPage.Zones.Add(nameZone);
            </code></pre></para></description></item><item><description>
                                Recognize the page and get the value of the name field (only this
                                one zone will recognized): 
                                <para><pre><code>
            string name = ocrPage.RecognizeText(null);
            </code></pre></para></description></item><item><description>
                                Remove the name zone from the page: 
                                <para><pre><code>
            ocrPage.Zones.Clear();
            </code></pre></para></description></item><item><description>Repeat the steps from (2) above to get the social security
                            field.</description></item></list><para>If this page is not a black/white one (i.e. it contains a gray-scale or a
                    24-bit color image), then an implicit secondary image conversion step will be
                    performed automatically to convert the image to a B/W one.</para><para><see cref="M:Leadtools.Forms.Ocr.IOcrPage.RecognizeText(Leadtools.Forms.Ocr.OcrProgressCallback)" /> utilizes the zone information to activate
                        the appropriate recognition module on every zone <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones" />
                        property. Each recognition module recognizes the page parts assigned to it
                        in the zones.
                    </para><para>
                        If the zone collection <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones" /> of this
                        <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> is empty (i.e. there are no zones defined),
                        then the page-layout decomposition process will be activated automatically
                        in order to create a zone list for the image, before recognition. Hence,
                        <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPage~AutoZone.html">
                        AutoZone</a> will be implicitly called.
                    </para><para>
                        Note: If this <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> is an empty page, in other words,
                        when the OCR engine performs automatic page decomposing with the
                        <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</see> method and could
                        not find any zones in it, the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.RecognizeText(Leadtools.Forms.Ocr.OcrProgressCallback)" /> method will
                        fail with an exception. It is recommended you call
                        <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</see> and then check if
                        there is at least one zone found by the engine (using
                        <see cref="P:System.Collections.Generic.ICollection`1.Count">Zones.Count</see>). If the count is zero,
                        do not call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.RecognizeText(Leadtools.Forms.Ocr.OcrProgressCallback)" />.
                    </para><para>
                        If a recognition module is not able to recognize an object (i.e. character,
                        or checkmark etc.), this object will be marked as a rejected one. It will
                        become marked by a rejection symbol during conversion to the final output
                        document. Note that
                        <see cref="P:Leadtools.Forms.Ocr.IOcrDocumentManager.RejectionSymbol">IOcrDocumentManager.RejectionSymbol</see>
                        can be set to specify the rejection symbol used in the final document.
                    </para><para>
                        This method uses the checking subsystem
                        (<see cref="T:Leadtools.Forms.Ocr.IOcrSpellCheckManager" />) to either flag suspicious
                        characters or words, or to allow auto-correction during the recognition
                        process.
                    </para><para>
                        You can use the <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see>
                        to show the operation progress or to abort it. For more information and an
                        example, refer to
                        <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see>.
                    </para><para>
                        Since the format of the recognized data file is not documented, you can use
                        <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters" /> and
                        <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)" /> to examine or modify the data.
                        Any changes you make to the recognition data will be saved in the resulting
                        document when you save <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" />.
                    </para><para>
                        After the page is successfully recognized, the value of the
                        <see cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized" /> property should be <strong>true</strong>.
                    </para><para>
                        Use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Unrecognize" /> to clear the recognition data stored in
                        a page.
                    </para><para>
                        Use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" /> to keep the recognition data stored
                        internally inside the page. You can later use the methods of the
                        <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object that owns this page or pages to save
                        the data to a file or memory using the many formats supported by this
                        <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> such as Text, PDF or Microsoft Word.
                    </para><para>
                        Since the recognition algorithm may use the checking subsystem, you
                        must set up the <see cref="T:Leadtools.Forms.Ocr.IOcrSpellCheckManager" /> prior to calling
                        <see cref="M:Leadtools.Forms.Ocr.IOcrPage.RecognizeText(Leadtools.Forms.Ocr.OcrProgressCallback)" />. Checking recognized zone contents may
                        consist of any combination of the following:
                    </para><list type="bullet"><item><description>
                                The supplied Language dictionary set through
                                <see cref="P:Leadtools.Forms.Ocr.IOcrSpellCheckManager.SpellLanguage">IOcrSpellCheckManager.SpellLanguage</see></description></item><item><description>
                                User dictionary containing literals and/or regular expressions set
                                through
                                <see cref="P:Leadtools.Forms.Ocr.IOcrSpellCheckManager.UserDictionary">IOcrSpellCheckManager.UserDictionary</see></description></item><item><description>
                                The user-written global checking callback set through
                                <see cref="M:Leadtools.Forms.Ocr.IOcrSpellCheckManager.SetSpellCheckCallback(Leadtools.Forms.Ocr.OcrSpellCheckCallback)">IOcrSpellCheckManager.SetSpellCheckCallback</see></description></item></list><para>
                        To get the accuracy and timing data of the latest successful recognition
                        process use <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.GetLastStatistic" /> after calling
                        <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" />.
                    </para></para>
      </remarks>
      <example>
        <para>This example gets the values of particular fields from a document.</para>
        <code lang="VB">   Public Sub RecognizeTextExample()
      ' Unlock the support needed for LEADTOOLS Plus OCR engine
      RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here")
      RasterSupport.Unlock(RasterSupportType.OcrPlus, "Replace with your own key here")
      RasterSupport.Unlock(RasterSupportType.OcrPlusPdfLeadOutput, "Replace with your own key here")
      ' Get the form file name
      Console.WriteLine("Setting up the form...")
      Dim formFileName As String = GetMyForm()

      ' Assume we get the field informations from an external source such as a database or an XML file
      Dim fieldNames() As String = _
      { _
         "Name", _
         "Address", _
         "SSN" _
      }

      Dim fieldBounds() As LogicalRectangle = _
      { _
         New LogicalRectangle(800, 160, 1500, 220, LogicalUnit.Pixel), _
         New LogicalRectangle(800, 560, 1500, 220, LogicalUnit.Pixel), _
         New LogicalRectangle(800, 960, 1500, 220, LogicalUnit.Pixel) _
      }

      Dim fieldCount As Integer = fieldNames.Length
      Dim fieldValues(fieldCount - 1) As String

      ' Create an instance of the engine
      Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, False)
         ' Start the engine using default parameters
         Console.WriteLine("Starting up the engine...")
         ocrEngine.Startup(Nothing, Nothing, Nothing, Nothing)

         ' Create an OCR document
         Dim ocrDocumentManager As IOcrDocumentManager = ocrEngine.DocumentManager
         Using ocrDocument As IOcrDocument = ocrDocumentManager.CreateDocument()

            ' Add the form to the document
            Console.WriteLine("Adding the form to the document...")
            Dim ocrPage As IOcrPage = ocrDocument.Pages.AddPage(formFileName, Nothing)

            ' Get our fields
            For i As Integer = 0 To fieldCount - 1
               ' Clear all the zones in the page
               ocrPage.Zones.Clear()

               ' Add our field zone
               Dim ocrZone As New OcrZone()
               ocrZone.ZoneType = OcrZoneType.Text
               ocrZone.Bounds = fieldBounds(i)
               ocrZone.Name = fieldNames(i) ' Optional

               Console.WriteLine("Adding the zone for field {0} to the page...", ocrZone.Name)
               ocrPage.Zones.Add(ocrZone)

               ' Recognize the page. This will only recognize the zone we added
               Console.WriteLine("Recognizing the page...")
               fieldValues(i) = ocrPage.RecognizeText(Nothing)
            Next

         End Using

         ' Shutdown the engine
         ' Note: calling Dispose will also automatically shutdown the engine if it has been started
         Console.WriteLine("Shutting down...")
         ocrEngine.Shutdown()
      End Using

      ' We are done, show the fields
      Console.WriteLine("-------------------------------------")
      Console.WriteLine("Done, values extracted from the form:")
      Console.WriteLine("-------------------------------------")
      For i As Integer = 0 To fieldCount - 1
         Console.WriteLine("{0} : {1}", fieldNames(i), fieldValues(i))
      Next
   End Sub

   Private Function GetMyForm() As String
      Dim formFileName As String = LeadtoolsExamples.Common.ImagesPath.Path + "MyForm.tif"

      ' In this example we will create the form every time
      ' This will be a TIF file 11 by 8.5 inches in size containing a name, address and social security fields
      Using image As RasterImage = New RasterImage( _
            RasterMemoryFlags.Conventional, _
            2544, _
            3294, _
            24, _
            RasterByteOrder.Bgr, _
            RasterViewPerspective.BottomLeft, _
            Nothing, _
            IntPtr.Zero, _
            0)
         image.XResolution = 300
         image.YResolution = 300

         ' Draw our fields into this image
         Dim hdc As IntPtr = RasterImagePainter.CreateLeadDC(image)

         Try
            Using g As Graphics = Graphics.FromHdc(hdc)
               g.FillRectangle(Brushes.White, 0, 0, image.ImageWidth - 1, image.ImageHeight - 1)

               Using f As New Font("Times New Roman", 80, FontStyle.Regular)
                  Using p As New Pen(Color.Black, 4)
                     Using sf As New StringFormat()
                        sf.LineAlignment = StringAlignment.Center
                        ' Draw the fields

                        ' Name
                        g.DrawString("Name:", f, Brushes.Black, 200, 200)
                        Dim rc As New Rectangle(800, 160, 1500, 220)
                        g.DrawRectangle(p, rc)
                        Dim value As String = "John Doe"
                        g.DrawString(value, f, Brushes.Black, rc, sf)

                        ' Address
                        g.DrawString("Address:", f, Brushes.Black, 200, 600)
                        rc = New Rectangle(800, 560, 1500, 220)
                        g.DrawRectangle(p, rc)
                        value = "1234 Main Street, USA"
                        g.DrawString(value, f, Brushes.Black, rc, sf)

                        ' Social security number
                        g.DrawString("SSN:", f, Brushes.Black, 200, 1000)
                        rc = New Rectangle(800, 960, 1500, 220)
                        g.DrawRectangle(p, rc)
                        value = "123-45-6789"
                        g.DrawString(value, f, Brushes.Black, rc, sf)
                     End Using
                  End Using
               End Using
            End Using
         Finally
            RasterImagePainter.DeleteLeadDC(hdc)
         End Try

         ' Save this image to disk
         RasterCodecs.Startup()
         Using codecs As New RasterCodecs()
            codecs.Save(image, formFileName, RasterImageFormat.CcittGroup4, 1)
         End Using
         RasterCodecs.Shutdown()
      End Using

      Return formFileName
   End Function</code>
        <code lang="CS">      public void RecognizeTextExample()
      {
         // Unlock the support needed for LEADTOOLS Plus OCR engine
         RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here");
         RasterSupport.Unlock(RasterSupportType.OcrPlus, "Replace with your own key here");
         RasterSupport.Unlock(RasterSupportType.OcrPlusPdfLeadOutput, "Replace with your own key here");
         // Get the form file name
         Console.WriteLine("Setting up the form...");
         string formFileName = GetMyForm();

         // Assume we get the field informations from an external source such as a database or an XML file
         string[] fieldNames =
         {
            "Name",
            "Address",
            "SSN"
         };

         LogicalRectangle[] fieldBounds =
         {
            new LogicalRectangle(800, 160, 1500, 220, LogicalUnit.Pixel),
            new LogicalRectangle(800, 560, 1500, 220, LogicalUnit.Pixel),
            new LogicalRectangle(800, 960, 1500, 220, LogicalUnit.Pixel)
         };

         int fieldCount = fieldNames.Length;
         string[] fieldValues = new string[fieldCount];

         // Create an instance of the engine
         using(IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, false))
         {
            // Start the engine using default parameters
            Console.WriteLine("Starting up the engine...");
            ocrEngine.Startup(null, null, null, null);

            // Create a document
            IOcrDocumentManager ocrDocumentManager = ocrEngine.DocumentManager;
            using(IOcrDocument ocrDocument = ocrDocumentManager.CreateDocument())
            {
               // Add the form to the document
               Console.WriteLine("Adding the form to the document...");
               IOcrPage ocrPage = ocrDocument.Pages.AddPage(formFileName, null);

               // Get our fields
               for(int i = 0; i &lt; fieldCount; i++)
               {
                  // Clear all the zones in the page
                  ocrPage.Zones.Clear();

                  // Add our field zone
                  OcrZone ocrZone = new OcrZone();
                  ocrZone.ZoneType = OcrZoneType.Text;
                  ocrZone.Bounds = fieldBounds[i];
                  ocrZone.Name = fieldNames[i]; // Optional

                  Console.WriteLine("Adding the zone for field {0} to the page...", ocrZone.Name);
                  ocrPage.Zones.Add(ocrZone);

                  // Recognize the page. This will only recognize the zone we added
                  Console.WriteLine("Recognizing the page...");
                  fieldValues[i] = ocrPage.RecognizeText(null);
               }
            }

            // Shutdown the engine
            // Note: calling Dispose will also automatically shutdown the engine if it has been started
            Console.WriteLine("Shutting down...");
            ocrEngine.Shutdown();
         }

         // We are done, show the fields
         Console.WriteLine("-------------------------------------");
         Console.WriteLine("Done, values extracted from the form:");
         Console.WriteLine("-------------------------------------");
         for(int i =0; i &lt; fieldCount; i++)
            Console.WriteLine("{0} : {1}", fieldNames[i], fieldValues[i]);
      }

      private string GetMyForm()
      {
         string formFileName = LeadtoolsExamples.Common.ImagesPath.Path + "MyForm.tif";

         // In this example we will create the form every time
         // This will be a TIF file 11 by 8.5 inches in size containing a name, address and social security fields
         using(RasterImage image = new RasterImage(
            RasterMemoryFlags.Conventional,
            2544,
            3294,
            24,
            RasterByteOrder.Bgr,
            RasterViewPerspective.BottomLeft,
            null,
            IntPtr.Zero,
            0))
         {
            image.XResolution = 300;
            image.YResolution = 300;

            // Draw our fields into this image
            IntPtr hdc = RasterImagePainter.CreateLeadDC(image);
            try
            {
               using(Graphics g = Graphics.FromHdc(hdc))
               {
                  g.FillRectangle(Brushes.White, 0, 0, image.ImageWidth - 1, image.ImageHeight - 1);

                  using(Font f = new Font("Times New Roman", 80, FontStyle.Regular))
                  {
                     using(Pen p = new Pen(Color.Black, 4))
                     {
                        using(StringFormat sf = new StringFormat())
                        {
                           sf.LineAlignment = StringAlignment.Center;
                           // Draw the fields

                           // Name
                           g.DrawString("Name:", f, Brushes.Black, 200, 200);
                           Rectangle rc = new Rectangle(800, 160, 1500, 220);
                           g.DrawRectangle(p, rc);
                           string value = "John Doe";
                           g.DrawString(value, f, Brushes.Black, rc, sf);

                           // Address
                           g.DrawString("Address:", f, Brushes.Black, 200, 600);
                           rc = new Rectangle(800, 560, 1500, 220);
                           g.DrawRectangle(p, rc);
                           value = "1234 Main Street, USA";
                           g.DrawString(value, f, Brushes.Black, rc, sf);

                           // Social security number
                           g.DrawString("SSN:", f, Brushes.Black, 200, 1000);
                           rc = new Rectangle(800, 960, 1500, 220);
                           g.DrawRectangle(p, rc);
                           value = "123-45-6789";
                           g.DrawString(value, f, Brushes.Black, rc, sf);
                        }
                     }
                  }
               }
            }
            finally
            {
               RasterImagePainter.DeleteLeadDC(hdc);
            }

            // Save this image to disk
            RasterCodecs.Startup();
            using(RasterCodecs codecs = new RasterCodecs())
            {
               codecs.Save(image, formFileName, RasterImageFormat.CcittGroup4, 1);
            }
            RasterCodecs.Shutdown();
         }

         return formFileName;
      }</code>
        <!--IOcrPage.RecognizeText-->
      </example>
      <docaddon>yes</docaddon>
      <keywords>OCR,Recognition</keywords>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Unrecognize" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPage~AutoZone.html">AutoZone</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrCharacter" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.RecognizingOcrPages.html">Recognizing OCR Pages</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrConfidenceReporting.html">OCR Confidence Reporting</seealso>
      <param name="callback">Optional callback to show operation progress.</param>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPage.Unrecognize">
      <summary>
            Destroy the recognized data internally stored in this <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />.
            </summary>
      <remarks>
        <para>The effect of calling the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Unrecognize" /> method is the same as if the application had not called the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" /> or
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.RecognizeText(Leadtools.Forms.Ocr.OcrProgressCallback)" />.</para>
        <para>After <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Unrecognize" /> is called, the value of the <see cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized" /> property of this page is set to <strong>false</strong>.</para>
      </remarks>
      <noexample />
      <docaddon>yes</docaddon>
      <keywords>OCR,Recognition</keywords>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.RecognizeText(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPage~AutoZone.html">AutoZone</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrCharacter" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.RecognizingOcrPages.html">Recognizing OCR Pages</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrConfidenceReporting.html">OCR Confidence Reporting</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">
      <summary>
            Gets the last recognized character data of this <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /></summary>
      <returns>An instance of <see cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" /> containing the last recognized characters data of this <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />.</returns>
      <remarks>
        <para>You must call this method after the <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> has been recognized with the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.RecognizeText(Leadtools.Forms.Ocr.OcrProgressCallback)" /> method. i.e., if the value of the
            <see cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized" /> property of this page is <strong>false</strong>, then calling this method will throw an exception.</para>
        <para>You can use the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters" /> to examine the recognized character data. This data contain information about the character codes, their confidence,
            guess codes, location and position in the page as well as font information. For more information, refer to <see cref="T:Leadtools.Forms.Ocr.OcrCharacter" />.</para>
        <para>The <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters" /> method returns an instance of <see cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" />, this instance is a collection of <see cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />. 
            The <see cref="P:Leadtools.Forms.Ocr.IOcrZoneCharacters.ZoneIndex">IOcrZoneCharacters.ZoneIndex</see> property contains the zero-based index of the zone. You can get the zone information by using the same
            index as the <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones" /> property of this <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />.</para>
        <para>If you wish to modify and the apply recognition data back to the page, Use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)" />.</para>
        <para>Use <see cref="M:Leadtools.Forms.Ocr.IOcrZoneCharacters.GetWords(System.Int32,System.Int32,Leadtools.Forms.LogicalUnit)">IOcrZoneCharacters.GetWords</see> to get the recognized words of a zone.</para>
        <para>
          <strong>Notes on spaces</strong>: The LEADTOOLS Plus and Advantage OCR engines will not return any space characters when using the
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters" /> method.</para>
        <para>The LEADTOOLS Professional OCR engine will not return space characters if the value of the boolean <strong>Recognition.SpaceIsValidCharacter</strong>
            setting value is <strong>false</strong> (the default). If you absolutely require space characters in the recognition results when using the LEADTOOLS
            Professional Engine, then set the value of the boolean <strong>Recognition.SpaceIsValidCharacter</strong> setting to <strong>true</strong> (
            <i>ocrEngineInstance.SettingManager.SetBooleanValue("Recognition.SpaceIsValidCharacter", true)</i>). For more information on OCR settings, refer to
            <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> and <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettingsProfessional.html">LEADTOOLS OCR Professional Engine Settings</a>.</para>
        <para>The <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)" /> method will accept space characters in the LEADTOOLS Plus and Advantage engines. However, these space characters
            will be used when generating the final document (PDF) and might affect the final output. Therefore, it is not recommended that you insert space characters when
            using the LEADTOOLS Plus and Advantage engines.</para>
        <para>The LEADTOOLS Professional OCR engine will strip any space characters from the results passed to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)" /> if the value of the
            boolean <strong>Recognition.SpaceIsValidCharacter</strong> setting value is <strong>false</strong> (the default). If you absolutely require space characters in
            the recognition results when using the LEADTOOLS Professional Engine, then set the value of the boolean <strong>Recognition.SpaceIsValidCharacter</strong> setting
            to <strong>true</strong> before calling <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)" />.</para>
        <para>If you use the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)" /> methods to modify the recognition result prior to saving to an
            output file, and you are planning on using the engine native save capability (through setting the <see cref="P:Leadtools.Forms.Ocr.IOcrDocumentManager.EngineFormat">IOcrDocumentManager.EngineFormat</see>
            property and using <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.User</see> in the <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~Save.html">IOcrDocument.Save</a> method),
            then you must change the boolean <strong>Recognition.SpaceIsValidCharacter</strong> setting to <strong>true</strong>.</para>
      </remarks>
      <example>
        <para>This example will get the recognized characters of a page, modify them and set them back before saving the final document.</para>
        <code lang="VB">   Public Sub RecognizedCharactersExample()
      ' Unlock the support needed for LEADTOOLS Plus OCR engine
      RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here")
      RasterSupport.Unlock(RasterSupportType.OcrPlus, "Replace with your own key here")
      RasterSupport.Unlock(RasterSupportType.OcrPlusPdfLeadOutput, "Replace with your own key here")
      ' Create an image with some text in it
      Dim image As New RasterImage(RasterMemoryFlags.Conventional, 320, 200, 24, RasterByteOrder.Bgr, RasterViewPerspective.TopLeft, Nothing, IntPtr.Zero, 0)
      Dim imageRect As New Rectangle(0, 0, image.ImageWidth, image.ImageHeight)
      Dim hdc As IntPtr = RasterImagePainter.CreateLeadDC(image)

      Using g As Graphics = Graphics.FromHdc(hdc)
         g.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.HighQuality
         g.FillRectangle(Brushes.White, imageRect)

         Using f As New Font("Arial", 20, FontStyle.Regular)
            g.DrawString("Normal line", f, Brushes.Black, 0, 0)
         End Using

         Using f As New Font("Arial", 20, FontStyle.Bold Or FontStyle.Italic)
            g.DrawString("Bold and italic line", f, Brushes.Black, 0, 40)
         End Using

         Using f As New Font("Courier New", 20, FontStyle.Regular)
            g.DrawString("Monospaced line", f, Brushes.Black, 0, 80)
         End Using
      End Using

      RasterImagePainter.DeleteLeadDC(hdc)

      Dim textFileName As String = LeadtoolsExamples.Common.ImagesPath.Path + "MyImageWithTest.txt"
      Dim pdfFileName As String = LeadtoolsExamples.Common.ImagesPath.Path + "MyImageWithTest.pdf"

      ' Create an instance of the engine
      Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, False)
         ' Start the engine using default parameters
         ocrEngine.Startup(Nothing, Nothing, Nothing, Nothing)

         ' Create an OCR document
         Using ocrDocument As IOcrDocument = ocrEngine.DocumentManager.CreateDocument()

            ' Add this image to the document
            Dim ocrPage As IOcrPage = ocrDocument.Pages.AddPage(image, Nothing)
            image.Dispose()

            ' Recognize this page
            ocrPage.Recognize(Nothing)

            ' Dump the characters into a text file
            Using writer As StreamWriter = File.CreateText(textFileName)
               Dim ocrPageCharacters As IOcrPageCharacters = ocrPage.GetRecognizedCharacters()
               For Each ocrZoneCharacters As IOcrZoneCharacters In ocrPageCharacters
                  ' Show the words found in this zone. Get the word boundaries in inches
                  Dim words As ICollection(Of OcrWord) = ocrZoneCharacters.GetWords(ocrPage.DpiX, ocrPage.DpiY, LogicalUnit.Inch)
                  Console.WriteLine("Words:")
                  For Each word As OcrWord In words
                     Console.WriteLine("Word: {0}, at {1}, characters index from {2} to {3}", word.Value, word.Bounds, word.FirstCharacterIndex, word.LastCharacterIndex)
                  Next

                  Dim nextCharacterIsNewWord As Boolean = True

                  For i As Integer = 0 To ocrZoneCharacters.Count - 1
                     Dim ocrCharacter As OcrCharacter = ocrZoneCharacters(i)

                     ' Capitalize the first letter if this is a new word
                     If (nextCharacterIsNewWord) Then
                        ocrCharacter.Code = Char.ToUpper(ocrCharacter.Code)
                     End If

                     writer.WriteLine("Code: {0}, Confidence: {1}, WordIsCertain: {2}, Bounds: {3}, Position: {4}, FontSize: {5}, FontStyle: {6}", _
                        ocrCharacter.Code, _
                        ocrCharacter.Confidence, _
                        ocrCharacter.WordIsCertain, _
                        ocrCharacter.Bounds, _
                        ocrCharacter.Position, _
                        ocrCharacter.FontSize, _
                        ocrCharacter.FontStyle)

                     ' If the charcater is italic, make it underline
                     If ((ocrCharacter.FontStyle And OcrCharacterFontStyle.Italic) = OcrCharacterFontStyle.Italic) Then
                        ocrCharacter.FontStyle = ocrCharacter.FontStyle And (Not OcrCharacterFontStyle.Italic)
                        ocrCharacter.FontStyle = ocrCharacter.FontStyle Or OcrCharacterFontStyle.Underline
                     End If

                     ' Check if next character is the start of a new word
                     If ((ocrCharacter.Position And OcrCharacterPosition.EndOfWord) = OcrCharacterPosition.EndOfWord OrElse _
                           (ocrCharacter.Position And OcrCharacterPosition.EndOfLine) = OcrCharacterPosition.EndOfLine) Then
                        nextCharacterIsNewWord = True
                     Else
                        nextCharacterIsNewWord = False
                     End If

                     ocrZoneCharacters(i) = ocrCharacter
                  Next
               Next

               ' Replace the characters with the modified one before we save
               ocrPage.SetRecognizedCharacters(ocrPageCharacters)
            End Using

            ' Show the recognition results
            ' Set the PDF options to save as PDF/A text only
            Dim pdfOptions As PdfDocumentOptions = DirectCast(ocrEngine.DocumentWriterInstance.GetOptions(DocumentFormat.Pdf), PdfDocumentOptions)
            pdfOptions.DocumentType = PdfDocumentType.PdfA
            pdfOptions.ImageOverText = False
            ocrEngine.DocumentWriterInstance.SetOptions(DocumentFormat.Pdf, pdfOptions)

            ocrDocument.Save(pdfFileName, DocumentFormat.Pdf, Nothing)

            ' Open and check the result file, it should contain the following text
            ' "Normal Line"
            ' "Bold And Italic Line"
            ' "Monospaced Line"
            ' With the second line bold and underlined now
         End Using

         ' Shutdown the engine
         ' Note: calling Dispose will also automatically shutdown the engine if it has been started
         ocrEngine.Shutdown()
      End Using
   End Sub</code>
        <code lang="CS">      public void RecognizedCharactersExample()
      {
         // Unlock the support needed for LEADTOOLS Plus OCR engine
         RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here");
         RasterSupport.Unlock(RasterSupportType.OcrPlus, "Replace with your own key here");
         RasterSupport.Unlock(RasterSupportType.OcrPlusPdfLeadOutput, "Replace with your own key here");
         // Create an image with some text in it
         RasterImage image = new RasterImage(RasterMemoryFlags.Conventional, 640, 200, 24, RasterByteOrder.Bgr, RasterViewPerspective.TopLeft, null, IntPtr.Zero, 0);
         Rectangle imageRect = new Rectangle(0, 0, image.ImageWidth, image.ImageHeight);

         IntPtr hdc = RasterImagePainter.CreateLeadDC(image);
         using(Graphics g = Graphics.FromHdc(hdc))
         {
            g.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.HighQuality;
            g.FillRectangle(Brushes.White, imageRect);

            using(Font f = new Font("Arial", 20, FontStyle.Regular))
               g.DrawString("Normal line", f, Brushes.Black, 0, 0);

            using(Font f = new Font("Arial", 20, FontStyle.Bold))
               g.DrawString("Bold, italic and underline", f, Brushes.Black, 0, 40);

            using(Font f = new Font("Courier New", 20, FontStyle.Regular))
               g.DrawString("Monospaced line", f, Brushes.Black, 0, 80);
         }

         RasterImagePainter.DeleteLeadDC(hdc);

         string textFileName = LeadtoolsExamples.Common.ImagesPath.Path + "MyImageWithTest.txt";
         string pdfFileName = LeadtoolsExamples.Common.ImagesPath.Path + "MyImageWithTest.pdf";

         // Create an instance of the engine
         using(IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, false))
         {
            // Start the engine using default parameters
            ocrEngine.Startup(null, null, null, null);

            // Create an OCR document
            using(IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument())
            {
               // Add this image to the document
               IOcrPage ocrPage = ocrDocument.Pages.AddPage(image, null);
               image.Dispose();

               // Recognize this page
               ocrPage.Recognize(null);

               // Dump the characters into a text file
               using(StreamWriter writer = File.CreateText(textFileName))
               {
                  IOcrPageCharacters ocrPageCharacters = ocrPage.GetRecognizedCharacters();
                  foreach(IOcrZoneCharacters ocrZoneCharacters in ocrPageCharacters)
                  {
                     // Show the words found in this zone. Get the word boundaries in inches
                     ICollection&lt;OcrWord&gt; words = ocrZoneCharacters.GetWords(ocrPage.DpiX, ocrPage.DpiY, LogicalUnit.Inch);
                     Console.WriteLine("Words:");
                     foreach(OcrWord word in words)
                        Console.WriteLine("Word: {0}, at {1}, characters index from {2} to {3}", word.Value, word.Bounds, word.FirstCharacterIndex, word.LastCharacterIndex);

                     bool nextCharacterIsNewWord = true;

                     for(int i = 0; i &lt; ocrZoneCharacters.Count; i++)
                     {
                        OcrCharacter ocrCharacter  = ocrZoneCharacters[i];

                        // Capitalize the first letter if this is a new word
                        if(nextCharacterIsNewWord)
                           ocrCharacter.Code = Char.ToUpper(ocrCharacter.Code);

                        writer.WriteLine("Code: {0}, Confidence: {1}, WordIsCertain: {2}, Bounds: {3}, Position: {4}, FontSize: {5}, FontStyle: {6}",
                           ocrCharacter.Code,
                           ocrCharacter.Confidence,
                           ocrCharacter.WordIsCertain,
                           ocrCharacter.Bounds,
                           ocrCharacter.Position,
                           ocrCharacter.FontSize,
                           ocrCharacter.FontStyle);

                        // If the charcater is bold, make it underline
                        if((ocrCharacter.FontStyle &amp; OcrCharacterFontStyle.Bold) == OcrCharacterFontStyle.Bold)
                        {
                           ocrCharacter.FontStyle |= OcrCharacterFontStyle.Italic;
                           ocrCharacter.FontStyle |= OcrCharacterFontStyle.Underline;
                        }

                        // Check if next character is the start of a new word
                        if((ocrCharacter.Position &amp; OcrCharacterPosition.EndOfWord) == OcrCharacterPosition.EndOfWord ||
                           (ocrCharacter.Position &amp; OcrCharacterPosition.EndOfLine) == OcrCharacterPosition.EndOfLine)
                           nextCharacterIsNewWord = true;
                        else
                           nextCharacterIsNewWord = false;

                        ocrZoneCharacters[i] = ocrCharacter;
                     }
                  }

                  // Replace the characters with the modified one before we save
                  ocrPage.SetRecognizedCharacters(ocrPageCharacters);
               }

               // Show the recognition results
               // Set the PDF options to save as PDF/A text only
               PdfDocumentOptions pdfOptions = ocrEngine.DocumentWriterInstance.GetOptions(DocumentFormat.Pdf) as PdfDocumentOptions;
               pdfOptions.DocumentType = PdfDocumentType.PdfA;
               pdfOptions.ImageOverText = false;
               ocrEngine.DocumentWriterInstance.SetOptions(DocumentFormat.Pdf, pdfOptions);

               ocrDocument.Save(pdfFileName, DocumentFormat.Pdf, null);

               // Open and check the result file, it should contain the following text
               // "Normal Line"
               // "Bold And Italic Line"
               // "Monospaced Line"
               // With the second line bold and underlined now
            }

            // Shutdown the engine
            // Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown();
         }
      }</code>
        <!--IOcrPage.RecognizedCharacters-->
      </example>
      <docaddon>yes</docaddon>
      <keywords>OCR,Recognition|OCR,Confidence</keywords>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrCharacter" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPage~AutoZone.html">AutoZone</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrConfidenceReporting.html">OCR Confidence Reporting</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">
      <summary>
            Sets the recognized character data of this <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /></summary>
      <param name="pageCharacters">The modified page characters to set.</param>
      <remarks>
        <para>Use this method to set the recognized characters of a page after you modify them. To get the recognized characters of a page use <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters" />.</para>
        <para>You must call this method after the <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> has been recognized with the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.RecognizeText(Leadtools.Forms.Ocr.OcrProgressCallback)" /> method. i.e., if the value of the
            <see cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized" /> property of this page is <strong>false</strong>, then calling this method will throw an exception.</para>
        <para>You can use the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters" /> to examine the recognized character data. This data contain information about the character codes, their confidence,
            guess codes, location and position in the page as well as font information. For more information, refer to <see cref="T:Leadtools.Forms.Ocr.OcrCharacter" />.</para>
        <para>The <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters" /> method returns an instance of <see cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" />, this instance is a collection of <see cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />
            objects. Each of the <see cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" /> objects will contain the collection of the <see cref="T:Leadtools.Forms.Ocr.OcrCharacter" /> that forms a zone in the page. The
            <see cref="P:Leadtools.Forms.Ocr.IOcrZoneCharacters.ZoneIndex">IOcrZoneCharacters.ZoneIndex</see> property contains the zero-based index of the zone. You can get the zone information by using the same
            index with the getter of the <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones" /> property of this <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />.</para>
        <para>Use <see cref="M:Leadtools.Forms.Ocr.IOcrZoneCharacters.GetWords(System.Int32,System.Int32,Leadtools.Forms.LogicalUnit)">IOcrZoneCharacters.GetWords</see> to get the recognized words of a zone.</para>
        <para>
          <strong>Notes on spaces</strong>: The LEADTOOLS Plus and Advantage OCR engines will not return any space characters when using the
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters" /> method.</para>
        <para>The LEADTOOLS Professional OCR engine will not return space characters if the value of the boolean <strong>Recognition.SpaceIsValidCharacter</strong>
            setting value is <strong>false</strong> (the default). If you absolutely require space characters in the recognition results when using the LEADTOOLS
            Professional Engine, then set the value of the boolean <strong>Recognition.SpaceIsValidCharacter</strong> setting to <strong>true</strong> (
            <i>ocrEngineInstance.SettingManager.SetBooleanValue("Recognition.SpaceIsValidCharacter", true)</i>). For more information on OCR settings, refer to
            <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> and <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettingsProfessional.html">LEADTOOLS OCR Professional Engine Settings</a>.</para>
        <para>The <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)" /> method will accept space characters in the LEADTOOLS Plus and Advantage engines. However, these space characters
            will be used when generating the final document (PDF) and might affect the final output. Therefore, it is not recommended that you insert space characters when
            using the LEADTOOLS Plus and Advantage engines.</para>
        <para>The LEADTOOLS Professional OCR engine will strip any space characters from the results passed to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)" /> if the value of the
            boolean <strong>Recognition.SpaceIsValidCharacter</strong> setting value is <strong>false</strong> (the default). If you absolutely require space characters in
            the recognition results when using the LEADTOOLS Professional Engine, then set the value of the boolean <strong>Recognition.SpaceIsValidCharacter</strong> setting
            to <strong>true</strong> before calling <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)" />.</para>
        <para>If you use the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)" /> methods to modify the recognition result prior to saving to an
            output file, and you are planning on using the engine native save capability (through setting the <see cref="P:Leadtools.Forms.Ocr.IOcrDocumentManager.EngineFormat">IOcrDocumentManager.EngineFormat</see>
            property and using <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.User</see> in the <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~Save.html">IOcrDocument.Save</a> method),
            then you must change the boolean <strong>Recognition.SpaceIsValidCharacter</strong> setting to <strong>true</strong>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters" /></example>
      <docaddon>yes</docaddon>
      <keywords>OCR,Recognition|OCR,Confidence</keywords>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrCharacter" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPage~AutoZone.html">AutoZone</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrPage.Document">
      <summary>
            Gets the OCR document that own this page
            </summary>
      <value>The instance of <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> that own this page.</value>
      <noremarks />
      <noexample />
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrDocument" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrPage.Width">
      <summary>
            Gets the width in pixels of this page.
            </summary>
      <value>The width in pixels of this page.</value>
      <remarks>
        <para>You can get the height of this page with the <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Height" /> property.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrPage.Height">
      <summary>
            Gets the height in pixels of this page.
            </summary>
      <value>The height in pixels of this page.</value>
      <remarks>
        <para>You can get the width of this page with the <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Width" /> property.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrPage.BitsPerPixel">
      <summary>
            Gets the number of bits per pixel of this page.
            </summary>
      <value>The number of bits per pixel of this page.</value>
      <remarks>
        <para>You can get the palette used by this page (if any) with the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetPalette" /> method.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrPage.BytesPerLine">
      <summary>
            Gets the number of bytes per line (stride) of this page.
            </summary>
      <value>The number of bytes per line (stride) of this page.</value>
      <noremarks />
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrPage.DpiX">
      <summary>
            Gets the horizontal resolution value in dots per inch of this page.
            </summary>
      <value>The horizontal resolution value in dots per inch of this page.</value>
      <remarks>
            You can get the vertical resolution of the page with the <see cref="P:Leadtools.Forms.Ocr.IOcrPage.DpiY" /> property.
            </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrPage.DpiY">
      <summary>
            Gets the vertical resolution value in dots per inch of this page.
            </summary>
      <value>The vertical resolution value in dots per inch of this page.</value>
      <remarks>
            You can get the horizontal resolution of the page with the <see cref="P:Leadtools.Forms.Ocr.IOcrPage.DpiX" /> property.
            </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrPage.OriginalFormat">
      <summary>
            Gets the original file format of the page.
            </summary>
      <value>A <see cref="T:Leadtools.RasterImageFormat" /> enumeration member indicating the original file format of this page.</value>
      <remarks>
        <para>The original file format of the page is the format of the original file on disk, memory or URL, used when creating this <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />. If this 
            page was created from a <see cref="T:Leadtools.RasterImage" /> object created directly in memory, the format will be <see cref="T:Leadtools.RasterImageFormat">RasterImageFormat.Unknown</see>.</para>
        <para>The value of the <see cref="P:Leadtools.Forms.Ocr.IOcrPage.OriginalFormat" /> property can be useful when exporting the page back into a disk file with the format it was originally loaded from.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized">
      <summary>
            Gets a value that indicates whether this page has been recognized at least once.
            </summary>
      <value>
        <strong>true</strong> if this <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> has been recognized at least once, otherwise it is <strong>false</strong>.</value>
      <remarks>
        <para>You can recognize a page with the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.RecognizeText(Leadtools.Forms.Ocr.OcrProgressCallback)" /> methods. The OCR recognition data is collected and stored internally in the
            page. You can also recognize all or some of the pages in the engine with the
            <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPageCollection~Recognize.html">IOcrPageCollection.Recognize</a>
            method of the collection that owns this page (<see cref="P:Leadtools.Forms.Ocr.IOcrDocument.Pages">IOcrDocument.Pages</see>).</para>
        <para>Once a page is recognized, you can call the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)" /> methods to examine and manipulate the recognition data.</para>
        <para>You can call the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Unrecognize" /> method to clear the recognition data stored inside the page. Calling this method after the page is recognized will have
            the same effect as having a page that never been recognized. The value of <see cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized" /> will be set back to <strong>false</strong> after calling
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Unrecognize" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrDocument" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrPage.Zones">
      <summary>
            Gets the zones of this <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />.
            </summary>
      <value>A <see cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" /> object that contains the zones of this <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />.</value>
      <remarks>
        <para>An OCR zone is a rectangular area on a page containing a feature of interest to the user</para>
        <para>Each <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> object contains one instance of the <see cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" /> interface. <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones" /> will contain all the zones added to the page
            either manually through the <see cref="M:System.Collections.Generic.ICollection`1.Add(`0)">IOcrZoneCollection.Add</see> or <see cref="M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)">IOcrZoneCollection.Insert</see> methods
            or the zones automatically generated with the <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPage~AutoZone.html">AutoZone</a> method.</para>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" /> interface implements standard .NET <see cref="T:System.Collections.Generic.ICollection`1" />, <see cref="T:System.Collections.Generic.IList`1" />, and <see cref="T:System.Collections.Generic.IEnumerable`1" /> interfaces
            and hence, you can use the member of these interfaces to add, remove, get, set and iterate through the different zones of this page.</para>
        <para>Each zone is defined by the <see cref="T:Leadtools.Forms.Ocr.OcrZone" /> structure.</para>
        <para>Calling <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPage~AutoZone.html">AutoZone</a> will clear the zones of the page before adding the new zones found.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrZone" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">AutoZone</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrDocument" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.WorkingWithOcrZones.html">Working with OCR Zones</seealso>
    </member>
    <member name="T:Leadtools.Forms.Ocr.IOcrSpellCheckManager">
      <summary>
            Manages the spell checking sub system of the OCR engine.
            </summary>
      <keywords>Spell language|Languages|Checking spelling</keywords>
      <remarks>
        <para>You can access the instance of the <see cref="T:Leadtools.Forms.Ocr.IOcrSpellCheckManager" /> used by an <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> through the
            <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.SpellCheckManager">IOcrEngine.SpellCheckgManager</see> property.</para>
        <para>The functionality of the checking subsystem consists of three separate parts:
            <list type="number"><item><description>Spell checking through the language dictionaries. You can enable and disable the spell languages used through in the system with the
            <see cref="P:Leadtools.Forms.Ocr.IOcrSpellCheckManager.SpellLanguage">IOcrSpellCheckManager.SpellLanguage</see> property.</description></item><item><description>User dictionary checking. You can control the use of a user dictionary through the <see cref="T:Leadtools.Forms.Ocr.IOcrUserDictionary" /> interface methods accessed by the
            <see cref="P:Leadtools.Forms.Ocr.IOcrSpellCheckManager.UserDictionary">IOcrSpellCheckManager.UserDictionary</see> property.</description></item><item><description>User-defined checking through the use of the global <see cref="T:Leadtools.Forms.Ocr.OcrSpellCheckCallback">OcrSpellCheckCallback</see> callback which can be set by the
            <see cref="M:Leadtools.Forms.Ocr.IOcrSpellCheckManager.SetSpellCheckCallback(Leadtools.Forms.Ocr.OcrSpellCheckCallback)">IOcrSpellCheckManager.SetSpellCheckCallback</see> method.</description></item></list></para>
        <para>The value of the <see cref="P:Leadtools.Forms.Ocr.IOcrSpellCheckManager.Enabled">IOcrSpellCheckManager.Enabled</see> acts as a global switch to turn the spell checking system on or off.
            If the value of this property is <strong>false</strong>, then no spell checking is perform regardless of the state of the three parts of the system described above.</para>
        <para>If the value of the <see cref="P:Leadtools.Forms.Ocr.IOcrSpellCheckManager.Enabled">IOcrSpellCheckManager.Enabled</see> is set to <strong>true</strong>, then the spell checking system is
            enabled and you can control and enable/disable various aspects of the system by modifying the three parts described above.</para>
        <para>
          <strong>Note:</strong> The <see cref="P:Leadtools.Forms.Ocr.IOcrSpellCheckManager.SpellLanguage">IOcrSpellCheckManager.SpellLanguage</see> property is read only for LEADTOOLS OCR Advantage Engine, setting this property will have no effect because the spell language will always be the same as the currently enabled language.</para>
        <para>
          <strong>Note:</strong> User-defined checking through the <see cref="T:Leadtools.Forms.Ocr.OcrSpellCheckCallback">OcrSpellCheckCallback</see> callback is not supported when using the LEADTOOLS OCR Advantage Engine.</para>
        <para>
          <strong>Note:</strong> User dictionaries are only supported in the Advantage OCR engine in this version of LEADTOOLS. Using the functionality of the <see cref="T:Leadtools.Forms.Ocr.IOcrUserDictionary" /> interface in any other engine will have no effect on the recognition results.</para>
      </remarks>
      <keywords>OCR,Spelling and correction</keywords>
      <example>
        <para>This example will set various properties of the spell checking system.</para>
        <code lang="VB">   Public Sub OcrSpellCheckManagerExample()
      ' Unlock the support needed for LEADTOOLS Plus OCR engine
      RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here")
      RasterSupport.Unlock(RasterSupportType.OcrPlus, "Replace with your own key here")
      RasterSupport.Unlock(RasterSupportType.OcrPlusPdfLeadOutput, "Replace with your own key here")
      ' Create an instance of the engine
      Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, False)
         ' Start the engine using default parameters
         ocrEngine.Startup(Nothing, Nothing, Nothing, Nothing)

         Dim spellCheckManager As IOcrSpellCheckManager = ocrEngine.SpellCheckManager

         ' Get the spell language supported (languages with a dictionary)
         Dim spellLanguages() As String = spellCheckManager.GetSupportedSpellLanguages()
         For Each spellLanguage As String In spellLanguages
            Console.WriteLine(spellLanguage)
         Next

         ' Check if English is supported
         Dim language As String = "en"
         If (spellCheckManager.IsSpellLanguageSupported(language)) Then
            ' Yes, set it
            spellCheckManager.SpellLanguage = language
            Console.WriteLine("Current spell language: {0}", spellCheckManager.SpellLanguage)
         End If

         ' Enable the spell checking system
         spellCheckManager.Enabled = True

         ' Now perform other OCR functions here

         ' Shutdown the engine
         ' Note: calling Dispose will also automatically shutdown the engine if it has been started
         ocrEngine.Shutdown()
      End Using
   End Sub</code>
        <code lang="CS">      public void OcrSpellCheckManagerExample()
      {
         // Unlock the support needed for LEADTOOLS Plus OCR engine
         RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here");
         RasterSupport.Unlock(RasterSupportType.OcrPlus, "Replace with your own key here");
         RasterSupport.Unlock(RasterSupportType.OcrPlusPdfLeadOutput, "Replace with your own key here");
         // Create an instance of the engine
         using(IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, false))
         {
            // Start the engine using default parameters
            ocrEngine.Startup(null, null, null, null);

            IOcrSpellCheckManager spellCheckManager = ocrEngine.SpellCheckManager;

            // Get the spell language supported (languages with a dictionary)
            string[] spellLanguages = spellCheckManager.GetSupportedSpellLanguages();
            foreach(string spellLanguage in spellLanguages)
               Console.WriteLine(spellLanguage);

            // Check if English is supported
            string language = "en";
            if(spellCheckManager.IsSpellLanguageSupported(language))
            {
               // Yes, set it
               spellCheckManager.SpellLanguage = language;
               Console.WriteLine("Current spell language: {0}", spellCheckManager.SpellLanguage);
            }

            // Enable the spell checking system
            spellCheckManager.Enabled = true;

            // Now perform other OCR functions here

            // Shutdown the engine
            // Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown();
         }
      }</code>
        <!--IOcrSpellCheckManager-->
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">IOcrEngine.Startup</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrEngine.IsStarted">IOcrEngine.IsStarted</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Shutdown">IOcrEngine.Shutdown</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrLanguageGroup" />
      <see href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrSettingManager.html">IOcrSettingManager</see>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrSpellLanguageDictionaries.html">OCR Spell Language Dictionaries</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.WorkingWithOcrUserDictionaries.html">Working With OCR User Dictionaries</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrLanguagesAndSpellChecking.html">OCR Languages and Spell Checking</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrSpellCheckManager.GetSupportedSpellLanguages">
      <summary>
            Gets the spell languages supported by the engine.
            </summary>
      <value>An array of string values containing the names of the spell languages supported by the engine.</value>
      <remarks>
        <para>This method returns the names of all the languages that support a language dictionary.</para>
        <para>To get or set the current spell language, use <see cref="P:Leadtools.Forms.Ocr.IOcrSpellCheckManager.SpellLanguage" />. The value you set in the <see cref="P:Leadtools.Forms.Ocr.IOcrSpellCheckManager.SpellLanguage" /> property must be one of the values
            returned by the <see cref="M:Leadtools.Forms.Ocr.IOcrSpellCheckManager.GetSupportedSpellLanguages" /> method (along with two special values).</para>
        <para>For more information about the spell checking system, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSpellCheckManager" />.</para>
        <para>For more information about the format of language names, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrLanguageManager" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSpellCheckManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrSpellCheckManager.SpellLanguage" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrLanguageManager" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrSpellLanguageDictionaries.html"> OCR Spell Language Dictionaries</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrLanguagesAndSpellChecking.html">OCR Languages and Spell Checking</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrSpellCheckManager.IsSpellLanguageSupported(System.String)">
      <summary>
            Gets a value that determine whether a given spell language is supported by the engine.
            </summary>
      <param name="name">The language name. For more information about the format of language names, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrLanguageManager" />.</param>
      <returns>
        <strong>True</strong> if this language can be used as the spell language; otherwise it is <strong>false</strong>.</returns>
      <remarks>
        <para>You can get the names of all the spell languages supported by the engine with the <see cref="M:Leadtools.Forms.Ocr.IOcrSpellCheckManager.GetSupportedSpellLanguages" /> method.</para>
        <para>You can get or set the current spell language in the engine with the <see cref="P:Leadtools.Forms.Ocr.IOcrSpellCheckManager.SpellLanguage" /> property. The value you pass to <see cref="P:Leadtools.Forms.Ocr.IOcrSpellCheckManager.SpellLanguage" /> must be one
            of the values reported to be supported by the engine.</para>
        <para>For more information about the spell checking system, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSpellCheckManager" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSpellCheckManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrSpellCheckManager.SpellLanguage" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrSpellCheckManager.GetSupportedSpellLanguages" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrLanguageManager" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrSpellLanguageDictionaries.html">OCR Spell Language Dictionaries</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrLanguagesAndSpellChecking.html">OCR Languages and Spell Checking</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrSpellCheckManager.SetSpellCheckCallback(Leadtools.Forms.Ocr.OcrSpellCheckCallback)">
      <summary>
            Sets the global user defined spell checking callback.
            </summary>
      <param name="callback">The user defined spell checking callback. Or <strong>null</strong> (<strong>Nothing</strong> in Visual Basic) to turn off user defined
            spell checking.</param>
      <remarks>
        <para>This callback should be used for zones where the accuracy of the recognition could be improved by providing the recognition module involved with additional
            checking information derived from the application.</para>
        <para>For more information about the spell checking system, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSpellCheckManager" />.</para>
        <para>
          <strong>Note: This method is not supported in the LEADTOOLS OCR Advantage Engine, any call to this method will have no effect.</strong>
        </para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrSpellCheckManager.SetSpellCheckCallback(Leadtools.Forms.Ocr.OcrSpellCheckCallback)" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrSpellCheckCallback" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrSpellCheckManager.Enabled">
      <summary>
            Gets or sets a value indicating whether the spell checking system is enabled.
            </summary>
      <value>
        <strong>True</strong> the spell checking system is enabled; otherwise it is <strong>false</strong>.</value>
      <remarks>
        <para>For more information about the spell checking system, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSpellCheckManager" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSpellCheckManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrSpellCheckManager.SpellLanguage">
      <summary>
            Gets or sets a value that indicate the spelling language for the spell checking of the checking subsystem.
            </summary>
      <value>A string value that represent the name of the spelling language for the spell checking of the checking subsystem.</value>
      <remarks>
        <para>The name of the spelling language should be in the same format used in specifying character set languages as described in <see cref="T:Leadtools.Forms.Ocr.IOcrLanguageManager" />. Once you set
            a spell language and assuming the spell checking system is enabled, the engine will now use this language dictionary to check and correct the spelling of the recognized text.</para>
        <para>You can get the names of the spelling languages supported by the system with the <see cref="M:Leadtools.Forms.Ocr.IOcrSpellCheckManager.GetSupportedSpellLanguages" /> method.</para>
        <para>In addition to the values returned by <see cref="M:Leadtools.Forms.Ocr.IOcrSpellCheckManager.GetSupportedSpellLanguages" />, you can use the following special string case-sensitive values:
            <list type="table"><listheader><term>Value</term><description>Description</description></listheader><item><term>A <strong>null</strong> (<strong>Nothing</strong> in Visual Basic) string reference</term><description>Automatic spell language selection. If only one language has been enabled in the language environment with the
            <see cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.EnableLanguages(System.String[])">IOcrLanguageManager.EnableLanguages</see> method, then this language will be automatically selected for spelling too providing
            it is one of the languages supported by the spelling check system (one of the values returned by <see cref="M:Leadtools.Forms.Ocr.IOcrSpellCheckManager.GetSupportedSpellLanguages" />).</description></item><item><term>none</term><description>The checking subsystem will not use the Language dictionary at all.</description></item></list></para>
        <para>For more information about the spell checking system, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSpellCheckManager" />.</para>
        <para>
          <strong>Note: This property is read only for the LEADTOOLS OCR Advantage Engine, setting this property will have no effect becuase the spell language will always be the same as the currently enabled language.</strong>
        </para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSpellCheckManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrSpellCheckManager.GetSupportedSpellLanguages" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrLanguageManager" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrSpellLanguageDictionaries.html">OCR Spell Language Dictionaries</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrLanguagesAndSpellChecking.html">OCR Languages and Spell Checking</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrSpellCheckManager.UserDictionary">
      <summary>
            Gets the user dictionary settings currently used in the engine.
            </summary>
      <value>An <see cref="T:Leadtools.Forms.Ocr.IOcrUserDictionary" /> interface implementation object that define the user dictionary currently used in the checking subsystem.</value>
      <remarks>
        <para>
          <strong>Important Note:</strong> User dictionaries are only supported in the Advantage OCR engine in this version of LEADTOOLS. Using the functionality of the <see cref="T:Leadtools.Forms.Ocr.IOcrUserDictionary" /> interface in any other engine will have no effect on the recognition results.</para>
        <para>For more information about the spell checking system, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSpellCheckManager" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrUserDictionary" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrUserDictionary" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.WorkingWithOcrUserDictionaries.html">Working With OCR User Dictionaries</seealso>
    </member>
    <member name="T:Leadtools.Forms.Ocr.OcrSettingValueType">
      <summary>
            Defines a setting type.
            </summary>
      <remarks>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> is a wrapper for different OCR engines, these engines contain specific additional features and functionalities that can be queried and updated using
            the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface.</para>
        <para>You can use the different methods of the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface to get and set the engine specific settings. Each setting has a unique name
            (a string value). You can get all the settings available to the current OCR engine through the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames">IOcrSettingManager.GetSettingNames</see>
            method. The <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)">IOcrSettingManager.GetSettingDescriptor</see> method returns a description of the setting (its type, friendly name and
            value range), you can then use the various setting get and set methods to query and change the value of a certain setting. For example, if the setting type is
            <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Integer</see>, you can use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetIntegerValue(System.String)">IOcrSettingManager.GetIntegerValue</see> to get
            the current value of the setting and the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetIntegerValue(System.String,System.Int32)">IOcrSettingManager.SetIntegerValue</see> to change its value. Refer to
            <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> for a complete example.</para>
        <para>For a list of supported engine specific settings and their meanings, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettings.html">OCR Engine Specific Settings</a>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSettingDescriptor" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettings.html">OCR Engine Specific Settings</seealso>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrSettingValueType.BeginCategory">
      <summary>
            Beginning of a new category. This setting has no value.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrSettingValueType.EndCategory">
      <summary>
            End of the current category. This setting has no value.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrSettingValueType.Integer">
      <summary>
            An integer setting.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrSettingValueType.Enum">
      <summary>
            An enum setting.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrSettingValueType.Double">
      <summary>
            A double value setting.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrSettingValueType.Boolean">
      <summary>
            A boolean setting (<strong>true</strong> or <strong>false</strong>).
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrSettingValueType.Character">
      <summary>
            A character (UNICODE) setting.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrSettingValueType.String">
      <summary>
            A string (UNICODE) setting.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrSettingValueType.Rectangle">
      <summary>
            A <see cref="T:Leadtools.Forms.LogicalRectangle" /> setting.
            </summary>
    </member>
    <member name="T:Leadtools.Forms.Ocr.OcrException">
      <summary>
            The exception that is thrown when a runtime error occurs inside the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /></summary>
      <remarks>
        <para>When a runtime error occurs in the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />, an exception of type <see cref="T:Leadtools.Forms.Ocr.OcrException" /> is thrown with the engine-specific error code set in the
            <see cref="P:Leadtools.Forms.Ocr.OcrException.Code">Code</see> member. This error code is engine-specific but a short description can be obtained using the <see cref="P:System.Exception.Message" /> property of this
            class or by using the <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.GetErrorCodeString(System.Int64)">IOcrEngine.GetErrorCodeString</see> method.</para>
        <para>Logic errors such as invalid parameters to methods or invalid operations throw standard .NET exceptions (in this case, <see cref="T:System.ArgumentException" /> and
            <see cref="T:System.InvalidOperationException" /> respectively Errors caused by loading invalid image files using <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.RasterCodecsInstance">IOcrEngine.RasterCodecsInstance</see>
            will throw exceptions of type <see cref="T:Leadtools.RasterException" />. Errors for missing features (support locked) will throw <see cref="T:Leadtools.Forms.Ocr.OcrSupportLockedException" /> exceptions. Any other
            runtime error in the engine will throw an <see cref="T:Leadtools.Forms.Ocr.OcrException" />.</para>
      </remarks>
      <keywords>OCR,Errors|OCR,Exception</keywords>
      <example>
        <para>This example shows how to trap various types of exceptions during OCR operations.</para>
        <code lang="VB">   Public Sub OcrExceptionExample()
      ' Unlock the support needed for LEADTOOLS Plus OCR engine
      RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here")
      RasterSupport.Unlock(RasterSupportType.OcrPlus, "Replace with your own key here")
      RasterSupport.Unlock(RasterSupportType.OcrPlusPdfLeadOutput, "Replace with your own key here")
      Try
         ' Create an instance of the engine
         Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, False)
            ' Start the engine using default parameters
            ocrEngine.Startup(Nothing, Nothing, Nothing, Nothing)

            Dim tifFileName As String = LeadtoolsExamples.Common.ImagesPath.Path + "Ocr1.tif"
            Dim pdfFileName As String = LeadtoolsExamples.Common.ImagesPath.Path + "Ocr1.pdf"

            ' Create an OCR document
            Using ocrDocument As IOcrDocument = ocrEngine.DocumentManager.CreateDocument()
               ' Add a page to the document
               Dim ocrPage As IOcrPage = ocrDocument.Pages.AddPage(tifFileName, Nothing)

               ' Recognize the page
               ' Note, Recognize can be called without calling AutoZone or manually adding zones. The engine will
               ' check and automatically auto-zones the page
               ocrPage.Recognize(Nothing)

               ' Save the document we have as PDF
               ocrDocument.Save(pdfFileName, DocumentFormat.Pdf, Nothing)
            End Using

            ' Shutdown the engine
            ' Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown()
         End Using
      Catch ex As OcrSupportLockedException
         Console.WriteLine("Support is locked. You need to unlock '{0}' in this engine to use this feature", ex.SupportType)
      Catch ex As OcrException
         Console.WriteLine("OCR Error\nCode: {0}\nMessage:{1}", ex.Code, ex.Message)
      Catch ex As RasterException
         Console.WriteLine("LEADTOOLS Error\nCode: {0}\nMessage:{1}", ex.Code, ex.Message)
      Catch ex As Exception
         Console.WriteLine("System Error\nMessage:{0}", ex.Message)
      End Try
   End Sub</code>
        <code lang="CS">      public void OcrExceptionExample()
      {
         // Unlock the support needed for LEADTOOLS Plus OCR engine
         RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here");
         RasterSupport.Unlock(RasterSupportType.OcrPlus, "Replace with your own key here");
         RasterSupport.Unlock(RasterSupportType.OcrPlusPdfLeadOutput, "Replace with your own key here");
         try
         {
            // Create an instance of the engine
            using(IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, false))
            {
               // Start the engine using default parameters
               ocrEngine.Startup(null, null, null, null);

               string tifFileName = LeadtoolsExamples.Common.ImagesPath.Path + "Ocr1.tif";
               string pdfFileName = LeadtoolsExamples.Common.ImagesPath.Path + "Ocr1.pdf";

               // Create an OCR document
               using(IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument())
               {
                  // Add a page to the document
                  IOcrPage ocrPage = ocrDocument.Pages.AddPage(tifFileName, null);

                  // Recognize the page
                  // Note, Recognize can be called without calling AutoZone or manually adding zones. The engine will
                  // check and automatically auto-zones the page
                  ocrPage.Recognize(null);

                  // Save the document we have as PDF
                  ocrDocument.Save(pdfFileName, DocumentFormat.Pdf, null);
               }

               // Shutdown the engine
               // Note: calling Dispose will also automatically shutdown the engine if it has been started
               ocrEngine.Shutdown();
            }
         }
         catch(OcrSupportLockedException ex)
         {
            Console.WriteLine("Support is locked. You need to unlock '{0}' in this engine to use this feature", ex.SupportType);
         }
         catch(OcrException ex)
         {
            Console.WriteLine("OCR Error\nCode: {0}\nMessage:{1}", ex.Code, ex.Message);
         }
         catch(RasterException ex)
         {
            Console.WriteLine("LEADTOOLS Error\nCode: {0}\nMessage:{1}", ex.Code, ex.Message);
         }
         catch(Exception ex)
         {
            Console.WriteLine("System Error\nMessage:{0}", ex.Message);
         }
      }</code>
        <!--OcrException-->
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">IOcrEngine.Startup</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrEngine.IsStarted">IOcrEngine.IsStarted</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Shutdown">IOcrEngine.Shutdown</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.OcrException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Forms.Ocr.OcrException" /> class with serialized data.
            </summary>
      <param name="info">The object that holds the serialized object data.</param>
      <param name="context">The contextual information about the source or destination.</param>
      <remarks>
        <para>This constructor is called during deserialization to reconstitute the exception object transmitted over a stream. For more information, refer to the topic
            "XML and SOAP Serialization" in the MSDN documentation.</para>
      </remarks>
      <noexample />
      <docaddon>yes</docaddon>
    </member>
    <member name="M:Leadtools.Forms.Ocr.OcrException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <remarks>
        <para>
          <see cref="M:Leadtools.Forms.Ocr.OcrException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" /> sets a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with all the exception object data targeted for serialization. During deserialization, the exception is
            reconstituted from the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> transmitted over the stream. For more information, refer to the topic "XML and SOAP Serialization" in the MSDN
            documentation.</para>
      </remarks>
      <noexample />
      <docaddon>yes</docaddon>
    </member>
    <member name="M:Leadtools.Forms.Ocr.OcrException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Forms.Ocr.OcrException" /> class
            </summary>
      <noremarks />
      <noexample />
      <docaddon>yes</docaddon>
    </member>
    <member name="M:Leadtools.Forms.Ocr.OcrException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Forms.Ocr.OcrException" /> class with a specified error message.
            </summary>
      <param name="message">The message that describes the error.</param>
      <noremarks />
      <noexample />
      <docaddon>yes</docaddon>
    </member>
    <member name="M:Leadtools.Forms.Ocr.OcrException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Forms.Ocr.OcrException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a <strong>null</strong> reference
            (<strong>Nothing</strong> in Visual Basic), the current exception is raised in a catch block that handles the inner exception.</param>
      <noremarks />
      <noexample />
      <docaddon>yes</docaddon>
    </member>
    <member name="M:Leadtools.Forms.Ocr.OcrException.#ctor(System.String,System.Int64)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Forms.Ocr.OcrException" /> class with a specified error message and engine-specific error code that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="code">Engine-specific error code. To get a description of this code, use the <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.GetErrorCodeString(System.Int64)">IOcrEngine.GetErrorCodeString</see> method.</param>
      <noremarks />
      <noexample />
      <docaddon>yes</docaddon>
    </member>
    <member name="M:Leadtools.Forms.Ocr.OcrException.#ctor(System.Int64)">
      <summary>
            Initializes a new instance of the <see cref="T:Leadtools.Forms.Ocr.OcrException" /> class with an engine-specific error code that is the cause of this exception.
            </summary>
      <param name="code">Engine-specific error code. To get a description of this code, use the <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.GetErrorCodeString(System.Int64)">IOcrEngine.GetErrorCodeString</see> method.</param>
      <remarks>
        <para>The <see cref="P:System.Exception.Message" /> property of this <see cref="T:Leadtools.Forms.Ocr.OcrException" /> will contain the same description used in
            <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.GetErrorCodeString(System.Int64)">IOcrEngine.GetErrorCodeString</see>.</para>
      </remarks>
      <noexample />
      <docaddon>yes</docaddon>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrException.Code">
      <summary>
            Gets or sets the engine-specific error code that is the cause of this exception.
            </summary>
      <value>An value that represents the engine-specific error code that is the cause of this exception.</value>
      <remarks>
        <para>The <see cref="P:System.Exception.Message" /> property of this <see cref="T:Leadtools.Forms.Ocr.OcrException" /> will contain the same description used in
            <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.GetErrorCodeString(System.Int64)">IOcrEngine.GetErrorCodeString</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrException" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">IOcrEngine.Startup</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrEngine.IsStarted">IOcrEngine.IsStarted</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Shutdown">IOcrEngine.Shutdown</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.GetErrorCodeString(System.Int64)">IOcrEngine.GetErrorCodeString</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="T:Leadtools.Forms.Ocr.IOcrDocument">
      <summary>
            Defines an OCR document object.
            </summary>
      <remarks>
        <para>The <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object holds the recognition data for one or more pages and is used to convert this data to the final output document.</para>
        <para>Typical OCR operation using <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> involves starting up the engine and then creating an <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object using the
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.CreateDocument" /> method before adding the pages into it and performing either automatic or manual zoning. Once this is done, use
            the  <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see> method on each page to collect the recognition data and store it internally in the page. After the recognition
            data is collected, use the various <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~Save.html">IOcrDocument.Save</a>
            methods to save the document to its final format. You can also use the various
            <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~SaveXml.html">IOcrDocument.SaveXml</a>
            methods to save the document as XML. For more information, refer to <see cref="T:Leadtools.Forms.Ocr.OcrXmlOutputOptions" /></para>
        <para>Use <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~Save.html">IOcrDocument.Save</a>
            as many times as required to save the document to multiple formats such PDF, DOC and HTML (As well as XML through the
            <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~SaveXml.html">IOcrDocument.SaveXml</a>
            method). You can also continue to add and recognize pages
            (through the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see> method after you save the document.</para>
        <para>For each <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> that is not recognized (the user did not call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" /> and the value
            of the page <see cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized">IOcrPage.IsRecognized</see> is still <strong>false</strong>) the
            <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> will insert an empty page into the final document.</para>
        <para>To get the low level recognition data including the recognized characters and their confidence, use
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see> instead.</para>
        <para>The <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> interface implements <see cref="T:System.IDisposable" />, hence you must dispose the <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object as soon as you are
            finished using it. Disposing an <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object will free all the pages stored inside its
            <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.Pages">IOcrDocument.Pages</see> collection.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrDocumentManager" /> and <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.</example>
      <docaddon>yes</docaddon>
      <keywords>OCR,PDF|OCR,PDF/A|OCR,Text|OCR,Doc|OCR,Word|OCR,Recognition</keywords>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrDocumentManager" />
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~Save.html">IOcrDocument.Save</seealso>
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~SaveXml.html">IOcrDocument.SaveXml</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.RecognizingOcrPages.html">Recognizing OCR Pages</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrConfidenceReporting.html">OCR Confidence Reporting</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">
      <summary>
            Converts the cumulated recognition result stored in the pages of this OCR document to the final output document and stores it in a .NET stream.
            </summary>
      <param name="stream">The .NET stream to save the final output document to.</param>
      <param name="format">The document format to use. If this parameter is <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.User</see>, then the document saved using the native engine format
            set in <see cref="P:Leadtools.Forms.Ocr.IOcrDocumentManager.EngineFormat">IOcrDocumentManager.EngineFormat</see> if the engine used supports native formats, otherwise an exception will be thrown.
            Note that saving the OCR results using the native engine formats may produce more accurate results in table and cell positions since the
            engine has access to extra data that is saved internally.</param>
      <param name="callback">Optional callback to show operation progress.</param>
      <remarks>
        <para>To save the output document to a disk file, use <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.String,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save(string fileName, DocumentFormat format, OcrProgressCallback callback)</see>.</para>
        <para>Each <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> object in the <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.Pages" /> collection of this <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object holds its recognition data internally. This data
            is used by this method to generate the final output document.</para>
        <para>Typical OCR operation using the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> involves starting up the engine. Creating a new <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object using
            the <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.CreateDocument" /> method before adding the pages into it and perform either automatic or manual zoning.
            Once this is done, you can use the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see> method of each page to collect the recognition data and store it internally in the
            page. After the recognition data is collected, you use the various
            <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~Save.html">IOcrDocument.Save</a> methods to save the document to its final format as well as
            <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~SaveXml.html">IOcrDocument.SaveXml</a> to save as XML.</para>
        <para>You can also use the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.RecognizeText(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.RecognizeText</see> method to recognize and return the recognition data as a simple <see cref="T:System.String" /> object.</para>
        <para>You can use <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~Save.html">IOcrDocument.Save</a>
            as many times as required to save the document to multiple formats. You can also continue to add and recognize pages
            (through the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see> method after you save the document.</para>
        <para>For each <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> that is not recognized (the user did not call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" /> and the value
            of the page <see cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized">IOcrPage.IsRecognized</see> is still <strong>false</strong>) the
            <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> will insert an empty page into the final document.</para>
        <para>To get the low level recognition data including the recognized characters and their confidence, use
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see> instead.</para>
        <para>The <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> interface implements <see cref="T:System.IDisposable" />, hence you must dispose the <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object as soon as you are
            finished using it. Disposing an <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object will free all the pages stored inside its
            <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.Pages">IOcrDocument.Pages</see> collection.</para>
        <para>You can use the <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see> to show the operation progress or to abort it. For more information and an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrDocumentManager" /> and <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.</example>
      <isnew>5/8/2009</isnew>
      <docaddon>yes</docaddon>
      <keywords>OCR,PDF|OCR,PDF/A|OCR,Text|OCR,Doc|OCR,Word|OCR,Recognition</keywords>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrDocumentManager" />
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~Save.html">IOcrDocument.Save</seealso>
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~SaveXml.html">IOcrDocument.SaveXml</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.String,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">
      <summary>
            Converts the cumulated recognition result stored in the pages of this OCR document to the final output document and stores it a disk file.
            </summary>
      <param name="fileName">The name of the file to save the final output document to.</param>
      <param name="format">The document format to use. If this parameter is <see cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat">DocumentFormat.User</see>, then the document saved using the native engine format
            set in <see cref="P:Leadtools.Forms.Ocr.IOcrDocumentManager.EngineFormat">IOcrDocumentManager.EngineFormat</see> if the engine used supports native formats, otherwise an exception will be thrown.
            Note that saving the OCR results using the native engine formats may produce more accurate results in table and cell positions since the
            engine has access to extra data that is saved internally.</param>
      <param name="callback">Optional callback to show operation progress.</param>
      <remarks>
        <para>To save the output document to a .NET stream, use <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.Save(System.IO.Stream,Leadtools.Forms.DocumentWriters.DocumentFormat,Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrDocument.Save(Stream stream, DocumentFormat format, OcrProgressCallback callback)</see>.</para>
        <para>To get the extension used commonly with the document format specified in <paramref name="format" />, use
            <see cref="M:Leadtools.Forms.DocumentWriters.DocumentWriter.GetFormatFileExtension(Leadtools.Forms.DocumentWriters.DocumentFormat)">DocumentWriter.GetFormatFileExtension</see>.</para>
        <para>Each <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> object in the <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.Pages" /> collection of this <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object holds its recognition data internally. This data
            is used by this method to generate the final output document.</para>
        <para>Typical OCR operation using the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> involves starting up the engine then creating a new <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object using
            the <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.CreateDocument" /> method before adding the pages into it and perform either automatic or manual zoning.
            Once this is done, you can use the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see> method of each page to collect the recognition data and store it internally in the
            page. After the recognition data is collected, you use the various
            <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~Save.html">IOcrDocument.Save</a> methods to save the document to its final format as well as
            <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~SaveXml.html">IOcrDocument.SaveXml</a> to save as XML.</para>
        <para>You can also use the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.RecognizeText(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.RecognizeText</see> method to recognize and return the recognition data as a simple <see cref="T:System.String" /> object.</para>
        <para>You can use <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~Save.html">IOcrDocument.Save</a>
            as many times as required to save the document to multiple formats. You can also continue to add and recognize pages
            (through the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see> method after you save the document.</para>
        <para>For each <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> that is not recognized (the user did not call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" /> and the value
            of the page <see cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized">IOcrPage.IsRecognized</see> is still <strong>false</strong>) the
            <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> will insert an empty page into the final document.</para>
        <para>To get the low level recognition data including the recognized characters and their confidence, use
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see> instead.</para>
        <para>The <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> interface implements <see cref="T:System.IDisposable" />, hence you must dispose the <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object as soon as you are
            finished using it. Disposing an <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object will free all the pages stored inside its
            <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.Pages">IOcrDocument.Pages</see> collection.</para>
        <para>You can use the <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see> to show the operation progress or to abort it. For more information and an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrDocumentManager" /> and <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.</example>
      <isnew>5/8/2009</isnew>
      <docaddon>yes</docaddon>
      <keywords>OCR,PDF|OCR,PDF/A|OCR,Text|OCR,Doc|OCR,Word|OCR,Recognition</keywords>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrDocumentManager" />
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~Save.html">IOcrDocument.Save</seealso>
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~SaveXml.html">IOcrDocument.SaveXml</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.IO.Stream,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">
      <summary>
            Converts the cumulated recognition result stored in the pages of this OCR document to XML data and stores it in a .NET stream.
            </summary>
      <param name="stream">The .NET stream to save the XML data to.</param>
      <param name="options">A combination of one or more <see cref="T:Leadtools.Forms.Ocr.OcrXmlOutputOptions" /> enumeration members that specify the XML generation options.</param>
      <remarks>
        <para>To save the output document as XML to a disk file, use <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.String,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml(string fileName, OcrXmlOutputOptions options)</see> and
            to obtain an XML directly use <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml(OcrXmlOutputOptions options)</see>.</para>
        <para>Each <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> object in the <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.Pages" /> collection of this <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object holds its recognition data internally. This data
            is used by this method to generate the final output document.</para>
        <para>Typical OCR operation using the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> involves starting up the engine. Creating a new <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object using
            the <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.CreateDocument" /> method before adding the pages into it and perform either automatic or manual zoning.
            Once this is done, you can use the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see> method of each page to collect the recognition data and store it internally in the
            page. After the recognition data is collected, you use the various
            <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~Save.html">IOcrDocument.Save</a> methods to save the document to its final format as well as
            <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~SaveXml.html">IOcrDocument.SaveXml</a> to save as XML.</para>
        <para>You can also use the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.RecognizeText(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.RecognizeText</see> method to recognize and return the recognition data as a simple <see cref="T:System.String" /> object.</para>
        <para>You can use <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~SaveXml.html">IOcrDocument.SaveXml</a>
            as many times as required to save the document to multiple formats. You can also continue to add and recognize pages
            (through the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see> method after you save the document.</para>
        <para>For each <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> that is not recognized (the user did not call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" /> and the value
            of the page <see cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized">IOcrPage.IsRecognized</see> is still <strong>false</strong>) the
            <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> will insert an empty page into the final document.</para>
        <para>To get the low level recognition data including the recognized characters and their confidence, use
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see> instead.</para>
        <para>The <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> interface implements <see cref="T:System.IDisposable" />, hence you must dispose the <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object as soon as you are
            finished using it. Disposing an <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object will free all the pages stored inside its
            <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.Pages">IOcrDocument.Pages</see> collection.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.String,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">SaveXml(string, OcrXmlOutputOptions)</see>.</example>
      <isnew>5/8/2009</isnew>
      <docaddon>yes</docaddon>
      <keywords>OCR,XML|OCR,Recognition</keywords>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrDocumentManager" />
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~Save.html">IOcrDocument.Save</seealso>
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~SaveXml.html">IOcrDocument.SaveXml</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.String,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">
      <summary>
            Converts the cumulated recognition result stored in the pages of this OCR document to XML data and stores it in a disk file.
            </summary>
      <param name="fileName">The output file name to save the XML data to.</param>
      <param name="options">A combination of one or more <see cref="T:Leadtools.Forms.Ocr.OcrXmlOutputOptions" /> enumeration members that specify the XML generation options.</param>
      <remarks>
        <para>To save the output document as XML to a .NET stream, use <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.IO.Stream,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml(Stream stream, OcrXmlOutputOptions options)</see> and
            to obtain an XML directly use <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml(OcrXmlOutputOptions options)</see>.</para>
        <para>Each <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> object in the <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.Pages" /> collection of this <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object holds its recognition data internally. This data
            is used by this method to generate the final output document.</para>
        <para>Typical OCR operation using the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> involves starting up the engine. Creating a new <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object using
            the <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.CreateDocument" /> method before adding the pages into it and perform either automatic or manual zoning.
            Once this is done, you can use the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see> method of each page to collect the recognition data and store it internally in the
            page. After the recognition data is collected, you use the various
            <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~Save.html">IOcrDocument.Save</a> methods to save the document to its final format as well as
            <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~SaveXml.html">IOcrDocument.SaveXml</a> to save as XML.</para>
        <para>You can also use the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.RecognizeText(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.RecognizeText</see> method to recognize and return the recognition data as a simple <see cref="T:System.String" /> object.</para>
        <para>You can use <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~SaveXml.html">IOcrDocument.SaveXml</a>
            as many times as required to save the document to multiple formats. You can also continue to add and recognize pages
            (through the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see> method after you save the document.</para>
        <para>For each <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> that is not recognized (the user did not call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" /> and the value
            of the page <see cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized">IOcrPage.IsRecognized</see> is still <strong>false</strong>) the
            <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> will insert an empty page into the final document.</para>
        <para>To get the low level recognition data including the recognized characters and their confidence, use
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see> instead.</para>
        <para>The <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> interface implements <see cref="T:System.IDisposable" />, hence you must dispose the <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object as soon as you are
            finished using it. Disposing an <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object will free all the pages stored inside its
            <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.Pages">IOcrDocument.Pages</see> collection.</para>
      </remarks>
      <example>
        <para>
          <para>This example will save the recognition data as XML.</para>
        </para>
        <code lang="VB">   Private Sub SaveAsXmlExample()
      ' Unlock the support needed for LEADTOOLS Plus OCR engine
      RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here")
      RasterSupport.Unlock(RasterSupportType.OcrProfessional, "Replace with your own key here")
      Dim tifFileName As String = "C:\Users\Public\Documents\LEADTOOLS Images\Ocr1.tif"
      Dim xmlFileName As String = "C:\Users\Public\Documents\LEADTOOLS Images\Ocr1.xml"

      ' Create an instance of the engine
      Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Professional, False)
         ' Start the engine using default parameters
         ocrEngine.Startup(Nothing, Nothing, Nothing, Nothing)

         ' Create an OCR document
         Using ocrDocument As IOcrDocument = ocrEngine.DocumentManager.CreateDocument()
            ' Add this image to the document
            Dim ocrPage As IOcrPage = ocrDocument.Pages.AddPage(tifFileName, Nothing)

            ' Recognize it
            ocrPage.Recognize(Nothing)

            ' Save the result XML to a disk file
            ' Only save the words not characters, if we want the characters
            ' we need to change the options to OcrXmlOutputOptions.Characters
            ocrDocument.SaveXml(xmlFileName, OcrXmlOutputOptions.None)
         End Using

         ' Shutdown the engine
         ' Note: calling Dispose will also automatically shutdown the engine if it has been started
         ocrEngine.Shutdown()
      End Using
   End Sub</code>
        <code lang="CS">      private void SaveAsXmlExample()
      {
         // Unlock the support needed for LEADTOOLS Professional OCR engine
         RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here");
         RasterSupport.Unlock(RasterSupportType.OcrProfessional, "Replace with your own key here");
         string tifFileName = @"C:\Users\Public\Documents\LEADTOOLS Images\Ocr1.tif";
         string xmlFileName = @"C:\Users\Public\Documents\LEADTOOLS Images\Ocr1.xml";

         // Create an instance of the engine
         using(IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Professional, false))
         {
            // Start the engine using default parameters
            ocrEngine.Startup(null, null, null, null);

            // Create an OCR document
            using(IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument())
            {
               // Add this image to the document
               IOcrPage ocrPage = ocrDocument.Pages.AddPage(tifFileName, null);

               // Recognize it
               ocrPage.Recognize(null);

               // Save the result XML to a disk file
               // Only save the words not characters, if we want the characters
               // we need to change the options to OcrXmlOutputOptions.Characters
               ocrDocument.SaveXml(xmlFileName, OcrXmlOutputOptions.None);
            }

            // Shutdown the engine
            // Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown();
         }
      }</code>
        <!--IOcrDocument.SaveXmlFile-->
      </example>
      <isnew>5/8/2009</isnew>
      <docaddon>yes</docaddon>
      <keywords>OCR,XML|OCR,Recognition</keywords>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrDocumentManager" />
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~Save.html">IOcrDocument.Save</seealso>
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~SaveXml.html">IOcrDocument.SaveXml</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(Leadtools.Forms.Ocr.OcrXmlOutputOptions)">
      <summary>
            Converts the cumulated recognition result stored in the pages of this OCR document and returns it as XML data.
            </summary>
      <param name="options">A combination of one or more <see cref="T:Leadtools.Forms.Ocr.OcrXmlOutputOptions" /> enumeration members that specify the XML generation options.</param>
      <returns>A <see cref="T:System.String" /> object containing the XML data.</returns>
      <remarks>
        <para>To save the output document as XML to a disk file or a .NET stream, use
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.String,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml(string fileName, OcrXmlOutputOptions options)</see> and
            <see cref="M:Leadtools.Forms.Ocr.IOcrDocument.SaveXml(System.IO.Stream,Leadtools.Forms.Ocr.OcrXmlOutputOptions)">IOcrDocument.SaveXml(Stream stream, OcrXmlOutputOptions options)</see>.</para>
        <para>Each <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> object in the <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.Pages" /> collection of this <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object holds its recognition data internally. This data
            is used by this method to generate the final output document.</para>
        <para>Typical OCR operation using the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> involves starting up the engine. Creating a new <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object using
            the <see cref="M:Leadtools.Forms.Ocr.IOcrDocumentManager.CreateDocument" /> method before adding the pages into it and perform either automatic or manual zoning.
            Once this is done, you can use the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see> method of each page to collect the recognition data and store it internally in the
            page. After the recognition data is collected, you use the various
            <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~Save.html">IOcrDocument.Save</a> methods to save the document to its final format as well as
            <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~SaveXml.html">IOcrDocument.SaveXml</a> to save as XML.</para>
        <para>You can also use the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.RecognizeText(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.RecognizeText</see> method to recognize and return the recognition data as a simple <see cref="T:System.String" /> object.</para>
        <para>You can use <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~SaveXml.html">IOcrDocument.SaveXml</a>
            as many times as required to save the document to multiple formats. You can also continue to add and recognize pages
            (through the <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see> method after you save the document.</para>
        <para>For each <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> that is not recognized (the user did not call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)" /> and the value
            of the page <see cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized">IOcrPage.IsRecognized</see> is still <strong>false</strong>) the
            <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> will insert an empty page into the final document.</para>
        <para>To get the low level recognition data including the recognized characters and their confidence, use
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see> instead.</para>
        <para>The <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> interface implements <see cref="T:System.IDisposable" />, hence you must dispose the <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object as soon as you are
            finished using it. Disposing an <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" /> object will free all the pages stored inside its
            <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.Pages">IOcrDocument.Pages</see> collection.</para>
      </remarks>
      <example>
        <para>
          <para>This example recognize a page then process the result XML data.</para>
        </para>
        <code lang="VB">   Private Sub SaveAndProcessXmlExample()
      ' Unlock the support needed for LEADTOOLS Professional OCR engine
      RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here")
      RasterSupport.Unlock(RasterSupportType.OcrProfessional, "Replace with your own key here")
      Dim tifFileName As String = "C:\Users\Public\Documents\LEADTOOLS Images\Ocr1.tif"

      ' Create an instance of the engine
      Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Professional, False)
         ' Start the engine using default parameters
         ocrEngine.Startup(Nothing, Nothing, Nothing, Nothing)

         ' Create an OCR document
         Using ocrDocument As IOcrDocument = ocrEngine.DocumentManager.CreateDocument()
            ' Add this image to the document
            Dim ocrPage As IOcrPage = ocrDocument.Pages.AddPage(tifFileName, Nothing)

            ' Recognize it
            ocrPage.Recognize(Nothing)

            ' Get the recognition data as XML
            Dim xml As String = ocrDocument.SaveXml(OcrXmlOutputOptions.None)

            ' Process the data by showing all the words
            Using reader As New System.IO.StringReader(xml)
               Dim doc As New System.Xml.XPath.XPathDocument(reader)
               Dim nav As System.Xml.XPath.XPathNavigator = doc.CreateNavigator()

               ' Select all the &lt;word&gt; elements
               Dim iter As System.Xml.XPath.XPathNodeIterator = nav.Select("//word")

               Console.WriteLine("Word found:")
               While iter.MoveNext()
                  Console.WriteLine(iter.Current.Value)
               End While
            End Using
         End Using

         ' Shutdown the engine
         ' Note: calling Dispose will also automatically shutdown the engine if it has been started
         ocrEngine.Shutdown()
      End Using
   End Sub</code>
        <code lang="CS">      private void SaveAndProcessXmlExample()
      {
         // Unlock the support needed for LEADTOOLS Professional OCR engine
         RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here");
         RasterSupport.Unlock(RasterSupportType.OcrProfessional, "Replace with your own key here");
         string tifFileName = @"C:\Users\Public\Documents\LEADTOOLS Images\Ocr1.tif";

         // Create an instance of the engine
         using(IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Professional, false))
         {
            // Start the engine using default parameters
            ocrEngine.Startup(null, null, null, null);

            // Create an OCR document
            using(IOcrDocument ocrDocument = ocrEngine.DocumentManager.CreateDocument())
            {
               // Add this image to the document
               IOcrPage ocrPage = ocrDocument.Pages.AddPage(tifFileName, null);

               // Recognize it
               ocrPage.Recognize(null);

               // Get the recognition data as XML
               string xml = ocrDocument.SaveXml(OcrXmlOutputOptions.None);

               // Process the data by showing all the words
               using(System.IO.StringReader reader = new System.IO.StringReader(xml))
               {
                  System.Xml.XPath.XPathDocument doc = new System.Xml.XPath.XPathDocument(reader);
                  System.Xml.XPath.XPathNavigator nav = doc.CreateNavigator();

                  // Select all the &lt;word&gt; elements
                  System.Xml.XPath.XPathNodeIterator iter = nav.Select(@"//word");

                  Console.WriteLine("Word found:");
                  while(iter.MoveNext())
                  {
                     Console.WriteLine(iter.Current.Value);
                  }
               }
            }

            // Shutdown the engine
            // Note: calling Dispose will also automatically shutdown the engine if it has been started
            ocrEngine.Shutdown();
         }
      }</code>
        <!--IOcrDocument.SaveXml-->
      </example>
      <isnew>5/8/2009</isnew>
      <docaddon>yes</docaddon>
      <keywords>OCR,XML|OCR,Recognition</keywords>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrDocumentManager" />
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~Save.html">IOcrDocument.Save</seealso>
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~SaveXml.html">IOcrDocument.SaveXml</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrDocument.Engine">
      <summary>
            Gets the OCR engine used when creating this <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" />.
            </summary>
      <value>The instance of <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> used when creating this <see cref="T:Leadtools.Forms.Ocr.IOcrDocument" />.</value>
      <remarks>
        <para>
          <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.Engine" /> will have the same value as the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> object that owns the <see cref="T:Leadtools.Forms.Ocr.IOcrDocumentManager" /> used to create this OCR document.</para>
      </remarks>
      <noexample />
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrDocumentManager" />
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~Save.html">IOcrDocument.Save</seealso>
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~SaveXml.html">IOcrDocument.SaveXml</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrDocument.Pages">
      <summary>
            Allows you to add, remove or update image (raster) pages in the OCR document.
            </summary>
      <value>The <see cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" /> object that allow you to add, remove or update image (raster) pages in the OCR document.</value>
      <remarks>
        <para>
          <see cref="P:Leadtools.Forms.Ocr.IOcrDocument.Pages" /> is a standard .NET collection of <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> objects. Through this member you can add, remove or update image (raster) pages to the
            OCR document. These pages can be image files on disk, memory or even in a remote URL.</para>
        <para>Any file format supported by LEADTOOLS (TIFF, JPEG, BMP, etc) can be loaded into the OCR document. Once the image is loaded into the document, use the various
            <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> methods to zone the page (or pages) in preparation to be recognized and saved as a document.</para>
        <para>You can also convert to and from any of the pages added to the OCR document to a LEADTOOLS <see cref="T:Leadtools.RasterImage" /> for use with other LEADTOOLS for .NET assemblies
            such as TWAIN scanning, image processing, MRC, etc.</para>
        <para>For more information refer to <see cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" /> and <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />.</para>
      </remarks>
      <keywords>OCR,Pages|OCR,RasterImage</keywords>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.DocumentWriters.DocumentFormat" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrDocumentManager" />
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~Save.html">IOcrDocument.Save</seealso>
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~SaveXml.html">IOcrDocument.SaveXml</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
    </member>
    <member name="T:Leadtools.Forms.Ocr.OcrZoneAfterRecognitionNotes">
      <summary>
            The after recognition flags for the zone.
            </summary>
      <remarks>
        <para>The value of the <see cref="P:Leadtools.Forms.Ocr.OcrZone.AfterRecognitionNotes" /> will be updated if any of the <see cref="T:Leadtools.Forms.Ocr.OcrZoneRecognitionOptions" /> values set in
            <see cref="P:Leadtools.Forms.Ocr.OcrZone.RecognitionOptions" /> is used during the recognition process.</para>
      </remarks>
      <example> For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="P:Leadtools.Forms.Ocr.OcrZone.AfterRecognitionNotes">OcrZone.AfterRecognitionNotes</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.OcrZone.RecognitionOptions">OcrZone.RecognitionOptions</seealso>
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPage~AutoZone.html">IOcrPage.AutoZone</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrSpellCheckCallback" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZoneFillMethod" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.AnOverviewOfOcrRecognitionModules.html">An Overview of OCR Recognition Modules</seealso>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneAfterRecognitionNotes.None">
      <summary>
            No notes.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneAfterRecognitionNotes.LanguageDictionaryUsed">
      <summary>
            The language dictionary was enabled during the checking process (spell checking was activated for the zone).
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneAfterRecognitionNotes.UserDictionaryUsed">
      <summary>
            The User dictionary was enabled during the checking process (User dictionary checking was activated for the zone).
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrZoneAfterRecognitionNotes.VerificationUsed">
      <summary>
            The user-written checking callback (<see cref="T:Leadtools.Forms.Ocr.OcrSpellCheckCallback">OcrSpellCheckCallback</see>) was enabled during the checking process (user-written checking was activated).
            </summary>
    </member>
    <member name="T:Leadtools.Forms.Ocr.IOcrZoneCollection">
      <summary>
            The zones in this <see cref="T:Leadtools.Forms.Ocr.IOcrPage" />.
            </summary>
      <remarks>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" /> holds the zones currently added into an OCR page. You can access the instance of the <see cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" /> used by a
            <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> through the <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones">IOcrPage.Zones</see> property.</para>
        <para>The <see cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" /> interface implements standard .NET <a href="http://msdn.microsoft.com/en-us/library/92t2ye13.aspx">ICollection{T}</a>, <a href="http://msdn.microsoft.com/en-us/library/5y536ey6.aspx">IList{T}</a>, and <a href="http://msdn.microsoft.com/en-us/library/9eekhta0.aspx">IEnumerable{T}</a> interfaces
            and hence, you can use the member of these interfaces to add, remove, get, set and iterate through the different zones in the page.</para>
        <para>To work with the zones of the page, you can first call <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPage~AutoZone.html">IOcrPage.AutoZone</a>. This will start the page layout decomposition process
            and the engine will fill the <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones">IOcrPage.Zones</see> property with the different zones found. You can then examine or modify the different zones with the
            various <see cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" /> properties. For example, use <a href="http://msdn.microsoft.com/en-us/library/63ywd54z.aspx">IOcrZoneCollection.Add</a> to add a new zone and
            <a href="http://msdn.microsoft.com/en-us/library/bye7h94w.aspx">IOcrZoneCollection.Remove</a> to remove a zone. You can use <a href="http://msdn.microsoft.com/en-us/library/bb920277.aspx">IOcrZoneCollection.Count</a> to get the number of
            zones currently in the page.</para>
        <para>To modify a zone, use <a href="http://msdn.microsoft.com/en-us/library/ewthkb10.aspx">IOcrZoneCollection.Item</a> to get the <see cref="T:Leadtools.Forms.Ocr.OcrZone" /> object you are interested in, modify the zone then set it back
            through <a href="http://msdn.microsoft.com/en-us/library/ewthkb10.aspx">IOcrZoneCollection.Item</a>. Note that since <see cref="T:Leadtools.Forms.Ocr.OcrZone" /> is a structure (value type), you must use the setter. The following code snippet
            illustrates how to change the zone type of the 4th zone in an ocrPage:</para>
        <para>
          <code>
            // Remember, the index is zero-based, so 4th zone has an index of 3
            OcrZone zone = ocrPage.Zones[3];
            // Prevent this zone from being recognized
            zone.ZoneType = OcrZoneType.Graphic;
            ocrPage.Zones[3] = zone;
            </code>
        </para>
        <para>When adding or updating a zone, you should directly initialize the <see cref="P:Leadtools.Forms.Ocr.OcrZone.Bounds">OcrZone.Bounds</see>, <see cref="P:Leadtools.Forms.Ocr.OcrZone.FillMethod">OcrZone.FillMethod</see>,
            <see cref="P:Leadtools.Forms.Ocr.OcrZone.RecognitionModule">OcrZone.RecognitionModule</see>, <see cref="P:Leadtools.Forms.Ocr.OcrZone.CharacterFilters">OcrZone.CharacterFilters</see> and the
            <see cref="P:Leadtools.Forms.Ocr.OcrZone.ZoneType">OcrZone.ZoneType</see> properties of the zone, since they will not take on their default values.</para>
        <para>You should not modify the <see cref="P:Leadtools.Forms.Ocr.OcrZone.Id">OcrZone.Id</see> property. When adding zones, leave this value to the default of 0.</para>
        <para>The <see cref="P:Leadtools.Forms.Ocr.OcrZone.ZoneType">OcrZone.ZoneType</see> property of the updating zone should be one of the following: <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Text</see>,
            <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Table</see> or <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Graphics</see>.</para>
        <para>The preferred method of updating a zone is as illustrated in the code snippet above, first get the zone you are interested in, update it and set it back into the collection.</para>
        <para>It is your responsibility to specify a valid recognition module-filling method pair. Otherwise any incorrectly set zone will have no recognition result. For more information, refer
            to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.AnOverviewOfOcrRecognitionModules.html">An Overview of OCR Recognition Modules</a>.</para>
        <para>Calling <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrPage~AutoZone.html">IOcrPage.AutoZone</a> will clear the zones in the <see cref="P:Leadtools.Forms.Ocr.IOcrPage.Zones">IOcrPage.Zones</see> collection and fills it
            again with the zones found by the engine.</para>
      </remarks>
      <keywords>OCR,Zoning</keywords>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrZone" /> and <see cref="M:Leadtools.Forms.Ocr.IOcrPage.AutoZone(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.AutoZone</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPage" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Leadtools~Topics.SummaryOfAllSupportedImageFileFormats.html">Summary of All Supported Image File Formats</seealso>
    </member>
    <member name="T:Leadtools.Forms.Ocr.IOcrSettingDescriptor">
      <summary>
            Defines a setting name, friendly name, type and range.
            </summary>
      <remarks>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.IOcrSettingDescriptor" /> contains the properties of a setting. You can get the settings supported by the OCR engine by calling
            <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames">IOcrSettingManager.GetSettingNames</see> and you can get the descriptor (an instance of <see cref="T:Leadtools.Forms.Ocr.IOcrSettingDescriptor" />) of a
            setting by calling <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)">IOcrSettingManager.GetSettingDescriptor</see>.</para>
        <para>The following table lists the members of <see cref="T:Leadtools.Forms.Ocr.IOcrSettingDescriptor" /> and their meaning:
            <table><tr><th>Member</th><th>Description</th><th>Valid For</th></tr><tr><td><see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.Name">IOcrSettingDescriptor.Name</see></td><td>The unique name of setting. This is the same name you pass to <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)">IOcrSettingManager.GetSettingDescriptor</see></td><td>All types</td></tr><tr><td><see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.ValueType">IOcrSettingDescriptor.ValueType</see></td><td>One of the <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType" /> enumeration member specifying the setting type</td><td>All types</td></tr><tr><td><see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.FriendlyName">IOcrSettingDescriptor.FriendlyName</see></td><td>Friendly name of the setting. You can use this name in your user application</td><td>All types</td></tr><tr><td><see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.Units">IOcrSettingDescriptor.Units</see></td><td>Name of the unit of the value</td><td><see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Integer</see> and <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Double</see></td></tr><tr><td><see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.IntegerMinimumValue">IOcrSettingDescriptor.IntegerMinimumValue</see></td><td>Minimum allowed value of the setting</td><td><see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Integer</see></td></tr><tr><td><see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.IntegerMaximumValue">IOcrSettingDescriptor.IntegerMaximumValue</see></td><td>Maximum allowed value of the setting</td><td><see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Integer</see></td></tr><tr><td><see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.EnumIsFlags">IOcrSettingDescriptor.EnumIsFlags</see></td><td>If <strong>true</strong>, the enum setting members can be combined together (OR'ed), otherwise; only one enum member can be set at a time</td><td><see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Enum</see></td></tr><tr><td><see cref="M:Leadtools.Forms.Ocr.IOcrSettingDescriptor.GetEnumMemberFriendlyNames">IOcrSettingDescriptor.GetEnumMemberFriendlyNames</see></td><td>Returns an array of strings containing the enumeration members friendly names. You can use these name in your user application</td><td><see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Enum</see></td></tr><tr><td><see cref="M:Leadtools.Forms.Ocr.IOcrSettingDescriptor.GetEnumMemberValues">IOcrSettingDescriptor.GetEnumMemberValues</see></td><td>Returns an array of integers containing the enumeration members values</td><td><see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Enum</see></td></tr><tr><td><see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.DoubleMinimumValue">IOcrSettingDescriptor.DoubleMinimumValue</see></td><td>Minimum allowed value of the setting</td><td><see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Double</see></td></tr><tr><td><see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.DoubleMaximumValue">IOcrSettingDescriptor.DoubleMaximumValue</see></td><td>Maximum allowed value of the setting</td><td><see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Double</see></td></tr><tr><td><see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.StringMaximumLength">IOcrSettingDescriptor.StringMaximumLength</see></td><td>Maximum number of characters in the value of the setting</td><td><see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.String</see></td></tr><tr><td><see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.StringNullAllowed">IOcrSettingDescriptor.StringNullAllowed</see></td><td>A <strong>null</strong> (<strong>Nothing</strong> in Visual Basic) is a valid value for this setting</td><td><see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.String</see></td></tr></table></para>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> is a wrapper for different OCR engines, these engines contain specific additional features and functionalities that can be queried and updated using
            the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface.</para>
        <para>You can use the different methods of the <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> interface to get and set the engine-specific settings. Each setting has a unique name
            (a string value). You can get all the settings available to the current OCR engine through the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingNames">IOcrSettingManager.GetSettingNames</see>
            method. The <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)">IOcrSettingManager.GetSettingDescriptor</see> method returns a description of the setting (its type, friendly name and
            value range), you can then use the various setting get and set methods to query and change the value of a certain setting. For example, if the setting type is
            <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Integer</see>, you can use the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetIntegerValue(System.String)">IOcrSettingManager.GetIntegerValue</see> to get
            the current value of the setting and the <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.SetIntegerValue(System.String,System.Int32)">IOcrSettingManager.SetIntegerValue</see> to change its value. Refer to
            <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" /> for a complete example.</para>
        <para>For a list of supported engine-specific settings and their meanings, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettings.html">OCR engine-specific Settings</a>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettings.html">OCR engine-specific Settings</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrSettingDescriptor.GetEnumMemberFriendlyNames">
      <summary>
            Gets an array of strings containing the enumeration members friendly names.
            </summary>
      <returns>An array of strings containing the enumeration members friendly names.</returns>
      <remarks>
        <para>If the enum members can be OR'ed together, you can OR multiple members obtained from <see cref="M:Leadtools.Forms.Ocr.IOcrSettingDescriptor.GetEnumMemberValues" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrSettingDescriptor.GetEnumMemberFriendlyNames" /> into
            one integer or string value (separated by a comma) and pass them as the setting value. This is the same as having an enum in .NET decorated with the <see cref="T:System.FlagsAttribute" />.</para>
        <para>If the enum members cannot be OR'ed together (The value of <see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.EnumIsFlags" /> is <strong>false</strong>), then only one member obtained from
            <see cref="M:Leadtools.Forms.Ocr.IOcrSettingDescriptor.GetEnumMemberValues" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrSettingDescriptor.GetEnumMemberFriendlyNames" /> can used as the setting value. This the same as having an enum in .NET not decorated with the
            <see cref="T:System.FlagsAttribute" />.</para>
        <para>This member is only valid if <see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.ValueType" /> is <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Enum</see>.</para>
        <para>For a list of supported engine-specific settings and their meanings, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettings.html">OCR engine-specific Settings</a>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettings.html">OCR engine-specific Settings</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrSettingDescriptor.GetEnumMemberValues">
      <summary>
            Gets an array containing the enumeration members values.
            </summary>
      <returns>An array of integers containing the enumeration members values.</returns>
      <remarks>
        <para>If the enum members can be OR'ed together, you can OR multiple members obtained from <see cref="M:Leadtools.Forms.Ocr.IOcrSettingDescriptor.GetEnumMemberValues" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrSettingDescriptor.GetEnumMemberFriendlyNames" /> into
            one integer or string value (separated by a comma) and pass them as the setting value. This is the same as having an enum in .NET decorated with the <see cref="T:System.FlagsAttribute" />.</para>
        <para>If the enum members cannot be OR'ed together (The value of <see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.EnumIsFlags" /> is <strong>false</strong>), then only one member obtained from
            <see cref="M:Leadtools.Forms.Ocr.IOcrSettingDescriptor.GetEnumMemberValues" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrSettingDescriptor.GetEnumMemberFriendlyNames" /> can used as the setting value. This the same as having an enum in .NET not decorated with the
            <see cref="T:System.FlagsAttribute" />.</para>
        <para>This member is only valid if <see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.ValueType" /> is <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Enum</see>.</para>
        <para>For a list of supported engine-specific settings and their meanings, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettings.html">OCR engine-specific Settings</a>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettings.html">OCR engine-specific Settings</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.Name">
      <summary>
            Gets the unique name of setting.
            </summary>
      <value>The unique name of setting.</value>
      <remarks>
        <para>This is the same name you pass to <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingDescriptor(System.String)">IOcrSettingManager.GetSettingDescriptor</see>.</para>
        <para>For a list of supported engine-specific settings and their meanings, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettings.html">OCR engine-specific Settings</a>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettings.html">OCR engine-specific Settings</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.ValueType">
      <summary>
            Gets the setting value type.
            </summary>
      <value>One of the <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType" /> enumeration member specifying the setting type.</value>
      <remarks>
        <para>You can also get the setting value type by calling <see cref="M:Leadtools.Forms.Ocr.IOcrSettingManager.GetSettingValueType(System.String)">IOcrSettingManager.GetSettingValueType</see>.</para>
        <para>For a list of supported engine-specific settings and their meanings, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettings.html">OCR engine-specific Settings</a>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettings.html">OCR engine-specific Settings</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.FriendlyName">
      <summary>
            Gets the friendly name of the setting.
            </summary>
      <value>The friendly name of the setting.</value>
      <remarks>
        <para>The friendly name of a setting provides more description and is suitable for using it directly in your UI. For example, the LEADTOOLS OCR Plus engine contain the setting
            the name "Recognition.DefaultCharacterFilter", the friendly name of this setting is "Default fill character".</para>
        <para>For a list of supported engine-specific settings and their meanings, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettings.html">OCR engine-specific Settings</a>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettings.html">OCR engine-specific Settings</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.Units">
      <summary>
            Gets the name of the unit of the value.
            </summary>
      <value>The name of the unit of the value.</value>
      <remarks>
        <para>The unit name gives you hint on what value to pass. For example, the LEADTOOLS OCR Plus engine contains the integer setting "SaveDocument.Document.Margin.Left", the 
            <see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.Units" /> value of this setting is reported as "Twips". Hence, you know that the integer value you pass must be in twips.</para>
        <para>This member is only valid if <see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.ValueType" /> is <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Integer</see> or
            <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Double</see>.</para>
        <para>For a list of supported engine-specific settings and their meanings, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettings.html">OCR engine-specific Settings</a>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettings.html">OCR engine-specific Settings</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.IntegerMinimumValue">
      <summary>
            Gets the minimum allowed value for the integer setting.
            </summary>
      <value>The minimum allowed value for the integer setting.</value>
      <remarks>
        <para>You should not pass a value less than <see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.IntegerMinimumValue" /> when setting the value of the integer setting.</para>
        <para>If the integer setting has no minimum value, <see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.IntegerMinimumValue" /> will be set to <see cref="F:System.Int32.MinValue">Int32.MinValue</see>.</para>
        <para>This member is only valid if <see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.ValueType" /> is <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Integer</see>.</para>
        <para>For a list of supported engine-specific settings and their meanings, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettings.html">OCR engine-specific Settings</a>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettings.html">OCR engine-specific Settings</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.IntegerMaximumValue">
      <summary>
            Gets the maximum allowed value for the integer setting.
            </summary>
      <value>The maximum allowed value for the integer setting.</value>
      <remarks>
        <para>You should not pass a value greater than <see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.IntegerMaximumValue" /> when setting the value of the integer setting.</para>
        <para>If the integer setting has no maximum value, <see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.IntegerMaximumValue" /> will be set to <see cref="F:System.Int32.MaxValue">Int32.MaxValue</see>.</para>
        <para>This member is only valid if <see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.ValueType" /> is <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Integer</see>.</para>
        <para>For a list of supported engine-specific settings and their meanings, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettings.html">OCR engine-specific Settings</a>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettings.html">OCR engine-specific Settings</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.EnumIsFlags">
      <summary>
            Gets a value indicating whether the enum members can be OR'ed together.
            </summary>
      <value>
        <strong>True</strong> if the enum members can be OR'ed {|}together (the enum has a flag type); otherwise it it <strong>false</strong>.</value>
      <remarks>
        <para>If the enum members can be OR'ed{|} together, you can OR{|} multiple members obtained from <see cref="M:Leadtools.Forms.Ocr.IOcrSettingDescriptor.GetEnumMemberValues" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrSettingDescriptor.GetEnumMemberFriendlyNames" /> into
            one integer or string value (separated by a comma) and pass them as the setting value. This is the same as having an enum in .NET decorated with the <see cref="T:System.FlagsAttribute" />.</para>
        <para>If the enum members cannot be OR'ed together (The value of <see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.EnumIsFlags" /> is <strong>false</strong>), then only one member from obtained from
            <see cref="M:Leadtools.Forms.Ocr.IOcrSettingDescriptor.GetEnumMemberValues" /> or <see cref="M:Leadtools.Forms.Ocr.IOcrSettingDescriptor.GetEnumMemberFriendlyNames" /> can used as the setting value. This the same as having an enum in .NET not decorated with the
            <see cref="T:System.FlagsAttribute" />.</para>
        <para>This member is only valid if <see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.ValueType" /> is <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Enum</see>.</para>
        <para>For a list of supported engine-specific settings and their meanings, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettings.html">OCR engine-specific Settings</a>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettings.html">OCR engine-specific Settings</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.DoubleMinimumValue">
      <summary>
            Gets the minimum allowed value for the double setting.
            </summary>
      <value>The minimum allowed value for the double setting.</value>
      <remarks>
        <para>You should not pass a value less than <see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.DoubleMinimumValue" /> when setting the value of the double setting.</para>
        <para>If the double setting has no minimum value, <see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.DoubleMinimumValue" /> will be set to <see cref="F:System.Double.MinValue">Double.MinValue</see>.</para>
        <para>This member is only valid if <see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.ValueType" /> is <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Double</see>.</para>
        <para>For a list of supported engine-specific settings and their meanings, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettings.html">OCR engine-specific Settings</a>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettings.html">OCR engine-specific Settings</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.DoubleMaximumValue">
      <summary>
            Gets the maximum allowed value for the double setting.
            </summary>
      <value>The maximum allowed value for the double setting.</value>
      <remarks>
        <para>You should not pass a value greater than <see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.DoubleMaximumValue" /> when setting the value of the double setting.</para>
        <para>If the double setting has no maximum value, <see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.DoubleMaximumValue" /> will be set to <see cref="F:System.Double.MaxValue">Double.MaxValue</see>.</para>
        <para>This member is only valid if <see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.ValueType" /> is <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.Double</see>.</para>
        <para>For a list of supported engine-specific settings and their meanings, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettings.html">OCR engine-specific Settings</a>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettings.html">OCR engine-specific Settings</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.StringMaximumLength">
      <summary>
            Gets the maximum number of characters allowed in the value of the string setting.
            </summary>
      <value>Maximum number of characters allowed in the value of the string setting.</value>
      <remarks>
        <para>You should not pass a string that contain more characters than <see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.StringMaximumLength" /> when setting the value of a string setting.</para>
        <para>If the string setting has no limit on the number of characters allowed, <see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.StringMaximumLength" /> will be set to -1.</para>
        <para>This member is only valid if <see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.ValueType" /> is <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.String</see>.</para>
        <para>For a list of supported engine-specific settings and their meanings, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettings.html">OCR engine-specific Settings</a>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettings.html">OCR engine-specific Settings</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.StringNullAllowed">
      <summary>
            Gets a value that indicates whether a <strong>null</strong> (<strong>Nothing</strong> in Visual Basic) is a valid value for a string setting.
            </summary>
      <value>
        <strong>True</strong> if a <strong>null</strong> (<strong>Nothing</strong> in Visual Basic) is a valid value for a string setting; otherwise it is <strong>false</strong>.</value>
      <remarks>
        <para>This member is only valid if <see cref="P:Leadtools.Forms.Ocr.IOcrSettingDescriptor.ValueType" /> is <see cref="T:Leadtools.Forms.Ocr.OcrSettingValueType">OcrSettingValueType.String</see>.</para>
        <para>For a list of supported engine-specific settings and their meanings, refer to <a href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettings.html">OCR engine-specific Settings</a>.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrSettingManager" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrEngineSpecificSettings.html">OCR engine-specific Settings</seealso>
    </member>
    <member name="T:Leadtools.Forms.Ocr.OcrLanguageGroup">
      <summary>
            The language groups supported by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /></summary>
      <remarks>
        <para>This enumeration is used by the <see cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.GetSupportedLanguageGroups">IOcrLanguageManager.GetSupportedLanguageGroup</see> and
            <see cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.IsLanguageGroupSupported(Leadtools.Forms.Ocr.OcrLanguageGroup)">IOcrLanguageManager.IsLanguageGroupSupported</see> methods to determine which OCR language group is currently
            installed on your system.</para>
        <para>The language environment defines the character set(s) recognized by the OCR engine. For example, if you enable the English and German languages, the German characters
            (ä, Ä, é, ö, Ö, ü, Ü, ß) will be combined with the English characters to define the set recognized by the engine. The language environment does not perform spell checking however,
            for that, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSpellCheckManager" />.</para>
        <para>The various LEADTOOLS OCR engines ships with default OCR language packs. Additional language packs can be downloaded from the LEAD Technologies' website at
            <a href="http://www.leadtools.com">http://www.leadtools.com</a>.</para>
      </remarks>
      <keywords>OCR,Languages | OCRLanguage | OCR Language</keywords>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.GetSupportedLanguageGroups">IOcrLanguageManager.GetSupportedLanguageGroup</see>.</example>
      <docaddon>yes</docaddon>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrLanguageGroup.Latin1">
      <summary>
            Latin 1 group - Contains the following languages: English, German, French, Spanish, Italian, Dutch, Swedish, Norwegian, Finnish, Danish, Portuguese, Portuguese (Brasilian),
            Catalan, Afrikaans, Aymara, Basque, Breton, Faroese, Friulian, Gaelic, Galician, Eskimo, Icelandic, Indonesian, Latin, Malaysian, Pidgin English, Swahili, Tahitian,
            Welsh and Frisian.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrLanguageGroup.Latin2">
      <summary>
            Latin 2 group - Contains the following languages: Polish, Czech, Hungarian, Romanian, Albanian, Croatian, Wend (Sorbian), Slovak and Slovenian.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrLanguageGroup.Cyrillic">
      <summary>
            Cyrillic group - Contains the following languages: Russian, Ukrainian, Byelorussian, Bulgarian, Macedonian and Serbian.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrLanguageGroup.Turkish">
      <summary>
            Turkish group - Contains the following languages: Turkish and Kurdish (written in Latin alphabet).
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrLanguageGroup.Baltic">
      <summary>
            Baltic group - Contains the following languages: Estonian, Hawaiian, Latvian and Lithuanian.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrLanguageGroup.Greek">
      <summary>
            Greek group - Contains the following languages: Greek.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrLanguageGroup.Asian">
      <summary>
            Asian group - Contains the following languages: Chinese Traditional, Chinese Simplified, Japanese and Korean.
            </summary>
    </member>
    <member name="T:Leadtools.Forms.Ocr.OcrCharacterFontStyle">
      <summary>
            Font attributes for recognized characters.
            </summary>
      <remarks>
        <para>The <see cref="P:Leadtools.Forms.Ocr.OcrCharacter.FontStyle">OcrCharacter.FontStyle</see> property contains the font attributes of the recognized character.</para>
        <para>The values of <see cref="T:Leadtools.Forms.Ocr.OcrCharacterFontStyle" /> can be combined together (OR-ed).</para>
        <para>
          <strong>Note: These attributes are not supported in the LEADTOOLS OCR Advantage Engine.</strong>
        </para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.SetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized">IOcrPage.IsRecognized</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrCharacter" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrCharacterFontStyle.Regular">
      <summary>
            Normal text
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrCharacterFontStyle.Bold">
      <summary>
            Bold text
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrCharacterFontStyle.Italic">
      <summary>
            Italic text
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrCharacterFontStyle.Underline">
      <summary>
            Underlined text
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrCharacterFontStyle.SansSerif">
      <summary>
            SansSerif text
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrCharacterFontStyle.Serif">
      <summary>
            Serif text
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrCharacterFontStyle.Proportional">
      <summary>
            Proportional text. If this flag is not set, the text is mono-spaced.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrCharacterFontStyle.Superscript">
      <summary>
            Super script text
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrCharacterFontStyle.Subscript">
      <summary>
            Subscript text
            </summary>
    </member>
    <member name="T:Leadtools.Forms.Ocr.IOcrUserDictionaryItem">
      <summary>
            Describes an item in a user dictionary.
            </summary>
      <remarks>
        <para>
          <strong>Important Note:</strong> User dictionaries are only supported in the Advantage OCR engine in this version of LEADTOOLS. Using the functionality of the <see cref="T:Leadtools.Forms.Ocr.IOcrUserDictionary" /> interface in any other engine will have no effect on the recognition results.</para>
        <para>To create a new item and add it to a user dictionary, first use <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.CreateItem(System.String,Leadtools.Forms.Ocr.OcrUserDictionaryItemStyles)">IOcrUserDictionary.CreateItem</see> to create the item then
            use <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.AddItem(System.String,Leadtools.Forms.Ocr.IOcrUserDictionaryItem)">IOcrUserDictionary.Addtem</see> to add it.</para>
        <para>To delete an item from a user dictionary, use <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.GetFirstItem(System.String)">IOcrUserDictionary.GetFirstItem</see> and
            <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.GetNextItem">IOcrUserDictionary.GetNextItem</see> till you get the item required, then use
            <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.RemoveItem(System.String,Leadtools.Forms.Ocr.IOcrUserDictionaryItem)">IOcrUserDictionary.RemoveItem</see> to delete it.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrUserDictionary" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrUserDictionary" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrUserDictionaryItemStyles" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrUserDictionaryItem.Value">
      <summary>
            Gets the item value.
            </summary>
      <value>A string containing the item value.</value>
      <remarks>
        <para>To create a new item and add it to a user dictionary, first use <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.CreateItem(System.String,Leadtools.Forms.Ocr.OcrUserDictionaryItemStyles)">IOcrUserDictionary.CreateItem</see> to create the item then
            use <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.AddItem(System.String,Leadtools.Forms.Ocr.IOcrUserDictionaryItem)">IOcrUserDictionary.Addtem</see> to add it.</para>
        <para>To delete an item from a user dictionary, use <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.GetFirstItem(System.String)">IOcrUserDictionary.GetFirstItem</see> and
            <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.GetNextItem">IOcrUserDictionary.GetNextItem</see> till you get the item required, then use
            <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.RemoveItem(System.String,Leadtools.Forms.Ocr.IOcrUserDictionaryItem)">IOcrUserDictionary.RemoveItem</see> to delete it.</para>
        <para>The item value must be no longer than <see cref="P:Leadtools.Forms.Ocr.IOcrUserDictionary.MaximumItemLength">IOcrUserDictionary.MaximumItemLength</see> characters and it may contain spaces and punctuation characters.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrUserDictionary" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrUserDictionary" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrUserDictionaryItemStyles" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrUserDictionaryItem.Styles">
      <summary>
            Gets the item styles.
            </summary>
      <value>A <see cref="T:Leadtools.Forms.Ocr.OcrUserDictionaryItemStyles" /> containing the item value.</value>
      <remarks>
        <para>To create a new item and add it to a user dictionary, first use <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.CreateItem(System.String,Leadtools.Forms.Ocr.OcrUserDictionaryItemStyles)">IOcrUserDictionary.CreateItem</see> to create the item then
            use <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.AddItem(System.String,Leadtools.Forms.Ocr.IOcrUserDictionaryItem)">IOcrUserDictionary.Addtem</see> to add it.</para>
        <para>To delete an item from a user dictionary, use <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.GetFirstItem(System.String)">IOcrUserDictionary.GetFirstItem</see> and
            <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.GetNextItem">IOcrUserDictionary.GetNextItem</see> till you get the item required, then use
            <see cref="M:Leadtools.Forms.Ocr.IOcrUserDictionary.RemoveItem(System.String,Leadtools.Forms.Ocr.IOcrUserDictionaryItem)">IOcrUserDictionary.RemoveItem</see> to delete it.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrUserDictionary" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrUserDictionary" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrUserDictionaryItemStyles" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="T:Leadtools.Forms.Ocr.IOcrLanguageManager">
      <summary>
            Provides access to the language environment of the character sets used by the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.
            </summary>
      <keywords>Languages</keywords>
      <remarks>
        <para>
                    You can access the instance of the <see cref="T:Leadtools.Forms.Ocr.IOcrLanguageManager" /> used
                    by an <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> through the
                    <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.LanguageManager">IOcrEngine.LanguageManager</see>
                    property.
                </para>
        <para>
                    The language environment defines the character set(s) recognized by the OCR
                    engine. For example, if you enable the English and German languages, the German
                    characters (ä, Ä, é, ö, Ö, ü, Ü, ß) will be combined with the English
                    characters to define the set recognized by the engine. The language environment
                    does not perform spell checking however, for that, refer to
                    <see cref="T:Leadtools.Forms.Ocr.IOcrSpellCheckManager" />.
                </para>
        <para>
                    The <see cref="T:Leadtools.Forms.Ocr.IOcrLanguageManager" /> allows you to do the following:
                </para>
        <list type="bullet">
          <item>
            <description>
                            Query the languages supported by the OCR engine using the
                            <see cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.GetSupportedLanguages" /> and
                            <see cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.IsLanguageSupported(System.String)" /> methods.
                        </description>
          </item>
          <item>
            <description>
                            Enable or disable specific language character sets from participating
                            in the spell checking subsystem using the
                            <see cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.EnableLanguages(System.String[])" /> and
                            <see cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.GetEnabledLanguages" /> method.
                        </description>
          </item>
          <item>
            <description>
                            Query the language groups currently installed on the system using the
                            <see cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.GetSupportedLanguageGroups" /> and
                            <see cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.IsLanguageGroupSupported(Leadtools.Forms.Ocr.OcrLanguageGroup)" /> methods.
                        </description>
          </item>
        </list>
        <para>The language values used throughout the LEADTOOLS OCR toolkit is a string
                value based on RFC 4646 (Windows Vista and later). The name could be an ISO 639
                two-letter lowercase culture code associated with a language or a combination of
                ISO 630 and ISO 3166 two-letter uppercase subculture code associated with a country
                or region.</para>
        <para>
                    You must call the
                    <see cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">IOcrEngine.Startup</see>
                    method before you can use the
                    <see cref="P:Leadtools.Forms.Ocr.IOcrEngine.LanguageManager">IOcrEngine.LanguageManager</see>
                    property.
                </para>
        <para>
                    Note: The <see cref="T:Leadtools.Forms.Ocr.IOcrLanguageManager" /> state is also saved when the
                    engine settings are saved. For more information, refer to
                    <see href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrSettingManager.html"><a href="Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrSettingManager.html">IOcrSettingManager</a></see>.
                </para>
      </remarks>
      <keywords>OCR,Languages</keywords>
      <example>
        <para>This example will enumerate the languages supported by the OCR engine then enable the current culture language plus German.</para>
        <code lang="VB">   Public Sub OcrLanguageManagerExample()
      ' Unlock the support needed for LEADTOOLS Plus OCR engine
      RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here")
      RasterSupport.Unlock(RasterSupportType.OcrPlus, "Replace with your own key here")
      RasterSupport.Unlock(RasterSupportType.OcrPlusPdfLeadOutput, "Replace with your own key here")
      ' Create an instance of the engine
      Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, False)
         ' Start the engine using default parameters
         ocrEngine.Startup(Nothing, Nothing, Nothing, Nothing)

         ' Show languages supported by this engine
         Dim supportedLanguages() As String = ocrEngine.LanguageManager.GetSupportedLanguages()

         Console.WriteLine("Supported languages:")
         For Each supportedLanguage As String In supportedLanguages
            ' Get the friendly name of this language using the .NET CultureInfo class
            Dim ci As New CultureInfo(supportedLanguage)
            Console.WriteLine("  {0} ({1})", supportedLanguage, ci.EnglishName)
         Next

         ' Check if current culture info language is supported
         Dim currentCulture As CultureInfo = CultureInfo.CurrentCulture
         Dim name As String = currentCulture.TwoLetterISOLanguageName
         Dim supported As Boolean = ocrEngine.LanguageManager.IsLanguageSupported(name)
         If (Not supported) Then
            name = currentCulture.Name
            supported = ocrEngine.LanguageManager.IsLanguageSupported(name)
         End If

         If (supported) Then
            Console.WriteLine("Current culture is {0}, and it is supported by this OCR engine. Enabling only this language and German now", currentCulture.EnglishName)
            ocrEngine.LanguageManager.EnableLanguages(New String() {name, "de"})

            ' If this engine does not support enabling multiple languages (currently the LEADTOOLS Advantage OCR engine), then GetEnabledLanguages
            ' will always return an array of 1, make a note of this
            If Not ocrEngine.LanguageManager.SupportsEnablingMultipleLanguages Then
               Console.WriteLine("This engine supports enabling only one language at a time, so only the first language we enabled will be used")
            End If

            Dim enabledLanguages() As String = ocrEngine.LanguageManager.GetEnabledLanguages()
            Console.WriteLine("Current enabled languages in the engine are:")
            For Each enabledLanguage As String In enabledLanguages
               ' Get the friendly name of this language using the .NET CultureInfo class
               Dim ci As New CultureInfo(enabledLanguage)
               Console.WriteLine("  {0} ({1})", enabledLanguage, ci.EnglishName)
            Next
         Else
            Console.WriteLine("Current culture is {0}, and it is not supported by this OCR engine", currentCulture.EnglishName)
         End If

         ocrEngine.Shutdown()
      End Using
   End Sub</code>
        <code lang="CS">      public void OcrLanguageManagerExample()
      {
         // Unlock the support needed for LEADTOOLS Plus OCR engine
         RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here");
         RasterSupport.Unlock(RasterSupportType.OcrPlus, "Replace with your own key here");
         RasterSupport.Unlock(RasterSupportType.OcrPlusPdfLeadOutput, "Replace with your own key here");
         // Create an instance of the engine
         using(IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, false))
         {
            // Start the engine using default parameters
            ocrEngine.Startup(null, null, null, null);

            // Show languages supported by this engine
            string[] supportedLanguages = ocrEngine.LanguageManager.GetSupportedLanguages();

            Console.WriteLine("Supported languages:");
            foreach(string supportedLanguage in supportedLanguages)
            {
               // Get the friendly name of this language using the .NET CultureInfo class
               CultureInfo ci = new CultureInfo(supportedLanguage);
               Console.WriteLine("  {0} ({1})", supportedLanguage, ci.EnglishName);
            }

            // Check if current culture info language is supported
            CultureInfo currentCulture = CultureInfo.CurrentCulture;
            string name = currentCulture.TwoLetterISOLanguageName;
            bool supported = ocrEngine.LanguageManager.IsLanguageSupported(name);
            if(!supported)
            {
               name = currentCulture.Name;
               supported = ocrEngine.LanguageManager.IsLanguageSupported(name);
            }

            if(supported)
            {
               Console.WriteLine("Current culture is {0}, and it is supported by this OCR engine. Enabling only this language and German now", currentCulture.EnglishName);
               ocrEngine.LanguageManager.EnableLanguages(new string[] { name, "de" });

               // If this engine does not support enabling multiple languages (currently the LEADTOOLS Advantage OCR engine), then GetEnabledLanguages
               // will always return an array of 1, make a note of this
               if(!ocrEngine.LanguageManager.SupportsEnablingMultipleLanguages)
                  Console.WriteLine("This engine supports enabling only one language at a time, so only the first language we enabled will be used");

               string[] enabledLanguages = ocrEngine.LanguageManager.GetEnabledLanguages();
               Console.WriteLine("Current enabled languages in the engine are:");
               foreach(string enabledLanguage in enabledLanguages)
               {
                  // Get the friendly name of this language using the .NET CultureInfo class
                  CultureInfo ci = new CultureInfo(enabledLanguage);
                  Console.WriteLine("  {0} ({1})", enabledLanguage, ci.EnglishName);
               }
            }
            else
               Console.WriteLine("Current culture is {0}, and it is not supported by this OCR engine", currentCulture.EnglishName);

            ocrEngine.Shutdown();
         }
      }</code>
        <!--IOcrLanguageManager-->
      </example>
      <docaddon>yes</docaddon>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrEngine.html">IOcrEngine</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrEngine~Startup.html">IOcrEngine.Startup</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrEngine~IsStarted.html">IOcrEngine.IsStarted</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrEngine~Shutdown.html">IOcrEngine.Shutdown</seealso>
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.OcrEngineManager.html">OcrEngineManager</seealso>
      <seealso href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.OcrEngineType.html">OcrEngineType</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.OcrLanguageGroup.html">OcrLanguageGroup</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrSettingManager.html">IOcrSettingManager</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.WorkingWithOcrLanguages.html">Working with OCR Languages</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrLanguagesAndSpellChecking.html">OCR Languages and Spell Checking</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrLanguageManager.GetSupportedLanguages">
      <summary>
            Gets an array of the supported languages by the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.
            </summary>
      <returns>An array of <see cref="T:System.String" /> objects that contain the names of the supported languages by the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.</returns>
      <remarks>
        <para>Use the <see cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.IsLanguageSupported(System.String)" /> method to check if an individual language is supported by the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.</para>
        <para>The supported languages are values that are both supported by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> and are installed on your system. To check if there are
            additional languages that are supported by the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> but not currently installed on your system, use <see cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.GetAdditionalLanguages" />.</para>
        <para>The language values used throughout the LEADTOOLS OCR toolkit is a string value based on RFC 4646 (Windows Vista and later). The name could be an
            ISO 639 two-letter lowercase culture code associated with a language or a combination of ISO 630 and ISO 3166 two-letter uppercase subculture code associated with a country or region.</para>
        <para>The language environment defines the character set(s) recognized by the OCR engine. For example, if you enable the English and German languages, the German characters
            (ä, Ä, é, ö, Ö, ü, Ü, ß) will be combined with the English characters to define the set recognized by the engine. The language environment does not perform spell checking however,
            for that, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSpellCheckManager" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrLanguageManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrLanguageManager" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.IsLanguageSupported(System.String)" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.EnableLanguages(System.String[])" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.GetEnabledLanguages" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrLanguageGroup" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">IOcrEngine.Startup</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrEngine.IsStarted">IOcrEngine.IsStarted</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Shutdown">IOcrEngine.Shutdown</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.WorkingWithOcrLanguages.html">Working with OCR Languages</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrLanguagesAndSpellChecking.html">OCR Languages and Spell Checking</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrLanguageManager.IsLanguageSupported(System.String)">
      <summary>
            Gets a value that determine if a given language is supported by the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.
            </summary>
      <param name="name">The name of the language to check. The language values used throughout the LEADTOOLS OCR toolkit is a string value based on RFC 4646 (Windows Vista and later). The name could be an
            ISO 639 two-letter lowercase culture code associated with a language or a combination of ISO 630 and ISO 3166 two-letter uppercase subculture code associated with a country or region.</param>
      <returns>
        <strong>true</strong> if the language specified by <paramref name="name" /> is supported by the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />; otherwise it is <strong>false</strong>.</returns>
      <remarks>
        <para>Use the <see cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.GetSupportedLanguages" /> method to get a list of all the language supported by the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.</para>
        <para>The language environment defines the character set(s) recognized by the OCR engine. For example, if you enable the English and German languages, the German characters
            (ä, Ä, é, ö, Ö, ü, Ü, ß) will be combined with the English characters to define the set recognized by the engine. The language environment does not perform spell checking however,
            for that, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSpellCheckManager" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrLanguageManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrLanguageManager" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.GetSupportedLanguages" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.EnableLanguages(System.String[])" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.GetEnabledLanguages" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrLanguageGroup" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">IOcrEngine.Startup</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrEngine.IsStarted">IOcrEngine.IsStarted</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Shutdown">IOcrEngine.Shutdown</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.WorkingWithOcrLanguages.html">Working with OCR Languages</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrLanguagesAndSpellChecking.html">OCR Languages and Spell Checking</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrLanguageManager.GetAdditionalLanguages">
      <summary>
            Gets an array of the additional languages supported by the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.
            </summary>
      <returns>An array of <see cref="T:System.String" /> objects that contain the names of the additional languages supported by the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.</returns>
      <remarks>
        <para>The additional languages are values that are supported by this <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" /> but could not be found on the system. You need to install additional language
            packs to be able to support these languages in your application. For more information, refer to <see cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</see>.</para>
        <para>Use <see cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.GetSupportedLanguages" /> to get an array of the supported languages by the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.</para>
        <para>Use the <see cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.IsLanguageSupported(System.String)" /> method to check if an individual language is supported by the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.</para>
        <para>The language values used throughout the LEADTOOLS OCR toolkit is a string value based on RFC 4646 (Windows Vista and later). The name could be an
            ISO 639 two-letter lowercase culture code associated with a language or a combination of ISO 630 and ISO 3166 two-letter uppercase subculture code associated with a country or region.</para>
        <para>The language environment defines the character set(s) recognized by the OCR engine. For example, if you enable the English and German languages, the German characters
            (ä, Ä, é, ö, Ö, ü, Ü, ß) will be combined with the English characters to define the set recognized by the engine. The language environment does not perform spell checking however,
            for that, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSpellCheckManager" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrLanguageManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrLanguageManager" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.GetSupportedLanguages" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.IsLanguageSupported(System.String)" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.EnableLanguages(System.String[])" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.GetEnabledLanguages" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrLanguageGroup" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">IOcrEngine.Startup</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrEngine.IsStarted">IOcrEngine.IsStarted</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Shutdown">IOcrEngine.Shutdown</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.WorkingWithOcrLanguages.html">Working with OCR Languages</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrLanguagesAndSpellChecking.html">OCR Languages and Spell Checking</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrLanguageManager.EnableLanguages(System.String[])">
      <summary>
            Enable the language environment of the character sets used by the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.
            </summary>
      <param name="names">An array of <see cref="T:System.String" /> objects containing the name of the languages to be enabled inside the language environment of the character sets used
            by the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.
            <para><strong>Note: This array should contain ONLY one item if you are using the LEADTOOLS OCR Advantage Engine, otherwise an exception will be thrown.</strong></para></param>
      <remarks>
        <para>The <see cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.EnableLanguages(System.String[])" /> method is used to define the main part of the language environment of the character sets used by the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.</para>
        <para>The default value of the enabled languages is "en" (for English).</para>
        <para>Use the <see cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.GetEnabledLanguages" /> to obtain a list of the languages currently enabled in the language environment.</para>
        <para>The language values used throughout the LEADTOOLS OCR toolkit is a string value based on RFC 4646 (Windows Vista and later). The name could be an
            ISO 639 two-letter lowercase culture code associated with a language or a combination of ISO 630 and ISO 3166 two-letter uppercase subculture code associated with a country or region.</para>
        <para>The language environment defines the character set(s) recognized by the OCR engine. For example, if you enable the English and German languages, the German characters
            (ä, Ä, é, ö, Ö, ü, Ü, ß) will be combined with the English characters to define the set recognized by the engine. The language environment does not perform spell checking however,
            for that, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSpellCheckManager" />.</para>
        <para>
          <strong>Note: If you call this method when using the LEADTOOLS OCR Advantage Engine, then the user specified settings will be reset because this method will re-initialize the OCR engine using the specified language.</strong>
        </para>
        <para>Some of the OCR engines supported by LEADTOOLS do not allow enabling more than one engine at a time. To check if the OCR engine supports
            more than one language, you must first check the value of the <see cref="P:Leadtools.Forms.Ocr.IOcrLanguageManager.SupportsEnablingMultipleLanguages" /> property. If the value of this property is <strong>false</strong>,
            then only the first item in the array passed to <see cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.EnableLanguages(System.String[])" /> will be used.</para>
        <para>Note that you can only enable one Asian language at a time if the engine supports Asian languages. For example, the OCR Professional engine supports the
            following Asian character sets: Japanese (ja), Chinese Simplified (zh-Hans), Chinese Traditional (zh-Hant) and Korean (ko). All these character sets are
            disabled by default and you can only enable one of them only at any time.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrLanguageManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrLanguageManager" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.GetSupportedLanguages" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.IsLanguageSupported(System.String)" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.GetEnabledLanguages" />
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrLanguageManager.SupportsEnablingMultipleLanguages" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrLanguageGroup" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">IOcrEngine.Startup</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrEngine.IsStarted">IOcrEngine.IsStarted</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Shutdown">IOcrEngine.Shutdown</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.WorkingWithOcrLanguages.html">Working with OCR Languages</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrLanguagesAndSpellChecking.html">OCR Languages and Spell Checking</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrLanguageManager.GetEnabledLanguages">
      <summary>
            Gets the names of the current enabled languages environment of the character set used by the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.
            </summary>
      <returns>
            An array of <see cref="T:System.String" /> object that contains the names of the current enabled languages.
            <para><strong>Note: If you are using the LEADTOOLS OCR Advantage Engine, this array will contain only one item that represents the currently enabled language.</strong></para></returns>
      <remarks>
        <para>The <see cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.EnableLanguages(System.String[])" /> method is used to define the main part of the language environment of the character sets used by the <see cref="T:Leadtools.Forms.Ocr.IOcrEngine" />.</para>
        <para>The default value of the enabled languages is "en" (for English).</para>
        <para>Use the <see cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.GetEnabledLanguages" /> to obtain a list of the languages currently enabled in the language environment.</para>
        <para>The language values used throughout the LEADTOOLS OCR toolkit is a string value based on RFC 4646 (Windows Vista and later). The name could be an
            ISO 639 two-letter lowercase culture code associated with a language or a combination of ISO 630 and ISO 3166 two-letter uppercase subculture code associated with a country or region.</para>
        <para>The language environment defines the character set(s) recognized by the OCR engine. For example, if you enable the English and German languages, the German characters
            (ä, Ä, é, ö, Ö, ü, Ü, ß) will be combined with the English characters to define the set recognized by the engine. The language environment does not perform spell checking however,
            for that, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSpellCheckManager" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrLanguageManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrLanguageManager" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.GetSupportedLanguages" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.IsLanguageSupported(System.String)" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.EnableLanguages(System.String[])" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrLanguageGroup" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">IOcrEngine.Startup</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrEngine.IsStarted">IOcrEngine.IsStarted</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Shutdown">IOcrEngine.Shutdown</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.WorkingWithOcrLanguages.html">Working with OCR Languages</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrLanguagesAndSpellChecking.html">OCR Languages and Spell Checking</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrLanguageManager.GetSupportedLanguageGroups">
      <summary>
            Gets the current language groups installed on the system.
            </summary>
      <returns>An array of <see cref="T:Leadtools.Forms.Ocr.OcrLanguageGroup" /> values containing the language groups installed on the system.</returns>
      <remarks>
        <para>Use the <see cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.IsLanguageGroupSupported(Leadtools.Forms.Ocr.OcrLanguageGroup)" /> method to determine if an individual language group is installed on the system.</para>
        <para>The various LEADTOOLS OCR engines ships with default OCR language packs. Additional language packs can be downloaded from the LEAD Technologies' website at
            <a href="http://www.leadtools.com">http://www.leadtools.com</a>.</para>
        <para>The language environment defines the character set(s) recognized by the OCR engine. For example, if you enable the English and German languages, the German characters
            (ä, Ä, é, ö, Ö, ü, Ü, ß) will be combined with the English characters to define the set recognized by the engine. The language environment does not perform spell checking however,
            for that, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSpellCheckManager" />.</para>
      </remarks>
      <example>
        <para>This example will list the language groups installed on the system.</para>
        <code lang="VB">   Public Sub OcrLanguageGroupsExample()
      ' Unlock the support needed for LEADTOOLS Plus OCR engine
      RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here")
      RasterSupport.Unlock(RasterSupportType.OcrPlus, "Replace with your own key here")
      RasterSupport.Unlock(RasterSupportType.OcrPlusPdfLeadOutput, "Replace with your own key here")
      ' Create an instance of the engine
      Using ocrEngine As IOcrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, False)
         ' Start the engine using default parameters
         ocrEngine.Startup(Nothing, Nothing, Nothing, Nothing)

         ' Get and show the supported (installed) language groups
         Dim supportedGroups() As OcrLanguageGroup = ocrEngine.LanguageManager.GetSupportedLanguageGroups()

         Console.WriteLine("Supported (installed) groups:")
         For Each supportedGroup As OcrLanguageGroup In supportedGroups
            Console.WriteLine("  {0}", supportedGroup)
         Next

         ' Show that you can use IsLanguageGroupSupported to check for a specific group

         ' Check if Latin1 is installed
         Dim latin1Installed As Boolean = ocrEngine.LanguageManager.IsLanguageGroupSupported(OcrLanguageGroup.Latin1)
         If (latin1Installed) Then
            Console.WriteLine("Latin1 is installed")
         End If

         ocrEngine.Shutdown()
      End Using
   End Sub</code>
        <code lang="CS">      public void OcrLanguageGroupsExample()
      {
         // Unlock the support needed for LEADTOOLS Plus OCR engine
         RasterSupport.Unlock(RasterSupportType.Document, "Replace with your own key here");
         RasterSupport.Unlock(RasterSupportType.OcrPlus, "Replace with your own key here");
         RasterSupport.Unlock(RasterSupportType.OcrPlusPdfLeadOutput, "Replace with your own key here");
         // Create an instance of the engine
         using(IOcrEngine ocrEngine = OcrEngineManager.CreateEngine(OcrEngineType.Plus, false))
         {
            // Start the engine using default parameters
            ocrEngine.Startup(null, null, null, null);

            // Get and show the supported (installed) language groups
            OcrLanguageGroup[] supportedGroups = ocrEngine.LanguageManager.GetSupportedLanguageGroups();

            Console.WriteLine("Supported (installed) groups:");
            foreach(OcrLanguageGroup supportedGroup in supportedGroups)
            {
               Console.WriteLine("  {0}", supportedGroup);
            }

            // Show that you can use IsLanguageGroupSupported to check for a specific group

            // Check if Latin1 is installed
            bool latin1Installed = ocrEngine.LanguageManager.IsLanguageGroupSupported(OcrLanguageGroup.Latin1);
            if(latin1Installed)
               Console.WriteLine("Latin1 is installed");

            ocrEngine.Shutdown();
         }
      }</code>
        <!--IOcrLanguageManager.GetSupportedLanguageGroups-->
      </example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrLanguageManager" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.GetSupportedLanguages" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.IsLanguageSupported(System.String)" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.EnableLanguages(System.String[])" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.GetEnabledLanguages" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrLanguageGroup" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.IsLanguageGroupSupported(Leadtools.Forms.Ocr.OcrLanguageGroup)" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">IOcrEngine.Startup</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrEngine.IsStarted">IOcrEngine.IsStarted</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Shutdown">IOcrEngine.Shutdown</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
    </member>
    <member name="M:Leadtools.Forms.Ocr.IOcrLanguageManager.IsLanguageGroupSupported(Leadtools.Forms.Ocr.OcrLanguageGroup)">
      <summary>
            Gets a value that determine if a language group is installed on the system.
            </summary>
      <param name="languageGroup">The language group to check.</param>
      <returns>An array of <see cref="T:Leadtools.Forms.Ocr.OcrLanguageGroup" /> values containing the language groups installed on the system.</returns>
      <remarks>
        <para>Use the <see cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.GetSupportedLanguageGroups" /> method to get all the installed language groups.</para>
        <para>The various LEADTOOLS OCR engines ships with default OCR language packs. Additional language packs can be downloaded from the LEAD Technologies' website at
            <a href="http://www.leadtools.com">http://www.leadtools.com</a>.</para>
        <para>The language environment defines the character set(s) recognized by the OCR engine. For example, if you enable the English and German languages, the German characters
            (ä, Ä, é, ö, Ö, ü, Ü, ß) will be combined with the English characters to define the set recognized by the engine. The language environment does not perform spell checking however,
            for that, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrSpellCheckManager" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.GetSupportedLanguageGroups" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrLanguageManager" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.GetSupportedLanguages" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.IsLanguageSupported(System.String)" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.EnableLanguages(System.String[])" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.GetEnabledLanguages" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrLanguageGroup" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.GetSupportedLanguageGroups" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">IOcrEngine.Startup</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrEngine.IsStarted">IOcrEngine.IsStarted</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Shutdown">IOcrEngine.Shutdown</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso cref="T:Leadtools.Topics.FilesToBeIncludedWithYourApplication">Files to be Included with Your Application</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrLanguageManager.SupportsEnablingMultipleLanguages">
      <summary>
             Gets a value to indicate whether this engine supports enabling multiple languages at the same time.
             </summary>
      <value>
        <strong>True</strong> it this engine supports enabling multiple languages at the same time; otherwise it is <strong>false</strong>.</value>
      <remarks>
        <para>Some of the OCR engines supported by LEADTOOLS do not allow enabling more than one engine at a time. To check if the OCR engine supports
             more than one language, you must first check the value of the <see cref="P:Leadtools.Forms.Ocr.IOcrLanguageManager.SupportsEnablingMultipleLanguages" /> property. If the value of this property is <strong>false</strong>,
             then only the first item in the array passed to <see cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.EnableLanguages(System.String[])" /> will be used.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.IOcrLanguageManager" />.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrLanguageManager" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.GetSupportedLanguages" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.EnableLanguages(System.String[])" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.IsLanguageSupported(System.String)" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrLanguageManager.GetEnabledLanguages" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrLanguageGroup" />
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Startup(Leadtools.Codecs.RasterCodecs,Leadtools.Forms.DocumentWriters.DocumentWriter,System.String,System.String)">IOcrEngine.Startup</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrEngine.IsStarted">IOcrEngine.IsStarted</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrEngine.Shutdown">IOcrEngine.Shutdown</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineManager" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrEngineType" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.WorkingWithOcrLanguages.html">Working with OCR Languages</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrLanguagesAndSpellChecking.html">OCR Languages and Spell Checking</seealso>
    </member>
    <member name="T:Leadtools.Forms.Ocr.OcrCharacter">
      <summary>
            Recognized character data.
            </summary>
      <keywords>Recognized characters</keywords>
      <remarks>
        <para>To get the recognized characters of a page, call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see> after
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.RecognizeText(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.RecognizeText</see>.</para>
        <para>To update the recognized characters of a page, call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.GetRecognizedCharacters</see> before calling
            <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~Save.html">IOcrDocument.Save</a> or
            <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~SaveXml.html">IOcrDocument.SaveXml</a>.</para>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" /> implements the standard <see cref="T:System.Collections.Generic.IList`1" />, <see cref="T:System.Collections.Generic.ICollection`1" /> and <see cref="T:System.Collections.Generic.IEnumerable`1" /> interfaces with items
            of type <see cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />.  Each item in the <see cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" /> contains a collection of the character collections of the zones.</para>
        <para>The <see cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" /> interface contains a collection of the characters for a particular zone.</para>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" /> also implements <see cref="T:System.Collections.Generic.IList`1" />, <see cref="T:System.Collections.Generic.ICollection`1" /> and <see cref="T:System.Collections.Generic.IEnumerable`1" /> interfaces but with items
            of type <see cref="T:Leadtools.Forms.Ocr.OcrCharacter" />. Each item in the <see cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" /> contains a collection of the characters of the zone.</para>
        <para>For example, if you are interesed in iterating through the characters of the 2nd zone in the page, you can do the following:</para>
        <para>
          <code>
            // Get the page characters
            IOcrPageCharacters pageCharacters = ocrPage.GetRecognizedCharacters();
            // Get the 2nd zone characters. Note, index is zero-based so 2nd zone is index 1
            // You can also iterate through the pageCharacters collection and fine the IOcrZoneCharacters item with ZoneIndex = 1
            IOcrZoneCharacters zoneCharacters = pageCharacters.FindZoneCharacters(1);
            // Loop through the characters
            foreach(OcrCharacter ocrCharacter in zoneCharacters)
            {
               // Do something with ocrCharacter
            }
            </code>
        </para>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.OcrCharacter" /> is the most detailed information available about the recognized characters.</para>
        <para>Touching characters, those whose shapes are physically joined in the page passed to the OCR engine, will result in a separate <see cref="T:Leadtools.Forms.Ocr.OcrCharacter" /> structure for
            each recognized character within the block. However, the coordinate property of these characters (<see cref="P:Leadtools.Forms.Ocr.OcrCharacter.Bounds" />) will have identical coordinates defining a rectangle
            boundary for the character block. The order of the <see cref="T:Leadtools.Forms.Ocr.OcrCharacter" /> structures representing a character block gives the order of the touching characters on the
            original document. This means the coordinates do not give information on the order of characters inside a boundary block.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.SetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized">IOcrPage.IsRecognized</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrCharacter" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrConfidenceReporting.html">OCR Confidence Reporting</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrCharacter.Code">
      <summary>
            Gets or sets the character code (value).
            </summary>
      <value>The character code (value) of the first guess of the recognition, or zero (0) signaling that the OCR engine could not recognize the character (rejected character).</value>
      <remarks>
        <para>The confidence of the character code value is expressed in a value of 0 (worst) to 100 (best) in the <see cref="P:Leadtools.Forms.Ocr.OcrCharacter.Confidence" /> property.</para>
        <para>To get the recognized characters of a page, call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see> after
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.RecognizeText(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.RecognizeText</see>.</para>
        <para>To update the recognized characters of a page, call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.GetRecognizedCharacters</see> before calling
            <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~Save.html">IOcrDocument.Save</a> or
            <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~SaveXml.html">IOcrDocument.SaveXml</a>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.SetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized">IOcrPage.IsRecognized</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrCharacter" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrConfidenceReporting.html">OCR Confidence Reporting</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrCharacter.Confidence">
      <summary>
            Gets or sets the confidence number expressing the recognition certainty for the first guess.
            </summary>
      <value>An integer value between 0 (worst) and 100 (best) that indicates the confidence number expressing the recognition certainty of the first guess. (<see cref="P:Leadtools.Forms.Ocr.OcrCharacter.Code" />).</value>
      <remarks>
        <para>To get the recognized characters of a page, call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see> after
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.RecognizeText(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.RecognizeText</see>.</para>
        <para>To update the recognized characters of a page, call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.GetRecognizedCharacters</see> before calling
            <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~Save.html">IOcrDocument.Save</a> or
            <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~SaveXml.html">IOcrDocument.SaveXml</a>.</para>
      </remarks>
      <keywords>OCR,Confidence</keywords>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.SetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized">IOcrPage.IsRecognized</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrCharacter" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrConfidenceReporting.html">OCR Confidence Reporting</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrCharacter.WordIsCertain">
      <summary>
            Gets or sets a value indicating whether the word this character is part of has passed spell checking.
            </summary>
      <value>
        <strong>True</strong> if the word this character is part of has passed spell checking; otherwise it is <strong>false</strong>.</value>
      <remarks>
        <para>The word is certain if it passes one of the following criteria:
            <list type="number"><item><description>The engine is very confident of the letters of the word, even if the word is not in the dictionary</description></item><item><description>The engine is not very confident, but the word is in the dictionary</description></item></list></para>
        <para>To get the recognized characters of a page, call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see> after
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.RecognizeText(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.RecognizeText</see>.</para>
        <para>To update the recognized characters of a page, call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.GetRecognizedCharacters</see> before calling
            <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~Save.html">IOcrDocument.Save</a> or
            <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~SaveXml.html">IOcrDocument.SaveXml</a>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.SetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized">IOcrPage.IsRecognized</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrCharacter" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrConfidenceReporting.html">OCR Confidence Reporting</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrCharacter.GuessCode2">
      <summary>
            Gets or sets the second guess of the recognition, if any.
            </summary>
      <value>The character code (value) of the second guess of the recognition, or zero (0) if none is determined.</value>
      <remarks>
        <para>To get the recognized characters of a page, call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see> after
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.RecognizeText(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.RecognizeText</see>.</para>
        <para>To update the recognized characters of a page, call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.GetRecognizedCharacters</see> before calling
            <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~Save.html">IOcrDocument.Save</a> or
            <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~SaveXml.html">IOcrDocument.SaveXml</a>.</para>
        <para>Note: The following properties are not supported in the LEADTOOLS OCR Professional and Advantage Engines
              <list type="bullet"><item><description><see cref="P:Leadtools.Forms.Ocr.OcrCharacter.GuessCode2" /></description></item><item><description><see cref="P:Leadtools.Forms.Ocr.OcrCharacter.GuessCode3" /></description></item><item><description><see cref="P:Leadtools.Forms.Ocr.OcrCharacter.LeadingSpaces" /></description></item><item><description><see cref="P:Leadtools.Forms.Ocr.OcrCharacter.LeadingSpacesConfidence" /></description></item></list></para>
        <para>Changing the values of these properties in the LEADTOOLS OCR Professional and Advantage Engines will have no effect on the final document.</para>
        <para>
          <strong>Note: This property is not supported in the LEADTOOLS OCR Advantage Engine.</strong>
        </para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.SetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized">IOcrPage.IsRecognized</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrCharacter" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrCharacter.GuessCode3">
      <summary>
            Gets or sets the third guess of the recognition, if any.
            </summary>
      <value>The character code (value) of the third guess of the recognition, or zero (0) if none is determined.</value>
      <remarks>
        <para>To get the recognized characters of a page, call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see> after
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.RecognizeText(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.RecognizeText</see>.</para>
        <para>To update the recognized characters of a page, call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.GetRecognizedCharacters</see> before calling
            <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~Save.html">IOcrDocument.Save</a> or
            <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~SaveXml.html">IOcrDocument.SaveXml</a>.</para>
        <para>Note: The following properties are not supported in the LEADTOOLS OCR Professional and Advantage Engines
              <list type="bullet"><item><description><see cref="P:Leadtools.Forms.Ocr.OcrCharacter.GuessCode2" /></description></item><item><description><see cref="P:Leadtools.Forms.Ocr.OcrCharacter.GuessCode3" /></description></item><item><description><see cref="P:Leadtools.Forms.Ocr.OcrCharacter.LeadingSpaces" /></description></item><item><description><see cref="P:Leadtools.Forms.Ocr.OcrCharacter.LeadingSpacesConfidence" /></description></item></list></para>
        <para>Changing the values of these properties in the LEADTOOLS OCR Professional and Advantage Engines will have no effect on the final document.</para>
        <para>
          <strong>Note: This property is not supported in the LEADTOOLS OCR Advantage Engine.</strong>
        </para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.SetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized">IOcrPage.IsRecognized</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrCharacter" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrCharacter.Bounds">
      <summary>
            Gets or sets the coordinates of the rectangle exactly containing the character.
            </summary>
      <value>A <see cref="T:Leadtools.Forms.LogicalRectangle" /> that contains the coordinates of the rectangle exactly containing the character.</value>
      <remarks>
        <para>To get the recognized characters of a page, call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see> after
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.RecognizeText(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.RecognizeText</see>.</para>
        <para>To update the recognized characters of a page, call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.GetRecognizedCharacters</see> before calling
            <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~Save.html">IOcrDocument.Save</a> or
            <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~SaveXml.html">IOcrDocument.SaveXml</a>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.SetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized">IOcrPage.IsRecognized</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrCharacter" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrCharacter.Position">
      <summary>
            Gets or sets the character position information.
            </summary>
      <value>One or more <see cref="T:Leadtools.Forms.Ocr.OcrCharacterPosition" /> enumeration member providing information about the character position.</value>
      <remarks>
        <para>To get the recognized characters of a page, call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see> after
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.RecognizeText(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.RecognizeText</see>.</para>
        <para>To update the recognized characters of a page, call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.GetRecognizedCharacters</see> before calling
            <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~Save.html">IOcrDocument.Save</a> or
            <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~SaveXml.html">IOcrDocument.SaveXml</a>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.SetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized">IOcrPage.IsRecognized</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrCharacter" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrCharacter.Base">
      <summary>
            Gets or sets the length of the Y coordinate of the baseline measured from the top edge of the rectangle exactly containing the character.
            </summary>
      <value>The length of the Y coordinate of the baseline measured from the top edge of the rectangle exactly containing the character.</value>
      <remarks>
        <para>To get the recognized characters of a page, call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see> after
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.RecognizeText(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.RecognizeText</see>.</para>
        <para>To update the recognized characters of a page, call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.GetRecognizedCharacters</see> before calling
            <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~Save.html">IOcrDocument.Save</a> or
            <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~SaveXml.html">IOcrDocument.SaveXml</a>.</para>
        <para>
          <strong>Note: This property is not supported in the LEADTOOLS OCR Advantage Engine.</strong>
        </para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.SetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized">IOcrPage.IsRecognized</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrCharacter" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrCharacter.CellIndex">
      <summary>
            Gets or sets the index of the cell in the table that contains this character.
            </summary>
      <value>The index of the cell in the table that contains this character.</value>
      <remarks>
        <para>This value is applicable only for <see cref="T:Leadtools.Forms.Ocr.OcrZoneType">OcrZoneType.Table</see> zones. Other cell and table information is hidden from the user and cannot be obtained.</para>
        <para>To get the recognized characters of a page, call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see> after
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.RecognizeText(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.RecognizeText</see>.</para>
        <para>To update the recognized characters of a page, call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.GetRecognizedCharacters</see> before calling
            <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~Save.html">IOcrDocument.Save</a> or
            <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~SaveXml.html">IOcrDocument.SaveXml</a>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.SetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized">IOcrPage.IsRecognized</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrCharacter" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrCharacter.LeadingSpaces">
      <summary>
            Gets or sets the estimated number of leading spaces in front of the character.
            </summary>
      <value>The estimated number of leading spaces in front of the character.</value>
      <remarks>
        <para>The confidence of the number of leading spaces in front of the character is expressed in a value of 0 (worst) to 100 (best) in the
            <see cref="P:Leadtools.Forms.Ocr.OcrCharacter.LeadingSpacesConfidence" /> property.</para>
        <para>To get the recognized characters of a page, call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see> after
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.RecognizeText(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.RecognizeText</see>.</para>
        <para>To update the recognized characters of a page, call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.GetRecognizedCharacters</see> before calling
            <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~Save.html">IOcrDocument.Save</a> or
            <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~SaveXml.html">IOcrDocument.SaveXml</a></para>
        <para>Note: The following properties are not supported in the LEADTOOLS OCR Professional and Advantage Engines
              <list type="bullet"><item><description><see cref="P:Leadtools.Forms.Ocr.OcrCharacter.GuessCode2" /></description></item><item><description><see cref="P:Leadtools.Forms.Ocr.OcrCharacter.GuessCode3" /></description></item><item><description><see cref="P:Leadtools.Forms.Ocr.OcrCharacter.LeadingSpaces" /></description></item><item><description><see cref="P:Leadtools.Forms.Ocr.OcrCharacter.LeadingSpacesConfidence" /></description></item></list></para>
        <para>Changing the values of these properties in the LEADTOOLS OCR Professional and Advantage Engines will have no effect on the final document.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.SetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized">IOcrPage.IsRecognized</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrCharacter" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrConfidenceReporting.html">OCR Confidence Reporting</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrCharacter.LeadingSpacesConfidence">
      <summary>
            Gets or sets the confidence number expressing the certainty of number of leading spaces in front of this character.
            </summary>
      <value>An integer value between 0 (worst) and 100 (best) that indicate the confidence number expressing the certainty of the number of spaces in front of this
            character (<see cref="P:Leadtools.Forms.Ocr.OcrCharacter.LeadingSpaces" />).</value>
      <remarks>
        <para>To get the recognized characters of a page, call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see> after
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.RecognizeText(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.RecognizeText</see>.</para>
        <para>To update the recognized characters of a page, call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.GetRecognizedCharacters</see> before calling
            <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~Save.html">IOcrDocument.Save</a> or
            <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~SaveXml.html">IOcrDocument.SaveXml</a>.</para>
        <para>Note: The following properties are not supported in the LEADTOOLS OCR Professional and Advantage Engines
              <list type="bullet"><item><description><see cref="P:Leadtools.Forms.Ocr.OcrCharacter.GuessCode2" /></description></item><item><description><see cref="P:Leadtools.Forms.Ocr.OcrCharacter.GuessCode3" /></description></item><item><description><see cref="P:Leadtools.Forms.Ocr.OcrCharacter.LeadingSpaces" /></description></item><item><description><see cref="P:Leadtools.Forms.Ocr.OcrCharacter.LeadingSpacesConfidence" /></description></item></list></para>
        <para>Changing the values of these properties in the LEADTOOLS OCR Professional and Advantage Engines will have no effect on the final document.</para>
        <para>
          <strong>Note: This property is not supported in the LEADTOOLS OCR Advantage Engine.</strong>
        </para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.SetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized">IOcrPage.IsRecognized</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrCharacter" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.OcrConfidenceReporting.html">OCR Confidence Reporting</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrCharacter.FontSize">
      <summary>
            Gets or sets the font size of the character in points.
            </summary>
      <value>The font size of the character in points.</value>
      <remarks>
        <para>To get the recognized characters of a page, call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see> after
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.RecognizeText(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.RecognizeText</see>.</para>
        <para>To update the recognized characters of a page, call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.GetRecognizedCharacters</see> before calling
            <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~Save.html">IOcrDocument.Save</a> or
            <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~SaveXml.html">IOcrDocument.SaveXml</a>.</para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.SetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized">IOcrPage.IsRecognized</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrCharacter" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrCharacter.FontStyle">
      <summary>
            Gets or sets the character font attributes.
            </summary>
      <value>One or more <see cref="T:Leadtools.Forms.Ocr.OcrCharacterFontStyle" /> enumeration members containing the attributes of the  character.</value>
      <remarks>
        <para>To get the recognized characters of a page, call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see> after
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.RecognizeText(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.RecognizeText</see>.</para>
        <para>To update the recognized characters of a page, call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.GetRecognizedCharacters</see> before calling
            <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~Save.html">IOcrDocument.Save</a> or
            <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~SaveXml.html">IOcrDocument.SaveXml</a>.</para>
        <para>
          <strong>Note: This property is not supported in the LEADTOOLS OCR Advantage Engine.</strong>
        </para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.SetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized">IOcrPage.IsRecognized</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrCharacter" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.OcrCharacter.Color">
      <summary>
            Gets or sets the character color.
            </summary>
      <value>A <see cref="T:Leadtools.RasterColor" /> structure containing the character color.</value>
      <remarks>
        <para>To get the recognized characters of a page, call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see> after
            <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see> or <see cref="M:Leadtools.Forms.Ocr.IOcrPage.RecognizeText(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.RecognizeText</see>.</para>
        <para>To update the recognized characters of a page, call <see cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.GetRecognizedCharacters</see> before calling
            <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~Save.html">IOcrDocument.Save</a> or
            <a href="ms-help://Leadtools.DotNet17/Leadtools.Forms.Ocr/Leadtools.Forms.Ocr~Leadtools.Forms.Ocr.IOcrDocument~SaveXml.html">IOcrDocument.SaveXml</a>.</para>
        <para>
          <strong>Note: This property is not currently supported in any LEADTOOLS OCR Engine. Setting the character color will not affect the final document.</strong>
        </para>
      </remarks>
      <example>For an example, refer to <see cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</see>.</example>
      <docaddon>yes</docaddon>
      <isnew>5/8/2009</isnew>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.SetRecognizedCharacters(Leadtools.Forms.Ocr.IOcrPageCharacters)">IOcrPage.SetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.GetRecognizedCharacters">IOcrPage.GetRecognizedCharacters</seealso>
      <seealso cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</seealso>
      <seealso cref="P:Leadtools.Forms.Ocr.IOcrPage.IsRecognized">IOcrPage.IsRecognized</seealso>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrCharacter" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCharacters" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrZoneCollection" />
      <seealso cref="T:Leadtools.Forms.Ocr.OcrZone" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="T:Leadtools.Forms.Ocr.OcrProgressStatus">
      <summary>
            Status control of the <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see>.
            </summary>
      <remarks>
        <para>
          <see cref="T:Leadtools.Forms.Ocr.OcrProgressStatus" /> used as a parameter to the <see cref="P:Leadtools.Forms.Ocr.IOcrProgressData.Status">IOcrProgressData.Status</see> property. You can use this
            property to abort the callback at anytime.</para>
        <para>Notice that aborting the callback will cancel any pending operations.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see></example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrProgressCallback" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrProgressStatus.Continue">
      <summary>
            Continue normal operation.
            </summary>
    </member>
    <member name="F:Leadtools.Forms.Ocr.OcrProgressStatus.Abort">
      <summary>
            Signal that the user has requested the current operation to be aborted. The processing will stop at the first suitable moment and any pending operations are aborted.
            </summary>
    </member>
    <member name="T:Leadtools.Forms.Ocr.IOcrProgressData">
      <summary>
            Data for the <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see> delegate.
            </summary>
      <remarks>
        <para>An object of type <see cref="T:Leadtools.Forms.Ocr.IOcrProgressData" /> is passed to the <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see> delegate every time the operation or the percentage of the operation is changed.</para>
        <para>You can examine the members of <see cref="T:Leadtools.Forms.Ocr.IOcrProgressData" /> to show information on the current page, operation and percentage complete of the OCR process.</para>
        <para>You can also use the <see cref="P:Leadtools.Forms.Ocr.IOcrProgressData.Status" /> property to abort the OCR operation.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see></example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.OcrProgressCallback" />
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrProgressData.FirstPageIndex">
      <summary>
            Gets the zero-based index of the first page in the process that initiated the callback.
            </summary>
      <value>The zero-based index of the first page in the process that initiated the callback.</value>
      <remarks>
        <para>
          <see cref="P:Leadtools.Forms.Ocr.IOcrProgressData.FirstPageIndex" /> and <see cref="P:Leadtools.Forms.Ocr.IOcrProgressData.LastPageIndex" /> corresponds to the index in the <see cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" /> of the first and last pages when a method such
            as <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.Recognize(System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrProgressCallback)">Recognize(int firstPageIndex, int lastPageIndex, OcrProgressCallback callback)</see> is
            called.</para>
        <para>If a method that operates on a single page is called, such as <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see>, then <see cref="P:Leadtools.Forms.Ocr.IOcrProgressData.FirstPageIndex" /> and 
            <see cref="P:Leadtools.Forms.Ocr.IOcrProgressData.LastPageIndex" /> will be the same value and are equal to the index of <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> in <see cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />.</para>
        <para>
          <see cref="P:Leadtools.Forms.Ocr.IOcrProgressData.CurrentPageIndex" /> is the index of the current page the operation is processing. <see cref="P:Leadtools.Forms.Ocr.IOcrProgressData.CurrentPageIndex" /> will run from
            <see cref="P:Leadtools.Forms.Ocr.IOcrProgressData.FirstPageIndex" /> to <see cref="P:Leadtools.Forms.Ocr.IOcrProgressData.LastPageIndex" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrProgressData.LastPageIndex">
      <summary>
            Gets the zero-based index of the last page in the process that initiated the callback.
            </summary>
      <value>The zero-based index of the last page in the process that initiated the callback.</value>
      <remarks>
        <para>
          <see cref="P:Leadtools.Forms.Ocr.IOcrProgressData.FirstPageIndex" /> and <see cref="P:Leadtools.Forms.Ocr.IOcrProgressData.LastPageIndex" /> corresponds to the index in the <see cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" /> of the first and last pages when a method such
            as <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.Recognize(System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrProgressCallback)">Recognize(int firstPageIndex, int lastPageIndex, OcrProgressCallback callback)</see> is
            called.</para>
        <para>If a method that operates on a single page is called, such as <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see>, then <see cref="P:Leadtools.Forms.Ocr.IOcrProgressData.FirstPageIndex" /> and 
            <see cref="P:Leadtools.Forms.Ocr.IOcrProgressData.LastPageIndex" /> will be the same value and are equal to the index of <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> in the <see cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />.</para>
        <para>
          <see cref="P:Leadtools.Forms.Ocr.IOcrProgressData.CurrentPageIndex" /> is the index of the current page the operation is processing. <see cref="P:Leadtools.Forms.Ocr.IOcrProgressData.CurrentPageIndex" /> will run from
            <see cref="P:Leadtools.Forms.Ocr.IOcrProgressData.FirstPageIndex" /> to <see cref="P:Leadtools.Forms.Ocr.IOcrProgressData.LastPageIndex" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrProgressData.CurrentPageIndex">
      <summary>
            Gets the zero-based index of the current page being processed by the operation.
            </summary>
      <value>The zero-based index of the current page being processed by the operation.</value>
      <remarks>
        <para>
          <see cref="P:Leadtools.Forms.Ocr.IOcrProgressData.FirstPageIndex" /> and <see cref="P:Leadtools.Forms.Ocr.IOcrProgressData.LastPageIndex" /> corresponds to the index in the <see cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" /> of the first and last pages when a method such
            as <see cref="M:Leadtools.Forms.Ocr.IOcrPageCollection.Recognize(System.Int32,System.Int32,Leadtools.Forms.Ocr.OcrProgressCallback)">Recognize(int firstPageIndex, int lastPageIndex, OcrProgressCallback callback)</see> is
            called.</para>
        <para>If a method that operates on a single page is called, such as <see cref="M:Leadtools.Forms.Ocr.IOcrPage.Recognize(Leadtools.Forms.Ocr.OcrProgressCallback)">IOcrPage.Recognize</see>, then <see cref="P:Leadtools.Forms.Ocr.IOcrProgressData.FirstPageIndex" /> and 
            <see cref="P:Leadtools.Forms.Ocr.IOcrProgressData.LastPageIndex" /> will be the same value and are equal to the index of <see cref="T:Leadtools.Forms.Ocr.IOcrPage" /> in the <see cref="T:Leadtools.Forms.Ocr.IOcrPageCollection" />.</para>
        <para>
          <see cref="P:Leadtools.Forms.Ocr.IOcrProgressData.CurrentPageIndex" /> is the index of the current page the operation is processing. <see cref="P:Leadtools.Forms.Ocr.IOcrProgressData.CurrentPageIndex" /> will run from
            <see cref="P:Leadtools.Forms.Ocr.IOcrProgressData.FirstPageIndex" /> to <see cref="P:Leadtools.Forms.Ocr.IOcrProgressData.LastPageIndex" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrProgressData.Operation">
      <summary>
            Gets the current running operation.
            </summary>
      <value>The current running operation.</value>
      <remarks>
        <para>For a list of the available operations, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressOperation" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrProgressData.Percentage">
      <summary>
            Gets the progress of the current operation expressed as a percentage.
            </summary>
      <value>A value between 0 and 100 that represent the progress of the current operation expressed as a percentage.</value>
      <remarks>
        <para>For a list of the available operations, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressOperation" />.</para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
    <member name="P:Leadtools.Forms.Ocr.IOcrProgressData.Status">
      <summary>
            Gets or sets the current status of the callback.
            </summary>
      <value>The current status of the callback.</value>
      <remarks>
        <para>Abort the callback at anytime by setting the value of <see cref="P:Leadtools.Forms.Ocr.IOcrProgressData.Status" /> to <see cref="T:Leadtools.Forms.Ocr.OcrProgressStatus">OcrProgressStatus.Abort</see>. To continue the OCR
            process, leave <see cref="P:Leadtools.Forms.Ocr.IOcrProgressData.Status" /> to the default value of <see cref="T:Leadtools.Forms.Ocr.OcrProgressStatus">OcrProgressStatus.Continue</see></para>
      </remarks>
      <example>For an example, refer to <see cref="T:Leadtools.Forms.Ocr.OcrProgressCallback">OcrProgressCallback</see>.</example>
      <docaddon>yes</docaddon>
      <seealso cref="T:Leadtools.Forms.Ocr.IOcrEngine" />
      <seealso href="ms-help://Leadtools.Help/Leadtools.DotNet17/Leadtools.Topics/Leadtools.Topics.Forms.Ocr~Topics.ProgrammingWithOcr.html">Programming with Leadtools .NET OCR</seealso>
    </member>
  </members>
</doc>